#!/usr/local/bin/perl
Import qw ( env INCLUDE LIB BIN EXPORT BUILD OBJ);
$my_env = $env->clone(
		    'DEBUG'      => ' '
		    );
my $DirPath = DirPath '.';# print "DirPath = $DirPath\n"; 
my $Dir = "pams";                           print "Build Tables for $Dir\n";
my @idl = find_idl($Dir); # print "@idl\n"; 
my @idlT = ();
my @sources = (); 
my $DIR = cwd();# print "DIR = $DIR\n";
my $obj = $OBJ . "/pams/tables"; 
my $share  = "#.share/tables";# print "share = $share\n";
my $SHARE  = $DIR . "/.share/tables";
Link $DirPath =>  $SHARE; print "Link $DirPath =>  $SHARE\n";
my $SO_PKG = "St_Tables.so";
foreach my $idl (@idl) {#  print "$idl\n";
  if (! grep (/\/idl\//,$idl)) {next;} 
  my $IDL =  $DIR . "/" . $Dir . "/" . $idl;# print "i=",$i++," idl = $idl IDL=$IDL\n";
  my $stem = basename ($IDL, ".idl");# print "stem = $stem\n";
  my $idlt = $SHARE . "/" . basename($idl);
  push @idlT, $IDL; 
}# print "idlT = @idlT\n";
Install $my_env $share, @idlT;
#___________________________________
(my $build = $obj) =~ s/\#//g;  #print "OBJ = $OBJ build = $build MAIN = $MAIN\n";
my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
my $CPPPATH = $cscanner->iflags;#  print "CPPPATH = $CPPPATH\n";
foreach my $idll (@idlT) { 
  my $stem     = basename ($idll, ".idl");# print "stem = $stem; idll: $idll\n";
  my $dir      = dirname ($idll); #print "dir = $dir\n"; 
  my $idl      = basename ($idll);
  my $idlh     = $share . "/"    . $stem . ".h";             #print "idlh: $idlh\n";
  my $idli     = $share . "/"    . $stem . ".inc";           #print "idli: $idli\n";
  my $idlH     = $share . "/St_" . $stem . "_Table.h";       #print "idlH: $idlH\n";
  my $idlC     = $share . "/St_" . $stem . "_Table.cxx";     #print "idlC: $idlC\n";
  my $LinkDef  = $share . "/"    . $stem . "LinkDef.h";      #print "LinkDef = $LinkDef\n";
  my $idlCintH = $share . "/St_" . $stem . "_TableCint.h";   #print "idlCintH = $idlCintH\n";
  my $idlCintC = $share . "/St_" . $stem . "_TableCint.cxx"; #print "idlCintC = $idlCintC\n";
  my @Deps = ($idll);# print "Deps: $Deps[0]\n";
  Command $my_env [$idlh, $idli], @Deps, qq (stic.pl %>:d $stem  -H -q $idll );
  Command $my_env [$idlH],        @Deps, qq (ConstructTable.pl %>);
  Command $my_env [$idlC],        @Deps, qq (ConstructTable.pl %>);
  Command $my_env [$LinkDef],     @Deps, qq (ConstructTable.pl %>);
  @Deps = ();
  push @Deps, $idlH;
  push @Deps, $LinkDef;
  push @Deps, $idlh;
  push @Deps, $idli;
  Command $my_env [$idlCintC, $idlCintH], @Deps,  
  qq (rootcint.pl %>:d -f %>:f -c  "$CPPPATH -D__ROOT__" %1:f %2:f);
  push @Deps, $idlCintC;
  push @Deps, $idlCintH;
  push @Deps, $idlC;
  my @deps = ();
  my @src  = ();
  foreach my $dep (@Deps) {
#    print "$dep ->";
    (my $depp = $dep) =~ s/$share/$obj/g;# print "dep: $dep\n";
    push @deps, $depp; 
    if ($depp =~ /\.cxx$/) {push @sources, $depp; push @src, $dep;}# print "sources: @sources\n";}
  }
  Install $my_env $obj, @src;
}
LinkedModule $my_env $SO_PKG, @sources;
Install $my_env $LIB, $SO_PKG;
#________________________________________
sub script::find_idl {
  if (defined($AFS)) {$File::Find::dont_use_nlink;}
  @search_files   = ();
  &File::Find::find(\&wanted_idl, @_);
  for my $dir (@_) {
    my $i = 0;
    for ($i=0;$i<=$#search_files;$i++) {
      #      print "i = ",$i, "src =", $search_files[$i],"\n";
      my $file = $search_files[$i];
      $file =~ s/$dir\///g;
      $search_files[$i] = $file;
    }
  }
  #  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub script::wanted_idl {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d $_ &&
       (/^CVS$/ ||
	/^exa$/ ||
	/^inc$/ ||
	/^doc$/ ||
	/^run$/ ||
	/^examples$/ ||
	/^local$/ ||
	/^hold$/ ||
	/^wrk$/)
     ) {$prune = 1; return;}
  if (/^.*\.idl$/) {#print "$name\n";
    push @search_files, $name; 
  }
}
#________________________________________
