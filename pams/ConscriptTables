#!/usr/local/bin/perl
Import qw ( env INCLUDE LIB BIN EXPORT BUILD OBJ);
my $DIR = DirPath;                           print "Build in $DIR\n";
(my $Dir = SourcePath($DIR)) =~ s/\/$DIR//;# print "new Dir = $Dir\n";
my @idl = find_idl($Dir); #print "@idl\n"; 
my @idlT = ();
my @tgt_idlT = ();
my %idl    = ();
my @src = ();
my $obj = $OBJ . "/tables"; 
my $DirPath  = cwd(); print "DirPath = $DirPath\n";
my $share  = $DirPath . "/.share/tables";
#Link $obj =>  $share; print "Link $obj =>  $share\n";
Link $obj =>  $share; print "Link $obj =>  $share\n";
my $SO_PKG = "St_Tables.so";
for my $idl (@idl) {#  print "$idl \n";
  if (! grep (/\/idl\//,$idl)) {next;}
#  if (! grep (/vpd\//,$idl)) {next;}
  push @idlT, $idl; #print "i=",$i++," idl = ",$idl,"\n";
  my $export_idl = $share . "/" . basename ($idl); #print "export_idl = $export_idl\n";
  push @tgt_idlT, $export_idl;
  my $dir = dirname ($export_idl); 
  my $stem = basename ($export_idl, ".idl"); #print "dir = $dir; stem = $stem\n";
  $idl{$stem} = $export_idl;
}
InstallAs $env [ @tgt_idlT ], [ @idlT ];
#___________________________________
(my $build = $OBJ) =~ s/\#//g;  #print "OBJ = $OBJ build = $build MAIN = $MAIN\n";
(my $Dir = DirPath '.') =~ s/$build\///g; #print "Dir = $Dir\n";
my $CPPPATH = "$Dir:$env->{CPPPATH}"; #print "CPPPATH = $CPPPATH\n";
my $CPPFLAGS = cppflags($env);
foreach my $stem (sort keys %idl) { #print "Idl: $stem => $idl{$stem}, $idlH{$stem}, $idlI{$stem}, $idlHH{$stem}, $idlCXX{$stem}\n"; 
  (my $dir = dirname ($idl{$stem})) =~ s/\#//g; #print "D dir = $dir \n";
  my @idll = ($idl{$stem}); #print "@idll\n";
  my $idl  = basename ($idl{$stem});
  my $idlH = $dir . "/" . $stem . ".h"; 
  my $idlI = $dir . "/" . $stem . ".inc"; 
  Command $env [$idlH, $idlI], @idll, qq (cd $dir; stic -H -q $idl );
  my $idlHH = $dir . "/St_" . $stem . "_Table.h"; 
  Command $env [$idlHH], ConscriptTables, 
  qq (
      echo "#ifndef STAF_St_"$stem"_Table        ">%>
      echo "#define STAF_St_"$stem"_Table        ">>%>
      echo "#include \\"St_Table.h\\"           ">>%>
      echo "#include \\"$stem.h\\"               ">>%>
      echo "class St_"$stem" : public St_Table   ">>%>
      echo "{                                 ">>%>
      echo "protected:                        ">>%>
      echo "  static TList *fgListOfColDescriptors;">>%>
      echo "  virtual TList *GetRowDescriptors()">>%> 
      echo "{return fgListOfColDescriptors?fgListOfColDescriptors:(fgListOfColDescriptors=GetTableDescriptors());}">>%>
      echo "  virtual void  SetRowDescriptors(TList *list) { fgListOfColDescriptors = list;}">>%>
      echo "public:                                    ">>%>
      echo "  St_"$stem"() : St_Table(\\"$stem\\",sizeof("$stem"_st)) {SetType(\\""$stem"\\");}           ">>%>
      echo "  St_"$stem"(Text_t *name) : St_Table(name,sizeof("$stem"_st)) {SetType(\\""$stem"\\");}   ">>%>
      echo "  St_"$stem"(Int_t n): St_Table(\\""$stem"\\",n,sizeof("$stem"_st)) {SetType(\\""$stem"\\");}   ">>%>
      echo "  St_"$stem"(Text_t *name,Int_t n): St_Table(name,n,sizeof("$stem"_st)) {SetType(\\""$stem"\\");} ">>%>
      echo "  "$stem"_st *GetTable(){ return ("$stem"_st *)s_Table;}                              ">>%>
      echo "  ClassDef(St_"$stem",0) // class particle STAF tables                             ">>%>
      echo "};                                                                              ">>%>
      echo "#endif                                                                          ">>%>
     );
  my $idlCXX = $dir . "/St_" . $stem . "_Table.cxx"; 
  Command $env [$idlCXX], ConscriptTables, 
  qq (
      echo "#include \\"St_"$stem"_Table.h\\"                                              " >%>
      echo "/////////////////////////////////////////////////////////////////////////   ">>%>
      echo "//                                                                          ">>%>
      echo "//  Class St_"$stem" wraps the STAF table "$stem"                                 ">>%>
      echo "//  It has been generated "by automatic". Please don't change it \\"by hand\\"">>%>
      echo "//                                                                          ">>%>
      echo "/////////////////////////////////////////////////////////////////////////   ">>%>
      echo "#include \\""Stypes.h"\\"                                                     ">>%>
      echo "TList *_NAME2_(St_,"$stem")::fgListOfColDescriptors = 0;                       ">>%>
      echo "TableImp("$stem")                                                              ">>%>
      echo "TableStreamerImp("$stem")                                                      ">>%>
     );
  Install $env $obj, $idlCXX;
  my $idlcxx = basename($idlCXX);
  my $idlcxx_obj = $obj . "/" . $idlcxx;
  push @src, $idlcxx_obj;# print "src+ $idlcxx_obj\n";
  my $idlCintH = $dir . "/St_" . $stem . "_TableCint.h"; 
  my $idlCintC = $dir . "/St_" . $stem . "_TableCint.cxx"; 
  my $idlcintH = basename($idlCintH);
  my $idlcintC = basename($idlCintC);
  my $idlhh    = basename($idlHH);
  Command $env [$idlCintH, $idlCintC], $idlHH,
  qq (
      cd $dir; rm -f LinkDef.h;      echo "#ifdef __CINT__" > LinkDef.h;      echo "#pragma link off all globals;" >> LinkDef.h;      echo "#pragma link off all classes;" >> LinkDef.h;      echo "#pragma link off all functions;" >> LinkDef.h;      echo "#pragma link C++ class St_"$stem"-;" >> LinkDef.h;      echo "#pragma link C++ class "$stem"_st-!;" >> LinkDef.h;      echo "#endif" >> LinkDef.h;      rootcint -f $idlcintC -c $CPPFLAGS  $idlhh LinkDef.h;
    );
  my $CintC = $obj . "/" . $idlcintC;
  push @src,  $CintC;# print "src+ $CintC\n";
  Install $env $obj, $idlCintC;
}
#my $conscript = $share . "/"  . "Conscript"; print "conscript = $conscript\n";
#Command $env $conscript, [@src], 
#qq (
#    echo "Import qw ( env INCLUDE LIB BIN EXPORT BUILD OBJ);" > %>
#    echo "LinkedModule \$env $SO_PKG, qw (%<)"; >> %>
#    echo "Install $env $LIB, $SO_PKG;">> %>
#);
#Build ( "$conscript" );
LinkedModule $env $SO_PKG, @src;
Install $env $LIB, $SO_PKG;
#________________________________________
sub script::find_idl {
  if (defined($AFS)) {$File::Find::dont_use_nlink;}
  @search_files   = ();
  &File::Find::find(\&wanted_idl, @_);
  for my $dir (@_) {
    my $i = 0;
    for ($i=0;$i<=$#search_files;$i++) {
      #      print "i = ",$i, "src =", $search_files[$i],"\n";
      my $file = $search_files[$i];
      $file =~ s/$dir\///g;
      $search_files[$i] = $file;
    }
  }
  #  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub script::wanted_idl {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d $_ &&
       (/^CVS$/ ||
	/^exa$/ ||
	/^inc$/ ||
	/^doc$/ ||
	/^run$/ ||
	/^examples$/ ||
	/^local$/ ||
	/^hold$/ ||
	/^wrk$/)
     ) {$prune = 1; return;}
  if (/^.*\.idl$/) {#print "$name\n";
    push @search_files, $name; 
  }
}
#________________________________________
