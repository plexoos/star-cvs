The program searchs the calibration data files at
  $PWD/calb/domain_name
and then,
  $STAR_CALB/domain_name
at last,
  $STAR_ROOT/calb/domain_name/19980221.1612090
In STAR_LOGIN.csh, $STAR_CALB is equivalent to $STAR_ROOT/cal.

The filename looks like this:
   file_name.19980221.1616060
   file_name.YYYYMMDD.hhmmssT
where Y=year, M=month, D=date, h=hour, m=minit, s=second.
T=0 means normal time(winter time) and T=1 means summer
time(day light saving time).   (Do we need to add time zone?)

There are two routines for users:
  char* cal_filename(char *, char*, struct tm *)
	This gives back file name with fullpath. User may call this
	to get file name and save calibration constants with this name.
	first argment is domain_name, the second is filename, third is
        date and time for this calibration data in tm structure. This
	gives back NULL on failure. It's users responsibility to FREE
	the allocated space for returned charracter array.
  char* find_cal_file(char *, char *, struct tm *, struct tm *, int)
	This searches the directories described above, looking at
	files in it, and pick up most recent calibration data file
        for the requested time and date(2nd argument) (last argument
	is 0). First and second arguments are pointer to domain name
	and filename. Third is requested time(i.e., time of the event).
	Fourth is date and time which the founded calibration constant
	is expired(i.e. data and time of next calibration file).  The fifth
	is the option. 
	   1---2---3--*--4---5--->time  * is the requested date/time
	   option=0 (default) gives back most recent file (file 3)
	   option=-1 gives second recent file (file 2)
	   option=1 gives next file (file 4)
	Return value is a pointer to the filaname with fullpath. 

Other small utility routines:
  void tmzero(struct tm *)	
	This set the time to 1900 January 1st, 00:00:00, winter time.
	This will be used to reset expiration date.

  void filltm(struct tm *, int, int, int, int, int, int, int)	
	This fill the structure tm from integer inputs.

example:

void main(void){
  char* file;		
  struct tm *t, *expire;
  time_t justnow = time(0);	
  int option=0;

  t = localtime(&justnow);

  file=cal_filename("emc/pedestal",t);
  printf("%s\n",file); free(file);
  
  file=find_cal_file("emc/pedestal",t,expire,option);
  printf("%s\n",file); free(file);
}

> echo $STAR_CAL
/star/u2d/akio/staf/cal

> ls $STAR_CAL/emc/pedestal
19980221.1616060   19980225.1616060   19980226.1616060   19980227.1616060
19980223.1616060   19980226.1116060   19980226.2116060   19980228.1616060

>a.out
/star/u2d/akio/staf/cal/emc/pedestal/19980226.2120190
/star/u2d/akio/staf/cal/emc/pedestal/19980226.2116060

More realistic example

static struct tm expire;
runloop{
  tmzero(expire);
}
eventloop{  
  if(mktime(time) > expire){
     file=find_cal_file("emc/pedestal","bemcA",t,expire,option);
     fp=open(file);
     read_cal_const(fp);
     close(fp);
  }
}



