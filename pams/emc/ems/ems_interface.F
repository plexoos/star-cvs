CC:>--------------------------------------------------------------------
CC: FILE:       ems_interface.F
CC: HISTORY:
CC:             00jan96-v000a-hpl- Created by stic Version
CC:  Id: idl.y,v 1.1 1998/03/16 03:02:51 fisyak Exp  
CC:<--------------------------------------------------------------------

      INTEGER*4 FUNCTION EMS_INTERFACE(
     1         g2t_vertex_h,        g2t_vertex ,
     2         g2t_track_h,         g2t_track ,
     3         emc_hit_h,           emc_hit ,
     4         smd_hit_h,           smd_hit ,
     5         hits_bemc_h,         hits_bemc ,
     6         hits_bsmd_h,         hits_bsmd ) 
      IMPLICIT NONE
#include "ems_interface.inc"
CC:>--------------------------------------------------------------------
CC: ROUTINE:    EMS_INTERFACE
CC: DESCRIPTION: Physics Analysis Module FORTRAN 77 template.
CC:             This is a FORTRAN 77 Physics Analysis Module template
CC:             automatically generated by stic Version
CC:        Id: idl.y,v 1.1 1998/03/16 03:02:51 fisyak Exp  
CC:             from ems_interface.idl.
CC:             Please edit comments and code.
CC: AUTHOR:     First version Llope,
CC:             K.Shestermanov    shestermanov@mx.ihep.su
CC: ARGUMENTS:
CC:          IN:
CC:       INOUT:
CC:       g2t_vertex     - description here
CC:     g2t_vertex_h     - Header Structure for g2t_vertex
CC:        g2t_track     - description here
CC:      g2t_track_h     - Header Structure for g2t_track
CC:          emc_hit     - description here
CC:        emc_hit_h     - Header Structure for emc_hit
CC:          smd_hit     - description here
CC:        smd_hit_h     - Header Structure for smd_hit
CC:        hits_bemc     - description here
CC:      hits_bemc_h     - Header Structure for hits_bemc
CC:        hits_bsmd     - description here
CC:      hits_bsmd_h     - Header Structure for hits_bsmd
CC:         OUT:
CC: RETURNS:    STAF Condition Value
CC:>--------------------------------------------------------------------
C
      integer i,nout
      integer ivid,rl,eta,phi,sphi,dep,ihit 
      integer pid,type,strip
      INTEGER emc_ivid(5)/10000000,100000,100,10,1/ ! matched with AGI and G2T
      INTEGER emc_chid(5)                           ! matched with AGI and G2T
      INTEGER smd_ivid(5)/100000000,1000000,1000,100,1/ ! matched with AGI&G2T
      INTEGER smd_chid(5)                            !matched with AGI and G2T
c
      REAL    emc_de_tower(-20:20,120,2),emc_ne_tower(-20:20,120,2)
      real    smd_de(-10:10,60,3,75)     
c---- start executable statements...
      ems_interface = STAFCV_BAD		! default is failure...
c
      hits_bemc_h.nok=0
      hits_bsmd_h.nok=0
      if(emc_hit_h.nok.gt.0) then
        call vzero(emc_de_tower,9840)
        call vzero(emc_ne_tower,9840) 
c---- start the loop over the BEMC hits ------------------------------------
        do ihit = 1, emc_hit_h.nok
c---- get the g2t information...
          pid   = emc_hit(ihit).track_p
          ivid  = emc_hit(ihit).volume_id
c      print *,'    '
c      print *,'pid,ivid',pid,ivid
          do i = 1,5
            emc_chid(i) = ivid/emc_ivid(i)
            ivid        = ivid - emc_chid(i)*emc_ivid(i)
          end do
          if(ivid.ne.0)then
            type *,'EMS_INTERFACE -- error decoding EMC volume_id...',ivid
            goto 999
          end if
          rl   = emc_chid(1)         ! right/left: =1 for Z>0, and =2 for Z<0
          eta  = emc_chid(2)         ! pseudorapidity bin number [1,20]
          phi  = emc_chid(3)         ! module phi [1,120]
          sphi = emc_chid(4)         ! d(eta)=0.1 tower number [1,10]
          dep  = emc_chid(5)         ! depth section [1,2]
c        print *,'rl,eta,phi,sphi,dep',rl,eta,phi,sphi,dep
          if(rl.eq.1) then
            phi=phi*2-2+sphi
          elseif(rl.eq.2) then
            eta=-eta
            phi=(120-phi)*2+3-sphi
          endif
c        print *,'eta,phi',eta,phi
          if(pid.ne.0) then
            if(g2t_track(pid).charge.eq.0.) then
              emc_ne_tower(eta,phi,2)=emc_ne_tower(eta,phi,2)+emc_hit(ihit).de
              if(dep.eq.1) then
                emc_ne_tower(eta,phi,1)=emc_de_tower(eta,phi,1)+emc_hit(ihit).de
              endif
            endif         ! end neutral incident particle check...
          endif
          emc_de_tower(eta,phi,2)=emc_de_tower(eta,phi,2)+emc_hit(ihit).de
          if(dep.eq.1) then
             emc_de_tower(eta,phi,1)=emc_de_tower(eta,phi,1)+emc_hit(ihit).de
          endif
        enddo
c---- fill the ems_hits_bemc output table...         
        nout     = 0
        do eta = -20,20 
          do phi = 1,120    
            do dep = 1,2 
              if(emc_de_tower(eta,phi,dep).gt.0.0) then
                nout = nout + 1
                if(nout.lt.hits_bemc_h.maxlen) then
                  hits_bemc(nout).eta_bin   = eta
                  hits_bemc(nout).phi_bin   = phi
                  hits_bemc(nout).tower_dep = dep
                  hits_bemc(nout).e_sum     = emc_de_tower(eta,phi,dep) 
                  hits_bemc(nout).e_neut    = emc_ne_tower(eta,phi,dep)
                else
                  type *,'EMS_INTERFACE - WARNING!'
                  type *,'ems_hits_bemc is full, rows missed!'
                endif    ! end maxlen check..
              endif   ! end energy > 0 check...
            enddo     ! end depth loop...
          enddo      ! end eta loop...
        enddo       ! end phi loop...
        hits_bemc_h.nok = nout
      endif
c---- end of BEMC hits section...
c-----------------------------------------
      if(smd_hit_h.nok.gt.0) then
        call vzero(smd_de,283500)
c---- start the loop over the BSMD hits----
        do ihit = 1, smd_hit_h.nok
c---- get the g2t information...
          ivid  = smd_hit(ihit).volume_id
          do i = 1,5
           smd_chid(i) = ivid/smd_ivid(i)
           ivid        = ivid - smd_chid(i)*smd_ivid(i)
          end do
          if(ivid.ne.0) then
            type *,'EMS_INTERFACE -- error decoding SMD volume_id...',ivid
            goto 999
          end if
          rl   = smd_chid(1)         ! right/left: =1 for Z>0, and =2 for Z<0
          eta  = smd_chid(2)         ! pseudorapidity bin number [-10,10]
          phi  = smd_chid(3)         ! module phi [1,60]
          type = smd_chid(4) 
          strip= smd_chid(5) 
          if(rl.eq.2) then
            eta=-eta
            phi=121-phi
          endif
          smd_de(eta,phi,type,strip)=smd_de(eta,phi,type,strip)+
     +                               smd_hit(ihit).de
        enddo 
c---- fill the ems_hits_bsmd output table...
        nout=0
        do eta=-10,10
          do phi=1,60
            do type=1,3
              do strip=1,75
                if(smd_de(eta,phi,type,strip).gt.0.) then
                  nout=nout+1
                  if(nout.lt.hits_bemc_h.maxlen) then
                    hits_bsmd(nout).eta_bin = eta
                    hits_bsmd(nout).phi_bin = phi
                    hits_bsmd(nout).type    = type
                    hits_bsmd(nout).strip   = strip
                    hits_bsmd(nout).e_sum   = smd_de(eta,phi,type,strip)
                  else
                    type *,'EMS_INTERFACE - WARNING!'
                    type *,'smd_hit_bemc is full, rows missed!'
                  endif    ! end maxlen check..
                endif
              enddo      
            enddo 
          enddo 
        enddo 
      hits_bsmd_h.nok = nout
      endif
c---- end of SMD hits section...
c---- end of routine...
      ems_interface = STAFCV_OK
 999  RETURN
      END

C=======================================================================












