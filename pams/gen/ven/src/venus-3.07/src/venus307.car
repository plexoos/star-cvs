+TITLE.
C.     *                      VENUS 3.07                            *
+SELF.
+SELF. **************************************************************
+SELF. *                                                            *
+SELF. *                      VENUS 3.07                            *
+SELF. *          STAR patchy deck of VENUS model                   *
+SELF. *                                                            *
+SELF. **************************************************************
+SELF.
+SELF.
+SELF. **************************************************************
+SELF. *                                                            *
+SELF. *              COMMONS for VENUS                             *
+SELF. *                                                            *
+SELF. **************************************************************
+SELF. 
+SELF. -------------
+PATCH,VCDES.
+SELF.
+SELF.
+SELF. **************************************************************
+SELF. *                                                            *
+SELF. *              Code for venus307.f                           *
+SELF. *                                                            *
+SELF. **************************************************************
+SELF. 
+SELF. -------------
+PATCH,V307Z.
c-----------------------------------------------------------------------
c                            venus 3.07
c-----------------------------------------------------------------------
c
c                         an event generator
c                    to simulate ultrarelativistic
c        hadron-hadron, hadron-nucleus, nucleus-nucleus collisions,
c       e+e- annihilation, lepton-nucleon, lepton-nucleus scattering
c
c                             k. werner
c
c          cern, theory division, ch-1211 geneva 23, switzerland
c                       bitnet: wernerk at cernvm
c
c
c  unique features:
c  ----------------
c
c     consistent treatment of final state interactions: each particle
c     (or string fragment) is allowed to reinteract with other produced
c     particles (string fragments) or with spectators. important for
c     hadron-nucleus, nucleus-nucleus and lepton-nucleus scattering.
c     no final state interaction if 'radiac' is set zero.
c
c     participation of antiquarks (in addition to quarks) in the string-
c     flip mechanism to form strings. it is consistent and compatible
c     with qcd (lattice) to deal with quarks, antiquarks, and strings
c     as basic objects (no explicit gluons neccessary).
c
c     theoreticly justified fragmentation procedure. since space-time
c     evolution is an important issue concerning final state inter-
c     actions, it is not enough to have a fragmentation model which
c     works, it should have the right space-time description! there-
c     for the field-feynman model of earlier versions (<3.00) has been
c     abandoned and replaced by a very powerful and appealing procedure
c     suggested by artru/menessier.
c
c     very large resonance table, including for example all nucleon
c     resonances up to 2 gev etc. the decay table includes also k0_short
c     and lambda decays. decay suppression is governed by the parameter
c     'ndecay'. Setting 'ndecay' to 1 suppresses all decays. For further
c     details search for 'decay suppression' in subr. ainitl.
c
c
c  file definitions
c  ----------------
c
c  the program unit 'subr. afiles' contains all file definitions.
c  the files are:
c     optns: input file (may be the terminal).
c     check: contains information and error messages.
c     histo: used for analysis (not described here).
c     data : collects all produced particles.
c
c
c  input to run venus
c  ------------------
c
c  to simulate a nucleon-nucleon, nucleon-nucleus, nucleus-nucleus
c  collision, the following input is required:
c
c     'had'
c     nevent ndisplay energy zproj aproj ztarg atarg i
c     'param1' value1
c     'param2' value2
c         ...
c     'parami' valuei
c     'stp'
c
c  where 'had' and 'stp' has to be taken litterally. the variables are:
c
c     nevent : number of events
c     ndisplay: a message occurs after ndisplay events being done
c     energy: energy per incident nucleon
c     zproj: number of projectile protons
c     aproj: number of projectile nucleons
c     ztarg: number of target protons
c     atarg: number of target nucleons
c     i: number of parameters or options to be changed
c
c  if i>0 one has to provide i lines each containing
c
c          'param' value
c
c  param is the name of the parameter or option, value is the new value.
c  a list of parameters/options and there default values can be found
c  in 'subr. ainitl'.
c
c  example1:
c
c  o + pb at 200 agev, 5000 evts, message after 100,
c  default parameter values:
c
c     'had'
c     5000 100    200.0    8 16 82 207    0
c     'stp'
c
c  example2:
c
c  p + pb at 200 gev, 5000 evts, no message ,
c  fragmentation mean transverse momentum changed to .450 gev:
c
c     'had'
c     5000 10000    200.0    1 1 82 207    1
c     'ptf   ' .450
c     'stp'
c
c
c  input for hadron-nucleus for arbitrary hadrons
c  ----------------------------------------------
c
c  a hadron (arbitrary) nucleus collision requires:
c
c     'had'
c     nevent ndisplay energy -1 1 ztarg atarg i
c     idptl
c     'param1' value1
c     'param2' value2
c         ...
c     'parami' valuei
c     'stp'
c
c  where idptl is the particle id of the hadron (id-description later).
c  for meson-nucleon scattering the diffractive probabilities 'wproj'
c  and 'wtarg' have to be changed (suggestion: 0.04 both). also a change
c  of the multi-string-flip parameter 'qmust' to 1.15 gives slightly
c  better results. however meson-nucleon and (even more) meson-nucleus
c  scattering has been tested much less than purely nucleonic reactions,
c  so the parameters are not neccessarily optimized, and the author
c  would appreciate (in any case) comments and suggestions!
c
c  example3:
c
c  pion + p at 200 gev, 5000 evts, no message, 'wproj','wtarg','qmust'
c  changed:
c
c     'had'
c     5000 10000    200.0   -1 1 1 1       3
c     120
c     'wproj' 0.04
c     'wtarg' 0.04
c     'qmust' 1.15
c     'stp'
c
c  example4:
c
c  pion + au at 200 gev, 5000 evts, no message, 'wproj','wtarg','qmust'
c  changed:
c
c     'had'
c     5000 10000    200.0   -1 1 79 197      3
c     120
c     'wproj' 0.04
c     'wtarg' 0.04
c     'qmust' 1.15
c     'stp'
c
c  (120 is the id-code for pion+).
c
c
c  output
c  ------
c
c  the results are stored in the file 'ifdt', defined in 'subr.
c  afiles'. the storage is performed in 'subr. astore', which is
c  written in a very tranparent way to make changes by users
c  very easy. in order to learn what kind of variables are stored in
c  which way, the user is referred to 'subr. astore' (subroutines
c  are stored alphabetically).
c
c
c  notes
c  -----
c
c     *** the initial seed for the random number generator can be
c         changed by initializing the parameter 'seedi'.
c
c     *** default for the inelastic pp cross section is 3.1 fm**2.
c         energy dependence has to be put in explicitely by
c         initializing 'sigma'.
c
c     *** the following dimensions are used (def with parameter statemt)
c            max # of strings per event:   mxstr=5000
c            max # of jets per event:      mxjet=10000
c            max # of particles per event: mxptl=30000
c
c
c  updates
c  -------
c
c     venus 2.00  string flip involving antiquarks.
c     venus 3.00  fragmentation according to classical string theory.
c                 extended resonance table.
c                 rescattering of produced particles among themselves.
c                 rescattering of produced particles with spectators.
c     venus 3.01  removing a slight impact-parameter trigger.
c     venus 3.02  adding analysis routines 'wimi', 'wimino'.
c     venus 3.04  adding phase space factor for qq-qqbar production.
c                 removing an impact parameter trigger at ags energies.
c                 no rescattering for iorptl=-1.
c                 removing 'tmefrz' parameter, adding 'ndecay' instead.
c                 adding parameter 'jorptl'. changing dimension mxptl.
c     venus 3.05  also rescattering if iorptl=0.
c                 removing 'tmeiac' parameter, adding 'tmefor' instead.
c                 separating stmt numbers and if stmts.
c     venus 3.06  lorentz contraction of rescattering distance.
c                 radiac+radias as interaction radius.
c                 meaning of amsiac modified (amsiac->m+amsiac).
c                 multiple rescattering per time step included.
c                 cluster decay acc. to phase space.
c                 option 'bminim' added.
c     venus 3.07  option 'labsys' added.
c                 analysis routines 'wspa' and 'wspafi' added.
c                 nucleon hard core properly treated.
c                 string origin as average collision location.
c
c
c  list of subroutines and functions (incl 'program aamain')
c  ---------------------------------------------------------
c
c     aamain  afiles  ainitl  astore  atermi  avenus
c     hahabs  hapapa  hasi    hastfc  hastfl  hastfs
c     hastpr  hdecmp  hmucex  hrescl
c     idchrg  idcomi  idcomj  idcomp  idcon   iddeco
c     idenco  idflav  idlabl  idmass  idmima  idmimj
c     idmix   idres   idresi  idsgl   idspin  idtau
c     idtr4   idtra   idtrb
c     jamfra  jclude  jdeca   jdecay  jdecin  jestpr
c     jetgen  jetptl  jrescl  jsplit  jstrij  jstrip
c     nucini  nuclco  nucoge  nucoll  nucstr
c     pvjpse  pvjpsf
c     randfl  ranf    ranfgt  rangen  ranhvy  ransig
c     ranstc
c     sbet    sdensi  sgam    sgau    spoc    sptf
c     sptj    sptq    strc    strctr
c     utacos  utar    utasi   utinvt  utkprj  utksix
c     utlobo  utlow   utlow3  utlow6  utmom   utpage
c     utpcm   utquad  utquaf  utremb  utrota  utsqsi
c     utsqst  utsstr  utstop
c     veanif  veanly
c     wimi    wimino  wspa    wspafi
c
c
c  particle id (same as isajet - see isajet.doc, f.e.paige)
c  --------------------------------------------------------
c
c  quarks and leptons are numbered in order of mass:
c        up=1 dn=2 st=3 ch=4 bt=5 tp=6
c        nue=11 e-=12 num=13 mu-=14 nut=15 tau-=16
c  with a negative sign for antiparticles.
c  arbitrary conventions are:
c        gl=9 gm=10 ks=20 kl=-20 w+=80 z0=90 .
c  the code for a meson is an integer +-jkl, where j.le.k are the
c  quarks and l is the spin. the sign is for the j quark.
c  flavor singlet mesons are ordered by mass:
c        pi0=110 eta=220 etap=330 etac=440 .
c  similarly, the code for a baryon is a compound integer +-ijkl
c  formed from the three quarks i,j,k and a spin label l=0,1.
c  the code for a diquark is +-ij00.
c
c  list of ident codes:
c
c     ident     label           mass    charge
c         1     UP        .30000E+00       .67
c        -1     UB        .30000E+00      -.67
c         2     DN        .30000E+00      -.33
c        -2     DB        .30000E+00       .33
c         3     ST        .50000E+00      -.33
c        -3     SB        .50000E+00       .33
c         4     CH        .16000E+01       .67
c        -4     CB        .16000E+01      -.67
c         5     BT        .49000E+01      -.33
c        -5     BB        .49000E+01       .33
c         6     TP        .30000E+02       .67
c        -6     TB        .30000E+02      -.67
c
c         9     GL       0.               0.00
c
c        10     GM       0.               0.00
c
c        11     NUE      0.               0.00
c       -11     ANUE     0.               0.00
c        12     E-        .51100E-03     -1.00
c       -12     E+        .51100E-03      1.00
c        13     NUM      0.               0.00
c       -13     ANUM     0.               0.00
c        14     MU-       .10566E+00     -1.00
c       -14     MU+       .10566E+00      1.00
c        15     NUT      0.               0.00
c       -15     ANUT     0.               0.00
c        16     TAU-      .18070E+01     -1.00
c       -16     TAU+      .18070E+01      1.00
c
c        20     KS        .49767E+00      0.00
c       -20     KL        .49767E+00      0.00
c
c        80     W+        SIN2W=.23       1.00
c       -80     W-        SIN2W=.23      -1.00
c        90     Z0        SIN2W=.23       0.00
c
c       110     PI0       .13496E+00      0.00
c       120     PI+       .13957E+00      1.00
c      -120     PI-       .13957E+00     -1.00
c       220     ETA       .54880E+00      0.00
c       130     K+        .49367E+00      1.00
c      -130     K-        .49367E+00     -1.00
c       230     K0        .49767E+00      0.00
c      -230     AK0       .49767E+00      0.00
c       330     ETAP      .95760E+00      0.00
c       140     AD0       .18633E+01      0.00
c      -140     D0        .18633E+01      0.00
c       240     D-        .18683E+01     -1.00
c      -240     D+        .18683E+01      1.00
c       340     F-        .20300E+01     -1.00
c      -340     F+        .20300E+01      1.00
c       440     ETAC      .29760E+01      0.00
c
c       111     RHO0      .77000E+00      0.00
c       121     RHO+      .77000E+00      1.00
c      -121     RHO-      .77000E+00     -1.00
c       221     OMEG      .78260E+00      0.00
c       131     K*+       .88810E+00      1.00
c      -131     K*-       .88810E+00     -1.00
c       231     K*0       .89220E+00      0.00
c      -231     AK*0      .89220E+00      0.00
c       331     PHI       .10196E+01      0.00
c       141     AD*0      .20060E+01      0.00
c      -141     D*0       .20060E+01      0.00
c       241     D*-       .20086E+01     -1.00
c      -241     D*+       .20086E+01      1.00
c       341     F*-       .21400E+01     -1.00
c      -341     F*+       .21400E+01      1.00
c       441     JPSI      .30970E+01      0.00
c
c      1120     P         .93828E+00      1.00
c     -1120     AP        .93828E+00     -1.00
c      1220     N         .93957E+00      0.00
c     -1220     AN        .93957E+00      0.00
c      1130     S+        .11894E+01      1.00
c     -1130     AS-       .11894E+01     -1.00
c      1230     S0        .11925E+01      0.00
c     -1230     AS0       .11925E+01      0.00
c      2130     L         .11156E+01      0.00
c     -2130     AL        .11156E+01      0.00
c      2230     S-        .11974E+01     -1.00
c     -2230     AS+       .11974E+01      1.00
c      1330     XI0       .13149E+01      0.00
c     -1330     AXI0      .13149E+01      0.00
c      2330     XI-       .13213E+01     -1.00
c     -2330     AXI+      .13213E+01      1.00
c      1140     SC++      .24300E+01      2.00
c     -1140     ASC--     .24300E+01     -2.00
c      1240     SC+       .24300E+01      1.00
c     -1240     ASC-      .24300E+01     -1.00
c      2140     LC+       .22600E+01      1.00
c     -2140     ALC-      .22600E+01     -1.00
c      2240     SC0       .24300E+01      0.00
c     -2240     ASC0      .24300E+01      0.00
c      1340     USC.      .25000E+01      1.00
c     -1340     AUSC.     .25000E+01     -1.00
c      3140     SUC.      .24000E+01      1.00
c     -3140     ASUC.     .24000E+01     -1.00
c      2340     DSC.      .25000E+01      0.00
c     -2340     ADSC.     .25000E+01      0.00
c      3240     SDC.      .24000E+01      0.00
c     -3240     ASDC.     .24000E+01      0.00
c      3340     SSC.      .26000E+01      0.00
c     -3340     ASSC.     .26000E+01      0.00
c      1440     UCC.      .35500E+01      2.00
c     -1440     AUCC.     .35500E+01     -2.00
c      2440     DCC.      .35500E+01      1.00
c     -2440     ADCC.     .35500E+01     -1.00
c      3440     SCC.      .37000E+01      1.00
c     -3440     ASCC.     .37000E+01     -1.00
c
c      1111     DL++      .12320E+01      2.00
c     -1111     ADL--     .12320E+01     -2.00
c      1121     DL+       .12320E+01      1.00
c     -1121     ADL-      .12320E+01     -1.00
c      1221     DL0       .12320E+01      0.00
c     -1221     ADL0      .12320E+01      0.00
c      2221     DL-       .12320E+01     -1.00
c     -2221     ADL+      .12320E+01      1.00
c      1131     S*+       .13823E+01      1.00
c     -1131     AS*-      .13823E+01     -1.00
c      1231     S*0       .13820E+01      0.00
c     -1231     AS*0      .13820E+01      0.00
c      2231     S*-       .13875E+01     -1.00
c     -2231     AS*+      .13875E+01      1.00
c      1331     XI*0      .15318E+01      0.00
c     -1331     AXI*0     .15318E+01      0.00
c      2331     XI*-      .15350E+01     -1.00
c     -2331     AXI*+     .15350E+01      1.00
c      3331     OM-       .16722E+01     -1.00
c     -3331     AOM+      .16722E+01      1.00
c      1141     UUC*      .26300E+01      2.00
c     -1141     AUUC*     .26300E+01     -2.00
c      1241     UDC*      .26300E+01      1.00
c     -1241     AUDC*     .26300E+01     -1.00
c      2241     DDC*      .26300E+01      0.00
c     -2241     ADDC*     .26300E+01      0.00
c      1341     USC*      .27000E+01      1.00
c     -1341     AUSC*     .27000E+01     -1.00
c      2341     DSC*      .27000E+01      0.00
c     -2341     ADSC*     .27000E+01      0.00
c      3341     SSC*      .28000E+01      0.00
c     -3341     ASSC*     .28000E+01      0.00
c      1441     UCC*      .37500E+01      2.00
c     -1441     AUCC*     .37500E+01     -2.00
c      2441     DCC*      .37500E+01      1.00
c     -2441     ADCC*     .37500E+01     -1.00
c      3441     SCC*      .39000E+01      1.00
c     -3441     ASCC*     .39000E+01     -1.00
c      4441     CCC*      .48000E+01      2.00
c     -4441     ACCC*     .48000E+01     -2.00
 
c-----------------------------------------------------------------------
      program aamain
c-----------------------------------------------------------------------
      common/nevnt/nevnt
      call afiles
9999  call ainitl
      do 1 n=1,nevnt
      call avenus
1     call astore
      call atermi
      goto9999
      end
 
c-----------------------------------------------------------------------
      subroutine afiles
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      ifop=5
      ifmt=6
      ifch=31
      ifhi=35
      ifdt=51
c
c ->rm appended '.dat' to file names...
c
      open(unit=ifop,file='optns.dat',status='old')
      open(unit=ifch,file='check.dat',status='new')
      open(unit=ifhi,file='histo.dat',status='new')
c     open(unit=ifdt,file='data.dat',status='unknown'
c    *, form='unformatted')
c ->rm
c
c     The opening of the zebra files is done after the initializations
c     have been done.
c
      return
      end
 
c-----------------------------------------------------------------------
      subroutine ainitl
c     performs all initializations
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
c+ fv
      common/paro3/ com, ytrgt
c-fv
      common/nevnt/nevnt
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (ndep=129,ndet=129,kollmx=2000)
      common/col/rmproj,rmtarg,bmax,bimp,koll,nproj,ntarg
     *,xdep(ndep),qdep(ndep),wdep(ndep),xdet(ndet),qdet(ndet),wdet(ndet)
     *,nrproj(kollmx),nrtarg(kollmx),distce(kollmx),nord(kollmx)
     *,coord(4,kollmx)
      parameter(nprbms=20)
      common /cprbms/prbms(nprbms)
      parameter (nptj=129)
      common /cptj/xptj(nptj),qptj(nptj),wptj(nptj)
      parameter (nptq=129)
      common /cptq/xptq(nptq),qptq(nptq),wptq(nptq)
      parameter (nptf=129)
      common /cptf/xptf(nptf),wptf(nptf)
     *,qptfu(nptf),qptfs(nptf),qptfuu(nptf),qptfus(nptf),qptfss(nptf)
      parameter (ngau=129)
      common /cgau/xgau(ngau),qgau(ngau),wgau(ngau)
      parameter (nstru=2049)
      common/stru/xstru(nstru),wstru(nstru)
     *,qvap(nstru),qvat(nstru),qsep(nstru),qset(nstru)
      character choic*3
      parameter(mxpar=99)
      character*6 parcha(mxpar)
      double precision parval(mxpar)
      common/paramc/npar,idmmy,parval,parcha
      common /cvsn/iversn /cden/massnr,rmx
      external sdensi,strcvl,strcse
     *,sptj,sptq,sptf,sgau
      double precision seedi,seedc
      common /cseed/seedc
      common /cquama/quama /cipio/ipio
      character dol*1
      dol='$'
 
c     version number
c     --------------
         iversn=307
 
c     fragmentation parameters
c     ------------------------
c     prob. for u or d quark production ( =(1-p_strange)/2 ):
         pud=0.43
c     qq-qqbar probability
         pdiqua=.20
c     quark masses (depend on pud and pdiqua!!!)
         smas=.200
         uumas=.250
         usmas=.350
         ssmas=.450
c     spin probabilities (for light and heavy flavours):
         pspinl=.50
         pspinh=.75
c     isospin probability:
         pispn=.50
c     average p_transverse
         ptf=.40
c     string tension:
         tensn=1.0
c     string decay parameter
         parea=.50
c     threshold resonance -> string
         delrem=1.
c     cluster decay time
         taunll=1.0
c     phase space rapidity for diquark creation
         raphdi=2.0
 
c     proton-proton parameters
c     ------------------------
c     mean transverse momentum of quarks:
         ptq=.60
c     effective ratio of strange sea over u sea:
         rstras=0.05
c     diffractive probability:
         wproj=.14
         wtarg=.14
c     multistring parameter:
         qmust=0.80
c     effective cutoff mass in structure functions:
         cutmss=.30
c     phase space parameters:
         delmss=.300
         pencox=0.5
         pencoy=0.0
 
c     nucleus-nucleus parameters
c     --------------------------
c     inelastic pp cross section [fm**2]:
         sigma=3.1
c     hard core distance:
         core=0.8
c     jpsi nucleon cross section [fm**2]:
         sigj=0.2
c     cut-off-mass (parameter) 
         com =0.0 
c     rescattering parameters
c     -----------------------
c     interaction radius baryon-baryon
         radiac=1.40
c     interaction radius meson-meson
         radias=0.70
c     interaction mass
         amsiac=.8
c     string formation time:
         tmefor=1
 
c     technical parameters
c     --------------------
c     minimum number of valence quarks:
         neqmn=-5
c     maximum number of valence quarks:
         neqmx=5
c     range for pt distribution
         ptmx=6
c     range for gauss distribution
         gaumx=8
c     parameter determining range for density distribution
         fctrmx=10
c     try-again parameter
         ntrymx=3
c     max time for jpsi evolution
         taumx=20
c     time steps for jspi evolution
         nsttau=100
c     min, med and max time for space-time evolution
         tmemin=0
         tmemed=5
         tmemax=-99999
c     time steps for space-time evotution
         numtme=50
 
c     options
c     -------
c     trafo from pp-cm into lab-system (1) or not (.ne.1)
         labsys=1
c     maximum number of collisions:
         ncolmx=100000
c     antiquark color exchange (1) or not (0):
         iaqu=1
c     maximum resonance spin (spin in a genaral sense: mod(/id/,10))
         maxres=99999
c     momentum rescaling (1=yes):
         irescl=1
c     p_t distribution (1=exponential,2=Gaussian):
         opfpt=1.
c     nue energy
         enenue=43.00
c     mue  energy
         enemue=26.24
c     mue angle
         angmue=3.9645/360.*2*3.14159
c     jpsi to be produced (1) or not (0):
         jpsi=0
c     jpsi final state interaction (1) or not (0):
         jpsifi=1
c     collision trigger (only coll between ko1 and ko2 are used):
         ko1ko2=00009999
c     print option:
         ish=-1
c     print marks between whom ish is set to ish(init):
         ipagi=0
c     verify option for input reading:
         ivi=1
c     maximum impact parameter (bmaxim=0=>central):
         bmaxim=10000.
c     minimum impact parameter:
         bminim=0.
c     store only stable ptl (0) or also parents (1):
         istmax=0
c     initial seed for random number generator:
         seedi=0.
c     suppression (1) or not of messages
         isup=0
c     decay suppression:
c     ndecay=gfedcba with integers ni=a,b,c,... with no decay if ni=1 fo
c     a: all resonances
c     b: k_short (20)
c     c: lambda (2130)
c     d: sigma (1130,2230)
c     e: cascade (2330,1330)
c     f: omega (3331)
c     g: pi0 (110)
         ndecay=0
c     fill intermittency histogram (1) or not (0)
         imihis=0
c     fill space-time histogram (1) or not (0)
         isphis=0
 
c     constants
c     ---------
      pi=3.1415927
      prom=.94
      piom=.14
      ainfin=1e35
 
c     initializations
c     ---------------
      laproj=0
      maproj=0
      latarg=0
      maproj=0
      idproj=1120
      idtarg=1120
      do 6 i=1,99
      prob(i)=0
      do 6 j=1,2
      icbac(i,j)=0
6     icfor(i,j)=0
      pnll=0
      do 2 i=1,mxpar
      parval(i)=0
2     parcha(i)='      '
      imsg=0
      jerr=0
      ntevt=0
      nrevt=0
      naevt=0
      nrstr=0
      nrptl=0
      inoiac=0
      ilamas=0
 
c     read from ifop
c     ---------------
      if(isup.ne.1)write(ifmt,105)float(iversn)/100
105   format(
     * ' !-----------------------------------------------------!'
     */' !            venus',f5.2,6x,'-     k. werner          !'
     */' !-----------------------------------------------------!')
1     continue
      if(isup.ne.1)write(ifmt,*)'choice? [a3]      type hlp for help'
      read(ifop,*,err=1)choic
      call utlow3(choic)
      if(isup.ne.1.and.ivi.eq.1)write(ifmt,*)choic
      if(choic.eq.'hlp')write(ifmt,100)
      if(choic.eq.'hlp')goto1
      if(choic.eq.'sup')then
      isup=1
      goto1
      endif
100   format(
     * ' !----------------------------------------------------!'
     */' !  choice [format:character*3]                       !'
     */' !   str ... string fragmentation                     !'
     */' !   had ... hadronic collisions (hh,ha,aa)           !'
     */' !   col ... only collision analysis                  !'
     */' !   ans ... only analysis (string frg.)              !'
     */' !   anh ... only analysis (hadr. coll.)              !'
     */' !----------------------------------------------------!')
      if(choic.eq.'str')ichoic=1
      if(choic.eq.'had')ichoic=2
      if(choic.eq.'col')ichoic=3
      if(choic.eq.'ans')ichoic=4
      if(choic.eq.'anh')ichoic=5
 
      if(ichoic.eq.1.or.ichoic.eq.4)then
      if(isup.ne.1)write(ifmt,*)'#events?[i]   modsho?[i]   '
     *,'engy?[f]   #str?[i])   tg?[2i]   #par?[i]'
      read(ifop,*)nevent,modsho,engy,ns,latarg,matarg,npar
      if(isup.ne.1.and.ivi.eq.1)write(ifmt,103)
     *nevent,modsho,engy,ns,npar
103   format(1x,i6,i5,f7.2,3x,i6,i6)
      if(ns.le.0)stop'nr of strings has to be > 0.'
      if(ns.gt.99)stop'nr of strings has to be < 100.'
      do 4 n=1,ns
      if(isup.ne.1)write(ifmt,*)n,'. string?[fiiii]'
      read(ifop,*)prob(n)
     *,icbac(n,1),icbac(n,2),icfor(n,1),icfor(n,2)
      if(isup.ne.1.and.ivi.eq.1)write(ifmt,106)prob(n)
     *,icbac(n,1),icbac(n,2),icfor(n,1),icfor(n,2)
4     continue
106   format(9x,f5.2,4x,2i8,4x,2i8)
 
      elseif(ichoic.eq.2.or.ichoic.eq.3.or.ichoic.eq.5)then
      if(isup.ne.1)write(ifmt,*)'#events?[i]   modsho?[i]   '
     *,'p(lab)?[f]   pj,tg?[4i]   #par?[i]'
      read(ifop,*)nevent,modsho,pnll
     *,laproj,maproj,latarg,matarg,npar
      if(isup.ne.1.and.ivi.eq.1)write(ifmt,104)nevent,modsho,pnll
     *,laproj,maproj,latarg,matarg,npar
104   format(1x,i6,i5,f8.0,3x,4i4,i6)
      if(laproj.lt.0.and.latarg.lt.0)then
      if(isup.ne.1)write(ifmt,*)'id_proj? [i]  id_targ? [i]'
      read(ifop,*)idproj,idtarg
      if(isup.ne.1.and.ivi.eq.1)write(ifmt,*)idproj,idtarg
      elseif(laproj.lt.0.and.latarg.ge.0)then
      if(isup.ne.1)write(ifmt,*)'id_proj? [i]'
      read(ifop,*)idproj
      if(isup.ne.1.and.ivi.eq.1)write(ifmt,*)idproj
      elseif(laproj.ge.0.and.latarg.lt.0)then
      if(isup.ne.1)write(ifmt,*)'id_targ? [i]'
      read(ifop,*)idtarg
      if(isup.ne.1.and.ivi.eq.1)write(ifmt,*)idtarg
      endif
      if(iabs(idproj).lt.1000.or.iabs(idtarg).lt.1000)sigma=sigma*2/3
 
      else
      stop'wrong choice'
      endif
 
      if(npar.gt.0.and.npar.le.mxpar)then
      do 3 n=1,npar
      if(isup.ne.1)write(ifmt,101)n
101   format(7x,i1,'. parameter? [a6,f]')
      read(ifop,*)parcha(n),parval(n)
      call utlow6(parcha(n))
      if(isup.ne.1.and.ivi.eq.1)write(ifmt,*)parcha(n),parval(n)
      if(parcha(n).eq.'iversn')iversn=parval(n)
      if(parcha(n).eq.'pud   ')pud   =parval(n)
      if(parcha(n).eq.'pspinl')pspinl=parval(n)
      if(parcha(n).eq.'pspinh')pspinh=parval(n)
      if(parcha(n).eq.'pispn ')pispn =parval(n)
      if(parcha(n).eq.'taunll')taunll=parval(n)
      if(parcha(n).eq.'maxres')maxres=parval(n)
      if(parcha(n).eq.'ptf   ')ptf   =parval(n)
c+fv
      if(parcha(n).eq.'com   ')com   =parval(n)
c-fv
      if(parcha(n).eq.'opfpt ')opfpt =parval(n)
      if(parcha(n).eq.'irescl')irescl=parval(n)
      if(parcha(n).eq.'tensn ')tensn =parval(n)
      if(parcha(n).eq.'ndecay')ndecay=nint(parval(n))
      if(parcha(n).eq.'pdiqua')pdiqua=parval(n)
      if(parcha(n).eq.'smas  ')smas  =parval(n)
      if(parcha(n).eq.'uumas ')uumas =parval(n)
      if(parcha(n).eq.'usmas ')usmas =parval(n)
      if(parcha(n).eq.'ssmas ')ssmas =parval(n)
      if(parcha(n).eq.'parea ')parea =parval(n)
      if(parcha(n).eq.'delrem')delrem=parval(n)
      if(parcha(n).eq.'ptq   ')ptq   =parval(n)
      if(parcha(n).eq.'neqmn ')neqmn =parval(n)
      if(parcha(n).eq.'neqmx ')neqmx =parval(n)
      if(parcha(n).eq.'iaqu  ')iaqu  =parval(n)
      if(parcha(n).eq.'wproj ')wproj =parval(n)
      if(parcha(n).eq.'wtarg ')wtarg =parval(n)
      if(parcha(n).eq.'qmust ')qmust =parval(n)
      if(parcha(n).eq.'sigma ')sigma =parval(n)
      if(parcha(n).eq.'core  ')core  =parval(n)
      if(parcha(n).eq.'ntrymx')ntrymx=parval(n)
      if(parcha(n).eq.'taumx ')taumx =parval(n)
      if(parcha(n).eq.'nsttau')nsttau=parval(n)
      if(parcha(n).eq.'labsys')labsys=parval(n)
      if(parcha(n).eq.'ncolmx')ncolmx=parval(n)
      if(parcha(n).eq.'sigj  ')sigj  =parval(n)
      if(parcha(n).eq.'ptmx  ')ptmx  =parval(n)
      if(parcha(n).eq.'gaumx ')gaumx =parval(n)
      if(parcha(n).eq.'cutmss')cutmss=parval(n)
      if(parcha(n).eq.'rstras')rstras=parval(n)
      if(parcha(n).eq.'fctrmx')fctrmx=parval(n)
      if(parcha(n).eq.'delmss')delmss=parval(n)
      if(parcha(n).eq.'pencox')pencox=parval(n)
      if(parcha(n).eq.'pencoy')pencoy=parval(n)
      if(parcha(n).eq.'jpsi  ')jpsi  =parval(n)
      if(parcha(n).eq.'jpsifi')jpsifi=parval(n)
      if(parcha(n).eq.'ko1ko2')ko1ko2=parval(n)
      if(parcha(n).eq.'ish   ')ish   =parval(n)
      if(parcha(n).eq.'ipagi ')ipagi =parval(n)
      if(parcha(n).eq.'ivi   ')ivi   =parval(n)
      if(parcha(n).eq.'bmaxim')bmaxim=parval(n)
      if(parcha(n).eq.'bminim')bminim=parval(n)
      if(parcha(n).eq.'istmax')istmax=parval(n)
      if(parcha(n).eq.'seedi ')seedi =parval(n)
      if(parcha(n).eq.'radiac')radiac=parval(n)
      if(parcha(n).eq.'radias')radias=parval(n)
      if(parcha(n).eq.'tmefor')tmefor=parval(n)
      if(parcha(n).eq.'amsiac')amsiac=parval(n)
      if(parcha(n).eq.'tmemin')tmemin=parval(n)
      if(parcha(n).eq.'tmemed')tmemed=parval(n)
      if(parcha(n).eq.'tmemax')tmemax=parval(n)
      if(parcha(n).eq.'numtme')numtme=parval(n)
      if(parcha(n).eq.'enenue')enenue=parval(n)
      if(parcha(n).eq.'enemue')enemue=parval(n)
      if(parcha(n).eq.'angmue')angmue=parval(n)
      if(parcha(n).eq.'imihis')imihis=parval(n)
      if(parcha(n).eq.'isphis')isphis=parval(n)
      if(parcha(n).eq.'raphdi')raphdi=parval(n)
3     continue
      endif
 
      if(isup.ne.1)write(ifmt,*)'initializations ...'
 
      nevnt=nevent
      if(seedi.ne.0.)call ranfst(seedi)
      seedc=seedi
      if(isphis.eq.1)labsys=0
 
      if(ichoic.eq.1)then
      gma=2
      if(matarg.gt.0)then
      enew=enenue-enemue
      gma=(prom+enew)/sqrt((prom+enew)**2-enew**2)
      endif
      if(tmemax.lt.0.)tmemax=tmemed*gma
      endif
 
      if(ichoic.eq.2.or.ichoic.eq.3.or.ichoic.eq.5)then
        call idmass(idproj,amproj)
        call idmass(idtarg,amtarg)
        if(pnll .lt. 0) then
          engy  = - pnll
          s=engy**2
          yhaha = 0.0
          ypjtl = alog(engy/amproj)
	  ytrgt = -alog(engy/amtarg)
        else
          engy=sqrt((sqrt(pnll**2+amproj**2)+amtarg)**2-pnll**2)
          s=engy**2
          yhaha=alog((sqrt(pnll**2+s)+pnll)/sqrt(s))
          ypjtl=alog((sqrt(pnll**2+amproj**2)+pnll)/amproj)
	  ytrgt=0.0
        end if
        pnllx=utpcm(engy,amproj,amtarg)
        if(tmemax.lt.0.)tmemax=tmemed*engy/2/prom
      else
        yhaha=0
        ypjtl=0
	ytrgt=0.0
      endif
 
      if(ichoic.eq.4.or.ichoic.eq.5)return
 
      if(ichoic.eq.1.or.ichoic.eq.2)then
      call jdecin(.false.)
      c=ptmx
      quama=0.
      call utquaf(sptf,nptf,xptf,qptfu,wptf,0.,.33*c,.66*c,c)
      quama=smas
      call utquaf(sptf,nptf,xptf,qptfs,wptf,0.,.33*c,.66*c,c)
      quama=uumas
      call utquaf(sptf,nptf,xptf,qptfuu,wptf,0.,.33*c,.66*c,c)
      quama=usmas
      call utquaf(sptf,nptf,xptf,qptfus,wptf,0.,.33*c,.66*c,c)
      quama=ssmas
      call utquaf(sptf,nptf,xptf,qptfss,wptf,0.,.33*c,.66*c,c)
      c=gaumx
      call utquaf(sgau,ngau,xgau,qgau,wgau,0.,.33*c,.66*c,c)
      endif
 
      if(ichoic.eq.2)then
      xcut=cutmss**2/s
      b=amin1(.05,xcut*500)
      a=amin1(.2*b,xcut*100)
      ipio=0
      if(iabs(idproj).lt.1000)ipio=1
      call utquaf(strcvl,nstru,xstru,qvap,wstru,0.,a,b,1.)
      qvapc=qvap(nstru)
      q1vapc=utmom(1,nstru,xstru,qvap)
      call utquaf(strcse,nstru,xstru,qsep,wstru,0.,a,b,1.)
      qsepc=qsep(nstru)
      q1sepc=utmom(1,nstru,xstru,qsep)
      ipio=0
      if(iabs(idtarg).lt.1000)ipio=1
      call utquaf(strcvl,nstru,xstru,qvat,wstru,0.,a,b,1.)
      qvatc=qvat(nstru)
      q1vatc=utmom(1,nstru,xstru,qvat)
      call utquaf(strcse,nstru,xstru,qset,wstru,0.,a,b,1.)
      qsetc=qset(nstru)
      q1setc=utmom(1,nstru,xstru,qset)
      avxqu=.5*(3*qvapc*q1vapc+(.5+.5*iaqu)*qsepc*q1sepc)
     */(3*qvapc+(.5+.5*iaqu)*qsepc)
     *     +.5*(3*qvatc*q1vatc+(.5+.5*iaqu)*qsetc*q1setc)
     */(3*qvatc+(.5+.5*iaqu)*qsetc)
      xcut=cutmss**2/s  /3
      b=amin1(.05,xcut*500)
      a=amin1(.2*b,xcut*100)
      ipio=0
      if(iabs(idproj).lt.1000)ipio=1
      call utquaf(strcvl,nstru,xstru,qvap,wstru,0.,a,b,1.)
      call utquaf(strcse,nstru,xstru,qsep,wstru,0.,a,b,1.)
      ipio=0
      if(iabs(idtarg).lt.1000)ipio=1
      call utquaf(strcvl,nstru,xstru,qvat,wstru,0.,a,b,1.)
      call utquaf(strcse,nstru,xstru,qset,wstru,0.,a,b,1.)
      c=ptmx
      call utquaf(sptj,nptj,xptj,qptj,wptj,0.,.33*c,.66*c,c)
      c=ptmx
      call utquaf(sptq,nptq,xptq,qptq,wptq,0.,.33*c,.66*c,c)
      call hmucex(qmust,nprbms,prbms)
      endif
 
      massnr=maproj
      rmproj=0
      if(ichoic.le.3.and.massnr.gt.1)then
      c=1.19*massnr**(1./3.)-1.61*massnr**(-1./3.)+fctrmx*.54
      rmproj=c
      call utquaf(sdensi,ndep,xdep,qdep,wdep,0.,.33*c,.66*c,c)
      endif
 
      massnr=matarg
      rmtarg=0
      if(ichoic.le.3.and.massnr.gt.1)then
      c=1.19*massnr**(1./3.)-1.61*massnr**(-1./3.)+fctrmx*.54
      rmtarg=c
      call utquaf(sdensi,ndet,xdet,qdet,wdet,0.,.33*c,.66*c,c)
      endif
 
      bmax=rmproj+rmtarg
      if(isup.ne.1)write(ifmt,*)'generate events ...'
      return
 
      entry shopar
      if(isup.ne.1.and.ish.ge.0)write(ifmt,102)(dol,i=1,69)
     * ,taunll,maxres,ptf,ptq,opfpt,ptmx,neqmn,iaqu,wtarg
     * ,wproj,qmust,sigma,core,fctrmx,ncolmx,labsys,irescl
     * ,tmemed,ntrymx,delmss,seedi,gaumx,bmaxim,pud,pspinl,pspinh,pispn
     * ,jpsi,cutmss,rstras,istmax,tensn,neqmx,ipagi,ndecay,pdiqua
     * ,parea,delrem,taumx,nsttau,sigj,jpsifi,bminim
     * ,radiac,tmemin,tmemax,numtme,tmefor,amsiac,enenue
102   format(' ',69a1
     */' $  taunll=',f7.3,'  maxres=',f7.3,'  ptf   =',f7.3
     *,'  ptq   =',f7.3,'   $'/' $  opfpt =',f7.3,'  ptmx  =',f7.3
     *,'  neqmn =',i7,'  iaqu  =',i7,'   $'/' $  wtarg =',f7.3
     *,'  wproj =',f7.3,'  qmust =',f7.3,'  sigma =',f7.3,'   $'
     */' $  core  =',f7.3,'  fctrmx=',f7.3,'  ncolmx=',i7
     *,'  labsys=',  i7,'   $'/' $  irescl=',i7,'  tmemed=',f7.3
     *,'  ntrymx=',i7,'  delmss=',f7.3,'   $'/' $  seedi =',d23.17
     *,'  gaumx =',f7.3,'  bmaxim=',f7.1,'   $'/' $  pud   =',f7.3
     *,'  pspinl=',f7.3,'  pspinh=',f7.3,'  pispn =',f7.3,'   $'
     */' $         ',7x,'  jpsi  =',i7,'  cutmss=',f7.3
     *,'  rstras=',f7.3,'   $'/' $  istmax=',i7,'  tensn =',f7.3
     *,'  neqmx =',i7,'  ipagi =',i7,'   $'/' $  ndecay=',i7
     *,'  pdiqua=',f7.3,'  parea =',f7.3,'  delrem=',f7.3,'   $'
     */' $  taumx =',f7.3,'  nsttau=',i7,'  sigj  =',f7.3
     *,'  jpsifi=',i7,'   $'/' $  bminim=',f7.1,'  radiac=',f7.3
     *,'  tmemin=',f7.3,'  tmemax=',f7.3,'   $'/' $  numtme=',i7
     *,'  tmefor=',f7.3,'  amsiac=',f7.3,'  enenue=',f7.3,'   $')
      if(isup.ne.1.and.ish.ge.0)write(ifmt,108)
     * enemue,angmue,smas,uumas,usmas,ssmas,pencox,pencoy
     * ,imihis,raphdi,radias,isphis
     *,(dol,i=1,69)
108   format(
     * ' $  enemue=',f7.3,'  angmue=',f7.3,'  smas  =',f7.3
     *,'  uumas =',f7.3,'   $'/' $  usmas =',f7.3,'  ssmas =',f7.3
     *,'  pencox=',f7.3,'  pencoy=',f7.3,'   $'/' $  imihis=',i7
     *,'  raphdi=',f7.3,'  radias=',f7.3,'  isphis=',i7  ,'   $'
     */' ',69a1)
      if(isup.ne.1.and.ish.ge.0)write(ifmt,107)avxqu,(dol,i=1,69)
107   format(
     * ' $  avxqu =',f7.5,'         ',7x
     *,'         ',7x,'         ',7x,'   $'/' ',69a1)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine astore
c     writes the results of a simulation on tape.
c     contains a description of the stored variables.
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (mxptl=30000)
c+fv
      common/paro3/ com, ytrgt, nzprj, nnprj, nztrg, nntrg
c-fv
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (mxjet=10000)
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
c ->rm
c     include PAWC common in order to initialise KUIP...
c
      common/pawc/hmemor(30000)
c ->rm
      integer egzinit
      integer egzout
+SELF, IF=INCL.
      include 'egz_evtzeb_com_inc'
      include 'egz_evtcod_com_inc'
      include 'egz_egctrl_com_inc'
c->rm
c	INTEGER EVTCOD,IEXTRA
c	REAL REXTRA,EVTVER
c	COMMON/EGCTRL/EVTCOD,EVTVER,REXTRA(50),IEXTRA(50)
c->rm
+SELF, IF=-INCL.
+SEQ,EVTZEB,EVTCOD,EGCTRL
+SELF
      logical first
c
      data first /.true./
      data evtcod/venus/
c
c     code...
c
      if(ichoic.eq.4.or.ichoic.eq.5)return
      if(nevt.ne.1)return
      if(imihis.eq.1)goto9999
      if(isphis.eq.1)goto9999
      lptl=3
 
      nptls=0                                                                   
      do 1 i=1,nptl                                                             
       nrptla(i)=-999                                                           
       if(istptl(i).gt.istmax) goto 1                                           
       nptls=nptls+1                                                            
       nrptla(i)=nrptl+nptls                                                    
1     continue
c
c     if first time write reaction information
c

      if(first) then
        first = .false.
c ->rm
c       Initialise KUIP in order to use kupryn...
c
        call hlimit(30000)
        call kuinit(10000)
c ->rm
        call mzebra(-3)
        z_input = .false.
        istat = egzinit()
        if(istat.ne.-1)then
          write(6,*)'Failed zebra file open'
          call exit
        end if
      end if
c
c     store event variables:
c 
c      write(ifdt)levt,nrevt,nptls,bimevt,kolevt,colevt,pmxevt
c     *,npjevt,ntgevt,nnprj,nzprj,nntrg,nztrg
cc 
cc     levt................... record label (levt=1)
cc     nrevt.................. event number
cc     nptls ................. number of (stored!) particles per event
cc     bimevt ................ impact parameter
cc     kolevt,colevt ......... real/effective # of collisions
cc     pmxevt ................ reference momentum
cc     npjevt,ntgevt ......... # of proj/targ participants  (stored as N*1000+Z)
c 
      if(ichoic.eq.3)return
c 
 
c     store particle variables:
c
      istat = egzout() 
      if(istat.ne.-1) then
        write(6,*)'Output error'
        call exit
      end if
c
c      write(ifdt)lptl,nrevt,nrptl,idptl(i),(pptl(l,i),l=1,5),ioptl
c     *,joptl,istptl(i),(xorptl(l,i),l=1,4),(tivptl(l,i),l=1,2)
c 
c     lptl ......... record label (lptl=3)
c     nrevt ........ event number
c     nrptl ........ particle number
c     idptl ........ particle id
c     pptl ......... 5-momentum (px,py,pz,en,mass) in lab
c     ioptl ........ origin (-999:parent not stored, -1,0:no parent)
c     joptl ........ origin (second parent)
c     istptl ....... stable (=0) or not (=1)
c     xorptl ....... space-time point (x,y,z,t) on ptl track (pp-cm)
c     tivptl ....... time interval of existence
 
4     continue
      return
 
9999  return
      end
 
c-----------------------------------------------------------------------
      subroutine atermi
c     terminates run
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      common/cifipr/ifipr
      character dcn*3
      character dol*1
      integer egzend
c
c...  Close output file
      istat = egzend()
      stop
      end
 
c-----------------------------------------------------------------------
      subroutine avenus
c     generates one venus event
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
      double precision seedf,seedc
      common /cseed/seedc
      if(ichoic.eq.4.or.ichoic.eq.5)return
      ipage=0
      bimevt=-1
      ntevt0=ntevt
3     ntevt=ntevt0
2     ntevt=ntevt+1
      if(ichoic.eq.1)call jetgen
      if(ichoic.eq.2.or.ichoic.eq.3)call nucoll
      if(ichoic.eq.1.or.ichoic.eq.2)call jetptl(ier)
      if(ier.eq.1)goto3
      if((ichoic.eq.2.or.ichoic.eq.3).and.nevt.eq.0)then
      bimevt=-1
      goto2
      endif
      if(jerr.gt.0)
     *call utstop('avenus: jerr > 0                        ')
      nrevt=nrevt+1
      call ranfgt(seedf)
      if(isup.ne.1.and.mod(nrevt,modsho).eq.0)
     *write(ifmt,*)nrevt,' events done.'
     *,'    final seed: ',seedf
      seedc=seedf
      return
      end
 
c-----------------------------------------------------------------------
      subroutine hahabs(proj,targ,iap,iat,iskip)
c     performs a basic (one color exchange) hadron-hadron collision
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (ndep=129,ndet=129,kollmx=2000)
      common/col/rmproj,rmtarg,bmax,bimp,koll,nproj,ntarg
     *,xdep(ndep),qdep(ndep),wdep(ndep),xdet(ndet),qdet(ndet),wdet(ndet)
     *,nrproj(kollmx),nrtarg(kollmx),distce(kollmx),nord(kollmx)
     *,coord(4,kollmx)
      common/ckol/kol
      parameter (nsi=6,nsix=100,nvmax=10)
      parameter (nha=nsix+2)
      real proj(nsi,nha),targ(nsi,nha),
     *strap(nsi,2),strat(nsi,2),strlp(nsi,2),strlt(nsi,2)
     *,strpwo(nsi,2),strtwo(nsi,2)
      real siap(nsi),sibp(nsi),silp(nsi),sixp(nsi,nsix),
     *siat(nsi),sibt(nsi),silt(nsi),sixt(nsi,nsix)
     *,siapwo(nsi),sibpwo(nsi),siatwo(nsi),sibtwo(nsi)
      common /cnew/kotri,newico,newcol
     */clead/lead,cooav3,cooav4
     */cnce/nces,ncolex
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
      character xflap*3,xflbp*3,xflat*3,xflbt*3
      integer icvp(2),icvt(2)
      r=rangen()
      ntry=0
      call utremb(proj,targ)
      goto9
 
9994  iret=0
      call utrest(proj,targ)
9     do 8 n=1,nsi
      do 8 nx=1,nsix
      sixp(n,nx)=0
8     sixt(n,nx)=0
      call utkprj(proj,kmaxp)
      call utkprj(targ,kmaxt)
      if(ish.ge.1)then
      write(ifch,100)((proj(i,j),i=1,nsi),j=2,kmaxp+2)
      write(ifch,102)((targ(i,j),i=1,nsi),j=2,kmaxt+2)
      endif
      if(iskip.eq.1)goto9999
 
9997  call hdecmp(proj,silp,sixp)
      call hdecmp(targ,silt,sixt)
1     icvp(1)=nint(proj(5,1))
      icvp(2)=nint(proj(6,1))
      icvt(1)=nint(targ(5,1))
      icvt(2)=nint(targ(6,1))
      call hapapa(silp,iflap,xflap,ptap,iflbp,xflbp,ptbp,nqaqp,icvp)
      call hapapa(silt,iflat,xflat,ptat,iflbt,xflbt,ptbt,nqaqt,icvt)
      if(nqaqp*nqaqt.eq.-1)goto1
9998  ntry=ntry+1
      if(ntry.gt.ntrymx+1)then
      iskip=1
      goto9999
      endif
      call hdecmp(proj,silp,sixp)
      call hdecmp(targ,silt,sixt)
      call hastfs(silp,sixp,iflap,xflap,ptap
     *,silt,sixt,iflbt,xflbt,ptbt,strap,iret,1)
      if(iret.eq.1)then
      iskip=1
      goto9999
      endif
      if(iret.eq.2)goto9997
      call hastfs(silt,sixt,iflat,xflat,ptat
     *,silp,sixp,iflbp,xflbp,ptbp,strat,iret,2)
      if(iret.eq.1)then
      iskip=1
      goto9999
      endif
      if(iret.eq.2)goto9997
      call hastfc(silp,sixp,silt,sixt,ier)
      if(ier.eq.1.and.ntry.le.ntrymx)then
      if(ish.ge.1)write(ifch,*)'redo hastfs'
      goto9998
      endif
      if(ier.eq.2.and.ntry.le.ntrymx)then
      if(ish.ge.1)write(ifch,*)'redo hapapa'
      goto9997
      endif
      if(ier.gt.0)iskip=1
9999  continue
      if(iskip.eq.1)then
      if(ish.ge.1)write(ifch,*)'skip'
      colevt=colevt-1./ncolex
      call hdecmp(proj,silp,sixp)
      call hdecmp(targ,silt,sixt)
      call hastfw(silp,sixp,silt,sixt)
      endif
      call hastfl(silp,sixp,strlp)
      call hastfl(silt,sixt,strlt)
 
      if(iskip.eq.1)goto9995
      proj(5,1)=icvp(1)
      proj(6,1)=icvp(2)
      targ(5,1)=icvt(1)
      targ(6,1)=icvt(2)
      call utksix(sixp,kmaxpn)
      call utksix(sixt,kmaxtn)
      kmxp=min0(kmaxpn+1,nsix)
      kmxt=min0(kmaxtn+1,nsix)
      do 5 n=1,nsi
      proj(n,2)=strlp(n,1)
      targ(n,2)=strlt(n,1)
      do 6 j=1,kmxp
6     proj(n,2+j)=sixp(n,j)
      do 7 j=1,kmxt
7     targ(n,2+j)=sixt(n,j)
5     continue
      lead=0
      isplt=0
11    call hastpr(strap,isplt)
      if(isplt.eq.-1)goto9994
      if(isplt.gt.0)goto11
      isplt=0
12    call hastpr(strat,isplt)
      if(isplt.eq.-1)goto9994
      if(isplt.gt.0)goto12
      if(kmaxpn.gt.kmaxp)then
      proj(3,1)=proj(3,1)+coord(3,kol)
      proj(4,1)=proj(4,1)+coord(4,kol)
      endif
      if(kmaxtn.gt.kmaxt)then
      targ(3,1)=targ(3,1)+coord(3,kol)
      targ(4,1)=targ(4,1)+coord(4,kol)
      endif
      kmaxp=kmaxpn
      kmaxt=kmaxtn
9995  lead=1
      if(iap.eq.1)then
      if(kmaxp.gt.0)then
      cooav3=proj(3,1)/kmaxp
      cooav4=proj(4,1)/kmaxp
      else
      cooav3=coord(3,kol)
      cooav4=coord(4,kol)
      endif
      isplt=0
13    call hastpr(strlp,isplt)
      if(isplt.eq.-1.and.iskip.eq.1)goto9996
      if(isplt.eq.-1)goto9994
      if(isplt.gt.0)goto13
      endif
      if(iat.eq.1)then
      if(kmaxt.gt.0)then
      cooav3=targ(3,1)/kmaxt
      cooav4=targ(4,1)/kmaxt
      else
      cooav3=coord(3,kol)
      cooav4=coord(4,kol)
      endif
      isplt=0
14    call hastpr(strlt,isplt)
      if(isplt.eq.-1.and.iskip.eq.1)goto9996
      if(isplt.eq.-1)goto9994
      if(isplt.gt.0)goto14
      endif
      if(.not.(ish.ge.1))return
 
      write(ifch,100)((proj(i,j),i=1,nsi),j=2,kmaxp+2)
      write(ifch,102)((targ(i,j),i=1,nsi),j=2,kmaxt+2)
100   format(' proj:',4f11.5,2f8.0/
     *   ,20('      ',4f11.5,2f8.0/))
102   format(' targ:',4f11.5,2f8.0/
     *   ,50('      ',4f11.5,2f8.0/))
101   format('  ',i3,'. trial')
      return
 
9996  continue
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('hahabs')
      write(ifch,*)'*****  skip impossible, strl cant be stored'
      endif
      if(ish.ge.1)write(ifch,*)' '
      iskip=2
      return
      end
 
c-----------------------------------------------------------------------
      subroutine hapapa(sil,ifla,xfla,pta,iflb,xflb,ptb,nqaq,icv)
c     determines momenta and flavor of participating partons in a hadron
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (nsi=6,nsix=100,nflav=6)
      parameter (nha=nsix+2)
      real sia(nsi),sib(nsi),sil(nsi),probab(nflav),probsu(nflav+1)
      integer jv0(nflav),jc(nflav,2),jcx(nflav),id(2)
     *,icv(2),jcv(nflav,2)
      parameter (nptq=129)
      common /cptq/xptq(nptq),qptq(nptq),wptq(nptq)
      parameter (nstru=2049)
      common/stru/xstru(nstru),wstru(nstru)
     *,qvap(nstru),qvat(nstru),qsep(nstru),qset(nstru)
      common /cnew/kotri,newico,newcol
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
      character xfla*3,xflb*3,chpt*1
 
      sgn=sign(1.,sil(3))
      if(sgn.gt.0.)qvalc=qvapc
      if(sgn.gt.0.)qseac=qsepc
      if(sgn.lt.0.)qvalc=qvatc
      if(sgn.lt.0.)qseac=qsetc
      if(sgn.gt.0.)chpt='p'
      if(sgn.lt.0.)chpt='t'
      if(sgn.gt.0.)w=wproj
      if(sgn.lt.0.)w=wtarg
      call iddeco(icv,jcv)
      nvq=0
      nva=0
      do 12 i=1,nflav
      nvq=nvq+jcv(i,1)
12    nva=nva+jcv(i,2)
      do 13 i=1,2
13    id(i)=nint(sil(4+i))
      call iddeco(id,jc)
      nqu=0
      naq=0
      do 11 i=1,nflav
      nqu=nqu+jc(i,1)
11    naq=naq+jc(i,2)
      neq=nqu-naq
      nqaq=0
      if(rangen().gt.w)then
      pq=1
      pa=1
      if(neq.le.neqmn)pq=0
      if(neq.ge.neqmx)pa=0
      sum=(nvq*pq+nva*pa*iaqu)*qvalc+qseac*(.5*pq+.5*pa*iaqu)
      if(sum.eq.0.)goto14
      pvq=nvq*pq*qvalc/sum
      pva=nva*pa*iaqu*qvalc/sum
      psq=.5*pq*qseac/sum
      psa=.5*pa*iaqu*qseac/sum
      r=rangen()
      ival=0
      if(r.lt.pvq+pva)ival=1
      nqaq=-1
      if(ival.eq.1.and.r.lt.pvq)nqaq=1
      if(ival.eq.0.and.r.lt.pvq+pva+psq)nqaq=1
      if(nqu-naq-nqaq.lt.neqmn)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('hapapa')
      write(ifch,*)'*****  neq < neqmn'
      write(ifch,*)'pvq/a psq/a:',pvq,pva,psq,psa
      write(ifch,*)'nqaq:',nqaq
      endif
      if(ish.ge.1)write(ifch,*)' '
      nqaq=0
      endif
      if(nqu-naq-nqaq.gt.neqmx)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('hapapa')
      write(ifch,*)'*****  neq > neqmx'
      write(ifch,*)'pvq/a psq/a:',pvq,pva,psq,psa
      write(ifch,*)'nqaq:',nqaq
      endif
      if(ish.ge.1)write(ifch,*)' '
      nqaq=0
      endif
      if(nqu-naq-nqaq.lt.neqmn)
     *call utstop('hapapa: neq.lt.neqmn                    ')
      if(nqu-naq-nqaq.gt.neqmx)
     *call utstop('hapapa: neq.gt.neqmx                    ')
      endif
14    continue
      if(nqaq.eq.0)ival=0
 
c     quark
c     -----
           xfla='---'
           if(nqaq.ge.0)then
      su=0
      do 20 i=1,nflav
      probab(i)=0
      if(ival.eq.1)probab(i)=jcv(i,1)
      if(ival.eq.0.and.i.le.2)probab(i)=1
      if(ival.eq.0.and.i.eq.3)probab(i)=rstras
20    su=su+probab(i)
      probsu(1)=0
      do 30 i=1,nflav
30    probsu(i+1)=probsu(i)+probab(i)/su
      r=rangen()
      do 50 i=1,nflav
      if(probsu(i).le.r.and.r.le.probsu(i+1))ifla=i
50    continue
      if(ival.eq.1)xfla='va'//chpt
      if(ival.eq.0)xfla='se'//chpt
      if(ival.eq.1)jcv(ifla,1)=jcv(ifla,1)-1
      pta=utinvt(nptq,xptq,qptq,rangen()*qptq(nptq))
           endif
 
c     antiquark
c     ---------
           xflb='---'
           if(nqaq.le.0)then
      su=0
      do 60 i=1,nflav
      probab(i)=0
      if(ival.eq.1)probab(i)=jcv(i,2)
      if(ival.eq.0.and.i.le.2)probab(i)=1
      if(ival.eq.0.and.i.eq.3)probab(i)=rstras
60    su=su+probab(i)
      probsu(1)=0
      do 70 i=1,nflav
70    probsu(i+1)=probsu(i)+probab(i)/su
      r=rangen()
      do 80 i=1,nflav
      if(probsu(i).le.r.and.r.le.probsu(i+1))iflb=i
80    continue
      if(nqaq.eq.0)iflb=ifla
      if(ival.eq.1)xflb='va'//chpt
      if(ival.eq.0)xflb='se'//chpt
      if(ival.eq.1)jcv(iflb,2)=jcv(iflb,2)-1
      ptb=utinvt(nptq,xptq,qptq,rangen()*qptq(nptq))
           endif
 
      call idenco(jcv,icv,ireten)
      if(ireten.eq.1)
     *call utstop('hapapa: idenco ret code = 1             ')
      if(nqaq.eq.0)ifla=-ifla
      if(nqaq.eq.0)iflb=-iflb
      return
      end
 
c-----------------------------------------------------------------------
      subroutine hasi(qaq,sil,ifl,xfl,pt0,si,iret,jord)
c     determines string ingredients (=jets)
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
c+ fv
      common/paro3/ com
c-fv
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      common/cnsta/pi,prom,piom,ainfin
      character xfl*3,qaq*5
      parameter (nsi=6,nflav=6)
      real sil(nsi),si(nsi)
      integer jc(nflav,2),id(2),ic(2)
      iret=0
      ifla=iabs(ifl)
      do 10 j=1,nsi
10    si(j)=0
      if(xfl.eq.'---')return
      sgn=sign(1.,sil(3))
      do 1 i=1,2
1     id(i)=nint(sil(4+i))
      call iddeco(id,jc)
      ntry=0
9999  ntry=ntry+1
      if(ntry.gt.ntrymx)then
      iret=1
      return
      endif
      pt=pt0
      if(jord.eq.1.and.qaq.eq.'quark')ams=amproj
      if(jord.eq.2.and.qaq.eq.'antiq')ams=amproj
      if(jord.eq.2.and.qaq.eq.'quark')ams=amtarg
      if(jord.eq.1.and.qaq.eq.'antiq')ams=amtarg
      enll=sqrt(ams**2+pnllx**2)
      if(pt.gt.enll)pt=rangen()*enll
51    en=ranstc(xfl)*enll
      if(pt.gt.en.and.rangen().le.pencox)goto51
      if(pt.gt.en.and.rangen().le.pencoy)en=pt+ranstc(xfl)*(enll-pt)
      if(pt.gt.en)pt=rangen()*en
      phi=2.*pi*rangen()
      si(1)=pt*cos(phi)
      si(2)=pt*sin(phi)
      si(3)=sgn*sqrt(en**2-pt**2)
c+fv
      si3com=si(3)+com*sgn
      if((sil(3)-si3com)*sil(3).lt.0.)then
c-fv
c      if((sil(3)-si(3))*sil(3).lt.0.)then
      if(ish.ge.4)write(ifch,*)'sil,si,enll,en',sil,si,enll,en
      goto9999
      endif
      si(4)=sqrt(si(1)**2+si(2)**2+si(3)**2)
      if(qaq.eq.'quark')si(5)=10**(nflav-ifla)
      if(qaq.eq.'antiq')si(6)=10**(nflav-ifla)
      sil(1)=sil(1)-si(1)
      sil(2)=sil(2)-si(2)
      sil(3)=sil(3)-si(3)
      sil(4)=sqrt(sil(1)**2+sil(2)**2+sil(3)**2)
      if(ifl.gt.0)then
      if(qaq.eq.'quark'.and.xfl(1:2).eq.'va')jc(ifla,1)=jc(ifla,1)-1
      if(qaq.eq.'antiq'.and.xfl(1:2).eq.'va')jc(ifla,2)=jc(ifla,2)-1
      if(qaq.eq.'quark'.and.xfl(1:2).eq.'se')jc(ifla,2)=jc(ifla,2)+1
      if(qaq.eq.'antiq'.and.xfl(1:2).eq.'se')jc(ifla,1)=jc(ifla,1)+1
      else
      if(qaq.eq.'quark'.and.jord.eq.1)jc(ifla,2)=jc(ifla,2)+1
      if(qaq.eq.'antiq'.and.jord.eq.2)jc(ifla,2)=jc(ifla,2)-1
      if(qaq.eq.'antiq'.and.jord.eq.1)jc(ifla,1)=jc(ifla,1)+1
      if(qaq.eq.'quark'.and.jord.eq.2)jc(ifla,1)=jc(ifla,1)-1
      endif
      if(jc(ifla,1).eq.10.or.jc(ifla,2).eq.10)goto9998
      call idenco(jc,ic,ireten)
      if(ireten.eq.1)
     *call utstop('hasi  : idenco ret code = 1             ')
      sil(5)=ic(1)
      sil(6)=ic(2)
      return
9998  iret=2
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('hasi  ')
      write(ifch,*)'*****  jc(,)=10'
      write(ifch,*)jc
      endif
      if(ish.ge.1)write(ifch,*)' '
      return
      end
 
c-----------------------------------------------------------------------
      subroutine hastfc(silp,sixp,silt,sixt,ier)
c     checks long strings
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (nsi=6,nsix=100)
      real silp(nsi),sixp(nsi,nsix),silt(nsi),sixt(nsi,nsix),si(nsi)
     *,siz(nsi)
      integer ic(2)
      ier=0
      call utksix(sixp,kmaxp)
           if(kmaxp.gt.0.)then
      call utasi(silp,sixp,si,ifail,'prt-ys')
      ier=ifail
      if(ifail.ne.0)return
           endif
      call utksix(sixt,kmaxt)
           if(kmaxt.gt.0.)then
      call utasi(silt,sixt,si,ifail,'prt-ys')
      ier=ifail
      if(ifail.ne.0)return
           endif
      entry hastfw(silp,sixp,silt,sixt)
      if(.not.(ish.ge.1))return
      call utksix(sixp,kmaxp)
      call utksix(sixt,kmaxt)
      write(ifch,*)'  '
      write(ifch,103)silp,((sixp(i,j),i=1,nsi),j=1,kmaxp)
      write(ifch,103)silt,((sixt(i,j),i=1,nsi),j=1,kmaxt)
      write(ifch,*)'  '
103   format(' sil: ',4f11.5,2f8.0/,' six: ',4f11.5,2f8.0/
     *,50('      ',4f11.5,2f8.0/))
      return
      end
 
c-----------------------------------------------------------------------
      subroutine hastfl(sil,six,strl)
c     forms a leading string
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (nsi=6,nsix=100,nflav=6)
      real sil(nsi),six(nsi,nsix),strl(nsi,2),siz(nsi),si(nsi)
      integer jc(nflav,2),jcp(nflav,2),ic(2)
      common/cnsta/pi,prom,piom,ainfin
 
      do 5 i=1,nsi
5     siz(i)=0
 
      do 100 n=1,nsi
      strl(n,1)=sil(n)
100   strl(n,2)=0
      call utksix(six,kmax)
      if(kmax.eq.0)return
 
      call utasi(siz,six,si,ifail,'prt-no')
      if(ifail.eq.2)
     *call utstop('hastfl: utasi ret code = 2              ')
      do 110 n=1,nsi
110   strl(n,2)=si(n)
 
      return
      end
 
c-----------------------------------------------------------------------
      subroutine hastfs(sila,sixa,ifla,xfla,pta
     *,silb,sixb,iflb,xflb,ptb,str,iret,jord)
c     forms a short (=q-qbar) string
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      parameter (nsi=6,nsix=100)
      real sila(nsi),sixa(nsi,nsix),silb(nsi),sixb(nsi,nsix)
     *,sia(nsi),sib(nsi),str(nsi,2),sila0(nsi),silb0(nsi),si(nsi)
     *,six(nsi)
      character xfla*3,xflb*3
      integer ic(2)
 
      iret=0
      do 50 n=1,nsi
      str(n,1)=0
50    str(n,2)=0
      call utksix(sixa,kmaxa)
      call utksix(sixb,kmaxb)
 
      do 90 n=1,nsi
      sila0(n)=sila(n)
90    silb0(n)=silb(n)
      kmaxa0=kmaxa
      kmaxb0=kmaxb
      ntry=0
9999  ntry=ntry+1
      if(ntry.gt.3*ntrymx)goto9001
      do 95 n=1,nsi
      sila(n)=sila0(n)
95    silb(n)=silb0(n)
      kmaxa=kmaxa0
      kmaxb=kmaxb0
      call hasi('quark',sila,ifla,xfla,pta,sia,iret,jord)
      if(iret.eq.1)goto9001
      if(iret.eq.2)goto9002
      call hasi('antiq',silb,iflb,xflb,ptb,sib,iret,jord)
      if(iret.eq.1)goto9001
      if(iret.eq.2)goto9002
           if(xfla.ne.'---'.and.xflb.ne.'---')then
      s=(sia(4)+sib(4))**2-(sia(1)+sib(1))**2
     *-(sia(2)+sib(2))**2-(sia(3)+sib(3))**2
      if(s.lt.piom**2)goto9999
      do 70 n=1,nsi
      str(n,1)=sia(n)
70    str(n,2)=sib(n)
           elseif(xfla.ne.'---'.and.xflb.eq.'---')then
      if(kmaxb+1.gt.nsix)
     *call utstop('hastfs: nsix too small                  ')
      do 60 n=1,nsi
      sixb(n,kmaxb+1)=sia(n)
      if(kmaxb+2.le.nsix)sixb(n,kmaxb+2)=0
60    continue
      kmaxb=kmaxb+1
           elseif(xfla.eq.'---'.and.xflb.ne.'---')then
      if(kmaxa+1.gt.nsix)
     *call utstop('hastfs: nsix too small                  ')
      do 80 n=1,nsi
      sixa(n,kmaxa+1)=sib(n)
      if(kmaxa+2.le.nsix)sixa(n,kmaxa+2)=0
80    continue
      kmaxa=kmaxa+1
           elseif(xfla.eq.'---'.and.xflb.eq.'---')then
c     no action
           else
      call utstop('hastfs: if/else error                   ')
           endif
           if(kmaxa.gt.0.)then
      if(jord.eq.1)id=idproj
      if(jord.eq.2)id=idtarg
      amss=prom
      if(iabs(id).lt.1000)amss=piom
      do 120 n=1,4
      six(n)=0
      do 120 k=1,kmaxa
120   six(n)=six(n)+sixa(n,k)
      s=(sila(4)+six(4))**2-(sila(1)+six(1))**2
     *-(sila(2)+six(2))**2-(sila(3)+six(3))**2
      if(s.lt.amss**2)goto9999
           endif
           if(kmaxb.gt.0.)then
      if(jord.eq.1)id=idtarg
      if(jord.eq.2)id=idproj
      amss=prom
      if(iabs(id).lt.1000)amss=piom
      do 110 n=1,4
      six(n)=0
      do 110 k=1,kmaxb
110   six(n)=six(n)+sixb(n,k)
      s=(silb(4)+six(4))**2-(silb(1)+six(1))**2
     *-(silb(2)+six(2))**2-(silb(3)+six(3))**2
      if(s.lt.amss**2)goto9999
           endif
 
      if(ish.ge.1)write(ifch,102)sia,xfla,sib,xflb
102   format(' sia: ',4f11.5,2f8.0,2x,a3
     *      /' sib: ',4f11.5,2f8.0,2x,a3)
      return
 
9002  continue
      if(ish.ge.1)write(ifch,*)'redo hapapa'
      if(ish.ge.1)write(ifch,*)' '
      iret=2
      return
9001  iret=1
      return
      end
 
c-----------------------------------------------------------------------
      subroutine hastpr(stro,isplt)
c     processes a string
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (nsi=6)
      real str(nsi,2),strp(nsi,2),stro(nsi,2)
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (mxjet=10000)
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
      parameter (ndep=129,ndet=129,kollmx=2000)
      common/col/rmproj,rmtarg,bmax,bimp,koll,nproj,ntarg
     *,xdep(ndep),qdep(ndep),wdep(ndep),xdet(ndet),qdet(ndet),wdet(ndet)
     *,nrproj(kollmx),nrtarg(kollmx),distce(kollmx),nord(kollmx)
     *,coord(4,kollmx)
      parameter (nflav=6)
      integer jc1(nflav,2),jc2(nflav,2),jc(nflav,2),ic1(2),ic2(2),ic(2)
     *,icx(2),icy(2),ic1x(2),ic2x(2)
      parameter (ngau=129)
      common /cgau/xgau(ngau),qgau(ngau),wgau(ngau)
     */clead/lead,cooav3,cooav4 /ckol/kol
      real p1(4),p2(4)
      if(ish.ge.1.and.isplt.gt.0)
     *write(ifch,*)'process remainder string:'
      zero=0.
      if(ish.ge.2)then
      write(ifch,105)(stro(i,1),i=1,4),zero,(nint(stro(i,1)),i=5,6)
     *              ,(stro(i,2),i=1,4),zero,(nint(stro(i,2)),i=5,6)
105   format('   str  ',4x,5f7.2,2x,i7,1x,i7/12x,5f7.2,2x,i7,1x,i7)
      endif
 
c     split sgl-sgl strings
c     ---------------------
      do 3 i=1,2
      ic1(i)=nint(stro(4+i,1))
3     ic2(i)=nint(stro(4+i,2))
      call idcomi(ic1,ic1x)
      call idcomi(ic2,ic2x)
      ia1=ic1x(1)+ic1x(2)
      ia2=ic2x(1)+ic2x(2)
      if(ia1.eq.0.and.ia2.eq.0)then
      if(ish.ge.1)write(ifch,*)'zero string'
      if(ish.ge.1)write(ifch,*)' '
      isplt=0
      return
      endif
      do 4 i=1,2
      stro(4+i,1)=ic1x(i)
4     stro(4+i,2)=ic2x(i)
      if(idsgl(ic1x,'gen-ys','cmp-ys').eq.1
     *.and.idsgl(ic2x,'gen-ys','cmp-ys').eq.1)then
      if(ish.ge.2)then
      write(ifch,*)'sgl-sgl string detected'
      write(ifch,*)'ic12: ',ic1,ic2
      write(ifch,*)'ic12x:',ic1x,ic2x
      idsg1=idsgl(ic1x,'gen-ys','cmp-ys')
      idsg2=idsgl(ic2x,'gen-ys','cmp-ys')
      write(ifch,*)'sgl12:',idsg1,idsg2
      endif
      call jsplit(stro,str,ier)
      if(ier.eq.3)then
      isplt=-1
      return
      endif
      if(ier.gt.0)goto9998
      isplt=isplt+1
      if(ier.eq.-1)return
      kin=1
      else
      kin=0
      if(isplt.gt.0)kin=1
      do 5 n=1,nsi
      do 5 i=1,2
5     str(n,i)=stro(n,i)
      isplt=0
      endif
 
c     add two jets
c     ------------
      do 1 i=1,2
      ic1(i)=nint(str(4+i,1))
1     ic2(i)=nint(str(4+i,2))
      call idcomi(ic1,ic1x)
      call idcomi(ic2,ic2x)
      ia1=ic1x(1)+ic1x(2)
      ia2=ic2x(1)+ic2x(2)
      if(ia1.eq.0.and.ia2.eq.0)
     *call utstop('hastpr: str=0                           ')
      call iddeco(ic1x,jc1)
      call iddeco(ic2x,jc2)
      n1=0
      n2=0
      do 30 n=1,nflav
      do 30 i=1,2
      n1=n1+jc1(n,i)
      n2=n2+jc2(n,i)
30    jc(n,i)=jc1(n,i)+jc2(n,i)
      call idenco(jc,ic,ireten)
      if(ireten.eq.1)
     *call utstop('hastpr: idenco ret code = 1             ')
      idstr=idtra(ic,0,0,3)
      call idmima(ic,amstr,iemima,'cmp-no','prt-no')
      if(iemima.gt.0)goto9999
 
c     determine rot
c     -------------
      px=str(1,1)+str(1,2)
      py=str(2,1)+str(2,2)
      pz=str(3,1)+str(3,2)
      e =str(4,1)+str(4,2)
      do 10 i=1,4
      p1(i)=str(i,1)
10    p2(i)=str(i,2)
      if(ia1.ne.0.and.ia2.ne.0)then
      call utlobo(1,px,py,pz,e,p1(1),p1(2),p1(3),p1(4))
      call utlobo(1,px,py,pz,e,p2(1),p2(2),p2(3),p2(4))
      else
      do 12 i=1,4
      p1(i)=0.
12    p2(i)=0.
      endif
      if(ish.ge.2)then
      write(ifch,107)(p1(i),i=1,4),zero,ic1x
      write(ifch,107)(p2(i),i=1,4),zero,ic2x
107   format('   jet  ',4x,5f7.2,2x,i7,1x,i7)
      endif
      if(p1(3).ne.0.)then
      dircn=p1(3)/abs(p1(3))
      else
      dircn=1
      endif
 
c     mass adjustment
c     ---------------
      p=sqrt(px**2+py**2+pz**2)
      am=sqrt((e-p)*(e+p))
      call idres(idstr,am,idstrr,iadj)
      idstr=idstrr
      e=sqrt(p**2+am**2)
      if((am-amstr)/am.le.-1e-3.and.am.lt.amstr-1e-3)then
      call idcomi(ic,icx)
      if(ic(1).ne.icx(1))goto9994
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('hastpr')
      write(ifch,*)'*****  m < m_min.     redo collision'
      write(ifch,*)'ic,m,m_min: ',ic,am,amstr
      endif
      if(ish.ge.1)write(ifch,*)' '
      isplt=-1
      return
      endif
 
c     write /cstr/
c     ------------
      nstr=nstr+1
      if(nstr.gt.mxstr)
     *call utstop('hastpr: nstr>mxstr                      ')
      icstr(1,nstr)=ic1x(1)
      icstr(2,nstr)=ic1x(2)
      icstr(3,nstr)=ic2x(1)
      icstr(4,nstr)=ic2x(2)
      pstr(1,nstr)=px
      pstr(2,nstr)=py
      pstr(3,nstr)=pz
      pstr(4,nstr)=e
      pstr(5,nstr)=am
      rotstr(1,nstr)=p1(1)
      rotstr(2,nstr)=p1(2)
      rotstr(3,nstr)=p1(3)
      if(p1(1).eq.0..and.p1(2).eq.0..and.p1(3).eq.0.)
     *rotstr(3,nstr)=1.
      do 2 i=1,4
2     xorstr(i,nstr)=coord(i,kol)
      if(lead.eq.1)then
      xorstr(3,nstr)=cooav3
      xorstr(4,nstr)=cooav4
      endif
      kinstr(nstr)=kin
      iorstr(nstr)=-kol
      amsac=amsac+am
      if(ish.ge.1)
     *write(ifch,106)nstr,(pstr(i,nstr),i=1,5),ic
106   format(' /cstr/ ',i4,5f7.2,2x,i7,1x,i7/)
      return
 
9994  call jstrip(1,2,ic,idh,icx,iestrp,1,1)
      if(iestrp.gt.0)
     *call utstop('hastpr: jstrip error code > 0           ')
      isp=alog10(1.001*(ic(1)-icx(1)))
      istrp=nflav-isp
      if(jc1(istrp,1).gt.0.and.jc2(istrp,2).gt.0)then
      jc1(istrp,1)=jc1(istrp,1)-1
      jc2(istrp,2)=jc2(istrp,2)-1
      elseif(jc1(istrp,2).gt.0.and.jc2(istrp,1).gt.0)then
      jc1(istrp,2)=jc1(istrp,2)-1
      jc2(istrp,1)=jc2(istrp,1)-1
      else
      goto9995
      endif
      call idenco(jc1,ic1,ireten)
      if(ireten.eq.1)
     *call utstop('hastpr: idenco ret code = 1             ')
      call idenco(jc2,ic2,ireten)
      if(ireten.eq.1)
     *call utstop('hastpr: idenco ret code = 1             ')
      stro(5,1)=ic1(1)
      stro(6,1)=ic1(2)
      stro(5,2)=ic2(1)
      stro(6,2)=ic2(2)
      isplt=isplt+1
      if(ish.ge.1)write(ifch,*)'string compactified'
      return
9995  jerr=jerr+1
      if(ish.ge.1)write(ifch,*)' '
      write(ifch,*)'***** error in hastpr: strip doesnt work'
      write(ifch,105)(stro(i,1),i=1,4),zero,(nint(stro(i,1)),i=5,6)
      write(ifch,105)(stro(i,2),i=1,4),zero,(nint(stro(i,2)),i=5,6)
      write(ifch,*)'istrp=',istrp
      write(ifch,*)'ic=',ic,'   icx=',icx
      write(ifch,*)'jc1:'
      write(ifch,*)jc1
      write(ifch,*)'jc2:'
      write(ifch,*)jc2
      if(ish.ge.1)write(ifch,*)' '
      return
9998  jerr=jerr+1
      if(ish.ge.1)write(ifch,*)' '
      write(ifch,*)'***** error in hastpr: jsplit err code:',ier
      write(ifch,105)(stro(i,1),i=1,4),zero,(nint(stro(i,1)),i=5,6)
      write(ifch,105)(stro(i,2),i=1,4),zero,(nint(stro(i,2)),i=5,6)
      call utstop('hastpr: jsplit err code > 0             ')
9999  jerr=jerr+1
      if(ish.ge.1)write(ifch,*)' '
      write(ifch,*)'***** error in hastpr: idmima err code > 0'
      write(ifch,*)'string code = ',ic1x,ic2x
      write(ifch,*)'added string code = ',ic
      call utstop('hastpr: idmima err code > 0             ')
      end
 
c-----------------------------------------------------------------------
      subroutine hdecmp(bar,sil,six)
c     decomposes bar into sil,six
c-----------------------------------------------------------------------
      parameter (nsi=6,nsix=100)
      parameter (nha=nsix+2)
      real bar(nsi,nha),sil(nsi),six(nsi,nsix)
      do 1 n=1,nsi
1     sil(n)=bar(n,2)
      do 3 m=1,nsix
      sixsqr=0
      do 2 n=1,nsi
      six(n,m)=bar(n,2+m)
2     sixsqr=sixsqr+six(n,m)**2
      if(sixsqr.le.1e-5)return
3     continue
      return
      end
 
c-----------------------------------------------------------------------
      subroutine hmucex(z,n,prbms)
c     returns the array prbms containing accumulated prob for
c     multi color exchange
c-----------------------------------------------------------------------
      real prbms(n)
      character typ*3
      typ='exp'
           if(typ.eq.'poi')then
      prob=exp(-z)
      prbms(1)=prob
      do 1 i=2,n
      prob=prob*z/(i-1)
1     prbms(i)=prbms(i-1)+prob
           elseif(typ.eq.'exp')then
      a=z/(z+1)
      prob=1-a
      prbms(1)=prob
      do 2 i=2,n
      prob=prob*a
2     prbms(i)=prbms(i-1)+prob
           endif
      return
      end
 
c-----------------------------------------------------------------------
      subroutine hrescl(j1,j2,psum,ifail)
c     rescales string momenta
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      dimension psum(5),padd(5),beta(3)
      data errlim/.001/
      ifail=1
      if(j1.ge.j2) return
      do 100 k=1,5
100   padd(k)=0.
      do 110 j=j1,j2
      do 110 k=1,5
      padd(k)=padd(k)+pstr(k,j)
110   continue
      ifail=2
      if(padd(5).ge.psum(5)) return
      padd(5)=padd(4)**2-padd(1)**2-padd(2)**2-padd(3)**2
      ifail=3
      if(padd(5).le.0) return
      padd(5)=sqrt(padd(5))
      do 120 k=1,3
120   beta(k)=-padd(k)/padd(5)
      gamma=padd(4)/padd(5)
 
c     boost strings to rest
c     ---------------------
200   continue
      do 210 j=j1,j2
      bp=0.
      do 220 k=1,3
220   bp=bp+pstr(k,j)*beta(k)
      do 230 k=1,3
230   pstr(k,j)=pstr(k,j)+beta(k)*pstr(4,j)
     $+beta(k)*bp/(gamma+1.)
      pstr(4,j)=gamma*pstr(4,j)+bp
210   continue
      if(ifail.eq.0) return
 
c     rescale momenta in rest frame
c     -----------------------------
      scal=1.
      do 301 ipass=1,200
      sum=0.
      do 310 j=j1,j2
      do 320 k=1,3
320   pstr(k,j)=scal*pstr(k,j)
      pstr(4,j)=sqrt(pstr(1,j)**2+pstr(2,j)**2+pstr(3,j)**2
     $+pstr(5,j)**2)
      sum=sum+pstr(4,j)
310   continue
      scal=psum(5)/sum
      if(abs(scal-1.).le.errlim) goto300
301   continue
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('hrescl')
      write(ifch,*)'*****  scal=',scal
      endif
      if(ish.ge.1)write(ifch,*)' '
300   continue
 
c     boost back with psum
c     --------------------
      bmag=0.
      do 400 k=1,3
      beta(k)=psum(k)/psum(5)
      bmag=bmag+abs(beta(k))
400   continue
      gamma=psum(4)/psum(5)
      ifail=0
      if(bmag.eq.0.) return
      goto200
      end
 
c-----------------------------------------------------------------------
      subroutine idchrg(id,chrg)
c     computes charge of particle with ident code id
c     ichrg must be dimensioned nqlep+12
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      dimension ichrg(53),ifl(3)
      data ichrg/0,2,-1,-1,2,-1,2,-1,2,0,0,0,-3,0,-3,0,-3,0,-3,3*0
     $,2,-1,-1,2,-1,2,-1,2,0,0,0,-3,0,-3,0,-3,0,-3,3,0
     $,3,0,0,0,3,3,3,6,6,6,0/
      idabs=iabs(id)
      call idflav(id,ifl(1),ifl(2),ifl(3),jspin,index)
      if(idabs.lt.100) goto200
      isum=0
      do 100 i=1,3
      isum=isum+ichrg(iabs(ifl(i))+1)*isign(1,ifl(i))
  100 continue
      chrg=isum/3.
      return
200   chrg=ichrg(index+1)*isign(1,id)
      chrg=chrg/3.
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idcomi(ic,icx)
c     compactifies ic
c-----------------------------------------------------------------------
      parameter (nflav=6)
      integer ic(2),icx(2),jc(nflav,2)
      call idcomp(ic,icx,jc,1)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idcomio(ic)
c     compactifies ic
c-----------------------------------------------------------------------
      parameter (nflav=6)
      integer ic(2),icx(2),jc(nflav,2)
      call idcomp(ic,icx,jc,1)
      ic(1)=icx(1)
      ic(2)=icx(2)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idcomj(jc)
c     compactifies jc
c-----------------------------------------------------------------------
      parameter (nflav=6)
      integer ic(2),icx(2),jc(nflav,2)
      call idcomp(ic,icx,jc,2)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idcomp(ic,icx,jc,im)
c     compactifies ic,jc
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (nflav=6)
      integer ic(2),icx(2),jcx(nflav,2),icy(2),jc(nflav,2)
      real probab(nflav),probsu(nflav+1)
      if(im.eq.1)then
      icx(1)=ic(1)
      icx(2)=ic(2)
      if(idtra(ic,0,0,0).ne.0)return
      call iddeco(ic,jc)
      endif
      lo=0
10    lo=lo+1
      if(lo.gt.100)
     *call utstop('idcomp: lo>100                          ')
      sm=0
      do 7 i=1,nflav
7     sm=sm+jc(i,1)+jc(i,2)
      icheck=1
      if(sm.ge.4)icheck=0
      if(icheck.eq.1)then
      call idenco(jc,icx,ireten)
      if(ireten.eq.1)
     *call utstop('idcomp: idenco ret code = 1             ')
      if(idtra(icx,0,0,0).ne.0)return
      endif
      su=0
      do 20 i=1,nflav
      probab(i)=0.
      if(jc(i,1)*jc(i,2).ne.0)probab(i)=1
20    su=su+probab(i)
      if(su.eq.0.)then
      if(im.eq.1)then
      call idenco(jc,icx,ireten)
      if(ireten.eq.1)
     *call utstop('idcomp: idenco ret code = 1             ')
      endif
      return
      endif
      probsu(1)=0
      do 30 i=1,nflav
30    probsu(i+1)=probsu(i)+probab(i)/su
      r=rangen()
      do 50 i=1,nflav
      if(probsu(i).le.r.and.r.le.probsu(i+1))ifl=i
50    continue
      if(jc(ifl,1).eq.0.or.jc(ifl,2).eq.0)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('idcomp')
      write(ifch,*)'*****  wrong flavour'
      write(ifch,*)'random number:',r
      write(ifch,*)'probsu:',probsu
      endif
      if(ish.ge.1)write(ifch,*)' '
      goto10
      endif
      jc(ifl,1)=jc(ifl,1)-1
      jc(ifl,2)=jc(ifl,2)-1
      goto10
      end
 
c-----------------------------------------------------------------------
      integer function idcon(ifl1,ifl2,ifail)
c     constructs particle identification code for ifl1+ifl2
c-----------------------------------------------------------------------
      common/didib/ndidib
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      real pmix1(3,2),pmix2(3,2),pspin1(8)
      data pmix1/.25,.25,.5,0.,.5,1./,pmix2/.5,.5,1.,0.,0.,1./
      do 1 i=1,8
      if(i.le.3)pspin1(i)=pspinl
      if(i.gt.3)pspin1(i)=pspinh
1     continue
      ifail=0
 
c               meson:
                if(iabs(ifl1).le.6.and.iabs(ifl2).le.6)then
      if(ifl1*ifl2.gt.0)
     *call utstop('idcon : ifl1*ifl2.gt.0                  ')
      ihigh=max0(iabs(ifl1),iabs(ifl2))
      jspin=int(rangen()+pspin1(ihigh))
      id1=ifl1
      id2=ifl2
           if(id1+id2.eq.0)then
      rnd=rangen()
      id1=iabs(id1)
      id1=int(pmix1(id1,jspin+1)+rnd)+int(pmix2(id1,jspin+1)+rnd)+1
      id2=-id1
           endif
           if(iabs(id1).gt.iabs(id2))then
      isave=id1
      id1=id2
      id2=isave
           endif
      idcon=isign(100*iabs(id1)+10*iabs(id2)+jspin,id1)
 
c               baryon:
                elseif(mod(ifl1,100).eq.0.and.iabs(ifl2).le.6
     *             .or.mod(ifl2,100).eq.0.and.iabs(ifl1).le.6)then
           if(mod(ifl1,100).eq.0)then
      id3=mod(ifl1/100,10)
      id2=ifl1/1000
      id1=ifl2
           elseif(mod(ifl2,100).eq.0)then
      id3=mod(ifl2/100,10)
      id2=ifl2/1000
      id1=ifl1
           endif
           if(iabs(id1).gt.iabs(id2))then
      iswap=id1
      id1=id2
      id2=iswap
           endif
           if(iabs(id2).gt.iabs(id3))then
      iswap=id2
      id2=id3
      id3=iswap
           endif
           if(iabs(id1).gt.iabs(id2))then
      iswap=id1
      id1=id2
      id2=iswap
           endif
      jspin=1
           if(.not.(id1.eq.id2.and.id2.eq.id3))then
      ihigh=iabs(id3)
      jspin=int(rangen()+pspin1(ihigh))
           endif
           if(jspin.ne.1.and.id1.ne.id2.and.id2.ne.id3
     *      .and.rangen().le.pispn)then
      iswap=id1
      id1=id2
      id2=iswap
           endif
      idcon=1000*iabs(id1)+100*iabs(id2)+10*iabs(id3)+jspin
      idcon=isign(idcon,ifl1)
 
               else
      ifail=1
      r=rangen()
      if(r.le..5)idcon=121
      if(r.gt..5)idcon=-121
                endif
      return
      end
 
c-----------------------------------------------------------------------
      subroutine iddeco(ic,jc)
c     decode particle id
c-----------------------------------------------------------------------
      parameter (nflav=6)
      integer jc(nflav,2),ic(2)
      ici=ic(1)
      jc(6,1)=mod(ici,10)
      jc(5,1)=mod(ici/10,10)
      jc(4,1)=mod(ici/100,10)
      jc(3,1)=mod(ici/1000,10)
      jc(2,1)=mod(ici/10000,10)
      jc(1,1)=mod(ici/100000,10)
      ici=ic(2)
      jc(6,2)=mod(ici,10)
      jc(5,2)=mod(ici/10,10)
      jc(4,2)=mod(ici/100,10)
      jc(3,2)=mod(ici/1000,10)
      jc(2,2)=mod(ici/10000,10)
      jc(1,2)=mod(ici/100000,10)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idenco(jc,ic,ireten)
c     encode particle id
c-----------------------------------------------------------------------
      parameter (nflav=6)
      integer jc(nflav,2),ic(2)
      ireten=0
      ic(1)=0
      do 20 i=1,nflav
      if(jc(i,1).ge.10)goto22
20    ic(1)=ic(1)+jc(i,1)*10**(nflav-i)
      ic(2)=0
      do 21 i=1,nflav
      if(jc(i,2).ge.10)goto22
21    ic(2)=ic(2)+jc(i,2)*10**(nflav-i)
      return
22    ireten=1
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idflav(id,ifl1,ifl2,ifl3,jspin,index)
c     unpacks the ident code id=+/-ijkl
c
c          mesons--
c          i=0, j<=k, +/- is sign for j
c          id=110 for pi0, id=220 for eta, etc.
c
c          baryons--
c          i<=j<=k in general
c          j<i<k for second state antisymmetric in (i,j), eg. l = 2130
c
c          other--
c          id=1,...,6 for quarks
c          id=9 for gluon
c          id=10 for photon
c          id=11,...,16 for leptons
c          id=20 for ks, id=-20 for kl
c
c          i=21...26 for scalar quarks
c          i=29 for gluino
c          i=30 for photino
c          i=31...36 for scalar leptons
c          i=39 for wino
c          i=40 for zino
c
c          id=80 for w+
c          id=81,...,89 for higgs mesons
c          id=90 for z0
c
c          diquarks--
c          id=+/-ij00, i<j for diquark composed of i,j.
c
c          index is a sequence number used internally
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      parameter ( nqlep=41,nmes=2,nbary=2)
      idabs=iabs(id)
      i=idabs/1000
      j=mod(idabs/100,10)
      k=mod(idabs/10,10)
      jspin=mod(idabs,10)
      if(id.ne.0.and.mod(id,100).eq.0) goto300
      if(j.eq.0) goto200
      if(i.eq.0) goto100
c          baryons
c          only x,y baryons are qqx, qqy, q=u,d,s.
      ifl1=isign(i,id)
      ifl2=isign(j,id)
      ifl3=isign(k,id)
      if(k.le.6) then
        index=max0(i-1,j-1)**2+i+max0(i-j,0)+(k-1)*k*(2*k-1)/6
     1  +109*jspin+36*nmes+nqlep+11
      else
        index=max0(i-1,j-1)**2+i+max0(i-j,0)+9*(k-7)+91
     1  +109*jspin+36*nmes+nqlep+11
      endif
      return
c          mesons
100   continue
      ifl1=0
      ifl2=isign(j,id)
      ifl3=isign(k,-id)
      index=j+k*(k-1)/2+36*jspin+nqlep
      index=index+11
      return
c          quarks, leptons, etc
200   continue
      ifl1=0
      ifl2=0
      ifl3=0
      jspin=0
      index=idabs
      if(idabs.lt.20) return
c          define index=20 for ks, index=21 for kl
      index=idabs+1
      if(id.eq.20) index=20
c          index=nqlep+1,...,nqlep+11 for w+, higgs, z0
      if(idabs.lt.80) return
      index=nqlep+idabs-79
      return
300   ifl1=isign(i,id)
      ifl2=isign(j,id)
      ifl3=0
      jspin=0
      index=0
      return
      end
 
c-----------------------------------------------------------------------
      function idlabl(id)
c     returns the character*8 label for the particle id
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      parameter ( nqlep=41,nmes=2,nbary=2)
c
      character*8 idlabl
      character*8 llep,lmes0,lmes1,lbar0,labar0,lbar1,labar1
      character*8 lqq,laqq
      dimension llep(104)
      dimension lmes0(64),lmes1(64)
      dimension lbar0(109),labar0(109),lbar1(109),labar1(109)
      dimension lqq(21),laqq(21)
c          diquark labels
      data lqq/
     1'uu0. ','ud0. ','dd0. ','us0. ','ds0. ','ss0. ','uc0. ','dc0. ',
     2'sc0. ','cc0. ','ub0. ','db0. ','sb0. ','cb0. ','bb0. ','ut0. ',
     3'dt0. ','st0. ','ct0. ','bt0. ','tt0. '/
      data laqq/
     1'auu0.','aud0.','add0.','aus0.','ads0.','ass0.','auc0.','adc0.',
     2'asc0.','acc0.','aub0.','adb0.','asb0.','acb0.','abb0.','aut0.',
     3'adt0.','ast0.','act0.','abt0.','att0.'/
c          quark and lepton labels
      data llep/
     $'     ','up   ','ub   ','dn   ','db   ','st   ','sb   ','ch   ',
     $'cb   ','bt   ','bb   ','tp   ','tb   ','y    ','yb   ','x    ',
     $'xb   ','gl   ','err  ','gm   ','err  ','nue  ','anue ','e-   ',
     $'e+   ','num  ','anum ','mu-  ','mu+  ','nut  ','anut ','tau- ',
     $'tau+ ','err  ','err  ','err  ','err  ','err  ','err  ','ks   ',
     $'err  ','err  ','kl   ',
     $'upss ','ubss ','dnss ','dbss ','stss ','sbss ','chss ','cbss ',
     $'btss ','bbss ','tpss ','tbss ','err  ','err  ','err  ','err  ',
     $'glss ','err  ','gmss ','err  ','ness ','aness','e-ss ','e+ss ',
     $'nmss ','anmss','mu-ss','mu+ss','ntss ','antss','t-ss ','t+ss ',
     $'err  ','err  ','err  ','err  ','w+ss ','w-ss ','z0ss ','err  ',
     $'w+   ','w-   ','h10  ','ah10 ','h20  ','ah20 ','h30  ','ah30 ',
     $'h4+  ','h4-  ','h5+  ','h5-  ','h6+  ','h6-  ','h7++ ','h7-- ',
     $'h8++ ','h8-- ','h9++ ','h9-- ','z0   '/
c          0- meson labels
      data lmes0/
     1'pi0  ','pi+  ','eta  ','pi-  ','k+   ','k0   ','etap ','ak0  ',
     2'k-   ','ad0  ','d-   ','f-   ','etac ','f+   ','d+   ','d0   ',
     2'ub.  ','db.  ','sb.  ','cb.  ','bb.  ','bc.  ','bs.  ','bd.  ',
     3'bu.  ','ut.  ','dt.  ','st.  ','ct.  ','bt.  ','tt.  ','tb.  ',
     4'tc.  ','ts.  ','td.  ','tu.  ','uy.  ','dy.  ','sy.  ','cy.  ',
     5'by.  ','ty.  ','yy.  ','yt.  ','yb.  ','yc.  ','ys.  ','yd.  ',
     6'yu.  ','ux.  ','dx.  ','sx.  ','cx.  ','bx.  ','tx.  ','yx.  ',
     7'xx.  ','xy.  ','xt.  ','xb.  ','xc.  ','xs.  ','xd.  ','xu.  '/
c          1- meson labels
      data lmes1/
     1'rho0 ','rho+ ','omeg ','rho- ','k*+  ','k*0  ','phi  ','ak*0 ',
     2'k*-  ','ad*0 ','d*-  ','f*-  ','jpsi ','f*+  ','d*+  ','d*0  ',
     3'ub*  ','db*  ','sb*  ','cb*  ','upsl ','bc*  ','bs*  ','bd*  ',
     4'bu*  ','ut*  ','dt*  ','st*  ','ct*  ','bt*  ','tt*  ','tb*  ',
     5'tc*  ','ts*  ','td*  ','tu*  ','uy*  ','dy*  ','sy*  ','cy*  ',
     6'by*  ','ty*  ','yy*  ','yt*  ','yb*  ','yc*  ','ys*  ','yd*  ',
     7'yu*  ','ux*  ','dx*  ','sx*  ','cx*  ','bx*  ','tx*  ','yx*  ',
     8'xx*  ','xy*  ','xt*  ','xb*  ','xc*  ','xs*  ','xd*  ','xu*  '/
c          1/2+ baryon labels
      data lbar0/
     1'err  ','p    ','n    ','err  ','err  ','s+   ','s0   ','s-   ',
     2'l    ','xi0  ','xi-  ','err  ','err  ','err  ','sc++ ','sc+  ',
     3'sc0  ','lc+  ','usc. ','dsc. ','ssc. ','sdc. ','suc. ','ucc. ',
     4'dcc. ','scc. ','err  ','err  ','err  ','err  ','uub. ','udb. ',
     5'ddb. ','dub. ','usb. ','dsb. ','ssb. ','sdb. ','sub. ','ucb. ',
     6'dcb. ','scb. ','ccb. ','csb. ','cdb. ','cub. ','ubb. ','dbb. ',
     7'sbb. ','cbb. ','err  ','err  ','err  ','err  ','err  ','utt. ',
     8'udt. ','ddt. ','dut. ','ust. ','dst. ','sst. ','sdt. ','sut. ',
     9'uct. ','dct. ','sct. ','cct. ','cst. ','cdt. ','cut. ','ubt. ',
     1'dbt. ','sbt. ','cbt. ','bbt. ','bct. ','bst. ','bdt. ','but. ',
     2'utt. ','dtt. ','stt. ','ctt. ','btt. ','err  ','err  ','err  ',
     3'err  ','err  ','err  ','uuy. ','udy. ','ddy. ','duy. ','usy. ',
     4'dsy. ','ssy. ','sdy. ','suy. ','uux. ','udx. ','ddx. ','dux. ',
     5'usx. ','dsx. ','ssx. ','sdx. ','sux. '/
      data labar0/
     1'err  ','ap   ','an   ','err  ','err  ','as-  ','as0  ','as+  ',
     2'al   ','axi0 ','axi+ ','err  ','err  ','err  ','asc--','asc- ',
     3'asc0 ','alc- ','ausc.','adsc.','assc.','asdc.','asuc.','aucc.',
     4'adcc.','ascc.','err  ','err  ','err  ','err  ','auub.','audb.',
     5'addb.','adub.','ausb.','adsb.','assb.','asdb.','asub.','aucb.',
     6'adcb.','ascb.','accb.','acsb.','acdb.','acub.','aubb.','adbb.',
     7'asbb.','acbb.','err  ','err  ','err  ','err  ','err  ','autt.',
     8'audt.','addt.','adut.','aust.','adst.','asst.','asdt.','asut.',
     9'auct.','adct.','asct.','acct.','acst.','acdt.','acut.','aubt.',
     1'adbt.','asbt.','acbt.','abbt.','abct.','abst.','abdt.','abut.',
     2'autt.','adtt.','astt.','actt.','abtt.','err  ','err  ','err  ',
     3'err  ','err  ','err  ','auuy.','audy.','addy.','aduy.','ausy.',
     4'adsy.','assy.','asdy.','asuy.','auux.','audx.','addx.','adux.',
     5'ausx.','adsx.','assx.','asdx.','asux.'/
c          3/2+ baryon labels
      data lbar1/
     1'dl++ ','dl+  ','dl0  ','dl-  ','err  ','s*+  ','s*0  ','s*-  ',
     2'err  ','xi*0 ','xi*- ','om-  ','err  ','err  ','uuc* ','udc* ',
     3'ddc* ','err  ','usc* ','dsc* ','ssc* ','err  ','err  ','ucc* ',
     4'dcc* ','scc* ','ccc* ','err  ','err  ','err  ','uub* ','udb* ',
     5'ddb* ','err  ','usb* ','dsb* ','ssb* ','err  ','err  ','ucb* ',
     6'dcb* ','scb* ','ccb* ','err  ','err  ','err  ','ubb* ','dbb* ',
     7'sbb* ','cbb* ','bbb* ','err  ','err  ','err  ','err  ','utt* ',
     8'udt* ','ddt* ','err  ','ust* ','dst* ','sst* ','err  ','err  ',
     9'uct* ','dct* ','sct* ','cct* ','err  ','err  ','err  ','ubt* ',
     1'dbt* ','sbt* ','cbt* ','bbt* ','err  ','err  ','err  ','err  ',
     2'utt* ','dtt* ','stt* ','ctt* ','btt* ','ttt* ','err  ','err  ',
     3'err  ','err  ','err  ','uuy* ','udy* ','ddy* ','err  ','usy* ',
     4'dsy* ','ssy* ','err  ','err  ','uux* ','udx* ','ddx* ','err  ',
     5'usx* ','dsx* ','ssx* ','err  ','err  '/
      data labar1/
     1'adl--','adl- ','adl0 ','adl+ ','err  ','as*- ','as*0 ','as*+ ',
     2'err  ','axi*0','axi*+','aom+ ','err  ','err  ','auuc*','audc*',
     3'addc*','err  ','ausc*','adsc*','assc*','err  ','err  ','aucc*',
     4'adcc*','ascc*','accc*','err  ','err  ','err  ','auub*','audb*',
     5'addb*','err  ','ausb*','adsb*','assb*','err  ','err  ','aucb*',
     6'adcb*','ascb*','accb*','err  ','err  ','err  ','aubb*','adbb*',
     7'asbb*','acbb*','abbb*','err  ','err  ','err  ','err  ','autt*',
     8'audt*','addt*','err  ','aust*','adst*','asst*','err  ','err  ',
     9'auct*','adct*','asct*','acct*','err  ','err  ','err  ','aubt*',
     1'adbt*','asbt*','acbt*','abbt*','err  ','err  ','err  ','err  ',
     2'autt*','adtt*','astt*','actt*','abtt*','attt*','err  ','err  ',
     3'err  ','err  ','err  ','auuy*','audy*','addy*','err  ','ausy*',
     4'adsy*','assy*','err  ','err  ','auux*','audx*','addx*','err  ',
     5'ausx*','adsx*','assx*','err  ','err  '/
c          entry
      call idflav(id,ifl1,ifl2,ifl3,jspin,index)
      if(iabs(id).lt.100) goto200
      if(iabs(id).lt.1000) goto100
      if(id.ne.0.and.mod(id,100).eq.0) goto300
c          baryons
      index=index-109*jspin-36*nmes-nqlep
      index=index-11
      if(jspin.eq.0.and.id.gt.0) idlabl=lbar0(index)
      if(jspin.eq.0.and.id.lt.0) idlabl=labar0(index)
      if(jspin.eq.1.and.id.gt.0) idlabl=lbar1(index)
      if(jspin.eq.1.and.id.lt.0) idlabl=labar1(index)
      return
c          mesons
100   continue
      i=max0(ifl2,ifl3)
      j=-min0(ifl2,ifl3)
      index=max0(i-1,j-1)**2+i+max0(i-j,0)
      if(jspin.eq.0) idlabl=lmes0(index)
      if(jspin.eq.1) idlabl=lmes1(index)
      return
c          quarks, leptons, etc.
200   continue
      index=2*index
      if(id.le.0) index=index+1
      idlabl=llep(index)
      return
300   i=iabs(ifl1)
      j=iabs(ifl2)
      index=i+j*(j-1)/2
      if(id.gt.0) idlabl=lqq(index)
      if(id.lt.0) idlabl=laqq(index)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idmass(id,amass)
c     returns the mass of the particle with ident code id.
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      dimension ammes0(10),ammes1(10),ambar0(30),ambar1(30)
      dimension amlep(52)
      parameter ( nqlep=41,nmes=2,nbary=2)
      data amlep/.3,.3,.5,1.6,4.9,30.,-1.,-1.,0.,0.,
     $0.,.511003e-3,0.,.105661,0.,1.807,3*-1.,.49767,.49767,
     $100.3,100.3,100.5,101.6,104.9,130.,2*-1.,100.,0.,
     $100.,100.005,100.,100.1,100.,101.8,2*-1.,100.,100.,
     $11*0./
c          0- meson mass table
      data ammes0/.13496,.13957,.5488,.49367,.49767,.9576,1.8633
     1,1.8683,2.030,2.976/
c          1- meson mass table
      data ammes1/.770,.770,.7826,.8881,.8922,1.0196,2.006,2.0086
     1,2.140,3.097/
c          1/2+ baryon mass table
      data ambar0/-1.,.93828,.93957,2*-1.,1.1894,1.1925,1.1974
     1,1.1156,1.3149,1.3213,3*-1.,2.43,2.43,2.43,2.26
     2,2.50,2.50,2.60,2.40,2.40,3.55,3.55,3.70,4*-1./
c          3/2+ baryon mass table
      data ambar1/1.232,1.232,1.232,1.232,-1.,1.3823,1.3820
     1,1.3875,-1.,1.5318,1.5350,1.6722,2*-1.
     2,2.63,2.63,2.63,-1.,2.70,2.70,2.80,2*-1.,3.75,3.75
     3,3.90,4.80,3*-1./
c          entry
      call idflav(id,ifl1,ifl2,ifl3,jspin,index)
      if(id.ne.0.and.mod(id,100).eq.0) goto400
      if(iabs(ifl1).gt.4.or.iabs(ifl2).gt.4.or.iabs(ifl3).gt.4)
     1goto300
      if(ifl2.eq.0) goto200
      if(ifl1.eq.0) goto100
c          baryons
      index=index-109*jspin-36*nmes-nqlep
      index=index-11
      amass=(1-jspin)*ambar0(index)+jspin*ambar1(index)
      return
c          mesons
100   continue
      index=index-36*jspin-nqlep
      index=index-11
      amass=(1-jspin)*ammes0(index)+jspin*ammes1(index)
      return
c          quarks and leptons
200   continue
      amass=amlep(index)
      return
c          b and t particles
300   continue
      amass=amlep(iabs(ifl2))+amlep(iabs(ifl3))-.03+.04*jspin
      if(ifl1.ne.0) amass=amass+amlep(iabs(ifl1))
      return
c          diquarks
400   amass=amlep(iabs(ifl1))+amlep(iabs(ifl2))
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idmima(ic,amima,ier,cmp,prt)
c     determines minimal mass for ic
c-----------------------------------------------------------------------
      character cmp*6,prt*6
      parameter (nflav=6)
      integer ic(2),jc(nflav,2)
      call iddeco(ic,jc)
      call idmimj(jc,amima,ier,cmp,prt)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idmimj(jc,amima,ier,cmp,prt)
c     determines minimal mass for jc
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      parameter (nflav=6)
      integer jc(nflav,2),jcx(nflav,2),jcy(nflav,2),ic(2),icx(2),icy(2)
      character cmp*6,prt*6,dash*1
      if(cmp.eq.'cmp-ys')icmp=1
      if(cmp.eq.'cmp-no')icmp=0
      dash='-'
      if(ish.ge.4.and.prt.eq.'prt-ys')write(ifch,*)(dash,l=1,71)
      if(ish.ge.4.and.prt.eq.'prt-ys')write(ifch,*)'subroutine idmimj'
      if(ish.ge.4.and.prt.eq.'prt-ys')write(ifch,*)'ic:  ',ic
      ier=0
      amimas=99999
      do 9997 nt=1,5
      delm=0
      do 2 nf=1,nflav
      do 2 i=1,2
2     jcx(nf,i)=jc(nf,i)
      if(icmp.eq.1)then
      call idcomj(jcx)
      endif
      lo=0
1     lo=lo+1
      if(ish.ge.4.and.prt.eq.'prt-ys')write(ifch,*)'jcx: '
      if(ish.ge.4.and.prt.eq.'prt-ys')write(ifch,*)jcx
      if(lo.ge.100)then
      if(lo.eq.100)write(ifch,*)'***** error in idmimj: infinite loop'
      write(ifch,*)'loop=',lo
      write(ifch,*)'jc=',jc
      write(ifch,*)'jcx=',jcx
      if(lo.eq.110)
     *call utstop('idmimj: infinite loop                   ')
      endif
      do 3 nf=1,nflav
      do 3 i=1,2
      if(jcx(nf,i).ge.10)id=7*10**8
3     continue
      if(id/10**8.ne.7)then
      call idenco(jcx,icx,ireten)
      if(ireten.eq.1)
     *call utstop('idmimj: idenco ret code = 1             ')
      id=idtra(icx,0,0,3)
      else
      id=0
      endif
      if(id.eq.0)then
      call jstrij(1,2,jcx,idh,jcy,iestrp,0,0)
      if(iestrp.gt.0)call jstrij(1,11,jcx,idh,jcy,iestrp,0,0)
      if(iestrp.gt.0)call jstrij(2,22,jcx,idh,jcy,iestrp,0,0)
      if(iestrp.gt.0)goto9999
      call idmass(idh,amh)
      delm=delm+amh+delmss
      do 4 nf=1,nflav
      do 4 i=1,2
4     jcx(nf,i)=jcy(nf,i)
      if(ish.ge.4.and.prt.eq.'prt-ys')
     *write(ifch,*)'stripped hadron: ',idh,amh
      goto1
      endif
      call idmass(id,am)
      amima=am+delm
      if(ish.ge.4.and.prt.eq.'prt-ys')then
      write(ifch,*)'final hadron: ',id,am
      write(ifch,*)'total mass: ',amima
      endif
      if(lo.eq.1)goto9998
      amima=amin1(amima,amimas)
      amimas=amima
9997  continue
9998  continue
      if(ish.ge.4.and.prt.eq.'prt-ys')then
      write(ifch,*)'min mass: ',amima
      write(ifch,*)(dash,l=1,71)
      endif
      return
9999  jerr=jerr+1
      if(ish.ge.1)write(ifch,*)' '
      write(ifch,*)'***** error in idmimj: jstrij error ret code > 0'
      write(ifch,*)'code bef strip:'
      write(ifch,*)jcx
      if(ish.ge.1)write(ifch,*)' '
      ier=1
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idmix(ic,jspin,icm,idm)
c     accounts for flavour mixing
c-----------------------------------------------------------------------
      parameter (nflav=6)
      real pmix1(3,2),pmix2(3,2)
      integer ic(2),icm(2)
      data pmix1/.25,.25,.5,0.,.5,1./,pmix2/.5,.5,1.,0.,0.,1./
      icm(1)=0
      icm(2)=0
      idm=0
      i=ic(1)
      if(i.ne.ic(2))return
      id=0
      if(i.eq.100000)id=1
      if(i.eq. 10000)id=2
      if(i.eq.  1000)id=3
      if(id.eq.0)return
      rnd=rangen()
      idm=int(pmix1(id,jspin+1)+rnd)+int(pmix2(id,jspin+1)+rnd)+1
      icm(1)=10**(nflav-idm)
      icm(2)=ic(1)
      idm=idm*100+idm*10+jspin
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idres(id,am,idr,iadj)
c     returns resonance id idr corresponding to mass am.
c     performs mass adjustment, if necessary (if so iadj=1, 0 else)
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      parameter (mxindx=1000,mxre=100,mxma=11,mxmx=6)
      common/crema/indx(mxindx),rema(mxre,mxma),rewi(mxre,mxma)
     *,idmx(mxma,mxmx),icre1(mxre,mxma),icre2(mxre,mxma)
 
      idi=id
      ami=am
      idr=0
      iadj=0
      if(id.eq.0)goto9999
 
      do 3 k=1,mxmx
      do 3 m=2,mxma
      if(iabs(id).eq.idmx(m,k))id=idmx(1,k)*10*id/iabs(id)
3     continue
 
      ix=iabs(id)/10
      if(ix.lt.1.or.ix.gt.mxindx)
     *call utstop('idres: ix out of range.                 ')
      i=indx(ix)
      if(i.lt.1.or.i.gt.mxre)
     *call utstop('idres: particle not in table            ')
      do 1 j=1,mxma-1
      if(am.ge.rema(i,j).and.am.le.rema(i,j+1))then
      if(j-1.gt.9)
     *call utstop('idres: spin > 9                         ')
      idr=id/10*10+(j-1)*id/iabs(id)
      goto2
      endif
1     continue
      goto9999
2     continue
 
      do 4 k=1,mxmx
      if(ix.eq.idmx(1,k))then
      if(j.lt.1.or.j.gt.mxma-1)
     *call utstop('idres: index j out of range             ')
      if(idmx(j+1,k).ne.0)idr=idmx(j+1,k)*id/iabs(id)
      endif
4     continue
 
      iy=mod(iabs(idr),10)
      if(iy.gt.maxres)then
      iadj=0
      idr=0
      goto9999
      endif
 
      if(iy.ne.0.and.iy.ne.1)goto9999
 
      call idmass(idr,am)
      if(am.lt.0.)
     *call utstop('idres: neg mass returned from idmass    ')
      iadj=1
 
9999  id=idi
      if(.not.(ish.ge.3))return
      write(ifch,*)'return from idres. id,ami,am,idr,iadj:'
      write(ifch,*)id,ami,am,idr,iadj
      write(ifch,*)' '
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idresi
c     initializes /crema/
c-----------------------------------------------------------------------
      parameter (mxindx=1000,mxre=100,mxma=11,mxmx=6)
      common/crema/indx(mxindx),rema(mxre,mxma),rewi(mxre,mxma)
     *,idmx(mxma,mxmx),icre1(mxre,mxma),icre2(mxre,mxma)
      parameter (n=29)
      dimension remai(n,mxma),rewii(n,mxma),idmxi(mxma,mxmx)
     *,icrei(n,2*mxma)
      do 3 i=1,mxindx
3     indx(i)=0
      do 4 k=1,mxre
      do 4 m=1,mxma
4     rema(k,m)=0
 
      data (idmxi(j,1),j=1,mxma)/ 11, 110, 111, 112,   0,   0,   0, 4*0/
      data (idmxi(j,2),j=1,mxma)/ 22, 220, 330, 332, 331,   0,   0, 4*0/
      data (idmxi(j,3),j=1,mxma)/123,2130,1230,1231,   0,   0,   0, 4*0/
      data (idmxi(j,4),j=1,mxma)/124,2140,1240,1241,   0,   0,   0, 4*0/
      data (idmxi(j,5),j=1,mxma)/134,3140,1340,1341,   0,   0,   0, 4*0/
      data (idmxi(j,6),j=1,mxma)/234,3240,2340,2341,   0,   0,   0, 4*0/
 
      data ((icrei(k,m),m=1,2*mxma),k=1,10)/
     *111,000000, 9*300000,    11*0,
     *222,000000, 9*030000,    11*0,
     *112,       10*210000,    11*0,
     *122,       10*120000,    11*0,
     *113,       10*201000,    11*0,
     *223,       10*021000,    11*0,
     *123,       10*111000,    11*0,
     *133,       10*102000,    11*0,
     *233,       10*012000,    11*0,
     *333,000000, 9*003000,    11*0/
      data ((icrei(k,m),m=1,2*mxma),k=11,20)/
     *114,       10*200100,    11*0,
     *124,       10*110100,    11*0,
     *224,       10*020100,    11*0,
     *134,       10*101100,    11*0,
     *234,       10*011100,    11*0,
     *334,       10*002100,    11*0,
     *144,       10*100200,    11*0,
     *244,       10*010200,    11*0,
     *344,       10*001200,    11*0,
     *444,000000, 9*000300,    11*0/
      data ((icrei(k,m),m=1,2*mxma),k=21,29)/
     * 11,  10*100000,    0,   10*100000,
     * 22,  10*001000,    0,   10*001000,
     * 12,  10*100000,    0,   10*010000,
     * 13,  10*100000,    0,   10*001000,
     * 23,  10*010000,    0,   10*001000,
     * 14,  10*100000,    0,   10*000100,
     * 24,  10*010000,    0,   10*000100,
     * 34,  10*001000,    0,   10*000100,
     * 44,  10*000100,    0,   10*000100/
 
      data ((remai(k,m),m=1,mxma),k=1,10)/
     *111.,0.000,1.425,1.660,1.825,2.000,0.000,0.000,0.000,0.000,0.000,
     *222.,0.000,1.425,1.660,1.825,2.000,0.000,0.000,0.000,0.000,0.000,
     *112.,1.080,1.315,1.485,1.575,1.645,1.685,1.705,1.825,2.000,0.000,
     *122.,1.080,1.315,1.485,1.575,1.645,1.685,1.705,1.825,2.000,0.000,
     *113.,1.300,1.500,1.700,1.850,2.000,0.000,0.000,0.000,0.000,0.000,
     *223.,1.300,1.500,1.700,1.850,2.000,0.000,0.000,0.000,0.000,0.000,
     *123.,1.115,1.300,1.395,1.465,1.540,1.655,1.710,1.800,1.885,2.000,
     *133.,1.423,2.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     *233.,1.428,2.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     *333.,0.000,2.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000/
      data ((remai(k,m),m=1,mxma),k=11,20)/
     *114.,2.530,2.730,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     *124.,2.345,2.530,2.730,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     *224.,2.530,2.730,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     *134.,2.450,2.600,2.800,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     *234.,2.450,2.600,2.800,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     *334.,2.700,2.900,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     *144.,3.650,3.850,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     *244.,3.650,3.850,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     *344.,3.800,4.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     *444.,0.000,5.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000/
      data ((remai(k,m),m=1,mxma),k=21,29)/
     * 11.,0.350,0.960,1.050,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     * 22.,0.750,0.965,0.998,1.050,0.000,0.000,0.000,0.000,0.000,0.000,
     * 12.,0.450,0.875,1.050,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     * 13.,0.700,1.050,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     * 23.,0.700,1.050,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     * 14.,1.935,2.077,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     * 24.,1.938,2.079,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     * 34.,2.085,2.195,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,
     * 44.,3.037,3.158,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000/
 
      data ((rewii(k,m),m=1,mxma),k=1,5)/
     *111.,0.000e+00,0.115e+00,0.140e+00,0.250e+00,0.250e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *222.,0.000e+00,0.115e+00,0.140e+00,0.250e+00,0.250e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *112.,0.000e+00,0.115e+00,0.200e+00,0.140e+00,0.140e+00,
     *     0.145e+00,0.250e+00,0.140e+00,0.250e+00,0.000e+00,
     *122.,0.000e+00,0.115e+00,0.200e+00,0.140e+00,0.140e+00,
     *     0.145e+00,0.250e+00,0.140e+00,0.250e+00,0.000e+00,
     *113.,0.824e-14,0.036e+00,0.080e+00,0.100e+00,0.170e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00/
      data ((rewii(k,m),m=1,mxma),k=6,10)/
     *223.,0.445e-14,0.039e+00,0.080e+00,0.100e+00,0.170e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *123.,0.250e-14,0.890e-05,0.036e+00,0.040e+00,0.016e+00,
     *     0.090e+00,0.080e+00,0.100e+00,0.145e+00,0.170e+00,
     *133.,0.227e-14,0.009e+00,0.000e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *233.,0.400e-14,0.010e+00,0.000e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *333.,0.000e+00,0.800e-14,0.000e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00/
      data ((rewii(k,m),m=1,mxma),k=11,15)/
     *114.,0.400e-11,0.010e+00,0.000e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *124.,0.400e-11,0.400e-11,0.010e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *224.,0.400e-11,0.010e+00,0.010e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *134.,0.150e-11,0.400e-11,0.010e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *234.,0.150e-11,0.400e-11,0.010e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00/
      data ((rewii(k,m),m=1,mxma),k=16,20)/
     *334.,0.400e-11,0.010e+00,0.010e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *144.,0.400e-11,0.010e+00,0.010e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *244.,0.400e-11,0.010e+00,0.010e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *344.,0.400e-11,0.010e+00,0.010e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     *444.,0.400e-11,0.010e+00,0.010e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00/
      data ((rewii(k,m),m=1,mxma),k=21,25)/
     * 11.,0.757e-08,0.153e+00,0.057e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     * 22.,0.105e-05,0.210e-03,0.034e+00,0.004e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     * 12.,0.000e+00,0.153e+00,0.057e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     * 13.,0.000e+00,0.051e+00,0.000e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     * 23.,0.197e-02,0.051e+00,0.000e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00/
      data ((rewii(k,m),m=1,mxma),k=26,29)/
     * 14.,0.154e-11,0.002e+00,0.000e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     * 24.,0.615e-12,0.002e+00,0.000e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     * 34.,0.150e-11,0.020e+00,0.000e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00,
     * 44.,0.010e+00,0.068e-03,0.000e+00,0.000e+00,0.000e+00,
     *     0.000e+00,0.000e+00,0.000e+00,0.000e+00,0.000e+00/
 
      do 2 j=1,mxma
      do 2 i=1,mxmx
2     idmx(j,i)=idmxi(j,i)
 
      if(n.gt.mxre)
     *call utstop('idresi: dimension mxre too small        ')
      do 1 k=1,n
      ix=nint(remai(k,1))
      ix2=nint(rewii(k,1))
      ix3=icrei(k,1)
      if(ix.ne.ix2)
     *call utstop('idresi: ix /= ix2                       ')
      if(ix.ne.ix3)
     *call utstop('idresi: ix /= ix3                       ')
      if(ix.lt.1.or.ix.gt.mxindx)
     *call utstop('idresi: ix out of range.                ')
      indx(ix)=k
      rema(k,1)=0.
      rewi(k,1)=0.
      icre1(k,1)=0
      icre2(k,1)=0
      do 1 m=2,mxma
      rema(k,m)=remai(k,m)
      rewi(k,m)=rewii(k,m)
      icre1(k,m)=icrei(k,m)
1     icre2(k,m)=icrei(k,mxma+m)
 
      indx(33) =indx(22)
      indx(213)=indx(123)
      indx(214)=indx(124)
      indx(314)=indx(134)
      indx(324)=indx(234)
 
      return
      end
 
c-----------------------------------------------------------------------
      integer function idsgl(ic,gen,cmp)
c     returns 1 for singlets (qqq or qqbar) 0 else.
c-----------------------------------------------------------------------
      parameter (nflav=6)
      integer ic(2),jcx(nflav,2),icx(2)
      character gen*6,cmp*6
      idsgl=0
      if(cmp.eq.'cmp-ys')then
      call idcomi(ic,icx)
      else
      icx(1)=ic(1)
      icx(2)=ic(2)
      endif
      call iddeco(icx,jcx)
      nq=0
      na=0
      do 1 i=1,nflav
      nq=nq+jcx(i,1)
1     na=na+jcx(i,2)
      if(nq.eq.0.and.na.eq.0)return
      if(gen.eq.'gen-no')then
      if(nq.eq.3.and.na.eq.0.or.nq.eq.1.and.na.eq.1
     *.or.nq.eq.0.and.na.eq.3)idsgl=1
      elseif(gen.eq.'gen-ys')then
      if(mod(nq-na,3).eq.0)idsgl=1
      endif
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idspin(ii,ic,id,jspin)
c     determines particle spin
c-----------------------------------------------------------------------
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      parameter (nflav=6)
      integer ic(2),jc(nflav,2)
      real pspin1(8)
      do 3 i=1,8
      if(i.le.3)pspin1(i)=pspinl
      if(i.gt.3)pspin1(i)=pspinh
3     continue
      call iddeco(ic,jc)
      ihigh=0
      if(ii.eq.1)then
      do 4 i=1,nflav
      if(jc(i,1).ne.0)ihigh=i
      if(jc(i,2).ne.0)ihigh=i
4     continue
      else
      call idflav(id,i1,i2,i3,idu1,idu2)
      do 5 i=1,nflav
      if(i.eq.iabs(i1).or.i.eq.iabs(i2).or.i.eq.iabs(i3))ihigh=i
5     continue
      endif
      jspin=int(rangen()+pspin1(ihigh))
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idtau(id,p4,p5,taugm)
c     returns lifetime*gamma for id with energy p4, mass p5
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/cnsta/pi,prom,piom,ainfin
      parameter (mxindx=1000,mxre=100,mxma=11,mxmx=6)
      common/crema/indx(mxindx),rema(mxre,mxma),rewi(mxre,mxma)
     *,idmx(mxma,mxmx),icre1(mxre,mxma),icre2(mxre,mxma)
      if(iabs(id).lt.100.and.id.ne.20)then
      wi=0
      elseif(id.eq.20)then
      wi=.197/2.675e13
      elseif(iabs(id).lt.1e8)then
      ii=indx(iabs(id)/10)
      jj=mod(iabs(id),10)+2
      do 75 imx=1,mxmx
      do 75 ima=2,mxma
      if(iabs(id).eq.idmx(ima,imx))jj=ima
75    continue
      if(ii.lt.1.or.ii.gt.mxre.or.jj.lt.1.or.jj.gt.mxma)then
      write(ifch,*)' '
      write(ifch,*)'id,ii,jj:',id,'   ',ii,jj
      call utstop('idtau: ii or jj out of range            ')
      endif
      wi=rewi(ii,jj)
      else
      wi=.197/taunll
      endif
      if(wi.eq.0.)then
      tau=ainfin
      else
      tau=.197/wi
      endif
      if(p5.ne.0.)then
      gm=p4/p5
      else
      gm=ainfin
      endif
      if(tau.ge.ainfin.or.gm.ge.ainfin)then
      taugm=ainfin
      else
      taugm=tau*gm
      endif
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idtr4(id,ic)
c     transforms generalized paige_id -> werner_id  (for < 4 flv)
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      parameter (mxindx=1000,mxre=100,mxma=11,mxmx=6)
      common/crema/indx(mxindx),rema(mxre,mxma),rewi(mxre,mxma)
     *,idmx(mxma,mxmx),icre1(mxre,mxma),icre2(mxre,mxma)
      integer ic(2)
           if(iabs(id).lt.1e8)then
      ii=indx(iabs(id)/10)
      jj=mod(iabs(id),10)+2
      do 27 imx=1,mxmx
      do 27 ima=2,mxma
      if(iabs(id).eq.idmx(ima,imx))jj=ima
27    continue
      if(id.gt.0)then
      ic(1)=icre1(ii,jj)
      ic(2)=icre2(ii,jj)
      else
      ic(2)=icre1(ii,jj)
      ic(1)=icre2(ii,jj)
      endif
           elseif(mod(id/10**8,10).eq.8)then
      ic(1)=mod(id,10**8)/10000*100
      ic(2)=mod(id,10**4)*100
           else
      write(ifch,*)' '
      write(ifch,*)'***** id: ',id
      call utstop('idtr4: unrecognized id                  ')
           endif
      return
      end
 
c-----------------------------------------------------------------------
      integer function idtra(ic,ier,ires,imix)
c     tranforms from werner-id to paige-id
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (nidt=44,nflav=6)
      integer idt(3,nidt),ic(2),jc(nflav,2)
      data idt/
     * 100000,000000,   1   ,010000,000000,   2   ,001000,000000,   3
     *,000100,000000,   4
     *,200000,000000,1100   ,110000,000000,1200   ,020000,000000,2200
     *,101000,000000,1300   ,011000,000000,2300   ,002000,000000,3300
     *,100100,000000,1400   ,010100,000000,2400   ,001100,000000,3400
     *,000200,000000,4400
     *,100000,100000, 110   ,100000,010000, 120   ,010000,010000, 220
     *,100000,001000, 130   ,010000,001000, 230   ,001000,001000, 330
     *,100000,000100, 140   ,010000,000100, 240   ,001000,000100, 340
     *,000100,000100, 440
     *,300000,000000,1111   ,210000,000000,1120   ,120000,000000,1220
     *,030000,000000,2221   ,201000,000000,1130   ,111000,000000,1230
     *,021000,000000,2230   ,102000,000000,1330   ,012000,000000,2330
     *,003000,000000,3331   ,200100,000000,1140   ,110100,000000,1240
     *,020100,000000,2240   ,101100,000000,1340   ,011100,000000,2340
     *,002100,000000,3340   ,100200,000000,1440   ,010200,000000,2440
     *,001200,000000,3440   ,000300,000000,4441/
 
      idtra=0
      do 1 i=1,nidt
      if(ic(2).eq.idt(1,i).and.ic(1).eq.idt(2,i))idtra=-idt(3,i)
      if(ic(1).eq.idt(1,i).and.ic(2).eq.idt(2,i))idtra=idt(3,i)
1     continue
      isi=1
      if(idtra.ne.0)isi=idtra/iabs(idtra)
 
      jspin=0
      if(idtra.ne.0.and.mod(idtra,10).eq.0.and.ires.eq.1)
     *call idspin(1,ic,idu,jspin)
 
      if(imix.eq.1)then
      call idmix(ic,jspin,icm,idtram)
      if(idtram.ne.0)idtra=idtram
      if(jspin.eq.0)then
      if(iabs(idtra).eq.1230.and.rangen().lt.pispn)idtra=isi*2130
      if(iabs(idtra).eq.1240.and.rangen().lt.pispn)idtra=isi*2140
      if(iabs(idtra).eq.1340.and.rangen().lt.pispn)idtra=isi*3140
      if(iabs(idtra).eq.2340.and.rangen().lt.pispn)idtra=isi*3240
      endif
      elseif(imix.eq.2)then
      if(idtra.eq.220)idtra=110
      if(idtra.eq.330)idtra=110
      elseif(imix.eq.3)then
      if(idtra.eq.220)idtra=110
      if(idtra.eq.330)idtra=220
      endif
 
      if(idtra.ne.0)idtra=idtra+jspin*isi
 
      if(idtra.ne.0)return
      if(ier.ne.1)return
      jerr=jerr+1
      write(ifch,*)' '
      write(ifch,*)'***** error in idtra: unknown code'
      write(ifch,*)'ic = ',ic
      write(ifch,*)' '
      return
 
      entry idtrai(num,id,ier)
      idtrai=0
      j=0
      do 2 i=1,nidt
      if(iabs(id).eq.idt(3,i))j=i
2     continue
      if(j.ne.0)then
      if(id.lt.0)then
      idtrai=idt(3-num,j)
      else
      idtrai=idt(num,j)
      endif
      return
      endif
      if(ier.ne.1)return
      jerr=jerr+1
      write(ifch,*)' '
      write(ifch,*)'***** error in idtrai: unknown code'
      write(ifch,*)'id = ',id
      write(ifch,*)' '
      return
      end
 
c-----------------------------------------------------------------------
      subroutine idtrb(ib1,ib2,ib3,ib4,jc)
c     id transformation ib -> jc
c-----------------------------------------------------------------------
      parameter (nflav=6)
      integer ib(4),jc(nflav,2)
      jc(1,1)=ib1/10**4
      jc(2,1)=ib2/10**4
      jc(3,1)=ib3/10**4
      jc(4,1)=ib4/10**4
      jc(1,2)=mod(ib1,10**4)
      jc(2,2)=mod(ib2,10**4)
      jc(3,2)=mod(ib3,10**4)
      jc(4,2)=mod(ib4,10**4)
      return
      entry idtrbi(jc,ib1,ib2,ib3,ib4)
      ib1=jc(1,1)*10**4+jc(1,2)
      ib2=jc(2,1)*10**4+jc(2,2)
      ib3=jc(3,1)*10**4+jc(3,2)
      ib4=jc(4,1)*10**4+jc(4,2)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine jamfra(js,newevt)
c     fragments string js according to a-m cascade
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (nptf=129)
      common /cptf/xptf(nptf),wptf(nptf)
     *,qptfu(nptf),qptfs(nptf),qptfuu(nptf),qptfus(nptf),qptfss(nptf)
      parameter (ngau=129)
      common /cgau/xgau(ngau),qgau(ngau),wgau(ngau)
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (mxpc=500)
      dimension norpc(mxpc),xbkpc(4,mxpc),nstpc(mxpc),iclpc(mxpc)
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      parameter(mxsg=500)
      dimension psg(5,mxsg),icsg(4,mxsg),pmxsg(mxsg),isg(mxsg)
     *,rotsg(3,mxsg),xbksg(4,mxsg),kinsg(mxsg),iorsg(mxsg)
     *,irksg(mxsg),ibnsg(mxsg),xorsg(4,mxsg),iclsg(mxsg)
      parameter (mxjt=2*mxsg)
      dimension pjt(5,mxjt),icjt(2,mxjt)
     *,nstjt(mxjt)
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
      parameter (nflav=6)
      integer jcp(nflav,2),jcm(nflav,2),jcpm(nflav,2),jcmp(nflav,2)
     *,jcps(nflav,2),jcms(nflav,2)
     *,icp(2),icm(2),icpm(2),icmp(2)
     *,icps(2),icms(2),ic(2),ics(2),jc(nflav,2),icx(2),jcx(nflav,2)
     *,icy(2),jcy(nflav,2)
      real ps(5),pss(5),u(3),xbk(4),xor1(4),xor2(4),xmeet(4),xbkp(4)
     *,xbkp0(4)
      parameter (mxindx=1000,mxre=100,mxma=11,mxmx=6)
      common/crema/indx(mxindx),rema(mxre,mxma),rewi(mxre,mxma)
     *,idmx(mxma,mxmx),icre1(mxre,mxma),icre2(mxre,mxma)
      parameter (nsi=6)
      real str(nsi,2)
      real arp(4),arm(4)
      zero=0
      newevt=0
 
      psg(1,1)=pstr(1,js)
      psg(2,1)=pstr(2,js)
      psg(3,1)=pstr(3,js)
      psg(4,1)=pstr(4,js)
      psg(5,1)=pstr(5,js)
      rotsg(1,1)=rotstr(1,js)
      rotsg(2,1)=rotstr(2,js)
      rotsg(3,1)=rotstr(3,js)
      xorsg(1,1)=xorstr(1,js)
      xorsg(2,1)=xorstr(2,js)
      xorsg(3,1)=xorstr(3,js)
      xorsg(4,1)=xorstr(4,js)
      s=pstr(4,js)**2-pstr(3,js)**2-pstr(2,js)**2-pstr(1,js)**2
      xbksg(1,1)=0
      xbksg(2,1)=0
      xbksg(3,1)=-sqrt(s)/2
      xbksg(4,1)= sqrt(s)/2
      call utrota(-1,rotsg(1,1),rotsg(2,1),rotsg(3,1)
     *,xbksg(1,1),xbksg(2,1),xbksg(3,1))
      call utlobo(-1,psg(1,1),psg(2,1),psg(3,1),psg(4,1)
     *,xbksg(1,1),xbksg(2,1),xbksg(3,1),xbksg(4,1))
      do 43 j=1,4
43    xbksg(j,1)=xbksg(j,1)+xorsg(j,1)
      xbkp0(1)=0
      xbkp0(2)=0
      xbkp0(3)=sqrt(s)/2
      xbkp0(4)=sqrt(s)/2
      call utrota(-1,rotsg(1,1),rotsg(2,1),rotsg(3,1)
     *,xbkp0(1),xbkp0(2),xbkp0(3))
      call utlobo(-1,psg(1,1),psg(2,1),psg(3,1),psg(4,1)
     *,xbkp0(1),xbkp0(2),xbkp0(3),xbkp0(4))
      do 51 j=1,4
51    xbkp0(j)=xbkp0(j)+xorsg(j,1)
      irksg(1)=0
      ibnsg(1)=0
      isg(1)=iorstr(js)
      iorsg(1)=0
      do 1 i=1,2
      pjt(1,i)=0
      pjt(2,i)=0
      pjt(3,i)=sqrt(s)/2*(3-2*i)
      pjt(4,i)=sqrt(s)/2
      pjt(5,i)=0
      j0=2*i-2
      if(rotstr(3,js).lt.0.)j0=4-2*i
      do 3 j=1,2
3     icjt(j,i)=icstr(j0+j,js)
1     continue
 
c     entry string fragmentation
c     --------------------------
      nptl2=nptl
      ncnt2=0
9996  ncnt2=ncnt2+1
      nptl=nptl2
      nsg=1
      if(ncnt2.gt.1000)then
      newevt=1
      return
      endif
 
c     entry substring processing
c     --------------------------
      ns=0
9999  ns=ns+1
      if(ns.gt.nsg)goto9997
      if(ish.ge.3)write(ifch,*)'entry substring processing'
      if(ish.ge.3)write(ifch,*)' '
      if(ish.ge.3)write(ifch,107)ns
     *,(icjt(j,2*ns-1),j=1,2),(pjt(j,2*ns-1),j=1,5)
107   format(2x,i3,3x,3x,2i7,3x,5f7.2)
      if(ish.ge.3)write(ifch,107)ns
     *,(icjt(j,2*ns),j=1,2),(pjt(j,2*ns),j=1,5)
      if(ish.ge.3)write(ifch,101)ns,(psg(j,ns),j=1,5)
      if(ish.ge.3)write(ifch,114)(xbksg(j,ns),j=1,4)
101   format(2x,i3,23x,5f7.2/)
114   format(' left breaking pnt: ',8x,4f7.2/)
 
c     determine id and min.mass
c     -------------------------
      do 6 i=1,2
      icp(i)=icjt(i,2*ns-1)
6     icm(i)=icjt(i,2*ns)
      call idcomio(icp)
      call idcomio(icm)
      do 29 i=1,2
      icjt(i,2*ns-1)=icp(i)
29    icjt(i,2*ns)=icm(i)
      call iddeco(icp,jcp)
      call iddeco(icm,jcm)
      do 7 nf=1,nflav
      do 7 i=1,2
7     jc(nf,i)=jcp(nf,i)+jcm(nf,i)
      call idenco(jc,ic,ireten)
      if(ireten.eq.1)goto9984
      id=idtra(ic,0,0,3)
      idk=id
      call idmima(ic,amms,ier,'cmp-no','prt-ys')
      if(ier.gt.0)
     *call utstop('jamfra: idmima ret code > 0             ')
      am=psg(5,ns)
      if(am.gt.amms+delrem)id=0
 
c     if mass < min.mass ==> again
c     ----------------------------
      if(am.lt.amms-1e-3)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jamfra')
      write(ifch,*)'*****  mass < min mass. ',am,amms
      endif
      if(ish.ge.1)write(ifch,*)' '
      if(ns.eq.1)then
      newevt=1
      return
      endif
      goto9996
      endif
 
c     mass adjustment => fragment again
c     ---------------------------------
      amc=psg(5,ns)
      call idres(id,amc,idr,iadj)
      if(abs(amc-psg(5,ns)).gt.1e-3)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jamfra')
      write(ifch,*)'*****  mass changed. fragment again.'
      write(ifch,*)'mass before, after: ',psg(5,ns),amc
      write(ifch,*)'ic,id,idr: ',ic,id,idr
      endif
      if(ish.ge.1)write(ifch,*)' '
      goto9996
      endif
 
c     write on /cptl/
c     ---------------
      do 24 j=1,5
24    ps(j)=psg(j,ns)
      iori=isg(ns)
      nptlb=nptl
9995  nptl=nptl+1
      if(nptl.gt.mxptl)
     *call utstop('jamfra: nptl>mxptl                      ')
      do 40 j=1,5
40    pptl(j,nptl)=ps(j)
      do 38 j=1,4
38    xorptl(j,nptl)=xorsg(j,ns)
      iorptl(nptl)=iori
      jorptl(nptl)=0
      istptl(nptl)=0
      nstptl(nptl)=ns
      idptl(nptl)=idr
      if(idr.eq.0)then
      if(mod(ic(1),100).ne.0.or.mod(ic(2),100).ne.0)then
      idptl(nptl)=9*10**8
      else
      idptl(nptl)=8*10**8+ic(1)*100+ic(2)/100
      endif
      endif
      if(ish.ge.1)write(ifch,105)nptl,iorptl(nptl)
     *,idptl(nptl),(pptl(j,nptl),j=1,5),istptl(nptl)
105   format(1x,'/cptl/',1x,i3,i3,i11,3x,5f7.2,i4)
      if(ish.ge.3)write(ifch,*)' '
      if(idr.ne.0)goto9999
 
      nqp=0
      nqm=0
      nap=0
      nam=0
      np=0
      nm=0
      jp=0
      jm=0
      do 23 nf=1,nflav
      nqp=nqp+jcp(nf,1)
      nqm=nqm+jcm(nf,1)
      nap=nap+jcp(nf,2)
      nam=nam+jcm(nf,2)
      np=np+jcp(nf,1)-jcp(nf,2)
      nm=nm+jcm(nf,1)-jcm(nf,2)
      jp=jp+jcp(nf,1)+jcp(nf,2)
23    jm=jm+jcm(nf,1)+jcm(nf,2)
 
c     quark-cluster
c     -------------
      if(icp(1)+icp(2).eq.0.or.icm(1)+icm(2).eq.0
     *.or.jp.le.3.and.jm.le.3.and.am.le.amms+delrem.and.id.eq.0)then
      if(ish.ge.3)write(ifch,*)'quark-cluster'
      if(ish.ge.3)write(ifch,*)' '
      if(icp(1)+icp(2).eq.0.and.icm(1)+icm(2).eq.0)
     *call utstop('jamfra: zero string.                    ')
      goto9999
      endif
 
c     jet trafos
c     ----------
      if(ish.ge.3)write(ifch,*)'jet trafos'
      if(ish.ge.3)write(ifch,*)' '
      do 75 k=1,4
      arp(k)=pjt(k,2*ns-1)
75    arm(k)=pjt(k,2*ns)
      nso=iorsg(ns)
      if(nso.gt.0)then
      call utrota(-1,rotsg(1,nso),rotsg(2,nso),rotsg(3,nso)
     *,arp(1),arp(2),arp(3))
      call utlobo(-1,psg(1,nso),psg(2,nso),psg(3,nso),psg(4,nso)
     *,arp(1),arp(2),arp(3),arp(4))
      call utrota(-1,rotsg(1,nso),rotsg(2,nso),rotsg(3,nso)
     *,arm(1),arm(2),arm(3))
      call utlobo(-1,psg(1,nso),psg(2,nso),psg(3,nso),psg(4,nso)
     *,arm(1),arm(2),arm(3),arm(4))
      call utlobo(1,psg(1,ns),psg(2,ns),psg(3,ns),psg(4,ns)
     *,arp(1),arp(2),arp(3),arp(4))
      call utlobo(1,psg(1,ns),psg(2,ns),psg(3,ns),psg(4,ns)
     *,arm(1),arm(2),arm(3),arm(4))
      rotsg(1,ns)=arp(1)
      rotsg(2,ns)=arp(2)
      rotsg(3,ns)=arp(3)
      call utrota(1,rotsg(1,ns),rotsg(2,ns),rotsg(3,ns)
     *,arp(1),arp(2),arp(3))
      call utrota(1,rotsg(1,ns),rotsg(2,ns),rotsg(3,ns)
     *,arm(1),arm(2),arm(3))
      endif
      if(arp(3).lt.0)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jamfra')
      write(ifch,*)'*****  z-comp of +jet < 0.'
      endif
      if(ish.ge.1)write(ifch,*)' '
      if(ns.eq.1)then
      newevt=1
      return
      endif
      goto9996
      endif
      do 76 k=1,4
      pjt(k,2*ns-1)=arp(k)
76    pjt(k,2*ns)=arm(k)
      s=psg(5,ns)**2
      if(abs(pjt(3,2*ns-1)-pjt(3,2*ns)-sqrt(s)).gt.
     *1e-3*sqrt(s))then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jamfra')
      write(ifch,*)'*****  relerr ='
     *,abs(pjt(3,2*ns-1)-pjt(3,2*ns)-sqrt(s))
      write(ifch,*)'relerr = !pz1-pz2-sqrt(s)!/sqrt(s)'
      write(ifch,*)'sqrt(s)=',sqrt(s)
      write(ifch,*)(pjt(i,2*ns-1),i=1,5)
      write(ifch,*)(pjt(i,2*ns),i=1,5)
      endif
      if(ish.ge.1)write(ifch,*)' '
      endif
      if(ish.ge.3)write(ifch,103)ns,nso
     *,(icjt(j,2*ns-1),j=1,2),(pjt(j,2*ns-1),j=1,5)
103   format(2x,i3,i3,3x,2i7,3x,5f7.2)
      if(ish.ge.3)write(ifch,104)
     * (icjt(j,2*ns),j=1,2),(pjt(j,2*ns),j=1,5)
104   format(2x,9x,2i7,3x,5f7.2/)
 
c     split string
c     ------------
      istptl(nptl)=1
      p0p=0
      p0m=0
      do 5 j=2*ns-1,2*ns
      p0p=p0p+pjt(4,j)+pjt(3,j)
5     p0m=p0m+pjt(4,j)-pjt(3,j)
      ncnt3=0
9994  ncnt3=ncnt3+1
      if(ncnt3.gt.100)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jamfra')
      write(ifch,*)'*****  split kinem not possible.'
      write(ifch,112)
     *(icjt(j,2*ns-1),j=1,2),(icjt(j,2*ns),j=1,2),psg(5,ns)
112   format(1x,2i8,4x,2i8,4x,f7.2)
      endif
      if(ish.ge.1)write(ifch,*)' '
      if(ns.eq.1)then
      newevt=1
      return
      endif
      goto9996
      endif
      do 17 nf=1,nflav
      do 17 i=1,2
      jcpm(nf,i)=0
17    jcmp(nf,i)=0
 
c     ordinary strings
c     ----------------
      nqu=0
      if(am.gt.amms+delrem.or.id.ne.0)then
      if(ish.ge.3)write(ifch,*)'ordinary string fragmentation'
      if(ish.ge.3)write(ifch,*)' '
      nqu=1
      if(rangen().le.pdiqua)nqu=2
      ii=0
      if(mod(np+nqu,3).eq.0)ii=1
      if(mod(np-nqu,3).eq.0)ii=2
      if(ii.eq.0)
     *call utstop('jamfra: no singlet construction possible')
      ifltt=0
      do 8 n=1,nqu
      ifl=int(rangen()/pud)+1
      ifltt=ifltt*10+(ifl+1)/2
      jcpm(ifl,ii)=jcpm(ifl,ii)+1
8     jcmp(ifl,3-ii)=jcmp(ifl,3-ii)+1
      call idenco(jcpm,icpm,ireten)
      if(ireten.eq.1)goto9984
      call idenco(jcmp,icmp,ireten)
      if(ireten.eq.1)goto9984
      do 25 nf=1,nflav
      do 25 i=1,2
      jcps(nf,i)=jcp(nf,i)+jcpm(nf,i)
25    jcms(nf,i)=jcm(nf,i)+jcmp(nf,i)
      call idenco(jcps,icps,ireten)
      if(ireten.eq.1)goto9984
      call idenco(jcms,icms,ireten)
      if(ireten.eq.1)goto9984
 
c     quark-cluster strings
c     ---------------------
      else
      if(ish.ge.3)write(ifch,*)'quark-cluster string fragmentation'
      if(ish.ge.3)write(ifch,*)' '
      jmp=1
      if(jm.gt.jp)jmp=2
      if(jm.eq.jp.and.rangen().lt..5)jmp=2
      jx=0
      nx=0
      nqx=0
      nax=0
      if(jmp.eq.1)then
      jx=jp
      nx=np
      nqx=nqp
      nax=nap
      elseif(jmp.eq.2)then
      jx=jm
      nx=nm
      nqx=nqm
      nax=nam
      endif
      if(jx.le.3.or.mod(nx,3).eq.0)
     *call utstop('jamfra: no multi-quark jet              ')
      ip2=0
      ip1=0
      if(nqx.ge.2.and.mod(nx-2,3).eq.0)ip2=11
      if(nax.ge.2.and.mod(nx+2,3).eq.0)ip2=22
      if(nqx.ge.1.and.mod(nx-1,3).eq.0)ip1=1
      if(nax.ge.1.and.mod(nx+1,3).eq.0)ip1=2
      ip=ip1
      if(rangen().le.pdiqua)ip=ip2
      if(ip1.eq.0)ip=ip2
      if(ip2.eq.0)ip=ip1
      if(jmp.eq.1)then
      call randfl(jcp,ip,ii,icmp,0)
      icpm(1)=icmp(2)
      icpm(2)=icmp(1)
      else
      call randfl(jcm,ip,ii,icpm,0)
      icmp(1)=icpm(2)
      icmp(2)=icpm(1)
      endif
      if(ii.eq.0)
     *call utstop('jamfra: call randfl unsuccessful.       ')
      call iddeco(icpm,jcpm)
      call iddeco(icmp,jcmp)
      ifltt=0
      do 9 nf=1,nflav
      do 9 i=1,2
      if(jcpm(nf,i).eq.2)then
      ifltt=(nf+1)/2*10+(nf+1)/2
      elseif(jcpm(nf,i).eq.1)then
      ifltt=ifltt*10+(nf+1)/2
      endif
      jcps(nf,i)=jcp(nf,i)+jcpm(nf,i)
9     jcms(nf,i)=jcm(nf,i)+jcmp(nf,i)
      call idenco(jcps,icps,ireten)
      if(ireten.eq.1)goto9984
      call idenco(jcms,icms,ireten)
      if(ireten.eq.1)goto9984
      if(jmp.eq.1)then
      call idcomi(icps,icx)
      icps(1)=icx(1)
      icps(2)=icx(2)
      else
      call idcomi(icms,icx)
      icms(1)=icx(1)
      icms(2)=icx(2)
      endif
      endif
 
c     calculate p+,p-,pt of string breaking
c     -------------------------------------
      if(ish.ge.3)write(ifch,109)
     * icm(1),icmp(1),icpm(1),icp(1)
     *,icm(2),icmp(2),icpm(2),icp(2)
109   format(1x,'flavors:',2(i11,i7)/9x,2(i11,i7)/)
      if(ish.ge.3)write(ifch,*)'ifltt:',ifltt
      if(ish.ge.3)write(ifch,*)' '
      idp=idtra(icps,0,0,3)
      idm=idtra(icms,0,0,3)
      call idmima(icps,ammp,ier,'cmp-no','prt-ys')
      if(ier.gt.0)
     *call utstop('jamfra: idmima ret code > 0             ')
      call idmima(icms,ammm,ier,'cmp-no','prt-ys')
      if(ier.gt.0)
     *call utstop('jamfra: idmima ret code > 0             ')
      if(ifltt.eq.1)then
      pt=utinvt(nptf,xptf,qptfu ,rangen()*qptfu (nptf))
      elseif(ifltt.eq.2)then
      pt=utinvt(nptf,xptf,qptfs ,rangen()*qptfs (nptf))
      elseif(ifltt.eq.11)then
      pt=utinvt(nptf,xptf,qptfuu,rangen()*qptfuu(nptf))
      elseif(ifltt.eq.12.or.ifltt.eq.21)then
      pt=utinvt(nptf,xptf,qptfus,rangen()*qptfus(nptf))
      elseif(ifltt.eq.22)then
      pt=utinvt(nptf,xptf,qptfss,rangen()*qptfss(nptf))
      endif
      phi=2.*pi*rangen()
      px=pt*cos(phi)
      py=pt*sin(phi)
      tmmp=sqrt(pt**2+ammp**2)
      tmmm=sqrt(pt**2+ammm**2)
      area=-alog(rangen())/parea
      etam=alog((tmmm**2+area)/(sqrt(area)*p0m))
      etap=alog((sqrt(area)*p0p)/(tmmp**2+area))
      if(etam.gt.etap)goto9994
      if(nqu.eq.2)then
      if(rangen()*raphdi.gt.etap-etam)goto9994
      endif
      eta=etam+rangen()*(etap-etam)
      amp=sqrt(p0p*sqrt(area)*exp(-eta)-area-pt**2)
      amm=sqrt(p0m*sqrt(area)*exp( eta)-area-pt**2)
      call idres(idp,amp,idpr,iadjp)
      call idres(idm,amm,idmr,iadjm)
      tmp=sqrt(pt**2+amp**2)
      tmm=sqrt(pt**2+amm**2)
      if(iadjp.eq.1.and.iadjm.ne.1)then
      eta=alog((sqrt(area)*p0p)/(tmp**2+area))
      if(eta.lt.etam)goto9994
      amm=sqrt(p0m*sqrt(area)*exp(eta)-area-pt**2)
      call idres(idm,amm,idmr,iadjm)
      tmm=sqrt(pt**2+amm**2)
      endif
      if(iadjm.eq.1.and.iadjp.ne.1)then
      eta=alog((tmm**2+area)/(sqrt(area)*p0m))
      if(eta.gt.etap)goto9994
      amp=sqrt(p0p*sqrt(area)*exp(-eta)-area-pt**2)
      call idres(idp,amp,idpr,iadjp)
      tmp=sqrt(pt**2+amp**2)
      endif
      if(iadjp.eq.1.and.iadjm.eq.1)then
      tm=(p0p*p0m-tmm**2-tmp**2)/2
      if(tm**2-tmp**2*tmm**2.lt.0.)goto9994
      area=tm-sqrt(tm**2-tmp**2*tmm**2)
      eta=alog(p0p*sqrt(area)/(tmp**2+area))
      endif
      pp=sqrt(area)*exp(eta)
      pm=sqrt(area)*exp(-eta)
      if(p0p-pp-pt**2/pm.lt.0..or.p0m-pm-pt**2/pp.lt.0.)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jamfra')
      write(ifch,*)'*****  negative jet energy. split again.'
      if(p0p-pp-pt**2/pm.lt.0.)
     *write(ifch,*)'p0p: ',p0p,'   pp+pt**2/pm: ',pp+pt**2/pm
      if(p0m-pm-pt**2/pp.lt.0.)
     *write(ifch,*)'p0m: ',p0m,'   pm+pt**2/pp: ',pm+pt**2/pp
      endif
      if(ish.ge.1)write(ifch,*)' '
      goto9994
      endif
 
c     determine break pnt and new origins
c     -----------------------------------
      xor1(1)=0
      xor1(2)=0
      xor1(3)=pp/2/tensn
      xor1(4)=pp/2/tensn
      if(ish.ge.3)write(ifch,118)xor1
118   format(' new origin +: ',13x,4f7.2)
      call utrota(-1,rotsg(1,ns),rotsg(2,ns),rotsg(3,ns)
     *,xor1(1),xor1(2),xor1(3))
      call utlobo(-1,psg(1,ns),psg(2,ns),psg(3,ns),psg(4,ns)
     *,xor1(1),xor1(2),xor1(3),xor1(4))
      do 44 j=1,4
44    xor1(j)=xor1(j)+xorsg(j,ns)
      if(ish.ge.3)write(ifch,117)xor1
      xbk(1)=0
      xbk(2)=0
      xbk(3)=(pp-pm)/2/tensn
      xbk(4)=(pp+pm)/2/tensn
      if(ish.ge.3)write(ifch,116)xbk
116   format(' breaking pnt: ',13x,4f7.2)
      call utrota(-1,rotsg(1,ns),rotsg(2,ns),rotsg(3,ns)
     *,xbk(1),xbk(2),xbk(3))
      call utlobo(-1,psg(1,ns),psg(2,ns),psg(3,ns),psg(4,ns)
     *,xbk(1),xbk(2),xbk(3),xbk(4))
      do 45 j=1,4
45    xbk(j)=xbk(j)+xorsg(j,ns)
      if(ish.ge.3)write(ifch,117)xbk
117   format(28x,4f7.2/)
      xor2(1)=0
      xor2(2)=0
      xor2(3)=-pm/2/tensn
      xor2(4)= pm/2/tensn
      if(ish.ge.3)write(ifch,119)xor2
119   format(' new origin -: ',13x,4f7.2)
      call utrota(-1,rotsg(1,ns),rotsg(2,ns),rotsg(3,ns)
     *,xor2(1),xor2(2),xor2(3))
      call utlobo(-1,psg(1,ns),psg(2,ns),psg(3,ns),psg(4,ns)
     *,xor2(1),xor2(2),xor2(3),xor2(4))
      do 46 j=1,4
46    xor2(j)=xor2(j)+xorsg(j,ns)
      if(ish.ge.3)write(ifch,117)xor2
 
c     store the two substrings
c     ------------------------
      nsgb=nsg
      do 9998 m=1,2
      nsg=nsg+1
      if(nsg.gt.mxsg)
     *call utstop('jamfra: nsg>mxsg                        ')
      isg(nsg)=nptl
      iclsg(nsg)=0
      irksg(nsg)=irksg(ns)+1
      ibnsg(nsg)=ibnsg(ns)*2+m-1
           if(m.eq.1)then
      do 36 j=1,4
36    xbksg(j,nsg)=xbk(j)
      do 41 j=1,4
41    xorsg(j,nsg)=xor1(j)
      pjt(1,2*nsg-1)=0
      pjt(2,2*nsg-1)=0
      pjt(3,2*nsg-1)=(p0p-pp-pt**2/pm)/2
      pjt(4,2*nsg-1)=(p0p-pp-pt**2/pm)/2
      pjt(5,2*nsg-1)=0
      do 10 j=1,2
10    icjt(j,2*nsg-1)=icjt(j,2*ns-1)
      pjt(1,2*nsg)=px
      pjt(2,2*nsg)=py
      pjt(3,2*nsg)=(pt**2/pm-pm)/2
      pjt(4,2*nsg)=(pt**2/pm+pm)/2
      pjt(5,2*nsg)=0
      do 11 j=1,2
      ic(j)=icps(j)
11    icjt(j,2*nsg)=icpm(j)
           else
      do 37 j=1,4
37    xbksg(j,nsg)=xbksg(j,ns)
      do 42 j=1,4
42    xorsg(j,nsg)=xor2(j)
      pjt(1,2*nsg-1)=-px
      pjt(2,2*nsg-1)=-py
      pjt(3,2*nsg-1)=(pp-pt**2/pp)/2
      pjt(4,2*nsg-1)=(pp+pt**2/pp)/2
      pjt(5,2*nsg-1)=0
      do 12 j=1,2
      ic(j)=icms(j)
12    icjt(j,2*nsg-1)=icmp(j)
      pjt(1,2*nsg)=0
      pjt(2,2*nsg)=0
      pjt(3,2*nsg)=-(p0m-pm-pt**2/pp)/2
      pjt(4,2*nsg)= (p0m-pm-pt**2/pp)/2
      pjt(5,2*nsg)=0
      do 13 j=1,2
13    icjt(j,2*nsg)=icjt(j,2*ns)
           endif
      do 18 i=1,2
      icx(i)=icjt(i,2*nsg-1)
18    icy(i)=icjt(i,2*nsg)
      call iddeco(icx,jcx)
      call iddeco(icy,jcy)
      call iddeco(ic,jc)
      do 28 n=1,nflav
      do 28 i=1,2
      k=jcx(n,i)+jcy(n,i)-jc(n,i)
      if(k.le.0)goto28
      do 19 l=1,k
      jx=jcx(n,i)
      jy=jcy(n,i)
      if(jx.gt.0.and.jy.eq.0)then
      jcx(n,i)=jcx(n,i)-1
      elseif(jx.eq.0.and.jy.gt.0)then
      jcy(n,i)=jcy(n,i)-1
      elseif(jx.gt.0.and.jy.gt.0)then
      if(rangen().lt..5)then
      jcx(n,i)=jcx(n,i)-1
      else
      jcy(n,i)=jcy(n,i)-1
      endif
      else
      write(ifch,*)('*',lp=1,71)
      write(ifch,*)'*****  ic;  ',ic
      write(ifch,*)'*****  icx: ',icx
      write(ifch,*)'*****  icy: ',icy
      write(ifch,*)'*****  n,i,k,l: ',n,i,k,l
      write(ifch,*)'*****  jx,jy: ',jx,jy
      write(ifch,*)('*',lp=1,71)
      call utstop('jamfra: error during jet compactificatn ')
      endif
19    continue
28    continue
      call idenco(jcx,icx,ireten)
      if(ireten.eq.1)goto9984
      call idenco(jcy,icy,ireten)
      if(ireten.eq.1)goto9984
      do 20 i=1,2
      icjt(i,2*nsg-1)=icx(i)
20    icjt(i,2*nsg)=icy(i)
      if(ish.ge.3)write(ifch,108)nsg,ns
     *,(icjt(j,2*nsg-1),j=1,2),(pjt(j,2*nsg-1),j=1,5)
108   format(2x,i3,i3,3x,2i7,3x,5f7.2)
      if(ish.ge.3)write(ifch,108)nsg,ns
     *,(icjt(j,2*nsg),j=1,2),(pjt(j,2*nsg),j=1,5)
      do 14 j=1,4
14    psg(j,nsg)=pjt(j,2*nsg-1)+pjt(j,2*nsg)
      psg(5,nsg)=
     *sqrt(psg(4,nsg)**2-psg(3,nsg)**2-psg(2,nsg)**2-psg(1,nsg)**2)
      if(ish.ge.3)write(ifch,110)nsg,ns,(psg(j,nsg),j=1,5)
110   format(2x,i3,i3,20x,5f7.2)
      call utrota(-1,rotsg(1,ns),rotsg(2,ns),rotsg(3,ns)
     *,psg(1,nsg),psg(2,nsg),psg(3,nsg))
      call utlobo(-1,psg(1,ns),psg(2,ns),psg(3,ns),psg(4,ns)
     *,psg(1,nsg),psg(2,nsg),psg(3,nsg),psg(4,nsg))
      iorsg(nsg)=ns
      if(ish.ge.2)write(ifch,102)nsg,iorsg(nsg),(psg(j,nsg),j=1,5)
102   format(2x,i3,i3,20x,5f7.2)
      if(ish.ge.3)write(ifch,*)' '
9998  continue
      goto9999
 
c     ordering
c     --------
9997  irkmx=0
      do 31 n=1,nsg
      if(irksg(n).gt.irkmx)irkmx=irksg(n)
31    continue
      do 32 n=1,nsg
32    ibnsg(n)=ibnsg(n)*2**(irkmx-irksg(n))
      npc=0
34    ibnmx=-1
      nmx=-1
      do 33 n=nptl2+1,nptl
      if(istptl(n).ne.0)goto33
      i=nstptl(n)
      if(i.eq.0)goto33
      if(ibnsg(i).gt.ibnmx)then
      ibnmx=ibnsg(i)
      nmx=n
      endif
33    continue
      if(nmx.gt.0)then
      npc=npc+1
      if(npc.gt.mxpc)
     *call utstop('jamfra: npc>mxpc                        ')
      norpc(npc)=nmx
      i=nstptl(nmx)
      nstpc(npc)=i
      do 47 j=1,4
47    xbkpc(j,npc)=xbksg(j,i)
      nstptl(nmx)=0
      goto34
      endif
      if(npc.le.0)goto9992
      do 50 n=1,npc
      k=norpc(n)
50    nstptl(k)=js
      if(ish.ge.1)then
      write(ifch,*)' '
      write(ifch,*)'ordered hadrons'
      write(ifch,*)' '
      do 35 n=1,npc
      k=norpc(n)
      write(ifch,115)k,idptl(k)
     *,(pptl(j,k),j=3,5),(xorptl(j,k),j=3,4),(xbkpc(j,n),j=3,4)
115   format(1x,'/cptl/',1x,i3,i10,3x,3f6.2,3x,2(1x,f5.2),3x,2(1x,f5.2))
35    continue
      write(ifch,*)' '
      endif
 
c     space-time plot
c     ---------------
      if(ish.ge.3)then
      write(ifch,*)'space-time plot'
      write(ifch,*)' '
      nct=0
      do 48 n=1,npc
      k=norpc(n)
      i=nstpc(n)
      do 49 j=1,4
      if(n.lt.npc)xbkp(j)=xbkpc(j,n+1)
      if(n.eq.npc)xbkp(j)=xbkp0(j)
49    xmeet(j)=xbkpc(j,n)+xbkp(j)-xorptl(j,k)
      x3=xorptl(3,k)+pptl(3,k)/tensn
      x4=xorptl(4,k)+pptl(4,k)/tensn
      write(ifch,120)9*(n-1)+1, xbkpc(3,n),zero, xbkpc(4,n),zero,zero
      write(ifch,120)9*(n-1)+2, xmeet(3)  ,zero, xmeet(4)  ,zero,zero
      write(ifch,120)9*(n-1)+3,  xbkp(3)  ,zero,  xbkp(4)  ,zero,zero
      write(ifch,120)9*(n-1)+4,xorptl(3,k),zero,xorptl(4,k),zero,zero
      write(ifch,120)9*(n-1)+5,    x3     ,zero,    x4     ,zero,zero
      write(ifch,120)9*(n-1)+6,xorptl(3,k),zero,xorptl(4,k),zero,zero
      write(ifch,120)9*(n-1)+7, xbkpc(3,n),zero, xbkpc(4,n),zero,zero
      write(ifch,120)9*(n-1)+8, xmeet(3)  ,zero, xmeet(4)  ,zero,zero
      write(ifch,120)9*(n-1)+9,  xbkp(3)  ,zero,  xbkp(4)  ,zero,zero
120   format(5x,i5,5e11.3)
48    continue
      write(ifch,*)' '
      endif
 
c     fuse particles
c     --------------
      nptl3=nptl
      tmeu=ainfin
      tmex=-tmeu
9991  tme=tmeu
      if(tmex.eq.-tmeu)tme=xorstr(4,js)
      do 70 n=2,npc
      tmen=xbkpc(4,n)
      if(tmen.gt.tmex.and.tmen.lt.tme)tme=tmen
70    continue
      if(tme.gt.tmex.and.tme.lt.tmeu)then
      if(ish.ge.3)write(ifch,*)'tme: ',tme
      if(ish.ge.3)write(ifch,*)' '
      n=0
9990  n=n+1
      if(n.gt.npc)goto9988
      l=-1
9987  l=l+1
      if(n+l+1.le.npc.and.xbkpc(4,n+l+1).gt.tme)goto9987
      if(nptl.gt.nptl3)then
      do 57 np=nptl3+1,nptl
      if(n*10000+n+l.eq.istptl(np))goto9986
57    continue
      endif
      nptl=nptl+1
      if(nptl.gt.mxptl)
     *call utstop('jamfra: nptl>mxptl                      ')
      k=norpc(n)
      i=nstpc(n)
      tivptl(1,nptl)=tme
      tivptl(2,nptl)=tmeu
      idptl(nptl)=idptl(k)
      do 52 j=1,5
52    pptl(j,nptl)=pptl(j,k)
      do 53 j=1,4
53    xorptl(j,nptl)=xorptl(j,k)
      if(ish.ge.3.and.l.eq.0)
     *write(ifch,115)k,idptl(nptl),(pptl(j,nptl),j=3,5)
     *,(xorptl(j,nptl),j=3,4),(tivptl(j,nptl),j=1,2)
           if(l.gt.0)then
      do 59 j=1,2
      icp(j)=icjt(j,2*i-1)
59    icm(j)=icjt(j,2*i)
      call iddeco(icp,jcp)
      call iddeco(icm,jcm)
      do 60 nf=1,nflav
      do 60 j=1,2
60    jc(nf,j)=jcp(nf,j)+jcm(nf,j)
      if(ish.ge.3)then
      call idcomj(jc)
      call idenco(jc,ic,ireten)
      if(ireten.eq.1)goto9984
      if(mod(ic(1),100).ne.0.or.mod(ic(2),100).ne.0)then
      idptl(nptl)=9*10**8
      else
      idptl(nptl)=8*10**8+ic(1)*100+ic(2)/100
      endif
      write(ifch,115)k,idptl(nptl),(pptl(j,nptl),j=3,4),zero
     *,(xorptl(j,nptl),j=3,4),(tivptl(j,nptl),j=1,2)
      endif
      do 56 m=n+1,n+l
      k=norpc(m)
      i=nstpc(m)
      do 61 j=1,2
      icp(j)=icjt(j,2*i-1)
61    icm(j)=icjt(j,2*i)
      call iddeco(icp,jcp)
      call iddeco(icm,jcm)
      do 63 nf=1,nflav
      do 63 j=1,2
63    jc(nf,j)=jc(nf,j)+jcp(nf,j)+jcm(nf,j)
      do 55 j=1,4
55    xorptl(j,nptl)=xorptl(j,nptl)+xorptl(j,k)-xbkpc(j,m)
      do 54 j=1,4
54    pptl(j,nptl)=pptl(j,nptl)+pptl(j,k)
      if(ish.ge.3)then
      call idcomj(jc)
      call idenco(jc,ic,ireten)
      if(ireten.eq.1)goto9984
      if(mod(ic(1),100).ne.0.or.mod(ic(2),100).ne.0)then
      idptl(nptl)=9*10**8
      else
      idptl(nptl)=8*10**8+ic(1)*100+ic(2)/100
      endif
      write(ifch,115)k,idptl(nptl),(pptl(j,nptl),j=3,4),zero
     *,(xorptl(j,nptl),j=3,4),(tivptl(j,nptl),j=1,2)
      endif
56    continue
      call idcomj(jc)
      call idenco(jc,ic,ireten)
      if(ireten.eq.1)goto9984
      if(mod(ic(1),100).ne.0.or.mod(ic(2),100).ne.0)then
      idptl(nptl)=9*10**8
      else
      idptl(nptl)=8*10**8+ic(1)*100+ic(2)/100
      endif
      pptl(5,nptl)=sqrt(pptl(4,nptl)**2-pptl(3,nptl)**2
     *-pptl(2,nptl)**2-pptl(1,nptl)**2)
           endif
      if(ish.ge.3)write(ifch,*)' '
      nstptl(nptl)=js
      istptl(nptl)=n*10000+n+l
      iorptl(nptl)=0
      jorptl(nptl)=0
      if(nptl.gt.nptl3)then
      npx=0
      do 58 np=nptl3+1,nptl
      if(n.ge.istptl(np)/10000.and.n+l.le.mod(istptl(np),10000).and.
     *(n.ne.istptl(np)/10000.or.n+l.ne.mod(istptl(np),10000)))npx=np
58    continue
      if(npx.gt.0)then
      iorptl(nptl)=npx
      tivptl(2,npx)=tme
      if(ish.ge.3)write(ifch,*)'ior,tiv2: ',npx,tme
      if(ish.ge.3)write(ifch,*)' '
      endif
      endif
9986  n=n+l
      goto9990
9988  tmex=tme
      goto9991
      endif
 
c     overwrite /cptl/
c     ----------------
      if(nptl.le.nptl3)
     *call utstop('jamfra: nptl<=nptl3                     ')
      n=nptl2
      do 64 k=nptl3+1,nptl
      n=n+1
      istptl(k)=n
      tivptl(1,n)=tivptl(1,k)
      tivptl(2,n)=tivptl(2,k)
      idptl(n)=idptl(k)
      do 65 j=1,5
65    pptl(j,n)=pptl(j,k)
      do 66 j=1,4
66    xorptl(j,n)=xorptl(j,k)
      nstptl(n)=nstptl(k)
      if(iorptl(k).gt.0)then
      iorptl(n)=istptl(iorptl(k))
      else
      iorptl(n)=0
      endif
      jorptl(n)=0
      ifrptl(1,n)=0
64    ifrptl(2,n)=0
      nptl=n
      do 67 i=nptl2+1,nptl
      io=iorptl(i)
      if(io.gt.0)then
      if(ifrptl(1,io).eq.0)ifrptl(1,io)=i
      ifrptl(2,io)=i
      endif
      istptl(i)=0
      if(tivptl(2,i).lt.tmeu)istptl(i)=1
      if(istptl(i).ne.0)goto67
      call idtau(idptl(i),pptl(4,i),pptl(5,i),taugm)
      tivptl(2,i)=tivptl(1,i)+taugm
67    continue
 
c     write /cptl/
c     ------------
      if(ish.ge.1)then
      write(ifch,*)'time-ordered strings'
      write(ifch,*)' '
      do 68 n=nptl2+1,nptl
      write(ifch,115)n,idptl(n)
     *,(pptl(j,n),j=3,5),(xorptl(j,n),j=3,4),(tivptl(j,n),j=1,2)
68    continue
      write(ifch,*)' '
      endif
 
      return
 
9984  continue
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jamfra')
      write(ifch,*)'*****  idenco ret code = 1   ==> newevt = 1'
      endif
      if(ish.ge.1)write(ifch,*)' '
      newevt=1
      return
 
9992  write(ifch,*)' '
      write(ifch,*)('*',n=1,71)
      write(ifch,*)'npc,nptl2+1,nptl,ibnmx:',npc,nptl2+1,nptl,ibnmx
      write(ifch,*)'istptl:'
      write(ifch,*)(istptl(n),n=nptl2+1,nptl)
      write(ifch,*)'nstptl:'
      write(ifch,*)(nstptl(n),n=nptl2+1,nptl)
      write(ifch,*)'ibnsg:'
      write(ifch,*)(ibnsg(n),n=1,50)
      write(ifch,*)'nstpc:'
      write(ifch,*)(nstpc(n),n=1,50)
      write(ifch,*)' '
      call utstop('jamfra: npc=0                           ')
      end
 
c-----------------------------------------------------------------------
      subroutine jclude(ip,iret)
c     decays cluster ip
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (nflav=6)
      integer icp(2),icm(2),ic(2),ics(2),jc(nflav,2),jcs(nflav,2)
      real ps(5),pss(5),u(3)
 
      nptlb=nptl
      do 24 j=1,5
24    ps(j)=pptl(j,ip)
      if(idptl(ip)/10**8.ne.7)then
      call idtr4(idptl(ip),ic)
      call iddeco(ic,jc)
      id=idtra(ic,0,0,3)
      else
      call idtrb(ibptl(1,ip),ibptl(2,ip),ibptl(3,ip),ibptl(4,ip),jc)
      id=0
      endif
      if(ish.ge.3)then
      write(ifch,*)('-',l=1,71)
      write(ifch,*)'cluster decay of',idptl(ip),ps(5)
      write(ifch,*)'jc:'
      write(ifch,*)jc
      endif
 
9985  nptl=nptl+1
      if(nptl.gt.mxptl)
     *call utstop('jclude: nptl>mxptl                      ')
      if(id.ne.0)then
      ia=1
      if(rangen().le..5)ia=2
      jc(ia,1)=jc(ia,1)+1
      jc(ia,2)=jc(ia,2)+1
      endif
      nq=0
      na=0
      do 16 i=1,nflav
      nq=nq+jc(i,1)
16    na=na+jc(i,2)
      sum=na*(na-1)*(na-2)/6+nq*(nq-1)*(nq-2)/6+nq*na
      if(sum.eq.0.)
     *call utstop('jclude: sum=0                           ')
      pmes=nq*na               /sum
      pbar=nq*(nq-1)*(nq-2)/6  /sum
      paba=na*(na-1)*(na-2)/6  /sum
 
      ncnt4=0
9993  ncnt4=ncnt4+1
      if(ncnt4.gt.1000)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jclude')
      write(ifch,*)'*****  multiquark decay not possible. iret = 1.'
      write(ifch,111)ic(1),ic(2),ps(5)
111   format(1x,2i8,4x,f7.2)
      endif
      if(ish.ge.1)write(ifch,*)' '
      goto9996
      endif
 
      r=rangen()
      if(r.lt.pmes)then
      ip1=1
      ip2=2
      elseif(r.lt.pmes+pbar)then
      ip1=1
      ip2=11
      else
      ip1=2
      ip2=22
      endif
      call jstrij(ip1,ip2,jc,idhad,jcs,iestrp,0,1)
      if(iestrp.gt.0)
     *call utstop('jclude: jstrij err code > 0             ')
      if(ish.ge.3)then
      write(ifch,*)'stripped jc:'
      write(ifch,*)jcs
      endif
      ida=iabs(idhad)
      call idmass(idhad,amm1)
      do 1 nf=1,nflav
      do 1 i=1,2
      if(jcs(nf,i).ge.10)ids=7*10**8
1     continue
      if(ids/10**8.ne.7)then
      call idenco(jcs,ics,ireten)
      if(ireten.eq.1)
     *call utstop('jclude: idenco ret code = 1             ')
      ids=idtra(ics,0,0,3)
      else
      ids=0
      endif
      call idmimj(jcs,amm2,ier,'cmp-no','prt-no')
      if(ier.gt.0)
     *call utstop('jclude: idmimj err code > 0             ')
 
      if(amm1+amm2.gt.ps(5))goto9993
      qcmmax=utpcm(ps(5),amm1,amm2)
      qcm=qcmmax*(rangen())**.33
      amx1=sqrt( (ps(5)-sqrt(amm2**2+qcm**2))**2-qcm**2 )
      am1=amm1+rangen()*(amx1-amm1)
      if(am1.lt.amm1-1e-4)goto9993
      if(am1.lt.amm1)am1=amm1
      am1b=am1
      am1=am1+.010
22    am1=am1-.010
      if(am1.lt.0)then
      if(ish.ge.1)write(ifch,*)' '
      write(ifch,*)'id,am: ',idhad,am1b
      call utstop('jclude: no resonance found.             ')
      endif
      call idres(idhad,am1,idhadr,iadj)
      if(idhadr.eq.0)goto22
      idhad=idhadr
      am2=sqrt(amax1( amm2**2, (ps(5)-sqrt(am1**2+qcm**2))**2-qcm**2 ))
      call idres(ids,am2,idsr,iadj)
      if(am1+am2.gt.ps(5))goto9993
      qcm=utpcm(ps(5),am1,am2)
      u(3)=2.*rangen()-1.
      phi=2.*pi*rangen()
      u(1)=sqrt(1.-u(3)**2)*cos(phi)
      u(2)=sqrt(1.-u(3)**2)*sin(phi)
      do 27 j=1,3
      pptl(j,nptl)=qcm*u(j)
      pss(j)=-pptl(j,nptl)
27    continue
      pptl(4,nptl)=sqrt(qcm**2+am1**2)
      pss(4)=sqrt(qcm**2+am2**2)
      pptl(5,nptl)=am1
      pss(5)=am2
      call utlobo(-1,ps(1),ps(2),ps(3),ps(4)
     *,pptl(1,nptl),pptl(2,nptl),pptl(3,nptl),pptl(4,nptl))
      call utlobo(-1,ps(1),ps(2),ps(3),ps(4)
     *,pss(1),pss(2),pss(3),pss(4))
      istptl(nptl)=0
      idptl(nptl)=idhad
      do 26 j=1,5
26    ps(j)=pss(j)
      do 21 nf=1,nflav
      do 21 j=1,2
21    jc(nf,j)=jcs(nf,j)
      id=ids
      if(idsr.eq.0)goto9985
 
      nptl=nptl+1
      if(nptl.gt.mxptl)
     *call utstop('jamfra: nptl>mxptl                      ')
      do 40 j=1,5
40    pptl(j,nptl)=ps(j)
      idptl(nptl)=idsr
 
      if(ish.ge.3)write(ifch,*)('-',l=1,71)
      iret=0
      return
 
9996  continue
      if(ish.ge.3)write(ifch,*)('-',l=1,71)
      iret=1
      return
      end
 
c-----------------------------------------------------------------------
      subroutine jdeca(i,iret)
c     decays i (calls jdecay)
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      iret=0
      if(istptl(i).ne.0)return
      ida=iabs(idptl(i))
      if(mod(ndecay        ,10).eq.1)return
      if(mod(ndecay/10     ,10).eq.1.and.ida.eq.  20)return
      if(mod(ndecay/100    ,10).eq.1.and.ida.eq.2130)return
      if(mod(ndecay/1000   ,10).eq.1.and.ida.eq.1130)return
      if(mod(ndecay/1000   ,10).eq.1.and.ida.eq.2230)return
      if(mod(ndecay/10000  ,10).eq.1.and.ida.eq.2330)return
      if(mod(ndecay/10000  ,10).eq.1.and.ida.eq.1330)return
      if(mod(ndecay/100000 ,10).eq.1.and.ida.eq.3331)return
      if(mod(ndecay/1000000,10).eq.1.and.ida.eq. 110)return
      t=tivptl(2,i)
      nptlb=nptl
      if(nptl.gt.mxptl-10)
     *call utstop('jdecfu: mxptl too small                 ')
      call jdecay(i,iret)
      if(iret.eq.1)return
      if(nptl.le.nptlb)return
      if(ish.ge.1)write(ifch,115)i,idptl(i)
     *,(pptl(k,i),k=3,5),(xorptl(k,i),k=3,4),(tivptl(k,i),k=1,2)
115   format(1x,'/cptl/',1x,i3,i10,3x,3f6.2,3x,2(1x,f5.2),3x,2(1x,f5.2))
      istptl(i)=1
      ifrptl(1,i)=nptlb+1
      ifrptl(2,i)=nptl
      x=xorptl(1,i)+(t-xorptl(4,i))*pptl(1,i)/pptl(4,i)
      y=xorptl(2,i)+(t-xorptl(4,i))*pptl(2,i)/pptl(4,i)
      z=xorptl(3,i)+(t-xorptl(4,i))*pptl(3,i)/pptl(4,i)
      do 20 n=nptlb+1,nptl
      iorptl(n)=i
      jorptl(n)=0
      istptl(n)=0
      ifrptl(1,n)=0
      ifrptl(2,n)=0
      nstptl(n)=nstptl(i)
      xorptl(1,n)=x
      xorptl(2,n)=y
      xorptl(3,n)=z
      xorptl(4,n)=t
      tivptl(1,n)=t
      call idtau(idptl(n),pptl(4,n),pptl(5,n),taugm)
      tivptl(2,n)=tivptl(1,n)+taugm
      if(ish.ge.1)write(ifch,115)n,idptl(n)
     *,(pptl(k,n),k=3,5),(xorptl(k,n),k=3,4),(tivptl(k,n),k=1,2)
20    continue
      return
      end
 
c-----------------------------------------------------------------------
      subroutine jdecay(ip,iret)
c     decays particle ip from /cptl/
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/wco/wmass2,wgam2
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (mxlook=10000,mxdky=2000)
      common/dkytab/look(mxlook),cbr(mxdky),mode(5,mxdky)
      parameter (mxjet=10000)
      common/cnsta/pi,prom,piom,ainfin
      dimension pgen(5,5),rnd(5),u(3),beta(3),idqk(3),rot(3,3),psave(3)
     1,reduce(5)
      dimension pold(4),pnew(4)
      dimension prest(4,5)
      data reduce/1.,1.,2.,5.,15./
      data twome/1.022006e-3/
 
c          fctn definitions
      dot(i1,i2)=prest(4,i1)*prest(4,i2)-prest(1,i1)*prest(1,i2)
     $-prest(2,i1)*prest(2,i2)-prest(3,i1)*prest(3,i2)
c          charged w propagator.
      wprop(z)=(z-wmass2**2)**2+(wmass2*wgam2)**2
 
      iret=0
 
c     cluster decay
c     -------------
      if(iabs(idptl(ip)).gt.1e8)then
      call jclude(ip,iret)
      return
      endif
 
c          select decay mode
      ntry=0
2     ntry=ntry+1
      if(ntry.gt.100)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jdecay')
      write(ifch,*)'*****  decay not possible. iret = 1.'
      write(ifch,*)'id,mass: ',idptl(ip),pptl(5,ip)
      endif
      if(ish.ge.1)write(ifch,*)' '
      iret=1
      return
      endif
      idlv1=idptl(ip)
      amss=pptl(5,ip)
1     continue
      ipoint=look(iabs(idlv1))-1
      if(ipoint.lt.0) return
      try=rangen()
100   ipoint=ipoint+1
      if(try.gt.cbr(ipoint)) goto100
      nadd=0
      sum=0.
      nstart=nptl+1
      do 110 i=1,5
      if(mode(i,ipoint).eq.0) goto110
      if(nptl+nadd+1.gt.mxptl) goto9999
      nadd=nadd+1
      new=nptl+nadd
      idptl(new)=mode(i,ipoint)
      idlv1=idptl(new)
      call idmass(idlv1,pptl(5,new))
      sum=sum+pptl(5,new)
110   continue
      if(nadd.ne.1.and.sum.ge.amss)goto2
      nadd1=nadd-1
      do 120 j=1,5
      pgen(j,1)=pptl(j,ip)
120   continue
      pgen(5,nadd)=pptl(5,nptl+nadd)
      if(nadd.eq.1) goto700
      if(nadd.eq.2) goto400
c          use kroll-wada distribution for dalitz decays.
      if(.not.((idptl(ip).eq.110.or.idptl(ip).eq.220).and.
     1iabs(idptl(nptl+2)).eq.12)) goto130
125   amee=twome*(pptl(5,ip)/twome)**rangen()
      ree=(twome/amee)**2
      wtee=(1.-(amee/pptl(5,ip))**2)**3*sqrt(1.-ree)*(1.+.5*ree)
      if(wtee.lt.rangen()) goto125
      pgen(5,2)=amee
      goto400
130   continue
c          calculate maximum phase-space weight
      wtmax=1./reduce(nadd)
      sum1=pgen(5,1)
      sum2=sum-pptl(5,nptl+1)
      do 200 i=1,nadd1
      wtmax=wtmax*utpcm(sum1,sum2,pptl(5,nptl+i))
      sum1=sum1-pptl(5,nptl+i)
      sum2=sum2-pptl(5,nptl+i+1)
200   continue
c          generate uniform nadd-body phase space
300   continue
      rnd(1)=1.
      do 310 i=2,nadd1
      rnew=rangen()
      i1=i-1
      do 320 jj1=1,i1
      j=i-jj1
      jsave=j+1
      if(rnew.le.rnd(j)) goto310
      rnd(jsave)=rnd(j)
320   continue
310   rnd(jsave)=rnew
      rnd(nadd)=0.
      wt=1.
      sum1=sum
      do 330 i=2,nadd
      sum1=sum1-pptl(5,nptl+i-1)
      pgen(5,i)=sum1+rnd(i)*(pgen(5,1)-sum)
      wt=wt*utpcm(pgen(5,i-1),pgen(5,i),pptl(5,nptl+i-1))
330   continue
      if(wt.lt.rangen()*wtmax) goto300
c          carry out two-body decays in pgen frames
400   continue
      do 410 i=1,nadd1
      qcm=utpcm(pgen(5,i),pgen(5,i+1),pptl(5,nptl+i))
      u(3)=2.*rangen()-1.
      phi=2.*pi*rangen()
      u(1)=sqrt(1.-u(3)**2)*cos(phi)
      u(2)=sqrt(1.-u(3)**2)*sin(phi)
      do 420 j=1,3
      pptl(j,nptl+i)=qcm*u(j)
      pgen(j,i+1)=-pptl(j,nptl+i)
420   continue
      pptl(4,nptl+i)=sqrt(qcm**2+pptl(5,nptl+i)**2)
      pgen(4,i+1)=sqrt(qcm**2+pgen(5,i+1)**2)
410   continue
      do 430 j=1,4
      pptl(j,nptl+nadd)=pgen(j,nadd)
430   continue
c          boost pgen frames to lab frame
c          also save momenta in rest frame (last frame)
      do 500 ii=1,nadd1
      i=nadd-ii
      do 510 j=1,3
      beta(j)=pgen(j,i)/pgen(4,i)
510   continue
      gamma=pgen(4,i)/pgen(5,i)
      do 520 k=i,nadd
      k1=nptl+k
      bp=beta(1)*pptl(1,k1)+beta(2)*pptl(2,k1)+beta(3)*pptl(3,k1)
      do 530 j=1,3
      prest(j,k)=pptl(j,k1)
      pptl(j,k1)=pptl(j,k1)+gamma*beta(j)*(pptl(4,k1)
     1+bp*gamma/(gamma+1.))
530   continue
      prest(4,k)=pptl(4,k1)
      pptl(4,k1)=gamma*(pptl(4,k1)+bp)
520   continue
500   continue
c          matrix elements
      if(nadd.eq.3.and.(idptl(ip).eq.221.or.idptl(ip).eq.331)) goto610
      if(nadd.eq.3.and.iabs(idptl(nptl+1)).lt.20.and.
     1idptl(nptl+1).ne.10) goto620
      goto800
c          omeg and phi decay
c          use vectors in rest frame
610   wt=(pptl(5,nptl+1)*pptl(5,nptl+2)*pptl(5,nptl+3))**2
     1-(pptl(5,nptl+1)*dot(2,3))**2
     2-(pptl(5,nptl+2)*dot(1,3))**2
     3-(pptl(5,nptl+3)*dot(1,2))**2
     4+2.*dot(1,2)*dot(2,3)*dot(1,3)
      if(wt.lt.rangen()*pptl(5,ip)**6/108.) goto300
      goto800
c          semileptonic and quark decays
c          use vectors in rest frame, where ip has (m,0,0,0)
c          include w propagator
620   wt=(pptl(5,ip)*prest(4,2))*dot(1,3)
      s12=pptl(5,nptl+1)**2+pptl(5,nptl+2)**2+2.*dot(1,2)
      s12max=pptl(5,ip)**2
      wt=wt*wprop(s12max)/wprop(s12)
      if(wt.lt.rangen()*pptl(5,ip)**4/16.) goto300
      goto800
c          one-particle decays
700   continue
      do 710 j=1,5
      pptl(j,nptl+1)=pptl(j,ip)
710   continue
c          swap particles and antiparticles if idptl(ip)<0
800   continue
      if(idptl(ip).ge.0.or.iabs(idptl(ip)).eq.20) goto900
      do 810 i=1,nadd
      idabs=iabs(idptl(nptl+i))
      ifl1=idabs/1000
      ifl2=mod(idabs/100,10)
      ifl3=mod(idabs/10,10)
      if(ifl1.eq.0.and.ifl2.ne.0.and.ifl2.eq.ifl3) goto810
      if(idabs.eq.9.or.idabs.eq.10.or.idabs.eq.20) goto810
      if(idabs.eq.29.or.idabs.eq.30.or.idabs.eq.40) goto810
      idptl(nptl+i)=-idptl(nptl+i)
810   continue
 
900   continue
      nptl=nptl+nadd
      if(nptl.gt.mxptl)
     *call utstop('jdecay: nptl>mxptl                      ')
      nqk=0
      if(iabs(idptl(nptl)).lt.10.or.mod(idptl(nptl),100).eq.0)
     *call utstop('jdecay: decay ptcl is parton            ')
      return
 
9999  call utstop('jdecay: mxptl too small                 ')
9998  call utstop('jdecay: mxjet too small                 ')
      end
 
c-----------------------------------------------------------------------
      subroutine jdecin(lprint)
c     sets up /dkytab/
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/cnsta/pi,prom,piom,ainfin
      common/wco/wmass2,wgam2
      dimension imode(6)
      character*8 idlabl,lmode(6),lres
      character*8 iquit,iblank,lread(10)
      logical lprint
      parameter (mxlook=10000,mxdky=2000)
      common/dkytab/look(mxlook),cbr(mxdky),mode(5,mxdky)
      common/nodcay/nodcay,noeta,nopi0,nonunu,noevol,nohadr
      logical nodcay,noeta,nopi0,nonunu,noevol,nohadr
      parameter (ndectb=1171)
      real dectab(7,ndectb)
c 
c ->rm F77 standard => DATA statements must preceed all executable 
c          statements
c
      data ((dectab(i,j),i=1,7),j=  1, 18)/
     *  110., .98850,  10.,  10.,   0.,   0.,   0.
     *, 110.,1.00000,  10.,  12., -12.,   0.,   0.
     *, 220., .38000,  10.,  10.,   0.,   0.,   0.
     *, 220., .71000, 110., 110., 110.,   0.,   0.
     *, 220., .94600, 120.,-120., 110.,   0.,   0.
     *, 220., .99500, 120.,-120.,  10.,   0.,   0.
     *, 220.,1.00000,  10.,  12., -12.,   0.,   0.
     *, 330., .44100, 220., 120.,-120.,   0.,   0.
     *, 330., .66100, 220., 110., 110.,   0.,   0.
     *, 330., .95900, 111.,  10.,   0.,   0.,   0.
     *, 330., .98000, 221.,  10.,   0.,   0.,   0.
     *, 330.,1.00000,  10.,  10.,   0.,   0.,   0.
     *, 121.,1.00000, 120., 110.,   0.,   0.,   0.
     *, 111., .99989, 120.,-120.,   0.,   0.,   0.
     *, 111., .99993,  12., -12.,   0.,   0.,   0.
     *, 111.,1.00000,  14., -14.,   0.,   0.,   0.
     *, 221., .89900, 120.,-120., 110.,   0.,   0.
     *, 221., .91200, 120.,-120.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j= 19, 36)/
     *  221., .99992, 110.,  10.,   0.,   0.,   0.
     *, 221.,1.00000,  12., -12.,   0.,   0.,   0.
     *, 331., .48600, 130.,-130.,   0.,   0.,   0.
     *, 331., .83700,  20., -20.,   0.,   0.,   0.
     *, 331., .98400, 120.,-120., 110.,   0.,   0.
     *, 331., .99944, 220.,  10.,   0.,   0.,   0.
     *, 331., .99975,  12., -12.,   0.,   0.,   0.
     *, 331.,1.00000,  14., -14.,   0.,   0.,   0.
     *, 230., .50000,  20.,   0.,   0.,   0.,   0.
     *, 230.,1.00000, -20.,   0.,   0.,   0.,   0.
     *, 131., .66670, 230., 120.,   0.,   0.,   0.
     *, 131.,1.00000, 130., 110.,   0.,   0.,   0.
     *, 231., .66670, 130.,-120.,   0.,   0.,   0.
     *, 231.,1.00000, 230., 110.,   0.,   0.,   0.
     *, 240., .11000,  12., -11., 230.,   0.,   0.
     *, 240., .17000,  12., -11., 231.,   0.,   0.
     *, 240., .28000,  14., -13., 230.,   0.,   0.
     *, 240., .34000,  14., -13., 231.,   0.,   0./
      data ((dectab(i,j),i=1,7),j= 37, 54)/
     *  240., .37800, 230.,-120.,   0.,   0.,   0.
     *, 240., .56300, 230.,-121.,   0.,   0.,   0.
     *, 240., .60800, 231.,-120.,   0.,   0.,   0.
     *, 240., .62100, 230.,-120., 110.,   0.,   0.
     *, 240., .71000, 130.,-120.,-120.,   0.,   0.
     *, 240., .80100, 230.,-120.,-120., 120.,   0.
     *, 240., .87900, 130.,-120.,-120., 110.,   0.
     *, 240., .95400, 230.,-120., 110., 110.,   0.
     *, 240., .96600, 230.,-130.,   0.,   0.,   0.
     *, 240., .97600, 331.,-120.,   0.,   0.,   0.
     *, 240., .98800,-130., 231.,   0.,   0.,   0.
     *, 240.,1.00000,-131., 230.,   0.,   0.,   0.
     *, 140., .04500,  12., -11., 130.,   0.,   0.
     *, 140., .07500,  12., -11., 131.,   0.,   0.
     *, 140., .12000,  14., -13., 130.,   0.,   0.
     *, 140., .15000,  14., -13., 131.,   0.,   0.
     *, 140., .20300, 130.,-120.,   0.,   0.,   0.
     *, 140., .22700, 230., 110.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j= 55, 72)/
     *  140., .24700, 230., 220.,   0.,   0.,   0.
     *, 140., .28900, 230., 221.,   0.,   0.,   0.
     *, 140., .45100, 130.,-121.,   0.,   0.,   0.
     *, 140., .53600, 131.,-120.,   0.,   0.,   0.
     *, 140., .56200, 231., 110.,   0.,   0.,   0.
     *, 140., .57600, 230., 111.,   0.,   0.,   0.
     *, 140., .58700, 130.,-120., 110.,   0.,   0.
     *, 140., .60300, 230.,-120., 120.,   0.,   0.
     *, 140., .72700, 130.,-120.,-120., 120.,   0.
     *, 140., .87600, 230.,-120., 120., 110.,   0.
     *, 140., .96900, 130.,-120., 110., 110.,   0.
     *, 140.,1.00000, 230., 110., 110., 110.,   0.
     *, 340., .03250,  12., -11., 220.,   0.,   0.
     *, 340., .06500,  12., -11., 331.,   0.,   0.
     *, 340., .09750,  14., -13., 220.,   0.,   0.
     *, 340., .13000,  14., -13., 331.,   0.,   0.
     *, 340., .17900,-130., 230.,   0.,   0.,   0.
     *, 340., .22800,-120., 220.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j= 73, 90)/
     *  340., .33800,-131., 230.,   0.,   0.,   0.
     *, 340., .44800,-130., 231.,   0.,   0.,   0.
     *, 340., .55800,-120., 331.,   0.,   0.,   0.
     *, 340., .57500,-130., 230., 110.,   0.,   0.
     *, 340., .59200,-230., 230.,-120.,   0.,   0.
     *, 340., .69400,-130., 230.,-120., 120.,   0.
     *, 340., .79600,-130., 230., 110., 110.,   0.
     *, 340., .89800,-130., 130.,-120., 110.,   0.
     *, 340.,1.00000,-230., 230.,-120., 110.,   0.
     *, 241., .64000, 140.,-120.,   0.,   0.,   0.
     *, 241., .92000, 240., 110.,   0.,   0.,   0.
     *, 241.,1.00000, 240.,  10.,   0.,   0.,   0.
     *, 141., .55000, 140., 110.,   0.,   0.,   0.
     *, 141.,1.00000, 140.,  10.,   0.,   0.,   0.
     *, 341.,1.00000, 340.,  10.,   0.,   0.,   0.
     *, 441., .07400,  12., -12.,   0.,   0.,   0.
     *, 441., .14800,  14., -14.,   0.,   0.,   0.
     *, 441., .15210,-121., 120.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j= 91,108)/
     *  441., .15620, 111., 110.,   0.,   0.,   0.
     *, 441., .16020, 121.,-120.,   0.,   0.,   0.
     *, 441., .16300,-121., 111., 120.,   0.,   0.
     *, 441., .16580, 121.,-121., 110.,   0.,   0.
     *, 441., .16860, 121., 111.,-120.,   0.,   0.
     *, 441., .28740, 120.,-120., 130.,-130.,   0.
     *, 441., .40620, 110., 110., 130.,-130.,   0.
     *, 441., .52500, 120.,-120., 120.,-120.,   0.
     *, 441., .64380, 120.,-120., 110., 110.,   0.
     *, 441., .76260, 110., 110., 110., 110.,   0.
     *, 441., .88130, 120.,-120., 230.,-230.,   0.
     *, 441.,1.00000, 110., 110., 230., 230.,   0.
     *, 150., .06000, -12.,  11., 140.,   0.,   0.
     *, 150., .12000, -12.,  11., 141.,   0.,   0.
     *, 150., .18000, -14.,  13., 140.,   0.,   0.
     *, 150., .24000, -14.,  13., 141.,   0.,   0.
     *, 150., .25500, -16.,  15., 140.,   0.,   0.
     *, 150., .27000, -16.,  15., 141.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=109,126)/
     *  150., .28050, 140., 120.,   0.,   0.,   0.
     *, 150., .29100, 140., 121.,   0.,   0.,   0.
     *, 150., .30150, 141., 120.,   0.,   0.,   0.
     *, 150., .31200, 141., 121.,   0.,   0.,   0.
     *, 150., .32650, 140.,-340.,   0.,   0.,   0.
     *, 150., .34100, 140.,-341.,   0.,   0.,   0.
     *, 150., .35550, 141.,-340.,   0.,   0.,   0.
     *, 150., .37000, 141.,-341.,   0.,   0.,   0.
     *, 150., .39800, 140., 120., 110.,   0.,   0.
     *, 150., .42600, 140., 120., 220.,   0.,   0.
     *, 150., .45400, 140., 120., 111.,   0.,   0.
     *, 150., .48200, 140., 120., 221.,   0.,   0.
     *, 150., .51000, 140., 121., 110.,   0.,   0.
     *, 150., .53800, 140., 121., 220.,   0.,   0.
     *, 150., .56600, 140., 121., 111.,   0.,   0.
     *, 150., .59400, 140., 121., 221.,   0.,   0.
     *, 150., .62200, 141., 120., 110.,   0.,   0.
     *, 150., .65000, 141., 120., 220.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=127,144)/
     *  150., .67800, 141., 120., 111.,   0.,   0.
     *, 150., .70600, 141., 120., 221.,   0.,   0.
     *, 150., .73400, 141., 121., 110.,   0.,   0.
     *, 150., .76200, 141., 121., 220.,   0.,   0.
     *, 150., .79000, 141., 121., 111.,   0.,   0.
     *, 150., .81800, 141., 121., 221.,   0.,   0.
     *, 150., .83200, 140., 130.,-230.,   0.,   0.
     *, 150., .84600, 140., 130.,-231.,   0.,   0.
     *, 150., .86000, 140., 131.,-230.,   0.,   0.
     *, 150., .87400, 140., 131.,-231.,   0.,   0.
     *, 150., .88800, 141., 130.,-230.,   0.,   0.
     *, 150., .90200, 141., 130.,-231.,   0.,   0.
     *, 150., .91600, 141., 131.,-230.,   0.,   0.
     *, 150., .93000, 141., 131.,-231.,   0.,   0.
     *, 150., .93300, 140.,-140., 130.,   0.,   0.
     *, 150., .93600, 140.,-140., 131.,   0.,   0.
     *, 150., .93900, 140.,-141., 130.,   0.,   0.
     *, 150., .94200, 140.,-141., 131.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=145,162)/
     *  150., .94500, 141.,-140., 130.,   0.,   0.
     *, 150., .94800, 141.,-140., 131.,   0.,   0.
     *, 150., .95100, 141.,-141., 130.,   0.,   0.
     *, 150., .95400, 141.,-141., 131.,   0.,   0.
     *, 150., .95700, 140.,-240., 230.,   0.,   0.
     *, 150., .96000, 140.,-240., 231.,   0.,   0.
     *, 150., .96300, 140.,-241., 230.,   0.,   0.
     *, 150., .96600, 140.,-241., 231.,   0.,   0.
     *, 150., .96900, 141.,-240., 230.,   0.,   0.
     *, 150., .97200, 141.,-240., 231.,   0.,   0.
     *, 150., .97500, 141.,-241., 230.,   0.,   0.
     *, 150., .97800, 141.,-241., 231.,   0.,   0.
     *, 150., .97950, 140.,-340., 330.,   0.,   0.
     *, 150., .98100, 140.,-340., 331.,   0.,   0.
     *, 150., .98250, 140.,-341., 331.,   0.,   0.
     *, 150., .98400, 140.,-341., 331.,   0.,   0.
     *, 150., .98550, 141.,-340., 330.,   0.,   0.
     *, 150., .98700, 141.,-340., 331.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=163,180)/
     *  150., .98850, 141.,-341., 331.,   0.,   0.
     *, 150., .99000, 141.,-341., 331.,   0.,   0.
     *, 150., .99200, 441., 130., 110.,   0.,   0.
     *, 150., .99400, 441., 131., 110.,   0.,   0.
     *, 150., .99600, 441., 230., 120.,   0.,   0.
     *, 150., .99800, 441., 231., 120.,   0.,   0.
     *, 150., .99900, 441., 330., 130.,   0.,   0.
     *, 150.,1.00000, 441., 331., 130.,   0.,   0.
     *, 250., .06000, -12.,  11., 240.,   0.,   0.
     *, 250., .12000, -12.,  11., 241.,   0.,   0.
     *, 250., .18000, -14.,  13., 240.,   0.,   0.
     *, 250., .24000, -14.,  13., 241.,   0.,   0.
     *, 250., .25500, -16.,  15., 240.,   0.,   0.
     *, 250., .27000, -16.,  15., 241.,   0.,   0.
     *, 250., .28050, 240., 120.,   0.,   0.,   0.
     *, 250., .29100, 240., 121.,   0.,   0.,   0.
     *, 250., .30150, 241., 120.,   0.,   0.,   0.
     *, 250., .31200, 241., 121.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=181,198)/
     *  250., .32650, 240.,-340.,   0.,   0.,   0.
     *, 250., .34100, 240.,-341.,   0.,   0.,   0.
     *, 250., .35550, 241.,-340.,   0.,   0.,   0.
     *, 250., .37000, 241.,-341.,   0.,   0.,   0.
     *, 250., .39800, 240., 120., 110.,   0.,   0.
     *, 250., .42600, 240., 120., 220.,   0.,   0.
     *, 250., .45400, 240., 120., 111.,   0.,   0.
     *, 250., .48200, 240., 120., 221.,   0.,   0.
     *, 250., .51000, 240., 121., 110.,   0.,   0.
     *, 250., .53800, 240., 121., 220.,   0.,   0.
     *, 250., .56600, 240., 121., 111.,   0.,   0.
     *, 250., .59400, 240., 121., 221.,   0.,   0.
     *, 250., .62200, 241., 120., 110.,   0.,   0.
     *, 250., .65000, 241., 120., 220.,   0.,   0.
     *, 250., .67800, 241., 120., 111.,   0.,   0.
     *, 250., .70600, 241., 120., 221.,   0.,   0.
     *, 250., .73400, 241., 121., 110.,   0.,   0.
     *, 250., .76200, 241., 121., 220.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=199,216)/
     *  250., .79000, 241., 121., 111.,   0.,   0.
     *, 250., .81800, 241., 121., 221.,   0.,   0.
     *, 250., .83200, 240., 130.,-230.,   0.,   0.
     *, 250., .84600, 240., 130.,-231.,   0.,   0.
     *, 250., .86000, 240., 131.,-230.,   0.,   0.
     *, 250., .87400, 240., 131.,-231.,   0.,   0.
     *, 250., .88800, 241., 130.,-230.,   0.,   0.
     *, 250., .90200, 241., 130.,-231.,   0.,   0.
     *, 250., .91600, 241., 131.,-230.,   0.,   0.
     *, 250., .93000, 241., 131.,-231.,   0.,   0.
     *, 250., .93300, 240.,-140., 130.,   0.,   0.
     *, 250., .93600, 240.,-140., 131.,   0.,   0.
     *, 250., .93900, 240.,-141., 130.,   0.,   0.
     *, 250., .94200, 240.,-141., 131.,   0.,   0.
     *, 250., .94500, 241.,-140., 130.,   0.,   0.
     *, 250., .94800, 241.,-140., 131.,   0.,   0.
     *, 250., .95100, 241.,-141., 130.,   0.,   0.
     *, 250., .95400, 241.,-141., 131.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=217,234)/
     *  250., .95700, 240.,-240., 230.,   0.,   0.
     *, 250., .96000, 240.,-240., 231.,   0.,   0.
     *, 250., .96300, 240.,-241., 230.,   0.,   0.
     *, 250., .96600, 240.,-241., 231.,   0.,   0.
     *, 250., .96900, 241.,-240., 230.,   0.,   0.
     *, 250., .97200, 241.,-240., 231.,   0.,   0.
     *, 250., .97500, 241.,-241., 230.,   0.,   0.
     *, 250., .97800, 241.,-241., 231.,   0.,   0.
     *, 250., .97950, 240.,-340., 330.,   0.,   0.
     *, 250., .98100, 240.,-340., 331.,   0.,   0.
     *, 250., .98250, 240.,-341., 331.,   0.,   0.
     *, 250., .98400, 240.,-341., 331.,   0.,   0.
     *, 250., .98550, 241.,-340., 330.,   0.,   0.
     *, 250., .98700, 241.,-340., 331.,   0.,   0.
     *, 250., .98850, 241.,-341., 331.,   0.,   0.
     *, 250., .99000, 241.,-341., 331.,   0.,   0.
     *, 250., .99200, 441., 130.,-120.,   0.,   0.
     *, 250., .99400, 441., 131.,-120.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=235,252)/
     *  250., .99600, 441., 230., 220.,   0.,   0.
     *, 250., .99800, 441., 231., 221.,   0.,   0.
     *, 250., .99900, 441., 330., 230.,   0.,   0.
     *, 250.,1.00000, 441., 331., 230.,   0.,   0.
     *, 350., .06000, -12.,  11., 340.,   0.,   0.
     *, 350., .12000, -12.,  11., 341.,   0.,   0.
     *, 350., .18000, -14.,  13., 340.,   0.,   0.
     *, 350., .24000, -14.,  13., 341.,   0.,   0.
     *, 350., .25500, -16.,  15., 340.,   0.,   0.
     *, 350., .27000, -16.,  15., 341.,   0.,   0.
     *, 350., .28050, 340., 120.,   0.,   0.,   0.
     *, 350., .29100, 340., 121.,   0.,   0.,   0.
     *, 350., .30150, 341., 120.,   0.,   0.,   0.
     *, 350., .31200, 341., 121.,   0.,   0.,   0.
     *, 350., .32650, 340.,-340.,   0.,   0.,   0.
     *, 350., .34100, 340.,-341.,   0.,   0.,   0.
     *, 350., .35550, 341.,-340.,   0.,   0.,   0.
     *, 350., .37000, 341.,-341.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=253,270)/
     *  350., .39800, 340., 120., 110.,   0.,   0.
     *, 350., .42600, 340., 120., 220.,   0.,   0.
     *, 350., .45400, 340., 120., 111.,   0.,   0.
     *, 350., .48200, 340., 120., 221.,   0.,   0.
     *, 350., .51000, 340., 121., 110.,   0.,   0.
     *, 350., .53800, 340., 121., 220.,   0.,   0.
     *, 350., .56600, 340., 121., 111.,   0.,   0.
     *, 350., .59400, 340., 121., 221.,   0.,   0.
     *, 350., .62200, 341., 120., 110.,   0.,   0.
     *, 350., .65000, 341., 120., 220.,   0.,   0.
     *, 350., .67800, 341., 120., 111.,   0.,   0.
     *, 350., .70600, 341., 120., 221.,   0.,   0.
     *, 350., .73400, 341., 121., 110.,   0.,   0.
     *, 350., .76200, 341., 121., 220.,   0.,   0.
     *, 350., .79000, 341., 121., 111.,   0.,   0.
     *, 350., .81800, 341., 121., 221.,   0.,   0.
     *, 350., .83200, 340., 130.,-230.,   0.,   0.
     *, 350., .84600, 340., 130.,-231.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=271,288)/
     *  350., .86000, 340., 131.,-230.,   0.,   0.
     *, 350., .87400, 340., 131.,-231.,   0.,   0.
     *, 350., .88800, 341., 130.,-230.,   0.,   0.
     *, 350., .90200, 341., 130.,-231.,   0.,   0.
     *, 350., .91600, 341., 131.,-230.,   0.,   0.
     *, 350., .93000, 341., 131.,-231.,   0.,   0.
     *, 350., .93300, 340.,-140., 130.,   0.,   0.
     *, 350., .93600, 340.,-140., 131.,   0.,   0.
     *, 350., .93900, 340.,-141., 130.,   0.,   0.
     *, 350., .94200, 340.,-141., 131.,   0.,   0.
     *, 350., .94500, 341.,-140., 130.,   0.,   0.
     *, 350., .94800, 341.,-140., 131.,   0.,   0.
     *, 350., .95100, 341.,-141., 130.,   0.,   0.
     *, 350., .95400, 341.,-141., 131.,   0.,   0.
     *, 350., .95700, 340.,-240., 230.,   0.,   0.
     *, 350., .96000, 340.,-240., 231.,   0.,   0.
     *, 350., .96300, 340.,-241., 230.,   0.,   0.
     *, 350., .96600, 340.,-241., 231.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=289,306)/
     *  350., .96900, 341.,-240., 230.,   0.,   0.
     *, 350., .97200, 341.,-240., 231.,   0.,   0.
     *, 350., .97500, 341.,-241., 230.,   0.,   0.
     *, 350., .97800, 341.,-241., 231.,   0.,   0.
     *, 350., .97950, 340.,-340., 330.,   0.,   0.
     *, 350., .98100, 340.,-340., 331.,   0.,   0.
     *, 350., .98250, 340.,-341., 331.,   0.,   0.
     *, 350., .98400, 340.,-341., 331.,   0.,   0.
     *, 350., .98550, 341.,-340., 330.,   0.,   0.
     *, 350., .98700, 341.,-340., 331.,   0.,   0.
     *, 350., .98850, 341.,-341., 331.,   0.,   0.
     *, 350., .99000, 341.,-341., 331.,   0.,   0.
     *, 350., .99200, 441., 130.,-130.,   0.,   0.
     *, 350., .99400, 441., 131.,-130.,   0.,   0.
     *, 350., .99600, 441., 230.,-230.,   0.,   0.
     *, 350., .99800, 441., 231.,-230.,   0.,   0.
     *, 350., .99900, 441., 330., 330.,   0.,   0.
     *, 350.,1.00000, 441., 331., 331.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=307,324)/
     *  160., .33330,  -1.,   2.,  -5.,   0.,   0.
     *, 160., .66660,  -4.,   3.,  -5.,   0.,   0.
     *, 160., .77770, -11.,  12.,  -5.,   0.,   0.
     *, 160., .88880, -13.,  14.,  -5.,   0.,   0.
     *, 160.,1.00000, -15.,  16.,  -5.,   0.,   0.
     *, 260., .33330,  -1.,   2.,  -5.,   0.,   0.
     *, 260., .66660,  -4.,   3.,  -5.,   0.,   0.
     *, 260., .77770, -11.,  12.,  -5.,   0.,   0.
     *, 260., .88880, -13.,  14.,  -5.,   0.,   0.
     *, 260.,1.00000, -15.,  16.,  -5.,   0.,   0.
     *, 360., .33330,  -1.,   2.,  -5.,   0.,   0.
     *, 360., .66660,  -4.,   3.,  -5.,   0.,   0.
     *, 360., .77770, -11.,  12.,  -5.,   0.,   0.
     *, 360., .88880, -13.,  14.,  -5.,   0.,   0.
     *, 360.,1.00000, -15.,  16.,  -5.,   0.,   0.
     *, 151.,1.00000, 150.,  10.,   0.,   0.,   0.
     *, 251.,1.00000, 250.,  10.,   0.,   0.,   0.
     *, 351.,1.00000, 350.,  10.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=325,342)/
     *  161.,1.00000, 160.,  10.,   0.,   0.,   0.
     *, 261.,1.00000, 260.,  10.,   0.,   0.,   0.
     *, 361.,1.00000, 360.,  10.,   0.,   0.,   0.
     *,1230.,1.00000,2130.,  10.,   0.,   0.,   0.
     *,1111.,1.00000,1120., 120.,   0.,   0.,   0.
     *,1121., .66670,1120., 110.,   0.,   0.,   0.
     *,1121.,1.00000,1220., 120.,   0.,   0.,   0.
     *,1221., .66670,1220., 110.,   0.,   0.,   0.
     *,1221.,1.00000,1120.,-120.,   0.,   0.,   0.
     *,2221.,1.00000,1220.,-120.,   0.,   0.,   0.
     *,1131., .88000,2130., 120.,   0.,   0.,   0.
     *,1131., .94000,1130., 110.,   0.,   0.,   0.
     *,1131.,1.00000,1230., 120.,   0.,   0.,   0.
     *,1231., .88000,2130., 110.,   0.,   0.,   0.
     *,1231., .94000,1130.,-120.,   0.,   0.,   0.
     *,1231.,1.00000,2230., 120.,   0.,   0.,   0.
     *,2231., .88000,2130.,-120.,   0.,   0.,   0.
     *,2231., .94000,1230.,-120.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=343,360)/
     * 2231.,1.00000,2230., 110.,   0.,   0.,   0.
     *,1331., .66670,2330., 120.,   0.,   0.,   0.
     *,1331.,1.00000,1330., 110.,   0.,   0.,   0.
     *,2331., .66670,1330.,-120.,   0.,   0.,   0.
     *,2331.,1.00000,2330., 110.,   0.,   0.,   0.
     *,  16., .18000,  12., -11.,  15.,   0.,   0.
     *,  16., .36000,  14., -13.,  15.,   0.,   0.
     *,  16., .45100,-120.,  15.,   0.,   0.,   0.
     *,  16., .66000,-121.,  15.,   0.,   0.,   0.
     *,  16., .78000, 110., 110.,-120.,  15.,   0.
     *,  16., .83600, 120.,-120.,-120.,  15.,   0.
     *,  16.,1.00000, 120., 110.,-120.,-120.,  15.
     *,2140., .03750, -12.,  11.,2130.,   0.,   0.
     *,2140., .07500, -12.,  11.,1231.,   0.,   0.
     *,2140., .11250, -14.,  13.,2130.,   0.,   0.
     *,2140., .15000, -14.,  13.,1231.,   0.,   0.
     *,2140., .18200,2130., 120.,   0.,   0.,   0.
     *,2140., .21300,1230., 110.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=361,378)/
     * 2140., .24400,1120.,-230.,   0.,   0.,   0.
     *,2140., .29500,1131., 110.,   0.,   0.,   0.
     *,2140., .34600,1231., 120.,   0.,   0.,   0.
     *,2140., .39700,1121.,-230.,   0.,   0.,   0.
     *,2140., .44800,1111.,-130.,   0.,   0.,   0.
     *,2140., .49900,1130., 111.,   0.,   0.,   0.
     *,2140., .55000,1230., 121.,   0.,   0.,   0.
     *,2140., .60100,1120.,-231.,   0.,   0.,   0.
     *,2140., .65800,1120.,-230., 120.,-120.,   0.
     *,2140., .71500,1120.,-230., 110., 110.,   0.
     *,2140., .77200,1120.,-130., 120., 110.,   0.
     *,2140., .82900,1220.,-230., 120., 110.,   0.
     *,2140., .88600,1220.,-130., 120., 120.,   0.
     *,2140., .94300,2130., 120., 120.,-120.,   0.
     *,2140.,1.00000,2130., 120., 110., 110.,   0.
     *,1140.,1.00000,2140., 120.,   0.,   0.,   0.
     *,1240.,1.00000,2140., 110.,   0.,   0.,   0.
     *,2240.,1.00000,2140.,-120.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=379,396)/
     * 1340., .03750, -12.,  11.,1330.,   0.,   0.
     *,1340., .07500, -12.,  11.,1331.,   0.,   0.
     *,1340., .11250, -14.,  13.,1330.,   0.,   0.
     *,1340., .15000, -14.,  13.,1331.,   0.,   0.
     *,1340., .19900,1330., 120.,   0.,   0.,   0.
     *,1340., .24800,1231.,-230.,   0.,   0.,   0.
     *,1340., .28800,1330., 120.,   0.,   0.,   0.
     *,1340., .32800,1131.,-230.,   0.,   0.,   0.
     *,1340., .36800,1330., 121.,   0.,   0.,   0.
     *,1340., .40800,1130.,-230.,   0.,   0.,   0.
     *,1340., .44800,1330., 120., 110.,   0.,   0.
     *,1340., .48800,2330., 120., 120.,   0.,   0.
     *,1340., .52800,1130.,-130., 120.,   0.,   0.
     *,1340., .56800,1130.,-230., 110.,   0.,   0.
     *,1340., .60800,1230.,-230., 120.,   0.,   0.
     *,1340., .66400,2130.,-230., 120., 110.,   0.
     *,1340., .72000,2130.,-130., 120., 120.,   0.
     *,1340., .77600,1130.,-230., 120., 120.,   0./
      data ((dectab(i,j),i=1,7),j=397,414)/
     * 1340., .83200,1130.,-230., 110., 110.,   0.
     *,1340., .88800,1330., 120., 120.,-120.,   0.
     *,1340., .94400,1330., 120., 110., 110.,   0.
     *,1340.,1.00000,2330., 120., 120., 110.,   0.
     *,3140., .03750, -12.,  11.,1330.,   0.,   0.
     *,3140., .07500, -12.,  11.,1331.,   0.,   0.
     *,3140., .11250, -14.,  13.,1330.,   0.,   0.
     *,3140., .15000, -14.,  13.,1331.,   0.,   0.
     *,3140., .19900,1330., 120.,   0.,   0.,   0.
     *,3140., .24800,1231.,-230.,   0.,   0.,   0.
     *,3140., .28800,1330., 120.,   0.,   0.,   0.
     *,3140., .32800,1131.,-230.,   0.,   0.,   0.
     *,3140., .36800,1330., 121.,   0.,   0.,   0.
     *,3140., .40800,1130.,-230.,   0.,   0.,   0.
     *,3140., .44800,1330., 120., 110.,   0.,   0.
     *,3140., .48800,2330., 120., 120.,   0.,   0.
     *,3140., .52800,1130.,-130., 120.,   0.,   0.
     *,3140., .56800,1130.,-230., 110.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=415,432)/
     * 3140., .60800,1230.,-230., 120.,   0.,   0.
     *,3140., .66400,2130.,-230., 120., 110.,   0.
     *,3140., .72000,2130.,-130., 120., 120.,   0.
     *,3140., .77600,1130.,-230., 120., 120.,   0.
     *,3140., .83200,1130.,-230., 110., 110.,   0.
     *,3140., .88800,1330., 120., 120.,-120.,   0.
     *,3140., .94400,1330., 120., 110., 110.,   0.
     *,3140.,1.00000,2330., 120., 120., 110.,   0.
     *,2340., .03750, -12.,  11.,2330.,   0.,   0.
     *,2340., .07500, -12.,  11.,2331.,   0.,   0.
     *,2340., .11250, -14.,  13.,2330.,   0.,   0.
     *,2340., .15000, -14.,  13.,2331.,   0.,   0.
     *,2340., .17500,2330., 120.,   0.,   0.,   0.
     *,2340., .20000,1330., 110.,   0.,   0.,   0.
     *,2340., .22500,1130.,-130.,   0.,   0.,   0.
     *,2340., .25000,1230.,-230.,   0.,   0.,   0.
     *,2340., .29500,2331., 120.,   0.,   0.,   0.
     *,2340., .34000,1331., 110.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=433,450)/
     * 2340., .38500,1131.,-130.,   0.,   0.,   0.
     *,2340., .43000,1231.,-230.,   0.,   0.,   0.
     *,2340., .47500,2330., 121.,   0.,   0.,   0.
     *,2340., .52000,1330., 111.,   0.,   0.,   0.
     *,2340., .56500,1130.,-131.,   0.,   0.,   0.
     *,2340., .61000,1230.,-231.,   0.,   0.,   0.
     *,2340., .64900,2130.,-230., 120.,-120.,   0.
     *,2340., .68800,2130.,-230., 110., 110.,   0.
     *,2340., .72700,2130.,-130., 120., 110.,   0.
     *,2340., .76600,1130.,-230.,-120., 110.,   0.
     *,2340., .80500,1130.,-130., 120.,-120.,   0.
     *,2340., .84400,1130.,-130., 110., 110.,   0.
     *,2340., .88300,1330., 120.,-120., 110.,   0.
     *,2340., .92200,1330., 110., 110., 110.,   0.
     *,2340., .96100,2330., 120., 120.,-120.,   0.
     *,2340.,1.00000,2330., 120., 110., 110.,   0.
     *,3240., .03750, -12.,  11.,2330.,   0.,   0.
     *,3240., .07500, -12.,  11.,2331.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=451,468)/
     * 3240., .11250, -14.,  13.,2330.,   0.,   0.
     *,3240., .15000, -14.,  13.,2331.,   0.,   0.
     *,3240., .17500,2330., 120.,   0.,   0.,   0.
     *,3240., .20000,1330., 110.,   0.,   0.,   0.
     *,3240., .22500,1130.,-130.,   0.,   0.,   0.
     *,3240., .25000,1230.,-230.,   0.,   0.,   0.
     *,3240., .29500,2331., 120.,   0.,   0.,   0.
     *,3240., .34000,1331., 110.,   0.,   0.,   0.
     *,3240., .38500,1131.,-130.,   0.,   0.,   0.
     *,3240., .43000,1231.,-230.,   0.,   0.,   0.
     *,3240., .47500,2330., 121.,   0.,   0.,   0.
     *,3240., .52000,1330., 111.,   0.,   0.,   0.
     *,3240., .56500,1130.,-131.,   0.,   0.,   0.
     *,3240., .61000,1230.,-231.,   0.,   0.,   0.
     *,3240., .64900,2130.,-230., 120.,-120.,   0.
     *,3240., .68800,2130.,-230., 110., 110.,   0.
     *,3240., .72700,2130.,-130., 120., 110.,   0.
     *,3240., .76600,1130.,-230.,-120., 110.,   0./
      data ((dectab(i,j),i=1,7),j=469,486)/
     * 3240., .80500,1130.,-130., 120.,-120.,   0.
     *,3240., .84400,1130.,-130., 110., 110.,   0.
     *,3240., .88300,1330., 120.,-120., 110.,   0.
     *,3240., .92200,1330., 110., 110., 110.,   0.
     *,3240., .96100,2330., 120., 120.,-120.,   0.
     *,3240.,1.00000,2330., 120., 110., 110.,   0.
     *,3340., .07500, -12.,  11.,3331.,   0.,   0.
     *,3340., .15000, -12.,  11.,3331.,   0.,   0.
     *,3340., .25000,1330.,-230.,   0.,   0.,   0.
     *,3340., .31000,3331., 120.,   0.,   0.,   0.
     *,3340., .37000,1331.,-230.,   0.,   0.,   0.
     *,3340., .43000,1330.,-231.,   0.,   0.,   0.
     *,3340., .49000,2330.,-230., 120.,   0.,   0.
     *,3340., .55000,1330.,-230., 110.,   0.,   0.
     *,3340., .61000,1330.,-130., 120.,   0.,   0.
     *,3340., .67500,3331., 120., 120.,-120.,   0.
     *,3340., .74000,3331., 120., 110., 110.,   0.
     *,3340., .80500,1330.,-230., 120.,-120.,   0./
      data ((dectab(i,j),i=1,7),j=487,504)/
     * 3340., .87000,1330.,-230., 110., 110.,   0.
     *,3340., .93500,2330.,-230., 120., 110.,   0.
     *,3340.,1.00000,2330.,-130., 120., 120.,   0.
     *,1141.,1.00000,2140., 120.,   0.,   0.,   0.
     *,1241.,1.00000,2140., 110.,   0.,   0.,   0.
     *,2241.,1.00000,2140.,-120.,   0.,   0.,   0.
     *,1341., .66670,2340., 120.,   0.,   0.,   0.
     *,1341.,1.00000,1340., 110.,   0.,   0.,   0.
     *,2341., .66670,1340.,-120.,   0.,   0.,   0.
     *,2341.,1.00000,2340., 110.,   0.,   0.,   0.
     *,3341.,1.00000,3340., 110.,   0.,   0.,   0.
     *,1150., .06000,  12., -11.,1140.,   0.,   0.
     *,1150., .12000,  12., -11.,1141.,   0.,   0.
     *,1150., .18000,  14., -13.,1140.,   0.,   0.
     *,1150., .24000,  14., -13.,1141.,   0.,   0.
     *,1150., .25500,  16., -15.,1140.,   0.,   0.
     *,1150., .27000,  16., -15.,1141.,   0.,   0.
     *,1150., .28925,1140.,-120.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=505,522)/
     * 1150., .30850,1140.,-121.,   0.,   0.,   0.
     *,1150., .32775,1141.,-120.,   0.,   0.,   0.
     *,1150., .34700,1141.,-121.,   0.,   0.,   0.
     *,1150., .35775,1140., 340.,   0.,   0.,   0.
     *,1150., .36850,1140., 341.,   0.,   0.,   0.
     *,1150., .37925,1141., 340.,   0.,   0.,   0.
     *,1150., .39000,1141., 341.,   0.,   0.,   0.
     *,1150., .42050,1140.,-120., 110.,   0.,   0.
     *,1150., .45100,1140.,-120., 220.,   0.,   0.
     *,1150., .48150,1140.,-120., 111.,   0.,   0.
     *,1150., .51200,1140.,-120., 221.,   0.,   0.
     *,1150., .54250,1140.,-121., 110.,   0.,   0.
     *,1150., .57300,1140.,-121., 220.,   0.,   0.
     *,1150., .60350,1140.,-121., 111.,   0.,   0.
     *,1150., .63400,1140.,-121., 221.,   0.,   0.
     *,1150., .66450,1141.,-120., 110.,   0.,   0.
     *,1150., .69500,1141.,-120., 220.,   0.,   0.
     *,1150., .72550,1141.,-120., 111.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=523,540)/
     * 1150., .75600,1141.,-120., 221.,   0.,   0.
     *,1150., .78650,1141.,-121., 110.,   0.,   0.
     *,1150., .81700,1141.,-121., 220.,   0.,   0.
     *,1150., .84750,1141.,-121., 111.,   0.,   0.
     *,1150., .87800,1141.,-121., 221.,   0.,   0.
     *,1150., .89325,1140.,-130., 230.,   0.,   0.
     *,1150., .90850,1140.,-130., 231.,   0.,   0.
     *,1150., .92375,1140.,-131., 230.,   0.,   0.
     *,1150., .93900,1140.,-131., 231.,   0.,   0.
     *,1150., .95425,1141.,-130., 230.,   0.,   0.
     *,1150., .96950,1141.,-130., 231.,   0.,   0.
     *,1150., .98475,1141.,-131., 230.,   0.,   0.
     *,1150.,1.00000,1141.,-131., 231.,   0.,   0.
     *,1250., .06000,  12., -11.,1240.,   0.,   0.
     *,1250., .12000,  12., -11.,1241.,   0.,   0.
     *,1250., .18000,  14., -13.,1240.,   0.,   0.
     *,1250., .24000,  14., -13.,1241.,   0.,   0.
     *,1250., .25500,  16., -15.,1240.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=541,558)/
     * 1250., .27000,  16., -15.,1241.,   0.,   0.
     *,1250., .28925,1240.,-120.,   0.,   0.,   0.
     *,1250., .30850,1240.,-121.,   0.,   0.,   0.
     *,1250., .32775,1241.,-120.,   0.,   0.,   0.
     *,1250., .34700,1241.,-121.,   0.,   0.,   0.
     *,1250., .35775,1240., 340.,   0.,   0.,   0.
     *,1250., .36850,1240., 341.,   0.,   0.,   0.
     *,1250., .37925,1241., 340.,   0.,   0.,   0.
     *,1250., .39000,1241., 341.,   0.,   0.,   0.
     *,1250., .42050,1240.,-120., 110.,   0.,   0.
     *,1250., .45100,1240.,-120., 220.,   0.,   0.
     *,1250., .48150,1240.,-120., 111.,   0.,   0.
     *,1250., .51200,1240.,-120., 221.,   0.,   0.
     *,1250., .54250,1240.,-121., 110.,   0.,   0.
     *,1250., .57300,1240.,-121., 220.,   0.,   0.
     *,1250., .60350,1240.,-121., 111.,   0.,   0.
     *,1250., .63400,1240.,-121., 221.,   0.,   0.
     *,1250., .66450,1241.,-120., 110.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=559,576)/
     * 1250., .69500,1241.,-120., 220.,   0.,   0.
     *,1250., .72550,1241.,-120., 111.,   0.,   0.
     *,1250., .75600,1241.,-120., 221.,   0.,   0.
     *,1250., .78650,1241.,-121., 110.,   0.,   0.
     *,1250., .81700,1241.,-121., 220.,   0.,   0.
     *,1250., .84750,1241.,-121., 111.,   0.,   0.
     *,1250., .87800,1241.,-121., 221.,   0.,   0.
     *,1250., .89325,1240.,-130., 230.,   0.,   0.
     *,1250., .90850,1240.,-130., 231.,   0.,   0.
     *,1250., .92375,1240.,-131., 230.,   0.,   0.
     *,1250., .93900,1240.,-131., 231.,   0.,   0.
     *,1250., .95425,1241.,-130., 230.,   0.,   0.
     *,1250., .96950,1241.,-130., 231.,   0.,   0.
     *,1250., .98475,1241.,-131., 230.,   0.,   0.
     *,1250.,1.00000,1241.,-131., 231.,   0.,   0.
     *,1350., .06000,  12., -11.,1340.,   0.,   0.
     *,1350., .12000,  12., -11.,1341.,   0.,   0.
     *,1350., .18000,  14., -13.,1340.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=577,594)/
     * 1350., .24000,  14., -13.,1341.,   0.,   0.
     *,1350., .25500,  16., -15.,1340.,   0.,   0.
     *,1350., .27000,  16., -15.,1341.,   0.,   0.
     *,1350., .28925,1340.,-120.,   0.,   0.,   0.
     *,1350., .30850,1340.,-121.,   0.,   0.,   0.
     *,1350., .32775,1341.,-120.,   0.,   0.,   0.
     *,1350., .34700,1341.,-121.,   0.,   0.,   0.
     *,1350., .35775,1340., 340.,   0.,   0.,   0.
     *,1350., .36850,1340., 341.,   0.,   0.,   0.
     *,1350., .37925,1341., 340.,   0.,   0.,   0.
     *,1350., .39000,1341., 341.,   0.,   0.,   0.
     *,1350., .42050,1340.,-120., 110.,   0.,   0.
     *,1350., .45100,1340.,-120., 220.,   0.,   0.
     *,1350., .48150,1340.,-120., 111.,   0.,   0.
     *,1350., .51200,1340.,-120., 221.,   0.,   0.
     *,1350., .54250,1340.,-121., 110.,   0.,   0.
     *,1350., .57300,1340.,-121., 220.,   0.,   0.
     *,1350., .60350,1340.,-121., 111.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=595,612)/
     * 1350., .63400,1340.,-121., 221.,   0.,   0.
     *,1350., .66450,1341.,-120., 110.,   0.,   0.
     *,1350., .69500,1341.,-120., 220.,   0.,   0.
     *,1350., .72550,1341.,-120., 111.,   0.,   0.
     *,1350., .75600,1341.,-120., 221.,   0.,   0.
     *,1350., .78650,1341.,-121., 110.,   0.,   0.
     *,1350., .81700,1341.,-121., 220.,   0.,   0.
     *,1350., .84750,1341.,-121., 111.,   0.,   0.
     *,1350., .87800,1341.,-121., 221.,   0.,   0.
     *,1350., .89325,1340.,-130., 230.,   0.,   0.
     *,1350., .90850,1340.,-130., 231.,   0.,   0.
     *,1350., .92375,1340.,-131., 230.,   0.,   0.
     *,1350., .93900,1340.,-131., 231.,   0.,   0.
     *,1350., .95425,1341.,-130., 230.,   0.,   0.
     *,1350., .96950,1341.,-130., 231.,   0.,   0.
     *,1350., .98475,1341.,-131., 230.,   0.,   0.
     *,1350.,1.00000,1341.,-131., 231.,   0.,   0.
     *,2150., .06000,  12., -11.,2140.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=613,630)/
     * 2150., .12000,  12., -11.,1241.,   0.,   0.
     *,2150., .18000,  14., -13.,2140.,   0.,   0.
     *,2150., .24000,  14., -13.,1241.,   0.,   0.
     *,2150., .25500,  16., -15.,2140.,   0.,   0.
     *,2150., .27000,  16., -15.,1241.,   0.,   0.
     *,2150., .28925,2140.,-120.,   0.,   0.,   0.
     *,2150., .30850,2140.,-121.,   0.,   0.,   0.
     *,2150., .32775,1241.,-120.,   0.,   0.,   0.
     *,2150., .34700,1241.,-121.,   0.,   0.,   0.
     *,2150., .35775,2140., 340.,   0.,   0.,   0.
     *,2150., .36850,2140., 341.,   0.,   0.,   0.
     *,2150., .37925,1241., 340.,   0.,   0.,   0.
     *,2150., .39000,1241., 341.,   0.,   0.,   0.
     *,2150., .42050,2140.,-120., 110.,   0.,   0.
     *,2150., .45100,2140.,-120., 220.,   0.,   0.
     *,2150., .48150,2140.,-120., 111.,   0.,   0.
     *,2150., .51200,2140.,-120., 221.,   0.,   0.
     *,2150., .54250,2140.,-121., 110.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=631,648)/
     * 2150., .57300,2140.,-121., 220.,   0.,   0.
     *,2150., .60350,2140.,-121., 111.,   0.,   0.
     *,2150., .63400,2140.,-121., 221.,   0.,   0.
     *,2150., .66450,1241.,-120., 110.,   0.,   0.
     *,2150., .69500,1241.,-120., 220.,   0.,   0.
     *,2150., .72550,1241.,-120., 111.,   0.,   0.
     *,2150., .75600,1241.,-120., 221.,   0.,   0.
     *,2150., .78650,1241.,-121., 110.,   0.,   0.
     *,2150., .81700,1241.,-121., 220.,   0.,   0.
     *,2150., .84750,1241.,-121., 111.,   0.,   0.
     *,2150., .87800,1241.,-121., 221.,   0.,   0.
     *,2150., .89325,2140.,-130., 230.,   0.,   0.
     *,2150., .90850,2140.,-130., 231.,   0.,   0.
     *,2150., .92375,2140.,-131., 230.,   0.,   0.
     *,2150., .93900,2140.,-131., 231.,   0.,   0.
     *,2150., .95425,1241.,-130., 230.,   0.,   0.
     *,2150., .96950,1241.,-130., 231.,   0.,   0.
     *,2150., .98475,1241.,-131., 230.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=649,666)/
     * 2150.,1.00000,1241.,-131., 231.,   0.,   0.
     *,2250., .06000,  12., -11.,2240.,   0.,   0.
     *,2250., .12000,  12., -11.,2241.,   0.,   0.
     *,2250., .18000,  14., -13.,2240.,   0.,   0.
     *,2250., .24000,  14., -13.,2241.,   0.,   0.
     *,2250., .25500,  16., -15.,2240.,   0.,   0.
     *,2250., .27000,  16., -15.,2241.,   0.,   0.
     *,2250., .28925,2240.,-120.,   0.,   0.,   0.
     *,2250., .30850,2240.,-121.,   0.,   0.,   0.
     *,2250., .32775,2241.,-120.,   0.,   0.,   0.
     *,2250., .34700,2241.,-121.,   0.,   0.,   0.
     *,2250., .35775,2240., 340.,   0.,   0.,   0.
     *,2250., .36850,2240., 341.,   0.,   0.,   0.
     *,2250., .37925,2241., 340.,   0.,   0.,   0.
     *,2250., .39000,2241., 341.,   0.,   0.,   0.
     *,2250., .42050,2240.,-120., 110.,   0.,   0.
     *,2250., .45100,2240.,-120., 220.,   0.,   0.
     *,2250., .48150,2240.,-120., 111.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=667,684)/
     * 2250., .51200,2240.,-120., 221.,   0.,   0.
     *,2250., .54250,2240.,-121., 110.,   0.,   0.
     *,2250., .57300,2240.,-121., 220.,   0.,   0.
     *,2250., .60350,2240.,-121., 111.,   0.,   0.
     *,2250., .63400,2240.,-121., 221.,   0.,   0.
     *,2250., .66450,2241.,-120., 110.,   0.,   0.
     *,2250., .69500,2241.,-120., 220.,   0.,   0.
     *,2250., .72550,2241.,-120., 111.,   0.,   0.
     *,2250., .75600,2241.,-120., 221.,   0.,   0.
     *,2250., .78650,2241.,-121., 110.,   0.,   0.
     *,2250., .81700,2241.,-121., 220.,   0.,   0.
     *,2250., .84750,2241.,-121., 111.,   0.,   0.
     *,2250., .87800,2241.,-121., 221.,   0.,   0.
     *,2250., .89325,2240.,-130., 230.,   0.,   0.
     *,2250., .90850,2240.,-130., 231.,   0.,   0.
     *,2250., .92375,2240.,-131., 230.,   0.,   0.
     *,2250., .93900,2240.,-131., 231.,   0.,   0.
     *,2250., .95425,2241.,-130., 230.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=685,702)/
     * 2250., .96950,2241.,-130., 231.,   0.,   0.
     *,2250., .98475,2241.,-131., 230.,   0.,   0.
     *,2250.,1.00000,2241.,-131., 231.,   0.,   0.
     *,2350., .06000,  12., -11.,2340.,   0.,   0.
     *,2350., .12000,  12., -11.,2341.,   0.,   0.
     *,2350., .18000,  14., -13.,2340.,   0.,   0.
     *,2350., .24000,  14., -13.,2341.,   0.,   0.
     *,2350., .25500,  16., -15.,2340.,   0.,   0.
     *,2350., .27000,  16., -15.,2341.,   0.,   0.
     *,2350., .28925,2340.,-120.,   0.,   0.,   0.
     *,2350., .30850,2340.,-121.,   0.,   0.,   0.
     *,2350., .32775,2341.,-120.,   0.,   0.,   0.
     *,2350., .34700,2341.,-121.,   0.,   0.,   0.
     *,2350., .35775,2340., 340.,   0.,   0.,   0.
     *,2350., .36850,2340., 341.,   0.,   0.,   0.
     *,2350., .37925,2341., 340.,   0.,   0.,   0.
     *,2350., .39000,2341., 341.,   0.,   0.,   0.
     *,2350., .42050,2340.,-120., 110.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=703,720)/
     * 2350., .45100,2340.,-120., 220.,   0.,   0.
     *,2350., .48150,2340.,-120., 111.,   0.,   0.
     *,2350., .51200,2340.,-120., 221.,   0.,   0.
     *,2350., .54250,2340.,-121., 110.,   0.,   0.
     *,2350., .57300,2340.,-121., 220.,   0.,   0.
     *,2350., .60350,2340.,-121., 111.,   0.,   0.
     *,2350., .63400,2340.,-121., 221.,   0.,   0.
     *,2350., .66450,2341.,-120., 110.,   0.,   0.
     *,2350., .69500,2341.,-120., 220.,   0.,   0.
     *,2350., .72550,2341.,-120., 111.,   0.,   0.
     *,2350., .75600,2341.,-120., 221.,   0.,   0.
     *,2350., .78650,2341.,-121., 110.,   0.,   0.
     *,2350., .81700,2341.,-121., 220.,   0.,   0.
     *,2350., .84750,2341.,-121., 111.,   0.,   0.
     *,2350., .87800,2341.,-121., 221.,   0.,   0.
     *,2350., .89325,2340.,-130., 230.,   0.,   0.
     *,2350., .90850,2340.,-130., 231.,   0.,   0.
     *,2350., .92375,2340.,-131., 230.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=721,738)/
     * 2350., .93900,2340.,-131., 231.,   0.,   0.
     *,2350., .95425,2341.,-130., 230.,   0.,   0.
     *,2350., .96950,2341.,-130., 231.,   0.,   0.
     *,2350., .98475,2341.,-131., 230.,   0.,   0.
     *,2350.,1.00000,2341.,-131., 231.,   0.,   0.
     *,3150., .06000,  12., -11.,3140.,   0.,   0.
     *,3150., .12000,  12., -11.,1341.,   0.,   0.
     *,3150., .18000,  14., -13.,3140.,   0.,   0.
     *,3150., .24000,  14., -13.,1341.,   0.,   0.
     *,3150., .25500,  16., -15.,3140.,   0.,   0.
     *,3150., .27000,  16., -15.,1341.,   0.,   0.
     *,3150., .28925,3140.,-120.,   0.,   0.,   0.
     *,3150., .30850,3140.,-121.,   0.,   0.,   0.
     *,3150., .32775,1341.,-120.,   0.,   0.,   0.
     *,3150., .34700,1341.,-121.,   0.,   0.,   0.
     *,3150., .35775,3140., 340.,   0.,   0.,   0.
     *,3150., .36850,3140., 341.,   0.,   0.,   0.
     *,3150., .37925,1341., 340.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=739,756)/
     * 3150., .39000,1341., 341.,   0.,   0.,   0.
     *,3150., .42050,3140.,-120., 110.,   0.,   0.
     *,3150., .45100,3140.,-120., 220.,   0.,   0.
     *,3150., .48150,3140.,-120., 111.,   0.,   0.
     *,3150., .51200,3140.,-120., 221.,   0.,   0.
     *,3150., .54250,3140.,-121., 110.,   0.,   0.
     *,3150., .57300,3140.,-121., 220.,   0.,   0.
     *,3150., .60350,3140.,-121., 111.,   0.,   0.
     *,3150., .63400,3140.,-121., 221.,   0.,   0.
     *,3150., .66450,1341.,-120., 110.,   0.,   0.
     *,3150., .69500,1341.,-120., 220.,   0.,   0.
     *,3150., .72550,1341.,-120., 111.,   0.,   0.
     *,3150., .75600,1341.,-120., 221.,   0.,   0.
     *,3150., .78650,1341.,-121., 110.,   0.,   0.
     *,3150., .81700,1341.,-121., 220.,   0.,   0.
     *,3150., .84750,1341.,-121., 111.,   0.,   0.
     *,3150., .87800,1341.,-121., 221.,   0.,   0.
     *,3150., .89325,3140.,-130., 230.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=757,774)/
     * 3150., .90850,3140.,-130., 231.,   0.,   0.
     *,3150., .92375,3140.,-131., 230.,   0.,   0.
     *,3150., .93900,3140.,-131., 231.,   0.,   0.
     *,3150., .95425,1341.,-130., 230.,   0.,   0.
     *,3150., .96950,1341.,-130., 231.,   0.,   0.
     *,3150., .98475,1341.,-131., 230.,   0.,   0.
     *,3150.,1.00000,1341.,-131., 231.,   0.,   0.
     *,3250., .06000,  12., -11.,3240.,   0.,   0.
     *,3250., .12000,  12., -11.,2341.,   0.,   0.
     *,3250., .18000,  14., -13.,3240.,   0.,   0.
     *,3250., .24000,  14., -13.,2341.,   0.,   0.
     *,3250., .25500,  16., -15.,3240.,   0.,   0.
     *,3250., .27000,  16., -15.,2341.,   0.,   0.
     *,3250., .28925,3240.,-120.,   0.,   0.,   0.
     *,3250., .30850,3240.,-121.,   0.,   0.,   0.
     *,3250., .32775,2341.,-120.,   0.,   0.,   0.
     *,3250., .34700,2341.,-121.,   0.,   0.,   0.
     *,3250., .35775,3240., 340.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=775,792)/
     * 3250., .36850,3240., 341.,   0.,   0.,   0.
     *,3250., .37925,2341., 340.,   0.,   0.,   0.
     *,3250., .39000,2341., 341.,   0.,   0.,   0.
     *,3250., .42050,3240.,-120., 110.,   0.,   0.
     *,3250., .45100,3240.,-120., 220.,   0.,   0.
     *,3250., .48150,3240.,-120., 111.,   0.,   0.
     *,3250., .51200,3240.,-120., 221.,   0.,   0.
     *,3250., .54250,3240.,-121., 110.,   0.,   0.
     *,3250., .57300,3240.,-121., 220.,   0.,   0.
     *,3250., .60350,3240.,-121., 111.,   0.,   0.
     *,3250., .63400,3240.,-121., 221.,   0.,   0.
     *,3250., .66450,2341.,-120., 110.,   0.,   0.
     *,3250., .69500,2341.,-120., 220.,   0.,   0.
     *,3250., .72550,2341.,-120., 111.,   0.,   0.
     *,3250., .75600,2341.,-120., 221.,   0.,   0.
     *,3250., .78650,2341.,-121., 110.,   0.,   0.
     *,3250., .81700,2341.,-121., 220.,   0.,   0.
     *,3250., .84750,2341.,-121., 111.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=793,810)/
     * 3250., .87800,2341.,-121., 221.,   0.,   0.
     *,3250., .89325,3240.,-130., 230.,   0.,   0.
     *,3250., .90850,3240.,-130., 231.,   0.,   0.
     *,3250., .92375,3240.,-131., 230.,   0.,   0.
     *,3250., .93900,3240.,-131., 231.,   0.,   0.
     *,3250., .95425,2341.,-130., 230.,   0.,   0.
     *,3250., .96950,2341.,-130., 231.,   0.,   0.
     *,3250., .98475,2341.,-131., 230.,   0.,   0.
     *,3250.,1.00000,2341.,-131., 231.,   0.,   0.
     *,3350., .06000,  12., -11.,3340.,   0.,   0.
     *,3350., .12000,  12., -11.,3341.,   0.,   0.
     *,3350., .18000,  14., -13.,3340.,   0.,   0.
     *,3350., .24000,  14., -13.,3341.,   0.,   0.
     *,3350., .25500,  16., -15.,3340.,   0.,   0.
     *,3350., .27000,  16., -15.,3341.,   0.,   0.
     *,3350., .28925,3340.,-120.,   0.,   0.,   0.
     *,3350., .30850,3340.,-121.,   0.,   0.,   0.
     *,3350., .32775,3341.,-120.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=811,828)/
     * 3350., .34700,3341.,-121.,   0.,   0.,   0.
     *,3350., .35775,3340., 340.,   0.,   0.,   0.
     *,3350., .36850,3340., 341.,   0.,   0.,   0.
     *,3350., .37925,3341., 340.,   0.,   0.,   0.
     *,3350., .39000,3341., 341.,   0.,   0.,   0.
     *,3350., .42050,3340.,-120., 110.,   0.,   0.
     *,3350., .45100,3340.,-120., 220.,   0.,   0.
     *,3350., .48150,3340.,-120., 111.,   0.,   0.
     *,3350., .51200,3340.,-120., 221.,   0.,   0.
     *,3350., .54250,3340.,-121., 110.,   0.,   0.
     *,3350., .57300,3340.,-121., 220.,   0.,   0.
     *,3350., .60350,3340.,-121., 111.,   0.,   0.
     *,3350., .63400,3340.,-121., 221.,   0.,   0.
     *,3350., .66450,3341.,-120., 110.,   0.,   0.
     *,3350., .69500,3341.,-120., 220.,   0.,   0.
     *,3350., .72550,3341.,-120., 111.,   0.,   0.
     *,3350., .75600,3341.,-120., 221.,   0.,   0.
     *,3350., .78650,3341.,-121., 110.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=829,846)/
     * 3350., .81700,3341.,-121., 220.,   0.,   0.
     *,3350., .84750,3341.,-121., 111.,   0.,   0.
     *,3350., .87800,3341.,-121., 221.,   0.,   0.
     *,3350., .89325,3340.,-130., 230.,   0.,   0.
     *,3350., .90850,3340.,-130., 231.,   0.,   0.
     *,3350., .92375,3340.,-131., 230.,   0.,   0.
     *,3350., .93900,3340.,-131., 231.,   0.,   0.
     *,3350., .95425,3341.,-130., 230.,   0.,   0.
     *,3350., .96950,3341.,-130., 231.,   0.,   0.
     *,3350., .98475,3341.,-131., 230.,   0.,   0.
     *,3350.,1.00000,3341.,-131., 231.,   0.,   0.
     *,1160., .33300,   1.,  -2.,1500.,   0.,   0.
     *,1160., .66700,   4.,  -3.,1500.,   0.,   0.
     *,1160., .77800, -12.,  11.,1500.,   0.,   0.
     *,1160., .88900, -14.,  13.,1500.,   0.,   0.
     *,1160.,1.00000, -16.,  15.,1500.,   0.,   0.
     *,1260., .33300,   1.,  -2.,2500.,   0.,   0.
     *,1260., .66700,   4.,  -3.,2500.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=847,864)/
     * 1260., .77800, -12.,  11.,2500.,   0.,   0.
     *,1260., .88900, -14.,  13.,2500.,   0.,   0.
     *,1260.,1.00000, -16.,  15.,2500.,   0.,   0.
     *,2260., .33300,   1.,  -2.,2500.,   0.,   0.
     *,2260., .66700,   4.,  -3.,2500.,   0.,   0.
     *,2260., .77800, -12.,  11.,2500.,   0.,   0.
     *,2260., .88900, -14.,  13.,2500.,   0.,   0.
     *,2260.,1.00000, -16.,  15.,2500.,   0.,   0.
     *,2160., .33300,   1.,  -2.,1500.,   0.,   0.
     *,2160., .66700,   4.,  -3.,1500.,   0.,   0.
     *,2160., .77800, -12.,  11.,1500.,   0.,   0.
     *,2160., .88900, -14.,  13.,1500.,   0.,   0.
     *,2160.,1.00000, -16.,  15.,1500.,   0.,   0.
     *,1360., .33300,   1.,  -2.,3500.,   0.,   0.
     *,1360., .66700,   4.,  -3.,3500.,   0.,   0.
     *,1360., .77800, -12.,  11.,3500.,   0.,   0.
     *,1360., .88900, -14.,  13.,3500.,   0.,   0.
     *,1360.,1.00000, -16.,  15.,3500.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=865,882)/
     * 2360., .33300,   1.,  -2.,3500.,   0.,   0.
     *,2360., .66700,   4.,  -3.,3500.,   0.,   0.
     *,2360., .77800, -12.,  11.,3500.,   0.,   0.
     *,2360., .88900, -14.,  13.,3500.,   0.,   0.
     *,2360.,1.00000, -16.,  15.,3500.,   0.,   0.
     *,3360., .33300,   1.,  -2.,3500.,   0.,   0.
     *,3360., .66700,   4.,  -3.,3500.,   0.,   0.
     *,3360., .77800, -12.,  11.,3500.,   0.,   0.
     *,3360., .88900, -14.,  13.,3500.,   0.,   0.
     *,3360.,1.00000, -16.,  15.,3500.,   0.,   0.
     *,1151.,1.00000,1150.,  10.,   0.,   0.,   0.
     *,1251.,1.00000,1250.,  10.,   0.,   0.,   0.
     *,2251.,1.00000,2250.,  10.,   0.,   0.,   0.
     *,1351.,1.00000,1350.,  10.,   0.,   0.,   0.
     *,2351.,1.00000,2350.,  10.,   0.,   0.,   0.
     *,3351.,1.00000,3350.,  10.,   0.,   0.,   0.
     *,1161.,1.00000,1160.,  10.,   0.,   0.,   0.
     *,1261.,1.00000,1260.,  10.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=883,886)/
     * 2261.,1.00000,2260.,  10.,   0.,   0.,   0.
     *,1361.,1.00000,1360.,  10.,   0.,   0.,   0.
     *,2361.,1.00000,2360.,  10.,   0.,   0.,   0.
     *,3361.,1.00000,3360.,  10.,   0.,   0.,   0./
c    !--------------------------------------------!
c    !    delta++ resonances                      !
c    !--------------------------------------------!
      data ((dectab(i,j),i=1,7),j=887,900)/
c    !--dl++(1620)--------------------------------!
     * 1112., .30000,1120., 120.,   0.,   0.,   0.
     *,1112., .66000,1111., 110.,   0.,   0.,   0.
     *,1112., .90000,1121., 120.,   0.,   0.,   0.
     *,1112.,1.00000,1120., 120., 110.,   0.,   0.
c    !--dl++(1700)--------------------------------!
     *,1113., .15000,1120., 120.,   0.,   0.,   0.
     *,1113., .51000,1111., 110.,   0.,   0.,   0.
     *,1113., .75000,1121., 120.,   0.,   0.,   0.
     *,1113.,1.00000,1120., 120., 110.,   0.,   0.
c    !--dl++(1925)--------------------------------!
     *,1114., .28000,1120., 120.,   0.,   0.,   0.
     *,1114., .40600,1111., 110.,   0.,   0.,   0.
     *,1114., .49000,1121., 120.,   0.,   0.,   0.
     *,1114., .69000,1120., 121.,   0.,   0.,   0.
     *,1114., .70000,1130., 130.,   0.,   0.,   0.
     *,1114.,1.00000,1122., 120.,   0.,   0.,   0./
c    !--------------------------------------------!
c    !    delta- resonances                       !
c    !--------------------------------------------!
      data ((dectab(i,j),i=1,7),j=901,914)/
c    !--dl-(1620)---------------------------------!
     * 2222., .30000,1220.,-120.,   0.,   0.,   0.
     *,2222., .66000,2221., 110.,   0.,   0.,   0.
     *,2222., .90000,1221.,-120.,   0.,   0.,   0.
     *,2222.,1.00000,1220., 110.,-120.,   0.,   0.
c    !--dl-(1700)---------------------------------!
     *,2223., .15000,1220.,-120.,   0.,   0.,   0.
     *,2223., .51000,2221., 110.,   0.,   0.,   0.
     *,2223., .75000,1221.,-120.,   0.,   0.,   0.
     *,2223.,1.00000,1220., 110.,-120.,   0.,   0.
c    !--dl-(1925)---------------------------------!
     *,2224., .28000,1220.,-120.,   0.,   0.,   0.
     *,2224., .40600,2221., 110.,   0.,   0.,   0.
     *,2224., .49000,1221.,-120.,   0.,   0.,   0.
     *,2224., .69000,1220.,-121.,   0.,   0.,   0.
     *,2224., .70000,2230., 230.,   0.,   0.,   0.
     *,2224.,1.00000,1222.,-120.,   0.,   0.,   0./
c    !--------------------------------------------!
c    !    n*+ resonances + delta+ resonances      !
c    !--------------------------------------------!
      data ((dectab(i,j),i=1,7),j=915,931)/
c    !--n*+(1440)---------------------------------!
     * 1122., .20000,1120., 110.,   0.,   0.,   0.
     *,1122., .60000,1220., 120.,   0.,   0.,   0.
     *,1122., .68000,1111.,-120.,   0.,   0.,   0.
     *,1122., .73000,1121., 110.,   0.,   0.,   0.
     *,1122., .76000,1221., 120.,   0.,   0.,   0.
     *,1122., .84000,1120., 120.,-120.,   0.,   0.
     *,1122., .87000,1120., 110., 110.,   0.,   0.
     *,1122.,1.00000,1220., 120., 110.,   0.,   0.
c    !--n*+(1530)---------------------------------!
     *,1123., .17000,1120., 110.,   0.,   0.,   0.
     *,1123., .51000,1220., 120.,   0.,   0.,   0.
     *,1123., .57000,1111.,-120.,   0.,   0.,   0.
     *,1123., .61000,1121., 110.,   0.,   0.,   0.
     *,1123., .63000,1221., 120.,   0.,   0.,   0.
     *,1123., .67000,1120., 120.,-120.,   0.,   0.
     *,1123., .68000,1120., 110., 110.,   0.,   0.
     *,1123., .75000,1220., 120., 110.,   0.,   0.
     *,1123.,1.00000,1120., 220.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=932,948)/
c    !--dl+(1620)---------------------------------!
     * 1124., .20000,1120., 110.,   0.,   0.,   0.
     *,1124., .30000,1220., 120.,   0.,   0.,   0.
     *,1124., .54000,1111.,-120.,   0.,   0.,   0.
     *,1124., .58000,1121., 110.,   0.,   0.,   0.
     *,1124., .90000,1221., 120.,   0.,   0.,   0.
     *,1124., .96000,1120., 120.,-120.,   0.,   0.
     *,1124.,1.00000,1220., 120., 110.,   0.,   0.
c    !--n*+(1665)---------------------------------!
     *,1125., .16700,1120., 110.,   0.,   0.,   0.
     *,1125., .49970,1220., 120.,   0.,   0.,   0.
     *,1125., .62470,1111.,-120.,   0.,   0.,   0.
     *,1125., .70800,1121., 110.,   0.,   0.,   0.
     *,1125., .74970,1221., 120.,   0.,   0.,   0.
     *,1125., .82080,1120., 120.,-120.,   0.,   0.
     *,1125., .85190,1120., 110., 110.,   0.,   0.
     *,1125., .96300,1220., 120., 110.,   0.,   0.
     *,1125., .97300,1120., 220.,   0.,   0.,   0.
     *,1125.,1.00000,2130., 130.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=949,955)/
c    !--dl+(1700)---------------------------------!
     * 1126., .10000,1120., 110.,   0.,   0.,   0.
     *,1126., .15000,1220., 120.,   0.,   0.,   0.
     *,1126., .39000,1111.,-120.,   0.,   0.,   0.
     *,1126., .43000,1121., 110.,   0.,   0.,   0.
     *,1126., .75000,1221., 120.,   0.,   0.,   0.
     *,1126., .91500,1120., 120.,-120.,   0.,   0.
     *,1126.,1.00000,1220., 120., 110.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=956,969)/
c    !--n*+(1710)---------------------------------!
     * 1127., .04430,1120., 110.,   0.,   0.,   0.
     *,1127., .13290,1220., 120.,   0.,   0.,   0.
     *,1127., .23790,1111.,-120.,   0.,   0.,   0.
     *,1127., .30790,1121., 110.,   0.,   0.,   0.
     *,1127., .34290,1221., 120.,   0.,   0.,   0.
     *,1127., .41190,1120., 120.,-120.,   0.,   0.
     *,1127., .48090,1120., 110., 110.,   0.,   0.
     *,1127., .54990,1220., 120., 110.,   0.,   0.
     *,1127., .66070,1120., 220.,   0.,   0.,   0.
     *,1127., .72800,2130., 130.,   0.,   0.,   0.
     *,1127., .74930,1230., 130.,   0.,   0.,   0.
     *,1127., .76000,1130., 230.,   0.,   0.,   0.
     *,1127., .84000,1120., 111.,   0.,   0.,   0.
     *,1127.,1.00000,1220., 121.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=970,980)/
c    !--dl+(1925)---------------------------------!
     * 1128., .18700,1120., 110.,   0.,   0.,   0.
     *,1128., .28000,1220., 120.,   0.,   0.,   0.
     *,1128., .36400,1111.,-120.,   0.,   0.,   0.
     *,1128., .37800,1121., 110.,   0.,   0.,   0.
     *,1128., .49000,1221., 120.,   0.,   0.,   0.
     *,1128., .62300,1120., 111.,   0.,   0.,   0.
     *,1128., .69000,1220., 121.,   0.,   0.,   0.
     *,1128., .69350,1130., 230.,   0.,   0.,   0.
     *,1128., .69900,1230., 130.,   0.,   0.,   0.
     *,1128., .89900,1122., 110.,   0.,   0.,   0.
     *,1128.,1.00000,1222., 120.,   0.,   0.,   0./
c    !--------------------------------------------!
c    !    n*0  resonances + delta0 resonances     !
c    !--------------------------------------------!
      data ((dectab(i,j),i=1,7),j=981,997)/
c    !----------n*0(1440)-------------------------!
     * 1222., .20000,1220., 110.,   0.,   0.,   0.
     *,1222., .60000,1120.,-120.,   0.,   0.,   0.
     *,1222., .68000,2221., 120.,   0.,   0.,   0.
     *,1222., .73000,1221., 110.,   0.,   0.,   0.
     *,1222., .76000,1121.,-120.,   0.,   0.,   0.
     *,1222., .84000,1220., 120.,-120.,   0.,   0.
     *,1222., .87000,1220., 110., 110.,   0.,   0.
     *,1222.,1.00000,1120.,-120., 110.,   0.,   0.
c    !----------n*0(1530)-------------------------!
     *,1223., .17000,1220., 110.,   0.,   0.,   0.
     *,1223., .51000,1120.,-120.,   0.,   0.,   0.
     *,1223., .57000,2221., 120.,   0.,   0.,   0.
     *,1223., .61000,1221., 110.,   0.,   0.,   0.
     *,1223., .63000,1121.,-120.,   0.,   0.,   0.
     *,1223., .67000,1220., 120.,-120.,   0.,   0.
     *,1223., .68000,1220., 110., 110.,   0.,   0.
     *,1223., .75000,1120.,-120., 110.,   0.,   0.
     *,1223.,1.00000,1220., 220.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=998,1014)/
c    !----------dl0(1620)-------------------------!
     * 1224., .20000,1220., 110.,   0.,   0.,   0.
     *,1224., .30000,1120.,-120.,   0.,   0.,   0.
     *,1224., .54000,2221., 120.,   0.,   0.,   0.
     *,1224., .58000,1221., 110.,   0.,   0.,   0.
     *,1224., .90000,1121.,-120.,   0.,   0.,   0.
     *,1224., .96500,1220., 120.,-120.,   0.,   0.
     *,1224.,1.00000,1120.,-120., 110.,   0.,   0.
c    !----------n*0(1665)-------------------------!
     *,1225., .16700,1220., 110.,   0.,   0.,   0.
     *,1225., .49970,1120.,-120.,   0.,   0.,   0.
     *,1225., .62470,2221., 120.,   0.,   0.,   0.
     *,1225., .70800,1221., 110.,   0.,   0.,   0.
     *,1225., .74970,1121.,-120.,   0.,   0.,   0.
     *,1225., .82080,1220., 120.,-120.,   0.,   0.
     *,1225., .85190,1220., 110., 110.,   0.,   0.
     *,1225., .96300,1120.,-120., 110.,   0.,   0.
     *,1225., .97300,1220., 220.,   0.,   0.,   0.
     *,1225.,1.00000,2130., 230.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=1015,1021)/
c    !----------dl0(1700)-------------------------!
     * 1226., .10000,1220., 110.,   0.,   0.,   0.
     *,1226., .15000,1120.,-120.,   0.,   0.,   0.
     *,1226., .39000,2221., 120.,   0.,   0.,   0.
     *,1226., .43000,1221., 110.,   0.,   0.,   0.
     *,1226., .75000,1121.,-120.,   0.,   0.,   0.
     *,1226., .91500,1220., 120.,-120.,   0.,   0.
     *,1226.,1.00000,1120.,-120., 110.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=1022,1035)/
c    !----------n*0(1710)-------------------------!
     * 1227., .04430,1220., 110.,   0.,   0.,   0.
     *,1227., .13290,1120.,-120.,   0.,   0.,   0.
     *,1227., .23790,2221., 120.,   0.,   0.,   0.
     *,1227., .30790,1221., 110.,   0.,   0.,   0.
     *,1227., .34290,1121.,-120.,   0.,   0.,   0.
     *,1227., .41190,1220., 120.,-120.,   0.,   0.
     *,1227., .48090,1220., 110., 110.,   0.,   0.
     *,1227., .54990,1120.,-120., 110.,   0.,   0.
     *,1227., .66070,1220., 220.,   0.,   0.,   0.
     *,1227., .72800,2130., 230.,   0.,   0.,   0.
     *,1227., .73870,1230., 230.,   0.,   0.,   0.
     *,1227., .76000,2230., 130.,   0.,   0.,   0.
     *,1227., .92000,1120.,-121.,   0.,   0.,   0.
     *,1227.,1.00000,1220., 111.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=1036,1046)/
c    !----------dl0(1925)-------------------------!
     * 1228., .18700,1220., 110.,   0.,   0.,   0.
     *,1228., .28000,1120.,-120.,   0.,   0.,   0.
     *,1228., .36400,2221., 120.,   0.,   0.,   0.
     *,1228., .37800,1221., 110.,   0.,   0.,   0.
     *,1228., .49000,1121.,-120.,   0.,   0.,   0.
     *,1228., .55700,1220., 111.,   0.,   0.,   0.
     *,1228., .69000,1120.,-121.,   0.,   0.,   0.
     *,1228., .69350,2230., 130.,   0.,   0.,   0.
     *,1228., .70000,1230., 230.,   0.,   0.,   0.
     *,1228., .80000,1122.,-120.,   0.,   0.,   0.
     *,1228.,1.00000,1222., 110.,   0.,   0.,   0./
c    !--------------------------------------------!
c    !   lambda resonances + sigma0 resonances    !
c    !--------------------------------------------!
      data ((dectab(i,j),i=1,7),j=1047,1059)/
c    !----------lambda(1405)----------------------!
     * 1233., .33000,1230., 110.,   0.,   0.,   0.
     *,1233., .66000,2230., 120.,   0.,   0.,   0.
     *,1233.,1.00000,1130.,-120.,   0.,   0.,   0.
c    !----------lambda(1520)----------------------!
     *,1234., .22500,1120.,-130.,   0.,   0.,   0.
     *,1234., .48000,1220.,-230.,   0.,   0.,   0.
     *,1234., .62000,1230., 110.,   0.,   0.,   0.
     *,1234., .76000,2230., 120.,   0.,   0.,   0.
     *,1234., .90000,1130.,-120.,   0.,   0.,   0.
     *,1234., .96000,2130., 120.,-120.,   0.,   0.
     *,1234., .99000,2130., 110., 110.,   0.,   0.
     *,1234., .99330,1130.,-120., 110.,   0.,   0.
     *,1234., .99660,2230., 120., 110.,   0.,   0.
     *,1234.,1.00000,1230., 120.,-120.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=1060,1075)/
c    !----------lambda(1645)----------------------!
     * 1235., .10000,1120.,-130.,   0.,   0.,   0.
     *,1235., .20000,1220.,-230.,   0.,   0.,   0.
     *,1235., .35000,1230., 110.,   0.,   0.,   0.
     *,1235., .50000,2230., 120.,   0.,   0.,   0.
     *,1235., .65000,1130.,-120.,   0.,   0.,   0.
     *,1235., .75000,2130., 120.,-120.,   0.,   0.
     *,1235., .80000,2130., 110., 110.,   0.,   0.
     *,1235., .84500,1130.,-120., 110.,   0.,   0.
     *,1235., .89000,2230., 120., 110.,   0.,   0.
     *,1235., .93500,1230., 120.,-120.,   0.,   0.
     *,1235.,1.00000,2130., 220.,   0.,   0.,   0.
c    !----------sigma0(1665)----------------------!
     *,1236., .10000,1120.,-130.,   0.,   0.,   0.
     *,1236., .20000,1220.,-230.,   0.,   0.,   0.
     *,1236., .40000,2230., 120.,   0.,   0.,   0.
     *,1236., .60000,1130.,-120.,   0.,   0.,   0.
     *,1236.,1.00000,2130., 110.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=1076,1084)/
c    !----------sigma0(1776)----------------------!
     * 1237., .17500,1120.,-130.,   0.,   0.,   0.
     *,1237., .35000,1220.,-230.,   0.,   0.,   0.
     *,1237., .38750,2230., 120.,   0.,   0.,   0.
     *,1237., .42500,1130.,-120.,   0.,   0.,   0.
     *,1237., .57500,2130., 110.,   0.,   0.,   0.
     *,1237., .60000,2231., 120.,   0.,   0.,   0.
     *,1237., .62500,1131.,-120.,   0.,   0.,   0.
     *,1237., .75000,1234., 110.,   0.,   0.,   0.
     *,1237.,1.00000,1230., 220.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=1085,1094)/
c    !----------lambda(1845)----------------------!
     * 1238., .17000,1120.,-130.,   0.,   0.,   0.
     *,1238., .34000,1220.,-230.,   0.,   0.,   0.
     *,1238., .44000,1230., 110.,   0.,   0.,   0.
     *,1238., .54000,2230., 120.,   0.,   0.,   0.
     *,1238., .64000,1130.,-120.,   0.,   0.,   0.
     *,1238., .70000,1231., 110.,   0.,   0.,   0.
     *,1238., .76000,2231., 120.,   0.,   0.,   0.
     *,1238., .82000,1131.,-120.,   0.,   0.,   0.
     *,1238., .91000,1120.,-131.,   0.,   0.,   0.
     *,1238.,1.00000,1220.,-231.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=1095,1106)/
c    !----------sigma0(1930)----------------------!
     * 1239., .07500,1120.,-130.,   0.,   0.,   0.
     *,1239., .15000,1220.,-230.,   0.,   0.,   0.
     *,1239., .20000,1121.,-130.,   0.,   0.,   0.
     *,1239., .25000,1221.,-230.,   0.,   0.,   0.
     *,1239., .32500,1120.,-131.,   0.,   0.,   0.
     *,1239., .40000,1220.,-231.,   0.,   0.,   0.
     *,1239., .47500,2230., 120.,   0.,   0.,   0.
     *,1239., .55000,1130.,-120.,   0.,   0.,   0.
     *,1239., .70000,2130., 110.,   0.,   0.,   0.
     *,1239., .77500,2231., 120.,   0.,   0.,   0.
     *,1239., .85000,1131.,-120.,   0.,   0.,   0.
     *,1239.,1.00000,1234., 110.,   0.,   0.,   0./
c    !--------------------------------------------!
c    !            sigma+ resonances               !
c    !--------------------------------------------!
      data ((dectab(i,j),i=1,7),j=1107,1118)/
c    !----------sigma+(1665)----------------------!
     * 1132., .20000,1120.,-230.,   0.,   0.,   0.
     *,1132., .40000,1130., 110.,   0.,   0.,   0.
     *,1132., .60000,1230., 120.,   0.,   0.,   0.
     *,1132.,1.00000,2130., 120.,   0.,   0.,   0.
c    !----------sigma+(1776)----------------------!
     *,1133., .35000,1120.,-230.,   0.,   0.,   0.
     *,1133., .38750,1130., 110.,   0.,   0.,   0.
     *,1133., .42500,1230., 120.,   0.,   0.,   0.
     *,1133., .57500,2130., 120.,   0.,   0.,   0.
     *,1133., .60000,1131., 110.,   0.,   0.,   0.
     *,1133., .62500,1231., 120.,   0.,   0.,   0.
     *,1133., .75000,1234., 120.,   0.,   0.,   0.
     *,1133.,1.00000,1130., 220.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=1119,1128)/
c    !----------sigma+(1930)----------------------!
     * 1134., .15000,1120.,-230.,   0.,   0.,   0.
     *,1134., .22500,1111.,-130.,   0.,   0.,   0.
     *,1134., .25000,1121.,-230.,   0.,   0.,   0.
     *,1134., .40000,1120.,-231.,   0.,   0.,   0.
     *,1134., .47500,1130., 110.,   0.,   0.,   0.
     *,1134., .55000,1230., 120.,   0.,   0.,   0.
     *,1134., .70000,2130., 120.,   0.,   0.,   0.
     *,1134., .77500,1131., 110.,   0.,   0.,   0.
     *,1134., .85000,1231., 120.,   0.,   0.,   0.
     *,1134.,1.00000,1234., 120.,   0.,   0.,   0./
c    !--------------------------------------------!
c    !            sigma- resonances               !
c    !--------------------------------------------!
      data ((dectab(i,j),i=1,7),j=1129,1140)/
c    !----------sigma-(1665)----------------------!
     * 2232., .20000,1220.,-130.,   0.,   0.,   0.
     *,2232., .40000,2230., 110.,   0.,   0.,   0.
     *,2232., .60000,1230.,-120.,   0.,   0.,   0.
     *,2232.,1.00000,2130.,-120.,   0.,   0.,   0.
c    !----------sigma-(1776)----------------------!
     *,2233., .35000,1220.,-130.,   0.,   0.,   0.
     *,2233., .38750,2230., 110.,   0.,   0.,   0.
     *,2233., .42500,1230.,-120.,   0.,   0.,   0.
     *,2233., .57500,2130.,-120.,   0.,   0.,   0.
     *,2233., .60000,2231., 110.,   0.,   0.,   0.
     *,2233., .62500,1231.,-120.,   0.,   0.,   0.
     *,2233., .75000,1234.,-120.,   0.,   0.,   0.
     *,2233.,1.00000,2230., 220.,   0.,   0.,   0./
      data ((dectab(i,j),i=1,7),j=1141,1150)/
c    !----------sigma-(1930)----------------------!
     * 2234., .15000,1220.,-130.,   0.,   0.,   0.
     *,2234., .17500,1221.,-130.,   0.,   0.,   0.
     *,2234., .25000,2221.,-230.,   0.,   0.,   0.
     *,2234., .40000,1220.,-131.,   0.,   0.,   0.
     *,2234., .47500,2230., 110.,   0.,   0.,   0.
     *,2234., .55000,1230.,-120.,   0.,   0.,   0.
     *,2234., .70000,2130.,-120.,   0.,   0.,   0.
     *,2234., .77500,2231., 110.,   0.,   0.,   0.
     *,2234., .85000,1231.,-120.,   0.,   0.,   0.
     *,2234.,1.00000,1234.,-120.,   0.,   0.,   0./
c    !--------------------------------------------!
c    !      additional mesonresonances            !
c    !--------------------------------------------!
      data ((dectab(i,j),i=1,7),j=1151,1159)/
c    !-----------f0(975)--------------------------!
     *  332., .50000, 120.,-120.,   0.,   0.,   0.
     *, 332., .75000, 110., 110.,   0.,   0.,   0.
     *, 332., .87500, 130.,-130.,   0.,   0.,   0.
     *, 332.,1.00000, 230.,-230.,   0.,   0.,   0.
c    !-----------a0(980)--------------------------!
     *, 112., .56000, 110., 220.,   0.,   0.,   0.
     *, 112., .78000, 130.,-130.,   0.,   0.,   0.
     *, 112.,1.00000, 230.,-230.,   0.,   0.,   0.
c    !-----------a+(980)--------------------------!
     *, 122., .60000, 120., 220.,   0.,   0.,   0.
     *, 122.,1.00000, 130.,-230.,   0.,   0.,   0./
c    !--------------------------------------------!
c    !      weak baryon decays                    !
c    !--------------------------------------------!
      data ((dectab(i,j),i=1,7),j=1160,1169)/
c    !-----------lambda(1116)---------------------!
     * 2130.,0.64200,1120.,-120.,   0.,   0.,   0.
     *,2130.,1.00000,1220., 110.,   0.,   0.,   0.
c    !-----------sigma+(1180)---------------------!
     *,1130.,0.51580,1120., 110.,   0.,   0.,   0.
     *,1130.,1.00000,1220., 120.,   0.,   0.,   0.
c    !-----------sigma-(1180)---------------------!
     *,2230.,1.00000,1220.,-120.,   0.,   0.,   0.
c    !---------kaskade-(1360)---------------------!
     *,2330.,1.00000,2130.,-120.,   0.,   0.,   0.
c    !---------kaskade0(1360)---------------------!
     *,1330.,1.00000,2130., 110.,   0.,   0.,   0.
c    !---------omega-(1680)-----------------------!
     *,3331.,0.68000,2130.,-130.,   0.,   0.,   0.
     *,3331.,0.82000,1330.,-120.,   0.,   0.,   0.
     *,3331.,1.00000,2330., 110.,   0.,   0.,   0./
c    !--------------------------------------------!
c    !      weak meson decays                     !
c    !--------------------------------------------!
      data ((dectab(i,j),i=1,7),j=1170,1171)/
c    !-----------k0s(975)-------------------------!
     *   20., .68610, 120.,-120.,   0.,   0.,   0.
     *,  20.,1.00000, 110., 110.,   0.,   0.,   0./
c    !--------------------------------------------!
c
c ->rm 

      call idresi
 
c     determine wmass2,wgam2
c     ----------------------
      alfa=1./137.036
      gf=1.16570e-5
      sin2w=.215
      sinw=sqrt(sin2w)
      cosw=sqrt(1.-sin2w)
      amw=sqrt(pi*alfa/(.9304*sqrt(2.)*gf))/sinw
      wmass2=amw
      call idmass(5,amlep5)
      call idmass(6,amlep6)
      ngam=12
      if(amlep5+amlep6.gt.amw) ngam=9
      wgam2=gf*amw**3/(6.*pi*sqrt(2.))*ngam
 
      data iquit/'////'/,iblank/' '/
      ird=0
      do 1 i=1,mxlook
1     look(i)=0
      do 2 i=1,mxdky
      do 3 j=1,5
3     mode(j,i)=0
2     cbr(i)=0.
      nodcay=.false.
      noeta=.false.
      nopi0=.false.
      nonunu=.false.
      noevol=.false.
      nohadr=.false.
      if(lprint) write(ifch,10)
10    format('1',30('*')/' *',28x,'*'/
     1' *',5x,'isajet decay table',5x,'*'/
     2' *',28x,'*'/' ',30('*')//
     36x,'part',18x,'decay mode',19x,'cum br',15x,'ident',17x,
     4'decay ident'/)
      loop=0
      iold=0
      if(nodcay) return
 
200   loop=loop+1
      if(loop.gt.mxdky) goto9999
220   do 210 i=1,5
      imode(i)=0
      lmode(i)=iblank
210   continue
      ird=ird+1
      if(ird.gt.ndectb)return
      ires=nint(dectab(1,ird))
      br=dectab(2,ird)
      do 215 i=1,5
215   imode(i)=nint(dectab(2+i,ird))
      if(nopi0.and.ires.eq.110) goto220
      if(noeta.and.ires.eq.220) goto220
      if(ires.eq.iold) goto230
      if(ires.lt.0.or.ires.gt.mxlook)
     *call utstop('jdecin: ires out of range               ')
      look(ires)=loop
230   iold=ires
      cbr(loop)=br
      do 240 i=1,5
      mode(i,loop)=imode(i)
      if(imode(i).ne.0) lmode(i)=idlabl(imode(i))
240   continue
      lres=idlabl(ires)
      if(lprint) write(ifch,20) lres,(lmode(k),k=1,5),
     1br,ires,(imode(k),k=1,5)
20    format(6x,a5,6x,5(a5,2x),3x,f8.5,15x,i5,4x,5(i5,2x))
      goto200
 
9999  write(ifch,*)'loop=', loop
      call utstop('jdecin: loop > mxdky                    ')
 
      end
 
c-----------------------------------------------------------------------
      subroutine jestpr(ic1,ic2,am)
c     processes strings
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (mxjet=10000)
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
      logical revers
      parameter (nflav=6)
      integer ic1(2),ic2(2),jc(nflav,2)
      nstr=nstr+1
      if(nstr.gt.mxstr)
     *call utstop('jestpr: nstr>mxstr                      ')
      call iddeco(ic1,jc)
      nq=0
      do 7 nf=1,nflav
7     nq=nq+jc(nf,1)-jc(nf,2)
      am1min=piom
      if(iabs(nq).ge.2)am1min=prom
      call iddeco(ic2,jc)
      nq=0
      do 8 nf=1,nflav
8     nq=nq+jc(nf,1)-jc(nf,2)
      am2min=piom
      if(iabs(nq).ge.2)am2min=prom
      if(am.le.am1min+am2min)then
      pmax=am/2
      else
      pmax=utpcm(am,am1min,am2min)
      endif
      do 1 i=1,4
1     xorstr(i,nstr)=0
      pstr(1,nstr)=0
      pstr(2,nstr)=0
      pstr(3,nstr)=0
      pstr(4,nstr)=am
      pstr(5,nstr)=am
      icstr(1,nstr)=ic1(1)
      icstr(2,nstr)=ic1(2)
      icstr(3,nstr)=ic2(1)
      icstr(4,nstr)=ic2(2)
      rotstr(1,nstr)=0
      rotstr(2,nstr)=0
      rotstr(3,nstr)=1
      iorstr(nstr)=-1
      pmxevt=pmax
      return
      end
 
c-----------------------------------------------------------------------
      subroutine jetgen
c     generates jets
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (mxjet=10000)
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
      common/partnr/summas,iptnr,ic4,px4,py4,js4,pex,pey,pezet,pe0,nps
     */cntevm/ntevm
      integer ic1(2),ic2(2),ic4(2)
      parameter (nsi=6,nsix=100)
      parameter (nha=nsix+2)
      parameter (mamx=250)
      real targa(nsi,nha,mamx)
 
      nevt=1
      nstr=0
      nptl=0
 
      if(matarg.gt.0)then
      call nucoge
      nptl=0
      call nucini('str',targa,latarg,matarg,-1)
      call nucstr
      endif
 
      r=rangen()
      ps=0
      do 1 k=1,99
      ps=ps+prob(k)
      if(r.le.ps)goto2
1     continue
      call utstop('jetgen: no k found                      ')
2     ic1(1)=icfor(k,1)
      ic1(2)=icfor(k,2)
      ic2(1)=icbac(k,1)
      ic2(2)=icbac(k,2)
      call jestpr(ic1,ic2,engy)
 
      return
      end
 
c-----------------------------------------------------------------------
      subroutine jetptl(ier)
c     performs string fragmentation/decay and fin. state interactions
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      integer iacptl(mxptl)
      real xptl(mxptl),yptl(mxptl),zptl(mxptl),radptl(mxptl)
     *,amiptl(mxptl)
      parameter (mxjet=10000)
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
      common/partnr/summas,iptnr,ic4,px4,py4,js4,pex,pey,pezet,pe0,nps
     */didib/ndidib /cnfr/nrfra
      parameter (mxindx=1000,mxre=100,mxma=11,mxmx=6)
      common/crema/indx(mxindx),rema(mxre,mxma),rewi(mxre,mxma)
     *,idmx(mxma,mxmx),icre1(mxre,mxma),icre2(mxre,mxma)
      real psum(5),u(5),pei(5),pej(5)
      parameter (nflav=6)
      integer jci(nflav,2),jcj(nflav,2),jc(nflav,2)
     *,ici(2),icj(2),ic(2),ic4(2)
      parameter (mxifr=100)
      integer ifr(mxifr)
      parameter (mxlook=10000,mxdky=2000)
      common/dkytab/look(mxlook),cbr(mxdky),mode(5,mxdky)
      character dash*1,chadec*5
      dash='-'
      ier=0
      iret=0
      if(nevt.ne.1)return
      nptlpt=iabs(maproj)+iabs(matarg)
 
c     string rescaling  (if.ne.'str')
c     -------------------------------
      if(ichoic.eq.2.and.irescl.eq.1)then
      call utpage
      if(ish.ge.1)write(ifch,110)(dash,l=1,71),ipage,(dash,l=1,71)
110   format(1x,71a1/1x,i5,'.page            '
     *,'strings before rescaling'/1x,71a1/)
      do 9 j=1,nstr
      if(ish.ge.1)write(ifch,109)nrevt,j,(icstr(k,j)/100,k=1,4)
     *,(pstr(l,j),l=1,5)
9     continue
109   format(' str:',i3,i3,3x,3x,4i5,5f7.2,f7.2)
      psum(1)=0
      psum(2)=0
      psum(3)=(npjevt-ntgevt)*pnllx
      psum(4)=npjevt*sqrt(amproj**2+pnllx**2)
     *+ntgevt*sqrt(amtarg**2+pnllx**2)
      psum(5)=sqrt(psum(4)**2-psum(3)**2)
      call hrescl(1,nstr,psum,ifail)
      if(ifail.ne.0)then
      write(ifch,*)'hrescl return code:',ifail
      do 1 j=1,nstr
1     write(ifch,109)nrevt,j,(icstr(k,j)/1000,k=1,4)
     *,(pstr(l,j),l=1,5)
      write(ifch,*)'# proj nucl: ',npjevt
      write(ifch,*)'# targ nucl: ',ntgevt
      write(ifch,*)'pevt(345):',psum(3),psum(4),psum(5)
      call utstop('jetptl: hrescl return code .ne. 0       ')
      endif
      call utpage
      if(ish.ge.1)write(ifch,111)(dash,l=1,71),ipage,(dash,l=1,71)
111   format(/1x,71a1/1x,i5,'.page            '
     *,'strings after rescaling'/1x,71a1/)
      do 10 j=1,nstr
      if(ish.ge.1)write(ifch,109)nrevt+1,j
     *,(icstr(k,j)/1000,k=1,4),(pstr(l,j),l=1,5)
10    continue
      endif
 
c     fragmentation
c     -------------
      do 3 j=1,nstr
      call utpage
      if(ish.ge.1)write(ifch,102)(dash,l=1,71),ipage,j
     *,(icstr(k,j),k=1,4),sqrt(pstr(1,j)**2+pstr(2,j)**2
     *+pstr(3,j)**2),pstr(4,j),pstr(5,j),(dash,l=1,71)
102   format(/1x,71a1/1x,i5,'.page   str:',i3,1x,4i7,1x,3f7.2/1x,71a1/)
      call jamfra(j,newevt)
      if(newevt.eq.1)goto99
3     continue
 
c     print /cptl/
c     ------------
      if(ish.ge.1)then
      call utpage
      write(ifch,104)(dash,l=1,71),ipage,(dash,l=1,71)
104   format(/1x,71a1/1x,i5,'.page            '
     *,'ptls after fragmentation'/1x,71a1/)
      do 18 n=1,nptl
18    write(ifch,115)n,idptl(n)
     *,(pptl(j,n),j=3,5),(xorptl(j,n),j=3,4),(tivptl(j,n),j=1,2)
115   format(1x,'/cptl/',1x,i3,i10,3x,3f6.2,3x,2(1x,f5.2),3x,2(1x,f5.2))
      endif
 
c     decay
c     -----
      iacn=1
      if(radiac.gt.0.)then
      tme=tmemin
      else
      tme=ainfin
      iacn=0
      endif
      if(ish.ge.1)then
      call utpage
      write(ifch,119)(dash,l=1,71),ipage,tme,(dash,l=1,71)
119   format(/1x,71a1/1x,i5,'.page            '
     *,'decay for t_decay < ',f7.3/1x,71a1/)
      endif
      np1=1
21    np2=nptl
      do 5 i=np1,np2
      if(tivptl(2,i).le.tme.or.iacn.eq.0)call jdeca(i,iret)
      if(iret.eq.1)goto98
5     continue
      if(ish.ge.1)write(ifch,*)' '
      np1=np2+1
      if(np1.le.nptl) goto21
 
c     interactions
c     ------------
      if(radiac.gt.0.)then
      if(ish.ge.1)then
      call utpage
      write(ifch,118)(dash,l=1,71),ipage,(dash,l=1,71)
118   format(/1x,71a1/1x,i5,'.page            '
     *,'interactions and decay'/1x,71a1/)
      endif
c
      nptl0=nptl
      do 51 i=1,nptl0
      if(idptl(i)/10**8.ne.7)then
      call idtr4(idptl(i),ici)
      call iddeco(ici,jci)
      else
      call idtrb(ibptl(1,i),ibptl(2,i),ibptl(3,i),ibptl(4,i),jci)
      endif
      nqi=0
      do 50 n=1,nflav
50    nqi=nqi+jci(n,1)-jci(n,2)
      radptl(i)=radiac/2
      if(nqi.eq.0)radptl(i)=radias/2
      amiptl(i)=prom+amsiac
      if(nqi.eq.0)amiptl(i)=piom+amsiac
51    continue
 
c     time loop  --> 23
c     -----------------
      do 23 nt=1,numtme
      kt=nt-numtme/2
      numtm2=numtme-numtme/2
      if(nt.le.numtme/2)t=tmemin+(nt-1.)/(numtme/2-1.)*(tmemed-tmemin)
      if(nt.gt.numtme/2)t=tmemed+1.*kt/numtm2*(tmemax-tmemed)
      if(nt.lt.numtme/2)deltme=1./(numtme/2-1.)*(tmemed-tmemin)
      if(nt.ge.numtme/2)deltme=1./numtm2*(tmemax-tmemed)
      if(nptl.gt.nptl0)then
      do 52 i=nptl0+1,nptl
      if(idptl(i)/10**8.ne.7)then
      call idtr4(idptl(i),ici)
      call iddeco(ici,jci)
      else
      call idtrb(ibptl(1,i),ibptl(2,i),ibptl(3,i),ibptl(4,i),jci)
      endif
      nqi=0
      do 53 n=1,nflav
53    nqi=nqi+jci(n,1)-jci(n,2)
      radptl(i)=radiac/2
      if(nqi.eq.0)radptl(i)=radias/2
      amiptl(i)=prom+amsiac
      if(nqi.eq.0)amiptl(i)=piom+amsiac
52    continue
      endif
      do 44 i=1,nptl
      iacptl(i)=1
      if(pptl(5,i).gt.amiptl(i))iacptl(i)=0
      if(iorptl(i).eq.-1)iacptl(i)=0
      if(istptl(i).eq.2)iacptl(i)=0
      if(t.lt.tivptl(1,i).or.t.ge.tivptl(2,i))iacptl(i)=0
      if(iorptl(i).eq.0.and.tivptl(1,i).gt.-ainfin/2
     *.and.(t-tivptl(1,i)).lt.tmefor*pptl(4,i)/pptl(5,i))iacptl(i)=0
44    continue
      do 46 i=1,nptl
      xptl(i)=xorptl(1,i)+(t-xorptl(4,i))*pptl(1,i)/pptl(4,i)
      yptl(i)=xorptl(2,i)+(t-xorptl(4,i))*pptl(2,i)/pptl(4,i)
46    zptl(i)=xorptl(3,i)+(t-xorptl(4,i))*pptl(3,i)/pptl(4,i)
      nptl0=nptl
      i=0
 
c     i loop  --> 24
c     --------------
9999  i=i+1
      if(iacptl(i).ne.1)goto24
      j0=nptlpt+1
      if(i.gt.nptlpt)j0=i+1
      if(i.gt.nptl0)j0=1
 
c     j loop  --> 25
c     --------------
      do 25 j=j0,nptl
      if(iacptl(j).ne.1)goto25
      radsqr=(radptl(i)+radptl(j))**2
      if((zptl(i)-zptl(j))**2.gt.radsqr)goto25
      if((yptl(i)-yptl(j))**2.gt.radsqr)goto25
      if((xptl(i)-xptl(j))**2.gt.radsqr)goto25
      if(iorptl(i).gt.0.and.iorptl(j).eq.iorptl(i))goto25
      pde=(pptl(3,i)+pptl(3,j))/(pptl(4,i)+pptl(4,j))
      gam2=1./(1-pde**2)
      if(gam2*(zptl(i)-zptl(j))**2.gt.radsqr)goto25
      if((xptl(i)-xptl(j))**2+(yptl(i)-yptl(j))**2+
     *gam2*(zptl(i)-zptl(j))**2.gt.radsqr)goto25
 
c     check phase space
c     -----------------
      nptl=nptl+1
      if(nptl.gt.mxptl)
     *call utstop('jetptl: nptl>mxptl                      ')
      istptl(nptl)=0
      do 35 k=1,4
35    pptl(k,nptl)=pptl(k,i)+pptl(k,j)
      pptl(5,nptl)=sqrt(pptl(4,nptl)**2-pptl(3,nptl)**2
     *-pptl(2,nptl)**2-pptl(1,nptl)**2)
      amf=pptl(5,nptl)
      if(idptl(i)/10**8.ne.7)then
      call idtr4(idptl(i),ici)
      call iddeco(ici,jci)
      else
      call idtrb(ibptl(1,i),ibptl(2,i),ibptl(3,i),ibptl(4,i),jci)
      endif
      if(idptl(j)/10**8.ne.7)then
      call idtr4(idptl(j),icj)
      call iddeco(icj,jcj)
      else
      call idtrb(ibptl(1,j),ibptl(2,j),ibptl(3,j),ibptl(4,j),jcj)
      endif
      do 29 n=1,nflav
      do 29 k=1,2
29    jc(n,k)=jci(n,k)+jcj(n,k)
      nqi=0
      do 54 n=1,nflav
54    nqi=nqi+jc(n,1)-jc(n,2)
      radptl(nptl)=radiac/2
      if(nqi.eq.0)radptl(nptl)=radias/2
      amiptl(nptl)=prom+amsiac
      if(nqi.eq.0)amiptl(nptl)=piom+amsiac
      call idcomj(jc)
      call idmimj(jc,amim,ier,'cmp-no','prt-no')
      if(ier.gt.0)
     *call utstop('jetptl: idmimj err code > 0             ')
      if(amf.lt.amim)then
      ioi=iorptl(i)
      joi=jorptl(i)
      ioj=iorptl(j)
      joj=jorptl(j)
      if(ioi.ne.0.and.joi.ne.0.and.ioj.ne.0.and.joj.ne.0
     *.and.abs(pptl(3,i)-pptl(3,ioi)-pptl(3,joi)).gt.1e-3
     *.and.abs(pptl(3,j)-pptl(3,ioj)-pptl(3,joj)).gt.1e-3
     *.and.abs(tivptl(1,i)-t).lt.1e-3
     *.and.abs(tivptl(1,j)-t).lt.1e-3)then
      nptl=nptl-1
      goto25
      endif
      endif
 
c     success
c     -------
      if(ish.ge.1)write(ifch,*)'interaction ',i,j,' at t= ',t
      if(ish.ge.1)write(ifch,*)' '
      tivptl(2,i)=t
      tivptl(2,j)=t
      istptl(i)=1
      istptl(j)=1
      iacptl(i)=0
      iacptl(j)=0
      k1=0
      k2=0
      if(ifrptl(1,i).gt.0)then
      if(ish.ge.3)write(ifch,*)i,' ---> ',ifrptl(1,i),ifrptl(2,i)
      do 30 k=ifrptl(1,i),ifrptl(2,i)
      k2=k2+1
      if(k2.gt.mxifr)
     *call utstop('jetptl: k2 > mxifr                      ')
30    ifr(k2)=k
      endif
      if(ifrptl(1,j).gt.0)then
      if(ish.ge.3)write(ifch,*)j,' ---> ',ifrptl(1,j),ifrptl(2,j)
      do 31 k=ifrptl(1,j),ifrptl(2,j)
      k2=k2+1
      if(k2.gt.mxifr)
     *call utstop('jetptl: k2 > mxifr                      ')
31    ifr(k2)=k
      endif
32    k1=k1+1
      if(k1.le.k2)then
      n=ifr(k1)
      istptl(n)=2
      iacptl(n)=0
      if(ifrptl(1,n).gt.0)then
      if(ish.ge.3)write(ifch,*)n,' ---> ',ifrptl(1,n),ifrptl(2,n)
      do 33 k=ifrptl(1,n),ifrptl(2,n)
      k2=k2+1
      if(k2.gt.mxifr)
     *call utstop('jetptl: k2 > mxifr                      ')
33    ifr(k2)=k
      endif
      goto32
      endif
      if(ish.ge.1)then
      write(ifch,115)i,idptl(i)
     *,(pptl(k,i),k=3,5),(xorptl(k,i),k=3,4),(tivptl(k,i),k=1,2)
      write(ifch,115)j,idptl(j)
     *,(pptl(k,j),k=3,5),(xorptl(k,j),k=3,4),(tivptl(k,j),k=1,2)
      endif
 
c     elastic scattering
c     ------------------
      if(amf.lt.amim)then
      if(pptl(5,nptl).le.pptl(5,i)+pptl(5,j)-1e-3)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jetptl')
      write(ifch,*)'*****  mfus < mi+mj'
     *,pptl(5,nptl),pptl(5,i),pptl(5,j)
      write(ifch,*)'jc:'
      write(ifch,*)jc
      write(ifch,*)'jci:'
      write(ifch,*)jci
      write(ifch,*)'jcj:'
      write(ifch,*)jcj
      endif
      if(ish.ge.1)write(ifch,*)' '
      ier=1
      elseif(pptl(5,nptl).le.pptl(5,i)+pptl(5,j))then
      qcm=0.
      else
      qcm=utpcm(pptl(5,nptl),pptl(5,i),pptl(5,j))
      endif
      u(3)=2.*rangen()-1.
      phi=2.*pi*rangen()
      u(1)=sqrt(1.-u(3)**2)*cos(phi)
      u(2)=sqrt(1.-u(3)**2)*sin(phi)
      do 47 k=1,3
      pei(k)= qcm*u(k)
47    pej(k)=-qcm*u(k)
      pei(4)=sqrt(qcm**2+pptl(5,i)**2)
      pej(4)=sqrt(qcm**2+pptl(5,j)**2)
      pei(5)=pptl(5,i)
      pej(5)=pptl(5,j)
      call utlobo(-1,pptl(1,nptl),pptl(2,nptl),pptl(3,nptl),pptl(4,nptl)
     *,pei(1),pei(2),pei(3),pei(4))
      call utlobo(-1,pptl(1,nptl),pptl(2,nptl),pptl(3,nptl),pptl(4,nptl)
     *,pej(1),pej(2),pej(3),pej(4))
      nptl=nptl-1
      do 49 lo=1,2
      nptl=nptl+1
      if(lo.eq.1)ij=i
      if(lo.eq.2)ij=j
      do 48 k=1,5
      if(lo.eq.1)pptl(k,nptl)=pei(k)
      if(lo.eq.2)pptl(k,nptl)=pej(k)
48    continue
      istptl(nptl)=0
      idptl(nptl)=idptl(ij)
      xorptl(1,nptl)=(xptl(i)+xptl(j))/2
      xorptl(2,nptl)=(yptl(i)+yptl(j))/2
      xorptl(3,nptl)=(zptl(i)+zptl(j))/2
      xorptl(4,nptl)=t
      nstptl(nptl)=nstptl(i)
      iorptl(nptl)=i
      jorptl(nptl)=j
      tivptl(1,nptl)=t
      call idtau(idptl(nptl),pptl(4,nptl),pptl(5,nptl),taugm)
      tivptl(2,nptl)=tivptl(1,nptl)+taugm
      ifrptl(1,nptl)=0
      ifrptl(2,nptl)=0
      radptl(nptl)=radptl(ij)
      amiptl(nptl)=amiptl(ij)
      xptl(nptl)=(xptl(i)+xptl(j))/2
      yptl(nptl)=(yptl(i)+yptl(j))/2
      zptl(nptl)=(zptl(i)+zptl(j))/2
      iacptl(nptl)=1
      if(pptl(5,nptl).gt.amiptl(nptl))iacptl(nptl)=0
      if(ish.ge.1)then
      n=nptl
      write(ifch,115)n,idptl(n)
     *,(pptl(k,n),k=3,5),(xorptl(k,n),k=3,4),(tivptl(k,n),k=1,2)
      endif
49    continue
      if(ish.ge.2)write(ifch,*)' '
      if(ish.ge.2)write(ifch,*)'        elastic scattering ',amf,amim
      if(ish.ge.1)write(ifch,*)' '
      goto24
      endif
 
c     fusion
c     ------
      idr=0
      do 40 nf=1,nflav
      do 40 ij=1,2
      if(jc(nf,ij).ge.10)idr=7*10**8
40    continue
           if(idr/10**8.ne.7)then
      call idenco(jc,ic,ireten)
      if(ireten.eq.1)
     *call utstop('jetptl: idenco ret code = 1             ')
      id=idtra(ic,0,0,3)
43    amc=amf
      call idres(id,amc,idr,iadj)
           if(idr.ne.0)then
      lid=look(iabs(idr))
      if((lid.le.0.or.lid.gt.0.and.mode(2,lid).eq.0)
     *.and.pptl(5,nptl).gt.amc+1e-3)then
      amf=amf+0.010
      goto43
      endif
      if((lid.le.0.or.lid.gt.0.and.mode(2,lid).eq.0)
     *.and.abs(amc-pptl(5,nptl)).gt.1e-3)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jetptl')
      write(ifch,*)'*****  not on mass shell after fusion: '
     *,pptl(5,nptl),amc
      endif
      if(ish.ge.1)write(ifch,*)' '
      endif
           endif
           if(idr.eq.0)then
      if(mod(ic(1),100).ne.0.or.mod(ic(2),100).ne.0)then
      idr=9*10**8
      else
      idr=8*10**8+ic(1)*100+ic(2)/100
      endif
           endif
           else
      call idtrbi(jc,ibptl(1,nptl),ibptl(2,nptl)
     *,ibptl(3,nptl),ibptl(4,nptl))
      idr=idr
     *+mod(jc(1,1)+jc(2,1)+jc(3,1)+jc(4,1),10**4)*10**4
     *+mod(jc(1,2)+jc(2,2)+jc(3,2)+jc(4,2),10**4)
           endif
      idptl(nptl)=idr
      xorptl(1,nptl)=(xptl(i)+xptl(j))/2
      xorptl(2,nptl)=(yptl(i)+yptl(j))/2
      xorptl(3,nptl)=(zptl(i)+zptl(j))/2
      xorptl(4,nptl)=t
      nstptl(nptl)=nstptl(i)
      iorptl(nptl)=i
      jorptl(nptl)=j
      tivptl(1,nptl)=t
      call idtau(idptl(nptl),pptl(4,nptl),pptl(5,nptl),taugm)
      tivptl(2,nptl)=tivptl(1,nptl)+taugm
      ifrptl(1,nptl)=0
      ifrptl(2,nptl)=0
      xptl(nptl)=(xptl(i)+xptl(j))/2
      yptl(nptl)=(yptl(i)+yptl(j))/2
      zptl(nptl)=(zptl(i)+zptl(j))/2
      iacptl(nptl)=1
      if(pptl(5,nptl).gt.amiptl(nptl))iacptl(nptl)=0
      if(ish.ge.1)then
      n=nptl
      write(ifch,115)n,idptl(n)
     *,(pptl(k,n),k=3,5),(xorptl(k,n),k=3,4),(tivptl(k,n),k=1,2)
      if(ish.ge.1)write(ifch,*)' '
      endif
      goto24
25    continue
 
24    continue
      if(i.lt.nptl-1)goto9999
 
c     decay between t and t+dt
c     ------------------------
      if(ish.ge.1)write(ifch,*)'decay for  ',t,'  -  ',t+deltme
      if(ish.ge.1)write(ifch,*)' '
      np1=1
36    np2=nptl
      do 37 ip=np1,np2
      if(tivptl(2,ip).le.t+deltme)call jdeca(ip,iret)
      if(iret.eq.1)goto98
37    continue
      np1=np2+1
      if(np1.le.nptl)then
      if(ish.ge.1)write(ifch,*)' '
      goto36
      endif
23    continue
 
c     final decay
c     -----------
      np1=1
41    np2=nptl
      do 42 ip=np1,np2
      call jdeca(ip,iret)
      if(iret.eq.1)goto98
42    continue
      np1=np2+1
      if(np1.le.nptl)then
      if(ish.ge.1)write(ifch,*)' '
      goto41
      endif
 
c     print /cptl/
c     ------------
      if(ish.ge.1)then
      call utpage
      write(ifch,117)(dash,l=1,71),ipage,(dash,l=1,71)
117   format(/1x,71a1/1x,i5,'.page            '
     *,'ptls after performing interactions'/1x,71a1/)
      do 34 n=1,nptl
34    write(ifch,116)ifrptl(1,n),ifrptl(2,n),n,idptl(n),istptl(n)
     *,(pptl(j,n),j=3,5),(xorptl(j,n),j=3,4),(tivptl(j,n),j=1,2)
116   format(1x,i3,i3,1x,i3,i10,1x,i1,1x,3f6.2,3x,2(1x,f5.2)
     *,3x,2(1x,f5.2))
      endif
      endif
 
c     trafo -> lab cm
c     ---------------
      if(labsys.eq.1)then
      do 7 i=1,nptl
      amt=sqrt(pptl(5,i)**2+pptl(1,i)**2+pptl(2,i)**2)
      pz=pptl(3,i)
      e=pptl(4,i)
      yi=sign(1.,pz)*alog((e+abs(pz))/amt)
      y=yi+yhaha
      pptl(3,i)=amt*sinh(y)
7     pptl(4,i)=amt*cosh(y)
      endif
 
      call utpage
      if(ish.ge.1)write(ifch,113)(dash,l=1,71),ipage,(dash,l=1,71)
113   format(/1x,71a1/1x,i5,'.page            '
     *,'particle production finished'/1x,71a1/)
      return
 
99    continue
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jetptl')
      write(ifch,*)'*****  fragmentation not possible.'
     *,' ==> discard event'
      write(ifch,112)j,(icstr(k,j)/100,k=1,4)
     *,(pstr(l,j),l=1,5)
112   format( ' str:',3x,i3,3x,3x,4i5,5f7.2,f7.2)
      endif
      if(ish.ge.1)write(ifch,*)' '
      ier=1
      return
 
98    continue
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jetptl')
      write(ifch,*)'*****  jdeca ret code = 1'
     *,' ==> discard event'
      endif
      if(ish.ge.1)write(ifch,*)' '
      ier=1
      return
      end
 
c-----------------------------------------------------------------------
      subroutine jrescl(n1,n2,p5,ifail)
c     rescales particle momenta
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      dimension padd(5)
      data errlim/.001/
      ifail=1
      if(n1.ge.n2)return
      ifail=2
      do 100 k=1,5
100   padd(k)=0.
      do 110 ip=n1,n2
      do 110 k=1,5
110   padd(k)=padd(k)+pptl(k,ip)
      if(padd(1)**2+padd(2)**2+padd(3)**2.gt.0.001)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jrescl')
      write(ifch,*)'*****  p='
     *,padd(1)**2+padd(2)**2+padd(3)**2
      endif
      if(ish.ge.1)write(ifch,*)' '
      endif
      if(padd(5).ge.p5) return
      ifail=3
      scal=1.
      do 301 ipass=1,200
      sum=0.
      do 310 ip=n1,n2
      do 320 k=1,3
320   pptl(k,ip)=scal*pptl(k,ip)
      pptl(4,ip)=sqrt(pptl(1,ip)**2+pptl(2,ip)**2+pptl(3,ip)**2
     $+pptl(5,ip)**2)
310   sum=sum+pptl(4,ip)
      scal=p5/sum
      if(abs(scal-1.).le.errlim) goto300
301   continue
      return
300   continue
      ifail=0
      return
      end
 
c-----------------------------------------------------------------------
      subroutine jsplit(str,strp,ier)
c     splits string str into 3-3bar string strp and remainder (->str)
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      common/cnsta/pi,prom,piom,ainfin
      parameter (nptq=129)
      common /cptq/xptq(nptq),qptq(nptq),wptq(nptq)
      parameter (nsi=6,nsix=100)
      real str(nsi,2),strp(nsi,2),stro(nsi,2)
      real sil(nsi),six(nsi,nsix),si(nsi)
      parameter (nflav=6)
      integer jc(nflav,2),ic(2),icx(2)
     *,jc1(nflav,2),jc2(nflav,2),ic1(2),ic2(2)
     *,jc3(nflav,2),jc4(nflav,2),ic3(2),ic4(2)
     *,jc5(nflav,2),jc6(nflav,2),ic5(2),ic6(2)
      if(ish.ge.2)write(ifch,103)str
 
      lo=0
      ier=2
      do 14 n=1,nsi
      sil(n)=0
      si(n)=0
      do 14 ns=1,min0(2,nsix)
14    six(n,ns)=0
      do 1 i=1,2
      ic1(i)=nint(str(4+i,1))
1     ic2(i)=nint(str(4+i,2))
      call iddeco(ic1,jc1)
      call iddeco(ic2,jc2)
      do 3 n=1,nflav
      do 3 i=1,2
3     jc(n,i)=jc1(n,i)+jc2(n,i)
      call idenco(jc,ic,ireten)
      if(ireten.eq.1)
     *call utstop('jsplit: idenco ret code = 1             ')
      if(idsgl(ic,'gen-no','cmp-no').eq.1)then
      ier=1
      return
      endif
 
      n1q=0
      n1a=0
      n2q=0
      n2a=0
      do 4 n=1,nflav
      n1q=n1q+jc1(n,1)
      n1a=n1a+jc1(n,2)
      n2q=n2q+jc2(n,1)
4     n2a=n2a+jc2(n,2)
      n1di=n1q*(n1q-1)/2
      n2di=n2q*(n2q-1)/2
      n1ad=n1a*(n1a-1)/2
      n2ad=n2a*(n2a-1)/2
      su=n1q*n2a+n1a*n2q + n1di*n2q+n2di*n1q + n1ad*n2a+n2ad*n1a
      if(su.eq.0.)
     *call utstop('jsplit: su = 0                          ')
      pmes1=n1q*n2a /su
      pmes2=n1a*n2q /su
      pbar1=n1di*n2q/su
      pbar2=n2di*n1q/su
      paba1=n1ad*n2a/su
      paba2=n2ad*n1a/su
      r=rangen()
      if(r.lt.pmes1)then
      ip1=1
      ip2=2
      elseif(r.lt.pmes1+pmes2)then
      ip1=2
      ip2=1
      elseif(r.lt.pmes1+pmes2+pbar1)then
      ip1=11
      ip2=1
      elseif(r.lt.pmes1+pmes2+pbar1+pbar2)then
      ip1=1
      ip2=11
      elseif(r.lt.pmes1+pmes2+pbar1+pbar2+paba1)then
      ip1=22
      ip2=2
      else
      ip1=2
      ip2=22
      endif
      call randfl(jc1,ip1,i1,ic3,0)
      call randfl(jc2,ip2,i2,ic4,0)
      if(i1.eq.0.or.i2.eq.0)goto9999
 
      strp(5,1)=ic3(1)
      strp(6,1)=ic3(2)
      strp(5,2)=ic4(1)
      strp(6,2)=ic4(2)
      call iddeco(ic3,jc3)
      call iddeco(ic4,jc4)
      do 5 n=1,nflav
      do 5 i=1,2
      jc5(n,i)=jc1(n,i)-jc3(n,i)
5     jc6(n,i)=jc2(n,i)-jc4(n,i)
      call idenco(jc5,ic5,ireten)
      if(ireten.eq.1)
     *call utstop('jsplit: idenco ret code = 1             ')
      call idenco(jc6,ic6,ireten)
      if(ireten.eq.1)
     *call utstop('jsplit: idenco ret code = 1             ')
      stro(5,1)=ic5(1)
      stro(6,1)=ic5(2)
      stro(5,2)=ic6(1)
      stro(6,2)=ic6(2)
 
20    lo=lo+1
      if(lo.gt.30*ntrymx)goto9997
      do 12 i=1,2
21    p=rangen()*sqrt(str(3,i)**2+str(2,i)**2+str(1,i)**2)
      pt=utinvt(nptq,xptq,qptq,rangen()*qptq(nptq))
      if(pt.ge.p)goto21
      phi=2.*pi*rangen()
      strp(1,i)=pt*cos(phi)
      strp(2,i)=pt*sin(phi)
      strp(3,i)=sqrt(p**2-pt**2)*str(3,i)/abs(str(3,i))
      strp(4,i)=p
      stro(1,i)=str(1,i)-strp(1,i)
      stro(2,i)=str(2,i)-strp(2,i)
      stro(3,i)=str(3,i)-strp(3,i)
12    stro(4,i)=sqrt(stro(1,i)**2+stro(2,i)**2+stro(3,i)**2)
      do 15 n=1,nsi
      sil(n)=strp(n,1)
15    six(n,1)=strp(n,2)
      call utasi(sil,six,si,ifail,'prt-no')
      if(ifail.eq.2)
     *call utstop('jsplit: utasi ret code = 2              ')
      if(ifail.eq.1)goto20
      do 16 n=1,nsi
      sil(n)=stro(n,1)
16    six(n,1)=stro(n,2)
      call utasi(sil,six,si,ifail,'prt-no')
      if(ifail.eq.2)
     *call utstop('jsplit: utasi ret code = 2              ')
      if(ifail.eq.1)goto20
 
      do 13 n=1,nsi
      do 13 i=1,2
13    str(n,i)=stro(n,i)
      if(ish.ge.2)write(ifch,*)'splitted string:'
      if(ish.ge.2)write(ifch,103)strp
      ier=0
      return
 
9996  continue
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('jsplit')
      write(ifch,*)'*****  split/strip not possible'
      write(ifch,103)str
      endif
      if(ish.ge.1)write(ifch,*)' '
      ier=3
      return
9997  do 22 n=1,nflav
      istrp=nflav+1-n
      if(jc1(istrp,1).gt.0.and.jc2(istrp,2).gt.0
     *.or.jc1(istrp,2).gt.0.and.jc2(istrp,1).gt.0)then
      if(jc1(istrp,1).gt.0.and.jc2(istrp,2).gt.0)then
      jc1(istrp,1)=jc1(istrp,1)-1
      jc2(istrp,2)=jc2(istrp,2)-1
      elseif(jc1(istrp,2).gt.0.and.jc2(istrp,1).gt.0)then
      jc1(istrp,2)=jc1(istrp,2)-1
      jc2(istrp,1)=jc2(istrp,1)-1
      else
      call utstop('jsplit: this stmt should not be reached ')
      endif
      goto23
      endif
22    continue
      goto9996
23    continue
      call idenco(jc1,ic1,ireten)
      if(ireten.eq.1)
     *call utstop('jsplit: idenco ret code = 1             ')
      call idenco(jc2,ic2,ireten)
      if(ireten.eq.1)
     *call utstop('jsplit: idenco ret code = 1             ')
      str(5,1)=ic1(1)
      str(6,1)=ic1(2)
      str(5,2)=ic2(1)
      str(6,2)=ic2(2)
      ier=-1
      if(ish.ge.2)write(ifch,*)'stripped string:'
      if(ish.ge.2)write(ifch,103)str
      return
9999  jerr=jerr+1
      if(ish.ge.1)write(ifch,*)' '
      write(ifch,*)'***** error in jsplit: no flavour found'
      write(ifch,103)str
103   format(' str: ',4f11.5,2f8.0/'      ',4f11.5,2f8.0)
      if(ish.ge.1)write(ifch,*)' '
      return
      end
 
c-----------------------------------------------------------------------
      subroutine jstrij(ipa1,ipa2,jc,idhad,jcx,ier,isame,ierrc)
c     strips hadron idhad off jet jc. isame=1: zero flavor required
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (nflav=6)
      integer jc(nflav,2),ic(2),jcx(nflav,2),icx(2),icp(2),jcp(nflav,2)
     *,ic1(2),jc1(nflav,2),ic2(2),jc2(nflav,2)
      ier=0
      call randfl(jc,ipa1,ii,ic1,isame)
      if(ii.eq.0)goto9999
      call iddeco(ic1,jc1)
      do 8 n=1,nflav
      do 8 i=1,2
      jcp(n,i)=jc1(n,i)
8     jcx(n,i)=jc(n,i)-jc1(n,i)
      if(isame.ne.1)then
      call randfl(jcx,ipa2,ii,ic2,0)
      if(ii.eq.0)goto9999
      call iddeco(ic2,jc2)
      do 4 n=1,nflav
      do 4 i=1,2
      jcp(n,i)=jcp(n,i)+jc2(n,i)
4     jcx(n,i)=jcx(n,i)-jc2(n,i)
      endif
      call idenco(jcp,icp,ireten)
      if(ireten.eq.1)
     *call utstop('jstrij: idenco ret code = 1             ')
      idhad=idtra(icp,1,0,3)
      if(idhad.eq.0)goto9998
      return
9998  jerr=jerr+1
      if(ish.ge.1)write(ifch,*)' '
      write(ifch,*)'***** error in jstrij: idhad = 0'
      write(ifch,*)'code bef strip:'
      write(ifch,*)jc
      write(ifch,*)'jc1:'
      write(ifch,*)jc1
      write(ifch,*)'jc2:'
      write(ifch,*)jc2
      write(ifch,*)'ptl code:'
      write(ifch,*)jcp
      if(ish.ge.1)write(ifch,*)' '
      ier=1
      return
9999  ier=1
      if(ierrc.eq.0)return
      jerr=jerr+1
      if(ish.ge.1)write(ifch,*)' '
      write(ifch,*)'***** error in jstrij: no parton found'
      write(ifch,*)'code bef strip:'
      write(ifch,*)jc
      if(ish.ge.1)write(ifch,*)' '
      return
      end
 
c-----------------------------------------------------------------------
      subroutine jstrip(ipa1,ipa2,ic,idhad,icx,ier,isame,ierrc)
c     strips hadron idhad off jet ic. isame=1: zero flavor required
c-----------------------------------------------------------------------
      parameter (nflav=6)
      integer jc(nflav,2),ic(2),jcx(nflav,2),icx(2)
      call iddeco(ic,jc)
      call jstrij(ipa1,ipa2,jc,idhad,jcx,ier,isame,ierrc)
      call idenco(jcx,icx,ireten)
      if(ireten.eq.1)
     *call utstop('jstrip: idenco ret code = 1             ')
      return
      end
 
c-----------------------------------------------------------------------
      subroutine nucini(opt,nuc,la,ma,isi)
c     initializes nucleon-momenta.
c     writes nucleons on /cptl/ (p,ifr).
c-----------------------------------------------------------------------
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (nsi=6,nsix=100,mamx=250)
      parameter (nha=nsix+2)
      real nuc(nsi,nha,mamx)
      parameter (mamx2=mamx*2)
      common/cnnn/nnnptl(mamx2)
      character opt*3
      nhax=3
      if(nha.lt.nhax)
     *call utstop('nucini: nha too small                   ')
      ia = 0
      do 1 l=1,ma
      do 2 m=1,nhax
      do 2 n=1,nsi
2     nuc(n,m,l)=0
 
      if(opt.eq.'nuc')then
      if(isi.gt.0.and.laproj.lt.0)then
        id=idproj
      elseif(isi.lt.0.and.latarg.lt.0)then
        id=idtarg
      else
        id=1220
        if(rangen().le.la*1./ma) then
c
c...	Ensure that there are not too many protons in nucleus !!!
	  ia = ia+1
	  if(ia .le. la) id=1120
	end if
      endif
      call idmass(id,ams)
      ic1=idtrai(1,id,1)
      ic2=idtrai(2,id,1)
      p1=0
      p2=0
      p3=isi*pnllx
      p0=sqrt(pnllx**2+ams**2)
      p0x=pnllx
 
      elseif(opt.eq.'str')then
      id=1220
      if(rangen().le.la*1./ma)id=1120
      ic1=idtrai(1,id,1)
      ic2=idtrai(2,id,1)
      p1=0
      p2=0
      p3=0
      p0=prom
      endif
 
      nuc(5,1,l)=ic1
      nuc(6,1,l)=ic2
      nuc(3,2,l)=p3
      nuc(4,2,l)=p0x
      nuc(5,2,l)=ic1
      nuc(6,2,l)=ic2
      nptl=nptl+1
      if(nptl.ne.nnnptl(nptl))
     *call utstop('nucini: nptl and nstptl dont match      ')
      idptl(nptl)=id
      pptl(1,nptl)=p1
      pptl(2,nptl)=p2
      pptl(3,nptl)=p3
      pptl(4,nptl)=p0
      pptl(5,nptl)=sqrt(p0**2-p1**2-p2**2-p3**2)
      nstptl(nptl)=0
      ifrptl(1,nptl)=0
      ifrptl(2,nptl)=0
1     continue
      return
      end
 
c-----------------------------------------------------------------------
      subroutine nuclco(massnr,n,x,y,z,ynuc)
c     calculates coordinates of the nucleons in a nucleus.
c-----------------------------------------------------------------------
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (ndep=129,ndet=129,kollmx=2000)
      common /col/rmproj,rmtarg,bmax,bimp,koll,nproj,ntarg
     *,xdep(ndep),qdep(ndep),wdep(ndep),xdet(ndet),qdet(ndet),wdet(ndet)
     *,nrproj(kollmx),nrtarg(kollmx),distce(kollmx),nord(kollmx)
     *,coord(4,kollmx)
      real x(n),y(n),z(n)
      if(massnr.eq.0)return
      if(massnr.gt.n)
     *call utstop('nuclco: massnr.gt.n                     ')
      if(massnr.eq.1)then
      x(1)=0
      y(1)=0
      z(1)=0
      return
      endif
      do 3 i=1,massnr
10    continue
      if(massnr.eq.maproj)r=utinvt(ndep,xdep,qdep,rangen()*qdep(ndep))
      if(massnr.eq.matarg)r=utinvt(ndet,xdet,qdet,rangen()*qdet(ndet))
      if(massnr.ne.maproj.and.massnr.ne.matarg)
     *call utstop('nuclco: nucleus neither proj nor targ   ')
      theta=acos(1-2*rangen())
      phi=-pi+2*pi*rangen()
      x(i)=r*sin(theta)*cos(phi)
      y(i)=r*sin(theta)*sin(phi)
      z(i)=r*cos(theta)
      if(i.eq.1)goto3
      if(core.eq.0.)goto3
      do 2 j=1,i-1
      if((x(i)-x(j))**2+(y(i)-y(j))**2+(z(i)-z(j))**2.lt.core**2)goto10
2     continue
3     continue
      do 4 i=1,massnr
4     z(i)=z(i)/cosh(ynuc)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine nucoge
c     writes nucleons on /cptl/ (xor,tiv,ist,ior,nst).
c     determines sequence of collisions according to nuclear geometry
c       if maproj>0.
c-----------------------------------------------------------------------
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (ndep=129,ndet=129,kollmx=2000)
      common /col/rmproj,rmtarg,bmax,bimp,koll,nproj,ntarg
     *,xdep(ndep),qdep(ndep),wdep(ndep),xdet(ndet),qdet(ndet),wdet(ndet)
     *,nrproj(kollmx),nrtarg(kollmx),distce(kollmx),nord(kollmx)
     *,coord(4,kollmx)
      parameter (mamx=250)
c+fv
      common/paro3/ com, ytrgt, nzprj, nnprj, nztrg, nntrg
c-fv
      common /cncl/xproj(mamx),yproj(mamx),zproj(mamx)
     *,xtarg(mamx),ytarg(mamx),ztarg(mamx)
      parameter (mamx2=mamx*2)
      common/cnnn/nnnptl(mamx2)
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
      vel=tanh(ypjtl-yhaha)+tanh(yhaha-ytrgt)
      nproj=1
      ntarg=1
      do 15 n=1,kollmx
      nord(n)=n
      do 16 k=1,4
16    coord(k,n)=0
15    continue
 
      if(matarg.lt.0)then
      koll=-matarg
      ntarg=koll
      bimp=0
      nptl=nptl+1
      do 3 i=1,4
3     xorptl(i,nptl)=0
      tivptl(1,nptl)=-ainfin
      tivptl(2,nptl)=0
      istptl(nptl)=1
      iorptl(nptl)=-1
      jorptl(nptl)=0
      nnnptl(nptl)=nptl
      do 1 k=1,koll
      nrproj(k)=1
      nrtarg(k)=k
      nptl=nptl+1
      do 4 i=1,4
4     xorptl(i,nptl)=0
      tivptl(1,nptl)=-ainfin
      tivptl(2,nptl)=0
      istptl(nptl)=1
      iorptl(nptl)=-1
      jorptl(nptl)=0
      nnnptl(nptl)=nptl
1     continue
      goto9999
 
      elseif(maproj.eq.1.and.matarg.eq.1)then
      koll=1
      bimp=0
      nrproj(1)=1
      nrtarg(1)=1
      do 5 ii=1,2
      nptl=nptl+1
      do 2 i=1,4
2     xorptl(i,nptl)=0
      tivptl(1,nptl)=-ainfin
      tivptl(2,nptl)=0
      istptl(nptl)=1
      iorptl(nptl)=-1
      jorptl(nptl)=0
5     nnnptl(nptl)=nptl
      goto9999
      endif
 
      call nuclco(maproj,mamx,xproj,yproj,zproj,ypjtl-yhaha)
      call nuclco(matarg,mamx,xtarg,ytarg,ztarg,yhaha-ytrgt)
      bx=0
      by=0
      if(maproj.gt.0)then
      phi=rangen()*2*pi
      if(bimevt.lt.0)then
      b1=bminim
      b2=amin1(rmproj+rmtarg,bmaxim)
      if(b1.gt.b2)
     *call utstop('nucoge: bmin > bmax                     ')
      bimp=sqrt(b1**2+(b2**2-b1**2)*rangen())
      else
      bimp=bimevt
      endif
      bx=cos(phi)*bimp
      by=sin(phi)*bimp
      do 6 i=1,maproj
      nptl=nptl+1
      xorptl(1,nptl)=xproj(i)+bx/2
      xorptl(2,nptl)=yproj(i)+by/2
      xorptl(3,nptl)=zproj(i)
      xorptl(4,nptl)=0
      tivptl(1,nptl)=-ainfin
      tivptl(2,nptl)= ainfin
      istptl(nptl)=0
      iorptl(nptl)=0
      jorptl(nptl)=0
6     nnnptl(nptl)=nptl
      endif
      do 7 i=1,matarg
        nptl=nptl+1
        xorptl(1,nptl)=xtarg(i)-bx/2
        xorptl(2,nptl)=ytarg(i)-by/2
        xorptl(3,nptl)=ztarg(i)
        xorptl(4,nptl)=0
        tivptl(1,nptl)=-ainfin
        tivptl(2,nptl)= ainfin
        istptl(nptl)=0
        iorptl(nptl)=0
        jorptl(nptl)=0
7       nnnptl(nptl)=nptl
      if(maproj.eq.0)return
      koll=0
      do 12 i=1,maproj
      do 12 j=1,matarg
        if( (xproj(i)+bx-xtarg(j))**2
     *   +(yproj(i)+by-ytarg(j))**2 .gt. sigma/pi )goto12
        koll=koll+1
       if(koll.gt.kollmx)
     *call utstop('nucoge: kollmx too small                ')
        nrproj(koll)=i
        nrtarg(koll)=j
        distce(koll)=ztarg(j)-zproj(i)
        coord(1,koll)=(xproj(i)+xtarg(j))/2
        coord(2,koll)=(yproj(i)+ytarg(j))/2
        coord(3,koll)=(zproj(i)+ztarg(j))/2
        coord(4,koll)=distce(koll)/vel
        istptl(i)=1
        iorptl(i)=-1
        tivptl(2,i)=coord(4,koll)
        istptl(maproj+j)=1
        iorptl(maproj+j)=-1
        tivptl(2,maproj+j)=coord(4,koll)
12    continue
      if(koll.le.1)goto9999
      nntrg = 0
      nztrg = 0
      nnprj = 0
      nzprj = 0
c
c     count projectile/target nucleon's involved in reaction.
c     ======================================================
c
c     identity of first projectile participiant
c
        i = nrproj(1)
        if(idptl(i) .eq. 1120) then
          nzprj = nzprj + 1
        else if(idptl(i) .eq. 1220) then
         nnprj = nnprj + 1
        end if
c
c     loop over collisions strings
c
      do 21 n=2,koll
      do 22 m=1,n-1
      if(nrproj(m).eq.nrproj(n))goto21
22    continue
        nproj=nproj+1
c
c     Find number of protons/neutrons
c     ===============================
        i = nrproj(n)
        if(idptl(i) .eq. 1120) then
          nzprj = nzprj + 1
        else if(idptl(i) .eq. 1220) then
         nnprj = nnprj + 1
        end if
21    continue
c
c     Scan over target nucleon's
c     ==========================
        i = nrtarg(1)
        if(idptl(i) .eq. 1120) then
          nztrg = nztrg + 1
        else if(idptl(i) .eq. 1220) then
          nntrg = nntrg + 1
        end if
      do 23 n=2,koll
      do 24 m=1,n-1
      if(nrtarg(m).eq.nrtarg(n))goto23
24    continue
      ntarg=ntarg+1
c
c     Find number of protons/neutrons
c     ===============================
        i = nrtarg(n)
        if(idptl(i) .eq. 1120) then
          nztrg = nztrg + 1
        else if(idptl(i) .eq. 1220) then
          nntrg = nntrg + 1
        end if
23    continue
c
      write(6,*)'Parti',ntarg,nproj,nnprj,nzprj,nntrg,nztrg
      do 20 n=1,koll-1
      do 20 m=n+1,koll
      if(distce(nord(m)).lt.distce(nord(n)))then
      nordm=nord(m)
      nord(m)=nord(n)
      nord(n)=nordm
      endif
20    continue
 
9999  continue
      if(koll.le.0)return
      if(koll.lt.ko1ko2/10000.or.koll.gt.mod(ko1ko2,10000))return
      nevt=1
      bimevt=bimp
      kolevt=koll
      npjevt=nproj
      ntgevt=ntarg
      pmxevt=pnll
      return
      end
 
c-----------------------------------------------------------------------
      subroutine nucoll
c     performs a  nucleus-nucleus collision (incl. nucleon-nucleon)
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (ndep=129,ndet=129,kollmx=2000)
      common/col/rmproj,rmtarg,bmax,bimp,koll,nproj,ntarg
     *,xdep(ndep),qdep(ndep),wdep(ndep),xdet(ndet),qdet(ndet),wdet(ndet)
     *,nrproj(kollmx),nrtarg(kollmx),distce(kollmx),nord(kollmx)
     *,coord(4,kollmx)
      real kolbad(kollmx)
      common/civ/ivp0,ivp,ivt0,ivt /cntevm/ntevm
     */cnew/kotri,newico,newcol
      parameter (nsi=6,nsix=100)
      parameter (nha=nsix+2)
      real proj(nsi,nha),targ(nsi,nha),strap(nsi,2),strat(nsi,2)
     *,proj2(nsi,nha),targ2(nsi,nha),strlp(nsi,2),strlt(nsi,2)
      parameter(nprbms=20)
      common /cprbms/prbms(nprbms)
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (mxjet=10000)
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
      common/partnr/summas,iptnr,ic4,px4,py4,js4,pex,pey,pezet,pe0,nps
     */cnce/nces,ncolex /cnfr/nrfra /ckol/kol
      parameter (mamx=250)
      real proja(nsi,nha,mamx),targa(nsi,nha,mamx)
      integer ncopj(mamx),ncotg(mamx),ic4(2)
      character dash*1
      dash='-'
 
      nevt=0
      nptl=0
      call nucoge
      if(ichoic.eq.3.or.koll.eq.0)return
      naevt=naevt+1
      if(koll.lt.ko1ko2/10000.or.koll.gt.mod(ko1ko2,10000))return
      colevt=koll
      amsev=sqrt((npjevt*sqrt(amproj**2+pnllx**2)
     *+ntgevt*sqrt(amtarg**2+pnllx**2))**2
     *-((npjevt-ntgevt)*pnllx)**2)
 
      itry=0
38    continue
      if(itry .ge. 1) write(6,*)'Nucego try',itry
      itry=itry+1
      nstr=0
      nptl=0
      sumpt2=0
      amsac=0
      call nucini('nuc',proja,laproj,maproj,1)
c
c...  sum participiants...
      nntrg = 0
      nztrg = 0
      nnprj = 0
      nzprj = 0
c
c     count projectile/target nucleon's involved in reaction.
c     ======================================================
c
c     identity of first projectile participiant
c
        i = nrproj(1)
        if(idptl(i) .eq. 1120) then
          nzprj = nzprj + 1
        else if(idptl(i) .eq. 1220) then
         nnprj = nnprj + 1
        end if
c
c     loop over collisions strings
c
      do 21 n=2,koll
      do 22 m=1,n-1
      if(nrproj(m).eq.nrproj(n))goto21
22    continue
c
c     Find number of protons/neutrons
c     ===============================
        i = nrproj(n)
        if(idptl(i) .eq. 1120) then
          nzprj = nzprj + 1
        else if(idptl(i) .eq. 1220) then
         nnprj = nnprj + 1
        end if
21    continue

      call nucini('nuc',targa,latarg,iabs(matarg),-1)
c
c     Scan over target nucleon's
c     ==========================
        i = nrtarg(1)
        if(idptl(i) .eq. 1120) then
          nztrg = nztrg + 1
        else if(idptl(i) .eq. 1220) then
          nntrg = nntrg + 1
        end if
      do 23 n=2,koll
      do 24 m=1,n-1
      if(nrtarg(m).eq.nrtarg(n))goto23
24    continue
c
c     Find number of protons/neutrons
c     ===============================
        i = nrtarg(n)
        if(idptl(i) .eq. 1120) then
          nztrg = nztrg + 1
        else if(idptl(i) .eq. 1220) then
          nntrg = nntrg + 1
        end if
23    continue
c
      write(6,*)'Parti',ntarg,nproj,nnprj,nzprj,nntrg,nztrg
 
      kolran=rangen()*koll+1
      kolran=min0(kolran,koll)
      kolran=max0(kolran,1)
      if(ish.eq.101)write(6,*)kolran,koll
      do 2 kols=1,koll
      kol=kols
      iskip=0
      i=nrproj(nord(kol))
      j=nrtarg(nord(kol))
      nrecop=0
      nrecot=0
      if(kol.lt.koll)then
      do 33 k=kol+1,koll
      if(nrproj(nord(k)).eq.i)nrecop=nrecop+1
      if(nrtarg(nord(k)).eq.j)nrecot=nrecot+1
33    continue
      endif
      ncop=0
      ncot=0
      if(kol.gt.1)then
      do 34 k=1,kol-1
      if(nrproj(nord(k)).eq.i)ncop=ncop+1
      if(nrtarg(nord(k)).eq.j)ncot=ncot+1
34    continue
      endif
      if(ncop.ge.ncolmx.or.ncot.ge.ncolmx)iskip=1
 
      do 56 m=1,nha
      sm=0
      do 57 n=1,nsi
      sm=sm+proja(n,m,i)**2
57    proj(n,m)=proja(n,m,i)
      if(m.ge.3.and.sm.lt.1e-5)goto58
56    continue
58    continue
      do 53 m=1,nha
      sm=0
      do 54 n=1,nsi
      sm=sm+targa(n,m,j)**2
54    targ(n,m)=targa(n,m,j)
      if(m.ge.3.and.sm.lt.1e-5)goto55
53    continue
55    continue
 
      if(kol.eq.kolran.and.jpsi.eq.1)then
      call pvjpsf(proj,targ,ifail)
      if(ish.ge.1.and.ifail.ne.0)write(ifch,*)
     *'no jpsi formed bec. energy-momentum conservation'
      iskip=1
      stop'changes needed. iorptl=-1 for i,j etc.'
      endif
 
      ncolex=1
      if(iskip.ne.1)then
      lo=0
16    lo=lo+1
      if(lo.eq.3)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('nucoll')
      write(ifch,*)'*****  lo=3'
      endif
      if(ish.ge.1)write(ifch,*)' '
      endif
      r=rangen()
      ncolex=0
15    ncolex=ncolex+1
      if(ncolex.gt.nprbms)goto16
      if(r.gt.prbms(ncolex))goto15
      endif

      do 31 nce=1,ncolex
      nces=nce
      call utpage
      if(ish.ge.1)then
      write(ifch,101)(dash,l=1,71),ipage,kol,nce
     *,nrproj(nord(kol)),nrtarg(nord(kol)),(dash,l=1,71)
101   format(/1x,71a1/1x,i5,'.page             col: ',i3
     *,'   cex: ',i3,'   prj: ',i3,'   trg: ',i3/1x,71a1/)
      endif
      istorp=0
      istort=0
      if(nrecop.eq.0)istorp=1
      if(nrecot.eq.0)istort=1
      call hahabs(proj,targ
     *,istorp*(nce/ncolex),istort*(nce/ncolex),iskip)
      if(iskip.ge.2)goto9997
      if(irescl.eq.1.and.amsac.gt.amsev)goto9998
      sumpt2=sumpt2+
     *proj(1,2)**2+proj(2,2)**2+targ(1,2)**2+targ(2,2)**2
      if(ish.eq.-103)write(ifch,*)'sumpt2:',nrevt,kol,nce,sumpt2
      iskip=0
31    continue
 
      do 40 m=1,nha
      sm=0
      do 41 n=1,nsi
      sm=sm+proj(n,m)**2
41    proja(n,m,i)=proj(n,m)
      if(m.ge.3.and.sm.lt.1e-5)goto42
40    continue
42    continue
      do 43 m=1,nha
      sm=0
      do 44 n=1,nsi
      sm=sm+targ(n,m)**2
44    targa(n,m,j)=targ(n,m)
      if(m.ge.3.and.sm.lt.1e-5)goto45
43    continue
45    continue
 
2     continue
      if(sumpt2.lt.1e-5)goto9999
 
      return
 
9999  inoiac=inoiac+1
c      if(ish.ge.1.or.ish.eq.-103)then
      write(ifch,*)' '
      call utmsg('nucoll')
      write(ifch,*)'*****  new coll. no interaction'
      write(ifch,*)' '
c      endif
      goto38
 
9998  ilamas=ilamas+1
      write(ifch,*)' '
      call utmsg('nucoll')
      write(ifch,*)'*****  new coll. amsac>amsev ',amsac,amsev
      if(ish.ge.1.or.ish.eq.-104)then
      do 1 ns=1,nstr
1     write(ifch,109)ns,(icstr(l,ns)/100,l=1,4)
     *,(pstr(l,ns),l=1,5)
109   format(1x,i3,3x,3x,4i5,5f7.2,f7.2)
      write(ifch,*)' '
      endif
      goto38
 
9997  continue
      if(ish.ge.1)write(ifch,*)' '
c      if(ish.ge.0)then
      call utmsg('nucoll')
      write(ifch,*)'*****  new coll. iskip>=2'
c      endif
      if(ish.ge.1)write(ifch,*)' '
      goto38
 
      end
 
c-----------------------------------------------------------------------
      subroutine nucstr
c     performes x and p trafos for nucleons for string decay in nucleus
c-----------------------------------------------------------------------
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      if(matarg.ne.nptl)
     *call utstop('nucstr: matarg /= nptl                  ')
      n0=min0(1+int(rangen()*nptl),nptl)
      istptl(n0)=1
      iorptl(n0)=-1
      tivptl(2,n0)=0
      do 2 n=1,nptl
      do 1 j=1,3
1     xorptl(j,n)=xorptl(j,n)-xorptl(j,n0)
      phi=rangen()*2*pi
      p1=-enemue*sin(angmue)*sin(phi)
      p2=-enemue*sin(angmue)*cos(phi)
      p3=enenue-enemue*cos(angmue)
      call utrota(1,p1,p2,p3,xorptl(1,n),xorptl(2,n),xorptl(3,n))
      p3=sqrt(p1**2+p2**2+p3**2)
      p1=0
      p2=0
      p4=prom+enenue-enemue
      call utlobo(1,p1,p2,p3,p4
     *,xorptl(1,n),xorptl(2,n),xorptl(3,n),xorptl(4,n))
2     call utlobo(1,p1,p2,p3,p4
     *,pptl(1,n),pptl(2,n),pptl(3,n),pptl(4,n))
      return
      end
 
c-----------------------------------------------------------------------
      subroutine pvjpse
c     follows jpsi evolution
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      common/cjpsi/njpsi
      call utpage
      if(ish.ge.1)write(ifch,110)('-',l=1,71),ipage,('-',l=1,71)
110   format(/1x,71a1/1x,i5,'.page            '
     *,'jpsi evolution'/1x,71a1/)
      if(njpsi.eq.0)then
      write(ifch,*)'no jpsi.  ==> return'
      return
      endif
      j=njpsi
      istptl(j)=-1
      if(jpsifi.ne.1)return
      do 1 n=1,nsttau
      tau=(n-1.)/(nsttau-1.)*taumx
      sigjt=amin1(tau*sigj,sigj)
      gm=1/sqrt(1-(pptl(1,j)**2+pptl(2,j)**2+pptl(3,j)**2)/pptl(4,j)**2)
      tme=tau*gm
      xj=xorptl(1,j)+tme*pptl(1,j)/pptl(4,j)
      yj=xorptl(2,j)+tme*pptl(2,j)/pptl(4,j)
      zj=xorptl(3,j)+tme*pptl(3,j)/pptl(4,j)
      tme=xorptl(4,j)+tme
      do 2 i=1,nptl
      if(i.eq.j)goto2
      tsf=tme-xorptl(4,i)
      if(tsf.lt.0.)goto2
      x=xorptl(1,i)+tsf*pptl(1,i)/pptl(4,i)
      y=xorptl(2,i)+tsf*pptl(2,i)/pptl(4,i)
      z=xorptl(3,i)+tsf*pptl(3,i)/pptl(4,i)
      if((x-xj)**2+(y-yj)**2+(z-zj)**2.lt.sigjt/pi)then
      istptl(j)=0
      if(ish.ge.1)write(ifch,*)'jpsi hits hadron => destroyed (decay)'
      return
      endif
      if(ish.eq.101)then
      write(6,100)xj,yj,zj,x,y,z,sigjt/pi
100   format(1x,3f7.2,5x,3f7.3,5x,f7.3)
      endif
2     continue
1     continue
      if(ish.ge.1)write(ifch,*)'jpsi survived'
      return
      end
 
c-----------------------------------------------------------------------
      subroutine pvjpsf(proj,targ,ifail)
c     forms a jpsi
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/cnsta/pi,prom,piom,ainfin
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      parameter (ndep=129,ndet=129,kollmx=2000)
      common/col/rmproj,rmtarg,bmax,bimp,koll,nproj,ntarg
     *,xdep(ndep),qdep(ndep),wdep(ndep),xdet(ndet),qdet(ndet),wdet(ndet)
     *,nrproj(kollmx),nrtarg(kollmx),distce(kollmx),nord(kollmx)
     *,coord(4,kollmx)
      parameter (nptj=129)
      common /cptj/xptj(nptj),qptj(nptj),wptj(nptj)
      parameter (ngau=129)
      common /cgau/xgau(ngau),qgau(ngau),wgau(ngau)
      parameter (nsi=6,nsix=100)
      parameter (nha=nsix+2)
      real proj(nsi,nha),targ(nsi,nha),psum(5)
      common/cjpsi/njpsi
      njpsi=0
      ifail=1
      pax=0.19
 
      call utpage
      if(ish.ge.1)write(ifch,110)('-',l=1,71),ipage,('-',l=1,71)
110   format(1x,71a1/1x,i5,'.page            '
     *,'jpsi formation'/1x,71a1/)
 
c     jpsi momenta
c     ------------
      id=441
      call idmass(id,am)
      s=am**2
      pt=utinvt(nptj,xptj,qptj,rangen()*qptj(nptj))
      phi=2.*pi*rangen()
      px=pt*cos(phi)
      py=pt*sin(phi)
      lo=0
1     lo=lo+1
      if(lo.gt.10)
     *call utstop('pvjpsf: lo > 10                         ')
      z=pax*utinvt(ngau,xgau,qgau,rangen()*qgau(ngau))
      if(z.gt.1.)goto1
      pz=z*pnllx*ransig()
      e=sqrt(s+px**2+py**2+pz**2)
 
c     proj and targ momenta
c     ---------------------
      r=rangen()
      pstr(1,nstr+1)=proj(1,2)-r*px
      pstr(2,nstr+1)=proj(2,2)-r*py
      pstr(3,nstr+1)=proj(3,2)-r*pz
      pstr(4,nstr+1)=
     *sqrt(pstr(1,nstr+1)**2+pstr(2,nstr+1)**2+pstr(3,nstr+1)**2)
      pstr(5,nstr+1)=0
      r=1-r
      pstr(1,nstr+2)=targ(1,2)-r*px
      pstr(2,nstr+2)=targ(2,2)-r*py
      pstr(3,nstr+2)=targ(3,2)-r*pz
      pstr(4,nstr+2)=
     *sqrt(pstr(1,nstr+2)**2+pstr(2,nstr+2)**2+pstr(3,nstr+2)**2)
      pstr(5,nstr+2)=0
      psum(1)=pstr(1,nstr+1)+pstr(1,nstr+2)
      psum(2)=pstr(2,nstr+1)+pstr(2,nstr+2)
      psum(3)=pstr(3,nstr+1)+pstr(3,nstr+2)
      psum(4)=proj(4,2)+targ(4,2)-e
      if(psum(4).le.0.)return
      psum52=psum(4)**2-psum(3)**2-psum(2)**2-psum(1)**2
      if(psum52.le.0.)return
      psum(5)=sqrt(psum52)
      call hrescl(nstr+1,nstr+2,psum,ifail)
      if(ifail.ne.0)return
      proj(1,2)=pstr(1,nstr+1)
      proj(2,2)=pstr(2,nstr+1)
      proj(3,2)=pstr(3,nstr+1)
      proj(4,2)=pstr(4,nstr+1)
      targ(1,2)=pstr(1,nstr+2)
      targ(2,2)=pstr(2,nstr+2)
      targ(3,2)=pstr(3,nstr+2)
      targ(4,2)=pstr(4,nstr+2)
 
c     jpsi string
c     -----------
      nstr=nstr+1
      if(nstr.gt.mxstr)
     *call utstop('pvjpsf: nstr>mxstr                      ')
      icstr(1,nstr)=000100
      icstr(2,nstr)=0
      icstr(3,nstr)=0
      icstr(4,nstr)=000100
      pstr(1,nstr)=px
      pstr(2,nstr)=py
      pstr(3,nstr)=pz
      pstr(4,nstr)=e
      pstr(5,nstr)=am
      rotstr(1,nstr)=0
      rotstr(2,nstr)=0
      rotstr(3,nstr)=1
      do 2 i=1,4
2     xorstr(i,nstr)=coord(i,kol)
      kinstr(nstr)=0
      amsac=amsac+am
 
c     jpsi particle
c     -------------
      nptl=nptl+1
      if(nptl.gt.mxptl)
     *call utstop('pvjpsf: nptl>mxptl                      ')
      njpsi=nptl
      pptl(1,nptl)=0
      pptl(2,nptl)=0
      pptl(3,nptl)=0
      pptl(4,nptl)=am
      pptl(5,nptl)=am
      iorptl(nptl)=0
      jorptl(nptl)=0
      istptl(nptl)=0
      idptl(nptl)=id
      nstptl(nptl)=nstr
      xorptl(1,nptl)=0
      xorptl(2,nptl)=0
      xorptl(3,nptl)=0
      xorptl(4,nptl)=0
      if(ish.ge.1)write(ifch,100)nrevt+1,nrstr+nstr,nrptl+nptl
     *,(pptl(i,nptl),i=1,5),idptl(nptl)
100   format(' evt',i3,'  str',i4,'  ptl',i5,2x,5f7.2,3x,i6)
      ifail=0
      return
      end
 
c-----------------------------------------------------------------------
      subroutine randfl(jc,iqa0,iflav,ic,isame)
c     returns random flavour ic(2) (iqa0=1:quark,2:antiquark,11:diquark)
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      parameter (nflav=6)
      real probab(nflav),probsu(nflav+1)
      integer jc(nflav,2),jc0(nflav,2),ic(2)
      character dash*1
      dash='-'
      if(ish.ge.5)then
      write(ifch,*)(dash,l=1,71)
      write(ifch,*)'subroutine randfl'
      write(ifch,*)'iqa0:',iqa0
      write(ifch,*)'jc:'
      write(ifch,*)jc
      endif
      iflav=0
      ic(1)=0
      ic(2)=0
      do 10 n=1,nflav
      do 10 i=1,2
10    jc0(n,i)=0
      iqa1=iqa0*10
9999  iqa1=iqa1/10
      if(iqa1.eq.0)goto9998
      iqa=mod(iqa1,10)
      su=0
      do 20 i=1,nflav
      probab(i)=jc(i,iqa)-jc0(i,iqa)
      if(isame.eq.1)probab(i)=probab(i)*(jc(i,3-iqa)-jc0(i,3-iqa))
20    su=su+probab(i)
      if(su.lt..5)then
      iflav=0
      ic(1)=0
      ic(2)=0
      goto9998
      endif
      probsu(1)=0.
      do 30 i=1,nflav
      probsu(i+1)=probsu(i)+probab(i)/su
      if(probsu(i+1)-probsu(i).lt.1e-5)probsu(i+1)=probsu(i)
30    continue
      r=rangel(probsu(nflav+1))
      do 50 i=1,nflav
      if(probsu(i).le.r.and.r.lt.probsu(i+1))iflav=i
50    continue
      jc0(iflav,iqa)=jc0(iflav,iqa)+1
      if(isame.eq.1)jc0(iflav,3-iqa)=jc0(iflav,3-iqa)+1
      call idenco(jc0,ic,ireten)
      if(ireten.eq.1)
     *call utstop('randfl: idenco ret code = 1             ')
      if(ish.ge.5)then
      write(ifch,*)'probab:'
      write(ifch,*)probab
      write(ifch,*)'probsu:'
      write(ifch,*)probsu
      write(ifch,*)'ran#:',r,'   flav:',iflav
      endif
      goto9999
9998  continue
      if(ish.ge.5)write(ifch,*)(dash,l=1,71)
      return
      end
 
c-----------------------------------------------------------------------
      real function ranf()
c     uniform random number generator from cern library
c-----------------------------------------------------------------------
      double precision    dranf,    g900gt,   g900st
      double precision    ds(2),    dm(2),    dseed
      double precision    dx24,     dx48
      double precision    dl,       dc,       du,       dr
      logical             single
      data      ds     /  1665 1885.d0, 286 8876.d0  /
      data      dm     /  1518 4245.d0, 265 1554.d0  /
      data      dx24   /  1677 7216.d0  /
      data      dx48   /  281 4749 7671 0656.d0  /
      single  =  .true.
      goto 10
      entry dranf()
      single  =  .false.
  10  dl  =  ds(1) * dm(1)
      dc  =  dint(dl/dx24)
      dl  =  dl - dc*dx24
      du  =  ds(1)*dm(2) + ds(2)*dm(1) + dc
      ds(2)  =  du - dint(du/dx24)*dx24
      ds(1)  =  dl
      dr     =  (ds(2)*dx24 + ds(1)) / dx48
      if(single)  then
         ranf  =  sngl(dr)
      else
         dranf  =  dr
      endif
      return
      entry g900gt()
      g900gt  =  ds(2)*dx24 + ds(1)
      return
      entry g900st(dseed)
      ds(2)  =  dint(dseed/dx24)
      ds(1)  =  dseed - ds(2)*dx24
      g900st =  ds(1)
      return
      end
      subroutine ranfgt(seed)
      double precision    seed,     g900gt,   g900st,   dummy
      seed  =  g900gt()
      return
      entry ranfst(seed)
      dummy  =  g900st(seed)
      return
      end
 
c-----------------------------------------------------------------------
      function rangen()
c     generates a random number
c-----------------------------------------------------------------------
1     rangen=ranf()
      if(rangen.le.0.)goto1
      if(rangen.ge.1.)goto1
      return
      entry rangel(xmax)
2     rangel=ranf()*xmax
      if(rangel.le.0.)goto2
      if(rangel.ge.xmax)goto2
      return
      end
 
c-----------------------------------------------------------------------
      subroutine ranhvy(x,eps)
c     generates x for heavy particle fragmentation according to
c     the peterson form
c          d(x)=1/(x*(1-1/x-eps/(1-x))**2)
c              =d0(x)*d1(x)*d2(x)
c          d0(x)=(1-x)**2/((1-x)**2+eps)**2
c          d1(x)=x
c          d2(x)=(((1-x)**2+eps)/((1-x)**2+eps*x))**2
c     using x=1-y**pow
c     generates flat in x if eps>1.
c-----------------------------------------------------------------------
      data aln4/1.3863/
      if(eps.lt.1.) then
        pow=alog((3.+eps)/eps)/aln4
        ymx=(eps*(3.*pow-1.)/(pow+1.))**(.5/pow)
        zmx=1-ymx**pow
        d0mx=(1-zmx)**2/((1.-zmx)**2+eps)**2*pow*ymx**(pow-1.)
        d2mx=2./(2.-sqrt(eps))
      else
        pow=1.
        zmx=0.
        d0mx=(1.-zmx)**2/((1.-zmx)**2+eps)**2
        d2mx=1.+eps
      endif
c
c          generate z according to (1-z)**2/((1-z)**2+eps*z)**2
1     continue
      y=rangen()
      z=1.-y**pow
c
      d0z=(1.-z)**2/((1.-z)**2+eps)**2*pow*y**(pow-1.)
      if(d0z.lt.rangen()*d0mx) goto1
c
c          check remaining factors
      d1=z
      d2=(((1.-z)**2+eps)/((1.-z)**2+eps*z))**2
      if(d1*d2.lt.rangen()*d2mx) goto1
c
c          good x
      x=z
      return
      end
 
c-----------------------------------------------------------------------
      function ransig()
c     returns randomly +1 or -1
c-----------------------------------------------------------------------
      ransig=1
      if(rangen().gt.0.5)ransig=-1
      return
      end
 
c-----------------------------------------------------------------------
      function ranstc(xfl)
c     returns random number according to a quark structure fctn
c-----------------------------------------------------------------------
      parameter (nstru=2049)
      common/stru/xstru(nstru),wstru(nstru)
     *,qvap(nstru),qvat(nstru),qsep(nstru),qset(nstru)
      character xfl*3
      if(xfl.eq.'vap')
     *ranstc=utinvt(nstru,xstru,qvap,rangen()*qvap(nstru))
      if(xfl.eq.'sep')
     *ranstc=utinvt(nstru,xstru,qsep,rangen()*qsep(nstru))
      if(xfl.eq.'vat')
     *ranstc=utinvt(nstru,xstru,qvat,rangen()*qvat(nstru))
      if(xfl.eq.'set')
     *ranstc=utinvt(nstru,xstru,qset,rangen()*qset(nstru))
      return
      end
 
c-----------------------------------------------------------------------
      function sbet(z,w)
c-----------------------------------------------------------------------
      sbet=sgam(z)*sgam(w)/sgam(z+w)
      return
      end
 
c-----------------------------------------------------------------------
      function sdensi(r)
c     nuclear density
c-----------------------------------------------------------------------
      common /cden/massnr,rmx
      a=0.54
      r0=1.19*massnr**(1./3.)-1.61*massnr**(-1./3.)
      sdensi=r**2/(1+exp((r-r0)/a))
      return
      end
 
c-----------------------------------------------------------------------
      function sgam(x)
c     gamma fctn
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      dimension c(13)
      data c
     1/ 0.00053 96989 58808, 0.00261 93072 82746, 0.02044 96308 23590,
     2  0.07309 48364 14370, 0.27964 36915 78538, 0.55338 76923 85769,
     3  0.99999 99999 99998,-0.00083 27247 08684, 0.00469 86580 79622,
     4  0.02252 38347 47260,-0.17044 79328 74746,-0.05681 03350 86194,
     5  1.13060 33572 86556/
      z=x
      if(x .gt. 0.0) goto1
      if(x .eq. aint(x)) goto5
      z=1.0-z
    1 f=1.0/z
      if(z .le. 1.0) goto4
      f=1.0
    2 continue
      if(z .lt. 2.0) goto3
      z=z-1.0
      f=f*z
      goto2
    3 z=z-1.0
    4 sgam=
     1 f*((((((c(1)*z+c(2))*z+c(3))*z+c(4))*z+c(5))*z+c(6))*z+c(7))/
     2   ((((((c(8)*z+c(9))*z+c(10))*z+c(11))*z+c(12))*z+c(13))*z+1.0)
      if(x .gt. 0.0) return
      sgam=3.141592653589793/(sin(3.141592653589793*x)*sgam)
      return
    5 write(ifch,10)x
   10 format(1x,'argument of gamma function = ',e20.5)
      call utstop('sgam : negative integer argument        ')
      end
 
c-----------------------------------------------------------------------
      function sgau(x)
c     returns gaussian distribution (not normalized)
c-----------------------------------------------------------------------
      sgau=exp(-x**2/2)
      return
      end
 
c-----------------------------------------------------------------------
      function spoc(a,b,c,d,x)
c     power fctn with cutoff
c-----------------------------------------------------------------------
      spoc=0
      if(a.eq.0..and.b.eq.0.)return
      spoc =a+b*x**c
      spoc0=a+b*d**c
      spoc=amin1(spoc,spoc0)
      spoc=amax1(0.,spoc)
      return
      end
 
c-----------------------------------------------------------------------
      function sptf(x)
c     returns pt-distribution for fragmentation
c-----------------------------------------------------------------------
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/cnsta/pi,prom,piom,ainfin
      common /cquama/quama
      if(opfpt.eq.1.)sptf=x*exp(-2/ptf*sqrt(x**2+quama**2))
      if(opfpt.eq.2.)sptf=x*exp(-pi/4*(x**2+quama**2)/ptf**2)
      return
      end
 
c-----------------------------------------------------------------------
      function sptj(x)
c     jpsi pt-distribution in 200 gev pp
c-----------------------------------------------------------------------
      a=0.95
      c=1/0.363
      z=x/a
      sptj=1/a*c**c/sgam(c)*z**(c-1)*exp(-c*z)
      return
      end
 
c-----------------------------------------------------------------------
      function sptq(x)
c     returns pt-distribution of quarks in nucleons
c-----------------------------------------------------------------------
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common/cnsta/pi,prom,piom,ainfin
      if(opfpt.eq.1.)sptq=x*exp(-2/ptq*x)
      if(opfpt.eq.2.)sptq=x*exp(-pi/4*x**2/ptq**2)
      return
      end
 
c-----------------------------------------------------------------------
      function strc(iqdis,xcut,x)
c     quark structure fctns
c-----------------------------------------------------------------------
      character iqdis*4
      z=sqrt(x**2+xcut**2)
      q2=4.00001
      s=alog(alog(q2/.2**2)/alog(4/.2**2))
 
      strc=10.**10.
      if(x.eq.0.)strc=0
      if(x.eq.0.)return
 
      if(iqdis.eq.'uval') strc=1.23*x**.421*(1-x**2)**3.37/z
      if(iqdis.eq.'dval') strc=.541*x**.364*(1-x**2)**5.09/z
      if(iqdis.eq.'usea') strc=0.25*(1-x)**7/z
 
      eta1=.419+.004*s-.007*abs(s)**2
      eta2=3.46+.724*s-.066*abs(s)**2
      gud=4.4-4.86*s+1.33*abs(s)**2
      a=sbet(eta1,eta2+1)*(1+gud*eta1/(eta1+eta2+1))
      if(iqdis.eq.'vapr') strc=3/a*x**eta1*(1-x)**eta2*(1+gud*x)/z
 
      a=0.4
      b=0.7
      if(iqdis.eq.'vapi') strc=x**a*(1-x)**b/sbet(a,b+1)/z
 
      eta3=.763-.237*s+.026*abs(s)**2
      eta4=4.0+.627*s-.019*abs(s)**2
      gd=-.421*s+.033*abs(s)**2
      b=sbet(eta3,eta4+1)*(1+gd*eta3/(eta3+eta4+1))
      if(iqdis.eq.'dvpr') strc=1/b*x**eta3*(1-x)**eta4*(1+gd*x)/z
 
      if(iqdis.eq.'sepr')
     *strc=(1.265-1.132*s+.293*abs(s)**2)*
     *x**(-.372*s-.029*abs(s)**2)*
     *(1-x)**(8.05+1.59*s-.153*abs(s)**2)*
     *(1+(6.31*s-.273*abs(s)**2)*x
     *+(-10.5*s-3.17*abs(s)**2)*x**2
     *+(14.7*s+9.80*abs(s)**2)*x**3)
     */z
 
      a=0.9
      b=5
      if(iqdis.eq.'sepi')strc=a*(1-x)**b/z
 
      if(iqdis.eq.'glue')
     *strc=(1.56-1.71*s+.638*abs(s)**2)*
     *x**(-.949*s+.325*abs(s)**2)*
     *(1-x)**(6.0+1.44*s-1.05*abs(s)**2)*
     *(1+(9.0-7.19*s+.255*abs(s)**2)*x
     *+(-16.5*s+10.9*abs(s)**2)*x**2
     *+(15.3*s-10.1*abs(s)**2)*x**3)
     */z
 
      return
      end
 
c-----------------------------------------------------------------------
      function strctr(x)
c     returns structure fctns
c-----------------------------------------------------------------------
      common/paro1/ptmx,gaumx,sigma,core,fctrmx,neqmn,iaqu,qmust
     *,taunll,maxres,ptf,ptq,xcut,opfpt,irescl,ko1ko2,raphdi,labsys
     *,ntrymx,delmss,pud,pspinl,pspinh,pispn,ncolmx,tensn,bmaxim,bminim
     *,cutmss,qvapc,qvatc,qsepc,qsetc,rstras,neqmx,taumx,nsttau,sigj
     *,pdiqua,parea,delrem,tmemin,tmemed,tmemax,numtme
     *,tmefor,amsiac,wproj,wtarg,pencox,pencoy,radiac,radias
      common /cipio/ipio
 
      entry strcdv(x)
c     returns d-valence structure fctn
*     strcdv=strc('dval',xcut,x)
      strcdv=strc('dvpr',xcut,x)
      return
 
      entry strcgl(x)
c     returns glue structure fctn
      strcgl=strc('glue',xcut,x)
      return
 
      entry strcse(x)
c     returns sea structure fctn
      if(ipio.eq.0)then
      strcse=strc('sepr',xcut,x)
      elseif(ipio.eq.1)then
      strcse=strc('sepi',xcut,x)
      else
      call utstop('strcse: ipio must be 0 or 1!            ')
      endif
      return
 
      entry strcuv(x)
c     returns u-valence structure fctn
*     strcuv=strc('uval',xcut,x)
      strcuv=strc('vapr',xcut,x)-strc('dvpr',xcut,x)
      return
 
      entry strcvl(x)
c     returns valence structure fctn
      if(ipio.eq.0)then
      strcvl=strc('vapr',xcut,x)/3
      elseif(ipio.eq.1)then
      strcvl=strc('vapi',xcut,x)/3
      else
      call utstop('strcvl: ipio must be 0 or 1!            ')
      endif
      return
      end
 
c-----------------------------------------------------------------------
      function utacos(x)
c     returns acos(x) for -1 <= x <= 1 , acos(+-1) else
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      argum=x
      if(x.lt.-1.)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('utacos')
      write(ifch,*)'*****  argum = ',argum,' set -1'
      endif
      if(ish.ge.1)write(ifch,*)' '
      argum=-1.
      elseif(x.gt.1.)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('utacos')
      write(ifch,*)'*****  argum = ',argum,' set 1'
      endif
      if(ish.ge.1)write(ifch,*)' '
      argum=1.
      endif
      utacos=acos(argum)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utar(i1,i2,i3,x0,x1,x2,x3,xx)
c     returns the array xx with xx(1)=x0 <= xx(i) <= xx(i3)=x3
c-----------------------------------------------------------------------
      real xx(i3)
      do 1 i=1,i1-1
  1   xx(i)=x0+(i-1.)/(i1-1.)*(x1-x0)
      do 2 i=i1,i2-1
  2   xx(i)=x1+(i-i1*1.)/(i2-i1*1.)*(x2-x1)
      do 3 i=i2,i3
  3   xx(i)=x2+(i-i2*1.)/(i3-i2*1.)*(x3-x2)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utasi(sil,six,si,ifail,prt)
c     adds sil and six. result to si.
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (nsi=6,nsix=100,nflav=6)
      real sil(nsi),six(nsi,nsix),si(nsi)
      integer jc(nflav,2),jcp(nflav,2),ic(2),jcs(nflav,2)
      character dash*1,prt*6
      ifail=0
      dash='-'
      if(ish.ge.4.and.prt.eq.'prt-ys')write(ifch,*)(dash,l=1,71)
      if(ish.ge.4.and.prt.eq.'prt-ys')write(ifch,*)'subroutine utasi'
      call utksix(six,kmax)
      do 110 n=1,4
      si(n)=sil(n)
      do 110 k=1,kmax
110   si(n)=si(n)+six(n,k)
      do 123 i=1,nflav
      jc(i,1)=0
123   jc(i,2)=0
      do 130 k=1,kmax
      ic(1)=nint(six(5,k))
      ic(2)=nint(six(6,k))
      call iddeco(ic,jcp)
      do 120 i=1,nflav
      jc(i,1)=jc(i,1)+jcp(i,1)
120   jc(i,2)=jc(i,2)+jcp(i,2)
130   continue
      if(ish.ge.4.and.prt.eq.'prt-ys')then
      write(ifch,*)'jc_six before compactification:'
      write(ifch,*)jc
      endif
      call idcomj(jc)
      if(ish.ge.4.and.prt.eq.'prt-ys')then
      write(ifch,*)'jc_six after compactification:'
      write(ifch,*)jc
      endif
      ic(1)=nint(sil(5))
      ic(2)=nint(sil(6))
      call iddeco(ic,jcp)
      if(ish.ge.4.and.prt.eq.'prt-ys')then
      write(ifch,*)'jc_sil before compactification:'
      write(ifch,*)jcp
      endif
      call idcomj(jcp)
      if(ish.ge.4.and.prt.eq.'prt-ys')then
      write(ifch,*)'jc_sil after compactification:'
      write(ifch,*)jcp
      endif
      do 129 n=1,nflav
      do 129 i=1,2
      jcs(n,i)=jc(n,i)+jcp(n,i)
      if(jcs(n,i).ge.10)ifail=2
129   continue
      if(ifail.eq.2)goto9999
      if(ish.ge.4.and.prt.eq.'prt-ys')then
      write(ifch,*)'jc_sil + jc_six:'
      write(ifch,*)jcs
      endif
      call idenco(jcs,ic,ireten)
      if(ireten.eq.1)
     *call utstop('utasi : idenco ret code = 1             ')
      si(5)=ic(1)
      si(6)=ic(2)
 
      n1=0
      n2=0
      do 125 n=1,nflav
      do 125 i=1,2
      n1=n1+jc(n,i)
125   n2=n2+jcp(n,i)
      do 128 k=1,nflav
      nfl=nflav+1-k
124   continue
      if(n1.eq.1.and.n2.ne.4.and.n2.ne.3
     *.or.n2.eq.1.and.n1.ne.4.and.n1.ne.3
     *.or.n1+n2.eq.2
     *.or.n1+n2.eq.3)goto127
      if(jc(nfl,1).gt.0.and.jcp(nfl,2).gt.0)then
      jc(nfl,1)=jc(nfl,1)-1
      jcp(nfl,2)=jcp(nfl,2)-1
      n1=n1-1
      n2=n2-1
      elseif(jc(nfl,2).gt.0.and.jcp(nfl,1).gt.0)then
      jc(nfl,2)=jc(nfl,2)-1
      jcp(nfl,1)=jcp(nfl,1)-1
      n1=n1-1
      n2=n2-1
      endif
      if(jc(nfl,1).gt.0.and.jcp(nfl,2).gt.0)goto124
      if(jc(nfl,2).gt.0.and.jcp(nfl,1).gt.0)goto124
128   continue
127   do 126 n=1,nflav
      do 126 i=1,2
126   jc(n,i)=jc(n,i)+jcp(n,i)
      if(ish.ge.4.and.prt.eq.'prt-ys')then
      write(ifch,*)'jc_sil + jc_six after compactif:'
      write(ifch,*)jc
      endif
      call idenco(jc,ic,ireten)
      if(ireten.eq.1)
     *call utstop('utasi : idenco ret code = 1             ')
      call idmima(ic,amima,iemima,'cmp-no','prt-no')
      if(iemima.gt.0)
     *call utstop('utasi : idmima err code > 0             ')
      s=si(4)**2-si(1)**2-si(2)**2-si(3)**2
      if(s.lt.amima**2)ifail=1
9999  continue
      if(ifail.eq.2)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('utasi ')
      write(ifch,*)'*****  jc(,).ge.10'
      write(ifch,*)jcs
      endif
      if(ish.ge.1)write(ifch,*)' '
      endif
      if(ish.ge.4.and.prt.eq.'prt-ys')write(ifch,*)(dash,l=1,71)
      return
      end
 
c-----------------------------------------------------------------------
      function utinvt(n,x,q,y)
c     returns x with y=q(x)
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      real x(n),q(n)
      if(q(n).eq.0.)
     *call utstop('utinvt: q(n)=0                          ')
      if(y.lt.0.)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('utinvt')
      write(ifch,*)'*****  y=',y,' < 0'
      endif
      if(ish.ge.1)write(ifch,*)' '
      y=0.
      elseif(y.gt.q(n))then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('utinvt')
      write(ifch,*)'*****  y=',y,' > ',q(n)
      endif
      if(ish.ge.1)write(ifch,*)' '
      y=q(n)
      endif
      lu=1
      lo=n
1     lz=(lo+lu)/2
      if((q(lu).le.y).and.(y.le.q(lz)))then
      lo=lz
      elseif((q(lz).lt.y).and.(y.le.q(lo)))then
      lu=lz
      else
      call utstop('utinvt: no interval found               ')
      endif
      if((lo-lu).ge.2) goto1
      if(lo.le.lu)
     *call utstop('utinvt: lo.le.lu                        ')
      utinvt=x(lu)+(y-q(lu))*(x(lo)-x(lu))/(q(lo)-q(lu))
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utkprj(proj,kmax)
c     returns kmax for proj
c-----------------------------------------------------------------------
      parameter (nsi=6,nsix=100)
      parameter (nha=nsix+2)
      real proj(nsi,nha),sil(nsi),six(nsi,nsix)
      call hdecmp(proj,sil,six)
      call utksix(six,kmax)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utksix(six,kmax)
c     returns kmax for six
c-----------------------------------------------------------------------
      parameter (nsi=6,nsix=100)
      real six(nsi,nsix)
      kmax=0
      do 10 k=1,nsix
      sixsqr=0
      do 20 i=1,nsi
20    sixsqr=sixsqr+six(i,k)**2
      if(sixsqr.le.1e-5)return
10    kmax=kmax+1
      if(kmax.ne.nsix)
     *call utstop('utksix: kmax.ne.nsix                    ')
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utlobo(isig,p1,p2,p3,p4,x1,x2,x3,x4)
c     performs a lorentz boost
c-----------------------------------------------------------------------
      real beta(4),z(4)
      z(1)=x1
      z(2)=x2
      z(3)=x3
      z(4)=x4
      p5=sqrt(p4**2-p1**2-p2**2-p3**2)
      beta(1)=-p1/p5
      beta(2)=-p2/p5
      beta(3)=-p3/p5
      beta(4)= p4/p5
      bp=0.
      do 220 k=1,3
220   bp=bp+z(k)*isig*beta(k)
      do 230 k=1,3
230   z(k)=z(k)+isig*beta(k)*z(4)
     *+isig*beta(k)*bp/(beta(4)+1.)
      z(4)=beta(4)*z(4)+bp
      x1=z(1)
      x2=z(2)
      x3=z(3)
      x4=z(4)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utlow(cone)
c-----------------------------------------------------------------------
      character*1 cone
      if(cone.eq.'A')cone='a'
      if(cone.eq.'B')cone='b'
      if(cone.eq.'C')cone='c'
      if(cone.eq.'D')cone='d'
      if(cone.eq.'E')cone='e'
      if(cone.eq.'F')cone='f'
      if(cone.eq.'G')cone='g'
      if(cone.eq.'H')cone='h'
      if(cone.eq.'I')cone='i'
      if(cone.eq.'J')cone='j'
      if(cone.eq.'K')cone='k'
      if(cone.eq.'L')cone='l'
      if(cone.eq.'M')cone='m'
      if(cone.eq.'N')cone='n'
      if(cone.eq.'O')cone='o'
      if(cone.eq.'P')cone='p'
      if(cone.eq.'Q')cone='q'
      if(cone.eq.'R')cone='r'
      if(cone.eq.'S')cone='s'
      if(cone.eq.'T')cone='t'
      if(cone.eq.'U')cone='u'
      if(cone.eq.'V')cone='v'
      if(cone.eq.'W')cone='w'
      if(cone.eq.'X')cone='x'
      if(cone.eq.'Y')cone='y'
      if(cone.eq.'Z')cone='z'
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utlow3(cthree)
c-----------------------------------------------------------------------
      character cthree*3
      do 1 i=1,3
1     call utlow(cthree(i:i))
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utlow6(csix)
c-----------------------------------------------------------------------
      character csix*6
      do 1 i=1,6
1     call utlow(csix(i:i))
      return
      end
 
c-----------------------------------------------------------------------
      function utmom(k,n,x,q)
c     calculates kth moment for f(x) with q(i)=int[0,x(i)]f(z)dz
c-----------------------------------------------------------------------
      real x(n),q(n)
      if(n.lt.2)
     *call utstop('utmom : dimension too small             ')
      utmom=0
      do 1 i=2,n
1     utmom=utmom+((x(i)+x(i-1))/2)**k*(q(i)-q(i-1))
      utmom=utmom/q(n)
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utpage
c     increases ipage by 1, changes ish
c-----------------------------------------------------------------------
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      common/cishi/ishi
      ipage=ipage+1
      if(ipagi.le.0)return
      if(ipage.eq.1)ishi=ish
      ish=0
      if(ipage.ge.ipagi/10000.and.ipage.le.mod(ipagi,10000))ish=ishi
      return
      end
 
c-----------------------------------------------------------------------
      function utpcm(a,b,c)
c     calculates cm momentum for a-->b+c
c-----------------------------------------------------------------------
      val=(a**2-b**2-c**2)**2-(2.*b*c)**2                             
      if(val.lt.0..and.val.gt.-1e-4)then
      utpcm=0
      return
      endif
      utpcm=sqrt(val)/(2.*a)                                           
      return
      end
 
c-----------------------------------------------------------------------
      function utquad(m,x,f,k)
c     performs an integration according to simpson
c-----------------------------------------------------------------------
      real x(m),f(m)
      utquad=0
      do 1 i=1,k-1
  1   utquad=utquad+(f(i)+f(i+1))/2*(x(i+1)-x(i))
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utquaf(fu,n,x,q,wo,x0,x1,x2,x3)
c     returns q(i) = integral [x(1)->x(i)] fu(x) dx
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis,isphis
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
c ->rm
      external fu
c ->rm
      real x(n),q(n),wo(n)
      parameter (m=10)
      real xa(m),fa(m)
      if(x1.lt.x0.or.x2.lt.x1.or.x3.lt.x2)then
      if(ish.ge.1)write(ifch,*)' '
      if(ish.ge.0)then
      call utmsg('utquaf')
      write(ifch,*)'   xi=',x0,x1,x2,x3
      endif
      if(ish.ge.1)write(ifch,*)' '
      endif
      call utar(n/3,n*2/3,n,x0,x1,x2,x3,x)
      q(1)=0
      do 2 i=2,n
      do 3 k=1,m
      z=x(i-1)+(k-1.)/(m-1.)*(x(i)-x(i-1))
      xa(k)=z
3     fa(k)=fu(z)
      q(i)=q(i-1)+utquad(m,xa,fa,m)
2     continue
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utremb(proj,targ)
c     remembers nevt,nstr,nptl,proj,targ
c-----------------------------------------------------------------------
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (mxjet=10000)
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
      parameter (nsi=6,nsix=100)
      parameter (nha=nsix+2)
      real proj(nsi,nha),targ(nsi,nha)
      common/cremb/nevtre,nstrre,nptlre
     *,projre(nsi,nha),targre(nsi,nha)
 
      nevtre=nevt
      nstrre=nstr
      nptlre=nptl
      do 56 m=1,nha
      sm=0
      do 57 n=1,nsi
      sm=sm+proj(n,m)**2
57    projre(n,m)=proj(n,m)
      if(m.ge.3.and.sm.lt.1e-5)goto58
56    continue
58    continue
      do 53 m=1,nha
      sm=0
      do 54 n=1,nsi
      sm=sm+targ(n,m)**2
54    targre(n,m)=targ(n,m)
      if(m.ge.3.and.sm.lt.1e-5)goto55
53    continue
55    continue
      return
 
      entry utrest(proj,targ)
      nevt=nevtre
      nstr=nstrre
      nptl=nptlre
      do 66 m=1,nha
      sm=0
      do 67 n=1,nsi
      sm=sm+projre(n,m)**2
67    proj(n,m)=projre(n,m)
      if(m.ge.3.and.sm.lt.1e-5)goto68
66    continue
68    continue
      do 63 m=1,nha
      sm=0
      do 64 n=1,nsi
      sm=sm+targre(n,m)**2
64    targ(n,m)=targre(n,m)
      if(m.ge.3.and.sm.lt.1e-5)goto65
63    continue
65    continue
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utrota(isig,ax,ay,az,x,y,z)
c     performs a rotation
c-----------------------------------------------------------------------
         if(az.ge.0.)then
      rx=ax
      ry=ay
      rz=az
         else
      rx=-ax
      ry=-ay
      rz=-az
         endif
      alp=abs(utacos(rz/sqrt(rz**2+ry**2)))*sign(1.,ry)
      bet=
     *abs(utacos(sqrt(rz**2+ry**2)/sqrt(rz**2+ry**2+rx**2)))*sign(1.,rx)
      cosa=cos(alp)
      sina=sin(alp)
      cosb=cos(bet)
      sinb=sin(bet)
           if(isig.gt.0)then
      xs=x*cosb-y*sina*sinb-z*cosa*sinb
      ys=       y*cosa     -z*sina
      zs=x*sinb+y*sina*cosb+z*cosa*cosb
           elseif(isig.lt.0)then
      xs= x*cosb            +z*sinb
      ys=-x*sinb*sina+y*cosa+z*cosb*sina
      zs=-x*sinb*cosa-y*sina+z*cosb*cosa
           endif
      x=xs
      y=ys
      z=zs
      return
      end
 
c-----------------------------------------------------------------------
      function utsqsi(sil)
c-----------------------------------------------------------------------
      parameter (nsi=6)
      real sil(nsi)
      utsqsi=0
      do 1 n=1,nsi
1     utsqsi=utsqsi+sil(n)**2
      return
      end
 
c-----------------------------------------------------------------------
      function utsqst(str)
c-----------------------------------------------------------------------
      parameter (nsi=6,nsix=100)
      parameter (nha=nsix+2)
      real str(nsi,2)
      utsqst=0
      do 1 n=1,nsi
1     utsqst=utsqst+str(n,1)**2+str(n,2)**2
      return
      end
 
c-----------------------------------------------------------------------
      function utsstr(str)
c     calculates the mass of string str
c-----------------------------------------------------------------------
      parameter (nsi=6)
      real str(nsi,2)
      utsstr=(str(4,1)+str(4,2))**2-(str(1,1)+str(1,2))**2
     *-(str(2,1)+str(2,2))**2-(str(3,1)+str(3,2))**2
      return
      end
 
c-----------------------------------------------------------------------
      subroutine utstop(text)
c     returns error message and stops execution
c-----------------------------------------------------------------------
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      double precision seedc
      common /cseed/seedc
      character text*40,star*1,txt*6
      star='*'
      do 1 i=1,2
      if(i.eq.1)ifi=ifch
      if(i.eq.2)ifi=ifmt
      write(ifi,*)' '
      write(ifi,*)(star,j=1,71)
      write(ifi,*)'***** stop in ',text
      write(ifi,*)'***** current event number: ',nrevt+1
      write(ifi,*)'***** current page number: ',ipage
      write(ifi,*)'***** initial seed for current event:',seedc
      write(ifi,*)(star,j=1,71)
1     write(ifi,*)' '
      stop
      entry utmsg(txt)
      imsg=imsg+1
      write(ifch,100)txt,nrevt+1,ipage,seedc
100   format(1x,'***** msg from ',a6,'.   eps:',i7,i5,2x,d23.17)
      return
      end
+SELF.
+SELF.
+SELF. **************************************************************
+SELF. *                                                            *
+SELF. *              Code for venus_zout.f                         *
+SELF. *                                                            *
+SELF. **************************************************************
+SELF. 
+SELF. -------------
+PATCH,VZOUT.
c	File:- venus_zebra.for
c	======================
c
c	This file contains the subroutines called from LUND_MAIN
c	to initialze the zebra files and output the zebra events.
c	They are code specific since the access the eventcode common
c	blocks.
c
c		write_code_bank
c		write_run_bank
c	  	egzout
c	=========================================
	integer function write_code_bank (lun)
c	=========================================
c
c   Routine to load CODE bank and write it out
c
c
+SELF, IF=INCL.
        include 'egz_evtzeb_com_inc'
+SELF, IF=-INCL.
+SEQ,EVTZEB
+SELF.
c
	integer*4 iquest
	common /quest/iquest(100)
c
c     Common and variables relating to VENUS
c     ======================================
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis
      common/paro3/ com, ytrgt, nzprj, nnprj, nztrg, nntrg
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter (mxjet=10000)
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
c
c	Local Declarations
c	==================
c
	integer lun	! unit for messages
c
	integer     nmax           ,    ! max size of word in IHEADer
     &              array_size          ! size of array IHEADer stored in record 
c
        parameter (array_size = 300)	! run header size + code header size
c
	character*8 name
C
	integer*4 div
	integer*4 link
	integer*4 nuh
	integer*4 iheader(array_size)
c
	integer z_form
	integer code_div_size
c
c	Executable code
c	===============
c
	write_code_bank = -1		! assume success
c
c   First define form for code bank.
c
c	MCID   - H - Identifier for Monte carlo code e.g. 'VENUS   '
c	Mver   - F - Monte Carlo code version number e.g.  3.07
c       Zp     - F - Projectile Charge
c       Ap     - F - Projectile Mass
c       Zt     - F - target Charge
c       At     - F - Target Mass
c	S      - F - Sqrt(s) in NN system
c	Bmin   - F - Minimum impact parameter (fm)
c	Bmax   - F - maximum impact parameter (fm)
c	so form is '2H 8F'
c
	call mzform(div_label(code_div),
     +           '2H 8F',z_form)
c
	code_div_size = 10
c
c  Create, load and write run division
c
        call mzbook(div_index(code_div),link_addr(code_div),
     >                0,zebra_stand_alone_bank,
     >                div_label(code_div),top_num_links(code_div),
     >                top_num_str_links(code_div),
     >                code_div_size,
     >                z_form,zebra_zero_bank)
c
	link = link_addr(code_div)
c
	iqq(link+1) = 'VENU'
	iqq(link+2) = 'S   '
	qq(link+3) = 3.07
	qq(link+4)  = laproj
	qq(link+5)  = maproj
	qq(link+6)  = latarg
	qq(link+7)  = matarg
	qq(link+8)  = engy
	qq(link+9)  = bmin
	qq(link+10) = bmax
c
c  Now write division to tape
c
	iheader(1) = code_div
c
	nuh = 1
        call fzout(z_lun_out,div_index(code_div),
     +          link_addr(code_div),1,'D',2,nuh,iheader)
        call mzwipe( div_index(code_div))
c
  900	continue
	return
	end
c
c     =====================================================================
	integer function write_run_bank(lun)
c     =====================================================================
c
c   Routine to write the VENUS run bank
c     This is presently empty..
c
c
+SELF, IF=INCL.
        include 'egz_evtzeb_com_inc'
+SELF, IF=-INCL.
+SEQ,EVTZEB
+SELF.
c
c	Local Declarations
c	==================
c
	integer lun	! for messages
	integer*4 idiv
	integer*4 link
	integer*4 nuh
	integer*4 iheader(12)
	integer*4 i
c
	integer z_form
	integer run_div_size
c
c	Executable code
c	===============
c
	write_run_bank = -1	! assume success
c
c
c  Bank format is
c
c	so form is 
c
	call mzform(div_label(run_div),'1I ',z_form)
c
	run_div_size = 0
c
c  Create, load and write run division
c
        call mzbook(div_index(run_div),link_addr(run_div),
     >                0,zebra_stand_alone_bank,
     >                div_label(run_div),top_num_links(run_div),
     >                top_num_str_links(run_div),
     >                run_div_size,
     >                z_form,zebra_zero_bank)
c
	link = link_addr(run_div)
c
c
c  Now write division to tape
c
	iheader(1) = run_div
c
	nuh = 1
        call fzout(z_lun_out,div_index(run_div),
     +          link_addr(run_div),1,'D',2,nuh,iheader)
        call mzwipe( div_index(run_div))
c
	return
	end
c     =====================================================================
	Integer function egzout ()
c     =====================================================================
c
c	VAX Version of code
c
c	Routine to write out VENUS event into a ZEBRA structure.
c
c
c	Global Declarations
c	===================
c
+SELF, IF=INCL.
        include 'egz_evtzeb_com_inc'
+SELF, IF=-INCL.
+SEQ,EVTZEB
+SELF.
c
c     Common and variables relating to VENUS
c     ======================================
      common/files/ifop,ifmt,ifch,ifhi,ifdt
      common/paro2/nevent,modsho,engy,pnll,pnllx,yhaha,avxqu,ish,ichoic
     *,laproj,maproj,latarg,matarg,prob(99),icbac(99,2),icfor(99,2),ivi
     *,istmax,ipagi,jpsi,jpsifi,isup,ndecay,enenue,enemue,angmue
     *,idproj,idtarg,amproj,amtarg,ypjtl,imihis
      common/paro3/ com, ytrgt, nzprj, nnprj, nztrg, nntrg
      common/accum/imsg,jerr,ntevt,nrevt,naevt,nrstr,nrptl,amsac,ipage
     *,inoiac,ilamas,ntevt_prev
      parameter (mxptl=30000)
      common/cptl/nptl,pptl(5,mxptl),iorptl(mxptl),idptl(mxptl)
     *,istptl(mxptl),tivptl(2,mxptl),ifrptl(2,mxptl),jorptl(mxptl)
     *,nstptl(mxptl),xorptl(4,mxptl),nrptla(mxptl),ibptl(4,mxptl)
      parameter(mxstr=5000)
      common/cstr/nstr,pstr(5,mxstr),icstr(4,mxstr),iorstr(mxstr)
     *,rotstr(3,mxstr),xorstr(4,mxstr),kinstr(mxstr)
      common/cevt/nevt,bimevt,kolevt,colevt,pmxevt
     *,npjevt,ntgevt
c
c
c	Local Declarations
c	==================
c
	integer*4 link
	integer*4 nuh
	integer*4 iheader(12)
	integer*4 idec,iparent,count
	integer*4 i, ityp, nptls, j, icha
	integer*4 bank_size
c
c	Executable code
c	===============
c
	egzout = 1	! assume success
c
c	Do a first scan to find the total number of particles to be stored
c	in this event bank
c
c
       nptls = 0                
c
c	Scan Venus data to find #particles to store
c	===========================================
        nptls=0
        do 1 i=1,nptl
         nrptla(i)=-999
         if(istptl(i).gt.istmax) goto 1
         nptls=nptls+1
         nrptla(i)=nrptl+nptls
1       continue
	bank_size = nptls * part_data_size + 7
c
        call mzbook(div_index(event_div),link_addr(event_div),
     >                0,zebra_stand_alone_bank,
     >                div_label(event_div),top_num_links(event_div),
     >                top_num_str_links(event_div),
     >                bank_size,
     >                zebra_form_event,zebra_zero_bank)
c
	link = link_addr(event_div)
c
c  Do leading part of bank
c
	iqq(link+1) = nptls
	iqq(link+2) = latarg - nztrg
	iqq(link+3) = matarg - latarg - nntrg
	iqq(link+4) = laproj - nzprj
	iqq(link+5) = maproj -laproj - nnprj
	iqq(link+6) = ntevt - ntevt_prev
        ntevt_prev  = ntevt
	qq(link+7)  = bimevt
        link = link + 7
c
c   Do trailing part of bank
c
        do 5 i=1,nptl              
          if(nrptla(i).le.0)goto 5 
          nrptl=nrptl+1            
          if(iorptl(i).gt.0)then   
            ioptl=nrptla(iorptl(i))
          else                     
            ioptl=iorptl(i)        
          endif                    
	  iqq(link+1) = idptl(i)
	  qq(link+2)  = pptl(1,i)
	  qq(link+3)  = pptl(2,i)
	  qq(link+4)  = pptl(3,i)
	  qq(link+5)  = pptl(4,i)
	  iqq(link+6) = ioptl
	  link = link + 6
5	continue
c
c  Now write division to tape
c
	iheader(1) = event_div
c
	nuh = 1
        call fzout(z_lun_out,div_index(event_div),
     +          link_addr(event_div),1,'D',2,nuh,iheader)
        call mzwipe( div_index(event_div))
c
	egzout = -1
	return
	end
+SELF. 
