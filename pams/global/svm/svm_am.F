      integer FUNCTION svm_am(svtin_h,svtin,tpcin_h,tpcin,
     >     vvctrl_h,vvctrl,evtin_h,evtin)
      implicit none
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c                     module:   svm_am
c            Vector - Vector matching code for svt - tpc tracks
c                            version 3
c
c               Standardized svt and tpc helix parameters (lbl form)
c               with error covariance matrix.
c
c
c  Description:
c Package svm has been developed to enable matching between tracks identified
c in the svt with those identified in the tpc.  The method involves a two-level
c algorithm.  In the first level all svt and tpc tracks (assumed to be helices)
c are extrapolated into the intermediate region to some fixed matching radius,
c 40 cm giving the best results.  Track position in z and phi, momentum 
c magnitude and direction, as well as the uncertainties due to multiple 
c coulomb scattering  and errors in the track parameters, are computed
c for each track at the matching radius.
c  For each svt track, the best tpc track candidate is determined based on
c chi-square.  Similarly, for each tpc track, the best (based on chi-square)
c svt  track candidate is found.  If these agree then the svt and tpc track 
c pair is assigned as a match and removed from the pool of tracks.
c
c      For the remaining tracks a second level matching algorithm is applied.
c For this method three of the helix parameters (x-center-of-circle,
c y-center-of-circle, and pitch) are compared.  For each remaining svt track
c the tpc tracks whose parameters lie within certain cuts are selected based
c on chi-square for these three parameters.  Best chi-square constitutes a
c match.
c
c     Author:     Lanny Ray
c                 Dept. of Physics
c                 Univ. of Texas at Austin
c                 Austin, Texas  78712
c                 (512) 471-6107
c                 ray@utaphy.ph.utexas.edu
c
c Status:    The module has been tested in tas and verified to run with full
c            track input in the two input track tables.  It has also been
c            tested in TAS with tracking output from stk and tpt.
c
c  Dates:      Module first installed in tas:  nov. 17, 1993
c              Modified and re-installed in tas: dec. 16, 1993 where;
c                  the tpc track parameter tptrack.invp was changed to
c                  1.0/p(transverse).
c              Modified and re-installed in tas: apr. 13, 1994 where;
c               a. 1.0/p(transverse) for svt tracks included using parameter
c                  name svt_track.invpt
c               b. reverse magnetic field allowed
c               c. error in track extrapolation routine corrected
c               d. inward extrapolation of tpc tracks from arbitrary point
c                  in tpc allowed.
c               e. all track angle parameters are in degrees.
c
c              Modified and re-installed in tas: June 6, 1994 where:
c               a. Loop controls included to reduce bad matching
c                  assignments.
c               b. Matching table evt_match initialized to zero and
c                  all new variables filled.
c               c. Charge sign check included; low tpc pt cut-off incl., 
c                  chi-square cut-off included.
c               d. tpc tracking flag checked (tptrack.flag .gt 0 to use trk.)
c
c              Modified and re-installed in TAS: April 13, 1995 where:
c               a. For matched TPC tracks the svt_track.id and the chi-square
c                  for the next best SVT match are found and recorded in
c                  table evt_match.  Two new variables were added to the
c                  match table (evt_match), these being idsvt_2 and quality_2
c                  (see following for further explanation).  This information
c                  was added for the case where two close tracks are separated
c                  in the SVT but merged in the TPC.
c
c
c   Arguments:
c
c                 svtin_h   header to table     svt_track
c                 svtin    rows of table       svt_track
c                 tpcin_h   header to table     tptrack
c                 tpcin    rows of table       tptrack
c                 vvctrl_h  header to table     svm_ctrl
c                 vvctrl   rows of table       svm_ctrl
c                 evtin_h   header to table     evt_match
c                 evtin    rows of table       evt_match
c
c TAS tables:
c       the module reads the svt track table:  svt_track in library stk
c       the module reads the tpc track table:  tptrack   in library tpt
c       the module reads the static control table: svm_ctrl in library svm
c       the module outputs to table:        evt_match in library svm
c
c   Variables:
c    The variables for the two svm tables are (with additional
c    comments):
c
c !--------------------------------------------------------------------------
c !   table: svm_ctrl
c ! ktrl1 = control switch 1: allows errors in helix
c         = 0 errors not included
c         = 1 errors included
c            integer*4 ktrl1
c
c ! ktrl2 = 0 to compute error for chi-sq as e1*e2 (default).
c         = 1 to compute error for chi-sq as (e1**2 + e2**2).  
c
c ! ktrl3 = control switch 3:
c         = 0 for no level 2 matching
c         = 2 for level 2 matching
c            integer*4 ktrl3
c
c ! ktrl4 = control switch 4: selects mcs formula
c         = 0 from rev. mod. phys. 56, s50 (1984).
c         = 1 from particle data handbook.
c            integer*4 ktrl4
c
c ! ktrl5 .ne. 0 to limit the number of loops in the first bi-directional
c                level matching, i.e. to not require that all svt
c                tracks have at least one tpc track match candidate.
c         if .ne. 0 ktrl5 is the max. no. of loops thru first level
c                matcher.
c
c ! arfinc = search area increase factor (typically = 4.0)
c            real*4  arfinc
c
c ! bmag = magnetic field (kG)
c          if .gt. 0.0 is assumed along the +z-axis
c          if .lt. 0.0 is assumed along the -z-axis
c          bmag must not be 0.0, no field calculations require
c               changes in the code.
c            real*4  bmag
c
c ! efaca =  use this to change the relative weight on the directional
c                       part of chi-square  compared to the phi,z
c                       position part. Does not affect search area.
c            real*4  efaca
c
c ! efacp =  invpt cut-off for matched tpc tracks 
c            real*4  efacp
c
c ! efacz =  minimum chi-square cut-off
c            real*4  efacz
c
c ! pmerr = initial size of search area: momentum (frac. of total p)
c            real*4  pmerr
c
c ! rifc = radial position of tpc ifc (cm)
c            real*4  rifc
c
c ! rlgas = radiation length of gas (cm)
c            real*4  rlgas
c
c ! rlifc = radiation length of tpc ifc (cm)
c            real*4  rlifc
c
c ! rlsdd3 = rad. length for sdd outermost layer (cm)
c            real*4  rlsdd3
c
c ! rltube = rad. length of svt support tube (cm)
c            real*4  rltube
c
c ! rmatch = matching radius from beam axis (cm)
c            real*4  rmatch
c
c ! rming = inner radial position of gas vessel (cm)
c            real*4  rming
c
c ! rsdd3 = radial position of sdd outer layer (cm)
c            real*4  rsdd3
c
c ! rtube = radial position of svt support tube (cm)
c            real*4  rtube
c
c ! slpcut = dip angle cut-off, 2nd level matching
c            real*4  slpcut
c
c ! tgas = thickness of gas vessel region (cm)
c            real*4  tgas
c
c ! tifc = thickness of tpc inner field cage (cm)
c            real*4  tifc
c
c ! tsdd3 = thickness of sdd outermost layer (cm)
c            real*4  tsdd3
c
c ! ttube = thickness of svt support tube (cm)
c            real*4  ttube
c
c ! xcut = x cut-off for 2nd level matching (cm)
c            real*4  xcut
c
c ! ycut = y cut-off for 2nd level matching (cm)
c            real*4  ycut
c
c ! ttpc_gas = thickness of tpc gas region (cm)
c            real*4  ttpc_gas
c
c ! rtpc_gas = innermost radius of tpc gas region (cm)
c            real*4  rtpc_gas
c
c ! rltpc_gas = radiation length of tpc gas (cm)
c            real*4  rltpc_gas
c
c !--------------------------------------------------------------------------
c
c
c
c
c !----------------------------------------------------------------------
c !   Table: evt_match
c ! id = id of matched pair of svt - tpc tracks
c           INTEGER*4 id
c ! idsvt = id no. of svt track from svt_track table
c           INTEGER*4 idsvt
c ! idsvt_2 = id no. of next best svt track match for the given tpc track
c             from svt_track table
c           INTEGER*4 idsvt_2
c ! idtpc = id no. of tpc track from tptrack table
c           INTEGER*4 idtpc
c ! loop1 = matching in bi-direc., number of tries
c           INTEGER*4 loop1
c ! loop2 = matching done in second pass
c           INTEGER*4 loop2
c ! mc_check = mc evaluation:(0)not used,(1)cor,-1wrong
c           INTEGER*4 mc_check
c ! pid = Geant PID # of tpc seg. of matched trks.
c           INTEGER*4 pid
c ! quality = int(1000.0*chi-square)
c           INTEGER*4 quality
c ! quality_2 = int(1000.0*chi-square of next best svt track match)
c           INTEGER*4 quality_2
c ! eta = pseudorapidity of tpc seg. at 1st sp.pt.
c           REAL*4  eta
c ! invpt = 1/pt of tpc segment of matched tracks
c           REAL*4  invpt
c
c !--------------------------------------------------------------------------
c
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
ccc
ccc  staf include statements
ccc
#include "svm_am.inc"
#include "math_constants.inc"

ccc
ccc  variable declarations
ccc
      real   ang,angerr,arfac,chisq,chimax,chimin,chisav,chisav_2
      real   chitmp,chi5,cosphi,delpj
      real   dirsvt,dirtpc,dirvec,dirdif,dsp,eangsv,eangtp
      real   errsvt,errtpc,eta,phidf2,phidif,phier1
      real   phier2,phierr,pmass,pmdif,pthgas,pthifc,pthsdd
      real   partal,pcov,persvt,pertpc,phisvt,phitpc,pin
      real   pmsvt,pmtpc,poserr,pout,psvt,ptmp,ptpc,pthtpc_gas
      real   pthtot,pthtub,td,tmcs,slpdif,themcs
      real   xdif,ydif,zdif,zerr,zerr1,zerr2,zeta,zp
      real   zersvt,zertpc,zint,zsvt,ztpc

      integer  i,ibest,iercod,ichk,idsvt,idtpc,iflag,iskip
      integer  isvt,isvt1,isvt2,jchk,j,jbest,jflag,jskip,jtpc
      integer  jtpc1,j5,jtmp,k,kp,ksvt,ksw,ktr,ktpc,ktrset
      integer  l,loop_count,loop_1,loop_2,m,nbad,nmat
      integer  nunasg,nsvt,ntpc,pidsvt,pidtpc
      integer NO_TKS_MAX, TRKS_MAX

      integer   malloc
      parameter (TRKS_MAX=1)
      
      dimension jtmp(TRKS_MAX),j5(5),chitmp(TRKS_MAX),chi5(5)
      dimension idsvt(TRKS_MAX),psvt(6,TRKS_MAX)
      dimension pidsvt(TRKS_MAX),pmsvt(TRKS_MAX)
      dimension zersvt(TRKS_MAX),persvt(TRKS_MAX)
      dimension zsvt(TRKS_MAX),phisvt(TRKS_MAX)
      dimension dirsvt(3,TRKS_MAX),eangsv(TRKS_MAX)
      dimension idtpc(TRKS_MAX),ptpc(6,TRKS_MAX)
      dimension pidtpc(TRKS_MAX),pmtpc(TRKS_MAX),zertpc(TRKS_MAX)
      dimension pertpc(TRKS_MAX),ztpc(TRKS_MAX),phitpc(TRKS_MAX)
      dimension dirtpc(3,TRKS_MAX),eangtp(TRKS_MAX)
      dimension ichk(TRKS_MAX),jchk(TRKS_MAX)
      dimension ang(3),td(3),cosphi(3),zint(3),tmcs(3),
     1 chisq(5,TRKS_MAX),jtpc(5,TRKS_MAX),ntpc(TRKS_MAX),
     2 iflag(TRKS_MAX),jflag(TRKS_MAX),nsvt(TRKS_MAX),
     3 isvt(5,TRKS_MAX),jtpc1(TRKS_MAX),isvt1(TRKS_MAX),
     4 iskip(TRKS_MAX),jskip(TRKS_MAX),pin(6),isvt2(TRKS_MAX),
     5 pout(7),pcov(6,6),ptmp(6),dirvec(3),partal(3,6),
     6 poserr(3),nbad(2),nmat(2),nunasg(2),
     7 loop_1(TRKS_MAX),loop_2(TRKS_MAX),chisav(TRKS_MAX),
     8   chisav_2(TRKS_MAX)

c

      pointer (isvt2_p,isvt2)
      pointer (jtmp_p,jtmp)
      pointer (chitmp_p,chitmp)
      pointer (idsvt_p,idsvt)
      pointer (psvt_p,psvt)
      pointer (pidsvt_p,pidsvt)
      pointer (pmsvt_p,pmsvt)
      pointer (zersvt_p,zersvt)
      pointer (persvt_p,persvt)
      pointer (zsvt_p,zsvt)
      pointer (phisvt_p,phisvt)
      pointer (zertpc_p,zertpc)
      pointer (dirsvt_p,dirsvt)
      pointer (eangsv_p,eangsv)
      pointer (pmtpc_p,pmtpc)
      pointer (idtpc_p,idtpc)
      pointer (ptpc_p,ptpc)
      pointer (pidtpc_p,pidtpc)
      pointer (pertpc_p,pertpc)
      pointer (ztpc_p,ztpc)
      pointer (phitpc_p,phitpc)
      pointer (dirtpc_p,dirtpc)
      pointer (eangtp_p,eangtp)
      pointer (ichk_p,ichk)
      pointer (jchk_p,jchk)
      pointer (chisq_p,chisq)
      pointer (jtpc_p,jtpc)
      pointer (ntpc_p,ntpc)
      pointer (iflag_p,iflag)
      pointer (jflag_p,jflag)
      pointer (nsvt_p,nsvt)
      pointer (isvt_p,isvt)
      pointer (jtpc1_p,jtpc1)
      pointer (isvt1_p,isvt1)
      pointer (iskip_p,iskip)
      pointer (jskip_p,jskip)
      pointer (loop_1_p,loop_1)
      pointer (loop_2_p,loop_2)
      pointer (chisav_p, chisav)
      pointer (chisav_2_p,chisav_2)

      evtin_h.nok = 0

      if( svtin_h.nok .eq. 0 )then
         print *,'No svt tracks leaving'
         svm_am = STAFCV_BAD
         return
      endif
      
      if( tpcin_h.nok .eq. 0 ) then
         print *,'No tpc tracks leaving'
         svm_am = STAFCV_BAD
         return
      endif        



      print *,'Begin matching'

      write(6,*) 'Using a field of',vvctrl(1).bmag

      NO_TKS_MAX= svtin_h.nok + tpcin_h.nok


ccc
ccc   initialize arrays to zero:
ccc
      idsvt_p    = malloc (4*NO_TKS_MAX)
      pidsvt_p   = malloc (4*NO_TKS_MAX)
      pmsvt_p    = malloc (4*NO_TKS_MAX)
      zersvt_p   = malloc (4*NO_TKS_MAX)
      persvt_p   = malloc (4*NO_TKS_MAX)
      zsvt_p     = malloc (4*NO_TKS_MAX)
      phisvt_p   = malloc (4*NO_TKS_MAX)
      eangsv_p   = malloc (4*NO_TKS_MAX)
      idtpc_p    = malloc (4*NO_TKS_MAX)
      pidtpc_p   = malloc (4*NO_TKS_MAX)
      pmtpc_p    = malloc (4*NO_TKS_MAX)
      zertpc_p   = malloc (4*NO_TKS_MAX)
      pertpc_p   = malloc (4*NO_TKS_MAX)
      ztpc_p     = malloc (4*NO_TKS_MAX)
      phitpc_p   = malloc (4*NO_TKS_MAX)
      eangtp_p   = malloc (4*NO_TKS_MAX)
      chitmp_p   = malloc (4*NO_TKS_MAX)
      jtmp_p     = malloc (4*NO_TKS_MAX)
      chisav_p   = malloc (4*NO_TKS_MAX)
      chisav_2_p = malloc (4*NO_TKS_MAX)
      ntpc_p     = malloc (4*NO_TKS_MAX)
      iflag_p    = malloc (4*NO_TKS_MAX)
      jflag_p    = malloc (4*NO_TKS_MAX)
      loop_1_p   = malloc (4*NO_TKS_MAX)
      loop_2_p   = malloc (4*NO_TKS_MAX)
      nsvt_p     = malloc (4*NO_TKS_MAX)
      jtpc1_p    = malloc (4*NO_TKS_MAX)
      isvt1_p    = malloc (4*NO_TKS_MAX)
      isvt2_p    = malloc (4*NO_TKS_MAX)
      jchk_p     = malloc (4*NO_TKS_MAX)
      ichk_p     = malloc (4*NO_TKS_MAX)
      iskip_p    = malloc (4*NO_TKS_MAX)
      jskip_p    = malloc (4*NO_TKS_MAX)
      dirsvt_p   = malloc (4*NO_TKS_MAX*3)
      dirtpc_p   = malloc (4*NO_TKS_MAX*3)
      psvt_p     = malloc (4*NO_TKS_MAX*6)
      ptpc_p     = malloc (4*NO_TKS_MAX*6)
      chisq_p    = malloc (4*NO_TKS_MAX*5)
      jtpc_p     = malloc (4*NO_TKS_MAX*5)
      isvt_p     = malloc (4*NO_TKS_MAX*5)
      call vzero (idsvt,    NO_TKS_MAX)
      call vzero (pidsvt,   NO_TKS_MAX)
      call vzero (pmsvt,    NO_TKS_MAX)
      call vzero (zersvt,   NO_TKS_MAX)
      call vzero (persvt,   NO_TKS_MAX)
      call vzero (zsvt,     NO_TKS_MAX)
      call vzero (phisvt,   NO_TKS_MAX)
      call vzero (eangsv,   NO_TKS_MAX)
      call vzero (idtpc,    NO_TKS_MAX)
      call vzero (pidtpc,   NO_TKS_MAX)
      call vzero (pmtpc,    NO_TKS_MAX)
      call vzero (zertpc,   NO_TKS_MAX)
      call vzero (pertpc,   NO_TKS_MAX)
      call vzero (ztpc,     NO_TKS_MAX)
      call vzero (phitpc,   NO_TKS_MAX)
      call vzero (eangtp,   NO_TKS_MAX)
      call vzero (chitmp,   NO_TKS_MAX)
      call vzero (jtmp,     NO_TKS_MAX)
      call vzero (chisav,   NO_TKS_MAX)
      call vzero (chisav_2, NO_TKS_MAX)
      call vzero (ntpc,     NO_TKS_MAX)
      call vzero (iflag,    NO_TKS_MAX)
      call vzero (jflag,    NO_TKS_MAX)
      call vzero (loop_1,   NO_TKS_MAX)
      call vzero (loop_2,   NO_TKS_MAX)
      call vzero (nsvt,     NO_TKS_MAX)
      call vzero (jtpc1,    NO_TKS_MAX)
      call vzero (isvt1,    NO_TKS_MAX)
      call vzero (isvt2,    NO_TKS_MAX)
      call vzero (jchk,     NO_TKS_MAX)
      call vzero (ichk,     NO_TKS_MAX)
      call vzero (iskip,    NO_TKS_MAX)
      call vzero (jskip,    NO_TKS_MAX)
      call vzero (dirsvt, 3*NO_TKS_MAX)
      call vzero (dirtpc, 3*NO_TKS_MAX)
      call vzero (psvt,   6*NO_TKS_MAX)
      call vzero (ptpc,   6*NO_TKS_MAX)
      call vzero (chisq,  5*NO_TKS_MAX)
      call vzero (jtpc,   5*NO_TKS_MAX)
      call vzero (isvt,   5*NO_TKS_MAX)
c
      call vzero (pin,6)
      call vzero (pout,7)
      call vzero (ptmp,6)
      call vzero (pcov, 36)
      call vzero (dirvec, 3)
      call vzero (poserr, 3)
      call vzero (partal, 18)


ccc
ccc   Set evt_match.nok to zero and all rows to zero
ccc
      i = abs(loc(evtin(2))-loc(evtin(1)))/4
      call vzero (evtin, i*evtin_h.maxlen)
      evtin_h.nok = 0

      ksvt = 0
      do 70 i = 1,svtin_h.nok
      if(svtin(i).invpt .gt. 0.0001 .and. svtin(i).invpt
     &   .lt. 1000.0) go to 771
      if(svtin(i).invpt .gt. -1000.0 .and. svtin(i).invpt
     &   .lt. -0.0001) go to 771
      go to 70
771   continue
      ksvt = ksvt + 1
      if(ksvt .gt. NO_TKS_MAX) then
         svm_am = STAFCV_BAD
         goto 999
         
      end if
      pin(1) = svtin(i).r0
      pin(2) = svtin(i).phi0/C_DEG_PER_RAD
      pin(3) = svtin(i).z0
      pin(4) = svtin(i).psi/C_DEG_PER_RAD
      pin(5) = svtin(i).tanl
      pin(6) = abs(svtin(i).invpt)/sqrt(1.0 + pin(5)*pin(5))
ccc
ccc   For the svt tracking table invpt = sgn(charge)/p-transverse
ccc   as of march 3, 1994
ccc   
      do 78 l = 1,6
      pcov(4,l) = 0.0
      pcov(l,4) = 0.0
78    continue
      pcov(1,1) = svtin(i).cov(6)
      pcov(1,2) = svtin(i).cov(5)/C_DEG_PER_RAD
      pcov(1,3) = svtin(i).cov(13)
      pcov(1,5) = svtin(i).cov(9)
      pcov(1,6) = svtin(i).cov(4)
      pcov(2,1) = svtin(i).cov(5)/C_DEG_PER_RAD
      pcov(2,2) = svtin(i).cov(3)/(C_DEG_PER_RAD*C_DEG_PER_RAD)
      pcov(2,3) = svtin(i).cov(12)/C_DEG_PER_RAD
      pcov(2,5) = svtin(i).cov(8)/C_DEG_PER_RAD
      pcov(2,6) = svtin(i).cov(2)/C_DEG_PER_RAD
      pcov(3,1) = svtin(i).cov(13)
      pcov(3,2) = svtin(i).cov(12)/C_DEG_PER_RAD
      pcov(3,3) = svtin(i).cov(15)
      pcov(3,5) = svtin(i).cov(14)
      pcov(3,6) = svtin(i).cov(11)
      pcov(5,1) = svtin(i).cov(9)
      pcov(5,2) = svtin(i).cov(8)/C_DEG_PER_RAD
      pcov(5,3) = svtin(i).cov(14)
      pcov(5,5) = svtin(i).cov(10)
      pcov(5,6) = svtin(i).cov(7)
      pcov(6,1) = svtin(i).cov(4)
      pcov(6,2) = svtin(i).cov(2)/C_DEG_PER_RAD
      pcov(6,3) = svtin(i).cov(11)
      pcov(6,5) = svtin(i).cov(7)
      pcov(6,6) = svtin(i).cov(1)
      idsvt(ksvt) = svtin(i).id
      if(svtin(i).invpt .gt. 0.0) pidsvt(ksvt) = 8
      if(svtin(i).invpt .lt. 0.0) pidsvt(ksvt) = 9
      pmsvt(ksvt) = 1.00/pin(6)
      call pid(pidsvt(ksvt),pmass,zp)
      call cnvrt(pin,pout,zp,vvctrl(1).bmag)
      do 71 k = 1,6
71    psvt(k,ksvt) = pout(k)
      call ipt(pout,vvctrl(1).rsdd3,zp,vvctrl(1).bmag,ang(1),td(1),
     1   cosphi(1),zint(1),iercod,dirvec)
      call ipt(pout,vvctrl(1).rtube,zp,vvctrl(1).bmag,ang(2),td(2)
     1     ,cosphi(2),zint(2),iercod,dirvec)
      call ipt(pout,vvctrl(1).rmatch,zp,vvctrl(1).bmag,ang(3),td(3),
     1     cosphi(3),zint(3),iercod,dirvec)
      if(iercod.eq.1) then
      iflag(ksvt) = -1
      go to 70
      end if
      pthsdd = vvctrl(1).tsdd3/abs(cosphi(1))
      pthtub = vvctrl(1).ttube/abs(cosphi(2))
      pthgas = (psvt(4,ksvt)*(td(2)-td(3)))**2+(zint(2)-zint(3))**2
      pthgas = sqrt(pthgas)
      pthtot = (psvt(4,ksvt)*(td(1)-td(3)))**2 + (zint(1)-zint(3))**2
      pthtot = sqrt(pthtot)
      tmcs(1) = themcs(pmass,zp,pmsvt(ksvt),pthsdd,vvctrl(1).rlsdd3,
     >     vvctrl(1).ktrl4)
      tmcs(2) = themcs(pmass,zp,pmsvt(ksvt),pthtub,vvctrl(1).rltube,
     >     vvctrl(1).ktrl4)
      tmcs(3) = themcs(pmass,zp,pmsvt(ksvt),pthgas,vvctrl(1).rlgas,
     >     vvctrl(1).ktrl4)
      errsvt = (tmcs(1)*pthtot)**2
      errsvt = errsvt + (tmcs(2)*pthgas)**2
      errsvt = errsvt + ((tmcs(3)*pthgas)**2)/3.00
      errsvt = sqrt(errsvt)
      eangsv(ksvt) = tmcs(1)**2 + tmcs(2)**2 + tmcs(3)**2
      eangsv(ksvt) = sqrt(eangsv(ksvt))*sqrt(2.00)
ccc
ccc   Compute position error region on imaginary cylinder at matching
ccc   radius.
ccc
      dsp = -dirvec(1)*sin(ang(3)) + dirvec(2)*cos(ang(3))
ccc
ccc  Save momentum direction unit vectors at matching point:
ccc
      dirsvt(1,ksvt) = dirvec(1)
      dirsvt(2,ksvt) = dirvec(2)
      dirsvt(3,ksvt) = dirvec(3)
      eta = atan(abs(dirvec(3)/dsp))
      zerr1 = abs(errsvt*cos(eta))
      zerr2 = abs(errsvt*sin(eta)/cosphi(3))
      zersvt(ksvt) = max(zerr1,zerr2)
      phier1 = abs(errsvt*sin(eta))
      phier2 = abs(errsvt*cos(eta)/cosphi(3))
      persvt(ksvt) = max(phier1,phier2)
      persvt(ksvt) = persvt(ksvt)/vvctrl(1).rmatch
ccc
ccc    Add z, phi position and zeta direction errors due to helix parameter
ccc    errors.  compute partial derivatives for z-intercept, phi-intercept,
ccc    and angle between perturbed and unperturbed vector directions at the
ccc    intercept point at r-match.
ccc
      if(vvctrl(1).ktrl1.eq.0) go to 77
      do 73 j = 1,6
      ptmp(1) = svtin(i).r0
      ptmp(2) = svtin(i).phi0/C_DEG_PER_RAD
      ptmp(3) = svtin(i).z0
      ptmp(4) = svtin(i).psi/C_DEG_PER_RAD
      ptmp(5) = svtin(i).tanl
      ptmp(6) = abs(svtin(i).invpt)
      if(ptmp(j) .eq. 0.0) then
         ptmp(j) = 0.01
         delpj   = 0.01
      else
         delpj   = 0.01*ptmp(j)
         ptmp(j) = 1.01*ptmp(j)
      end if
      ptmp(6) = ptmp(6)/sqrt(1.0 + ptmp(5)*ptmp(5))
      call cnvrt(ptmp,pout,zp,vvctrl(1).bmag)
      call ipt(pout,vvctrl(1).rmatch,zp,vvctrl(1).bmag,ang(1),td(1),
     1     cosphi(1),zint(1),iercod,dirvec)
      zeta = dirsvt(1,ksvt)*dirvec(1) + dirsvt(2,ksvt)*dirvec(2)
     1     + dirsvt(3,ksvt)*dirvec(3)
      if(zeta.gt.1.00000) then
      zeta = 0.00
      else
      zeta = acos(zeta)
      end if
      partal(1,j) = (ang(1)-ang(3))/delpj
      partal(2,j) = (zint(1)-zint(3))/delpj
      partal(3,j) = zeta/delpj
73    continue
      do 75 m = 1,3
      poserr(m) = 0.00
      do 76 k = 1,6
      do 76 kp = 1,6
      poserr(m) = poserr(m) + partal(m,k)*partal(m,kp)*pcov(k,kp)
76    continue
75    continue
      zersvt(ksvt) = sqrt(zersvt(ksvt)*zersvt(ksvt) + poserr(2))
      persvt(ksvt) = sqrt(persvt(ksvt)*persvt(ksvt) + poserr(1))
      eangsv(ksvt) = sqrt(eangsv(ksvt)*eangsv(ksvt) + poserr(3))
77    continue
      zsvt(ksvt) = zint(3)
      phisvt(ksvt) = ang(3)
ccc
ccc   For the ksvt-th svt track the (z,phi) intercept points with an imag.
ccc   cylinder at the matching radius (vvctrl(1).rmatch) are stored in 
ccc   zsvt(ksvt)
ccc   and phisvt(ksvt).  The (z,phi) position errors are in zersvt(ksvt) and
ccc   persvt(ksvt).   The svt track momentum direction unit vector at the
ccc   point of intercept with the matching cylinder are in dirsvt(1-3,ksvt)
ccc   where indices 1-3 correspond to x,y,z .  The (space) error in
ccc   direction angle is in eangsv(ksvt).
ccc
70    continue
      write(6,401) ksvt
401   format(5x,'number of svt tracks(ksvt) = ', i8)
      write(6,402)
402   format(5x,'svt track set-up loop finished')
ccc
ccc   Read tpc helix parameters and
ccc   begin setup loop for all tpc tracks:
ccc
      ktpc = 0
      do 80 i = 1,tpcin_h.nok
*** VERY TEMPORARY FIX
      tpcin(i).id_globtrk = 0
*****
      if(tpcin(i).flag .lt. 0) go to 80
      if(tpcin(i).invp .eq. 0.0) go to 80
      ktpc = ktpc + 1
      if(ktpc .gt. NO_TKS_MAX) then
         svm_am = STAFCV_BAD
         goto 999
      end if
      pin(1) = tpcin(i).r0
      pin(2) = tpcin(i).phi0/C_DEG_PER_RAD
      pin(3) = tpcin(i).z0
      pin(4) = tpcin(i).psi/C_DEG_PER_RAD
      pin(5) = tpcin(i).tanl
      pin(6) = tpcin(i).invp/sqrt(1.0 + pin(5)*pin(5))
cc
cc   As of april 11, 1994 tpc track table tptrack defines (1.0/p-transverse)
cc   to be tptrack.invp,  angle parameters are assumed to be in degrees.
cc
      do 88 l = 1,6
      pcov(4,l) = 0.0
      pcov(l,4) = 0.0
88    continue
      pcov(1,1) = tpcin(i).cov(6)
      pcov(1,2) = tpcin(i).cov(5)/C_DEG_PER_RAD
      pcov(1,3) = tpcin(i).cov(13)
      pcov(1,5) = tpcin(i).cov(9)
      pcov(1,6) = tpcin(i).cov(4)
      pcov(2,1) = tpcin(i).cov(5)/C_DEG_PER_RAD
      pcov(2,2) = tpcin(i).cov(3)/(C_DEG_PER_RAD*C_DEG_PER_RAD)
      pcov(2,3) = tpcin(i).cov(12)/C_DEG_PER_RAD
      pcov(2,5) = tpcin(i).cov(8)/C_DEG_PER_RAD
      pcov(2,6) = tpcin(i).cov(2)/C_DEG_PER_RAD
      pcov(3,1) = tpcin(i).cov(13)
      pcov(3,2) = tpcin(i).cov(12)/C_DEG_PER_RAD
      pcov(3,3) = tpcin(i).cov(15)
      pcov(3,5) = tpcin(i).cov(14)
      pcov(3,6) = tpcin(i).cov(11)
      pcov(5,1) = tpcin(i).cov(9)
      pcov(5,2) = tpcin(i).cov(8)/C_DEG_PER_RAD
      pcov(5,3) = tpcin(i).cov(14)
      pcov(5,5) = tpcin(i).cov(10)
      pcov(5,6) = tpcin(i).cov(7)
      pcov(6,1) = tpcin(i).cov(4)
      pcov(6,2) = tpcin(i).cov(2)/C_DEG_PER_RAD
      pcov(6,3) = tpcin(i).cov(11)
      pcov(6,5) = tpcin(i).cov(7)
      pcov(6,6) = tpcin(i).cov(1)
      idtpc(ktpc) = tpcin(i).id
      if(tpcin(i).q .gt. 0) pidtpc(ktpc) = 8
      if(tpcin(i).q .lt. 0) pidtpc(ktpc) = 9
      pmtpc(ktpc) = 1.00/pin(6)
      call pid(pidtpc(ktpc),pmass,zp)
      call cnvrt(pin,pout,zp,vvctrl(1).bmag)
      do 81 k = 1,6
81    ptpc(k,ktpc) = pout(k)
      call ipt(pout,tpcin(i).r0 - 0.1,zp,vvctrl(1).bmag,ang(1),
     1     td(1),cosphi(1),zint(1),iercod,dirvec)
      call ipt(pout,vvctrl(1).rifc,zp,vvctrl(1).bmag,ang(2),td(2)
     1     ,cosphi(2),zint(2),iercod,dirvec)
      call ipt(pout,vvctrl(1).rmatch,zp,vvctrl(1).bmag,ang(3),td(3),
     1     cosphi(3),zint(3),iercod,dirvec)
      if(iercod.eq.1) then
      jflag(ktpc) = -1
      go to 80
      end if
      if(tpcin(i).invp .gt. vvctrl(1).efacp) then
      jflag(ktpc) = -1
      go to 80
      end if
      pthtpc_gas = (ptpc(4,ktpc)*(td(1) - td(2)))**2
     1             + (zint(1) - zint(2))**2
      pthtpc_gas = sqrt(pthtpc_gas)
      pthifc = vvctrl(1).tifc/abs(cosphi(2))
      pthgas = (ptpc(4,ktpc)*(td(2)-td(3)))**2 + (zint(2)-zint(3))**2
      pthgas = sqrt(pthgas)
      tmcs(1) = themcs(pmass,zp,pmtpc(ktpc),pthtpc_gas,
     >     vvctrl(1).rltpc_gas,vvctrl(1).ktrl4)
      tmcs(2) = themcs(pmass,zp,pmtpc(ktpc),pthifc,vvctrl(1).rlifc,
     >     vvctrl(1).ktrl4)
      tmcs(3) = themcs(pmass,zp,pmtpc(ktpc),pthgas,vvctrl(1).rlgas,
     >     vvctrl(1).ktrl4)
      errtpc = ((tmcs(1)*pthtpc_gas)**2)/3.0
      errtpc = errtpc + (tmcs(1)*pthgas)**2
      errtpc = errtpc + (tmcs(2)*pthgas)**2
      errtpc = errtpc + ((tmcs(3)*pthgas)**2)/3.0
      errtpc = sqrt(errtpc)
      eangtp(ktpc) = tmcs(1)**2 + tmcs(2)**2  + tmcs(3)**2
      eangtp(ktpc) = sqrt(eangtp(ktpc))*sqrt(2.00)
ccc
ccc   Compute position error region on imaginary cylinder at matching
ccc   radius.
ccc
      dsp = -dirvec(1)*sin(ang(3)) + dirvec(2)*cos(ang(3))
ccc
ccc  Save momentum direction unit vectors at matching point:
ccc
      dirtpc(1,ktpc) = dirvec(1)
      dirtpc(2,ktpc) = dirvec(2)
      dirtpc(3,ktpc) = dirvec(3)
      eta = atan(abs(dirvec(3)/dsp))
      zerr1 = abs(errtpc*cos(eta))
      zerr2 = abs(errtpc*sin(eta)/cosphi(3))
      zertpc(ktpc) = max(zerr1,zerr2)
      phier1 = abs(errtpc*sin(eta))
      phier2 = abs(errtpc*cos(eta)/cosphi(3))
      pertpc(ktpc) = max(phier1,phier2)
      pertpc(ktpc) = pertpc(ktpc)/vvctrl(1).rmatch
ccc
ccc    Add z, phi position and zeta direction errors due to helix parameter
ccc    errors.  Compute partial derivatives for z-intercept, phi-intercept,
ccc    and angle between perturbed and unperturbed vector directions at the
ccc    intercept point at r-match.
ccc
      if(vvctrl(1).ktrl1.eq.0) go to 870
      do 83 j = 1,6
      ptmp(1) = tpcin(i).r0
      ptmp(2) = tpcin(i).phi0/C_DEG_PER_RAD
      ptmp(3) = tpcin(i).z0
      ptmp(4) = tpcin(i).psi/C_DEG_PER_RAD
      ptmp(5) = tpcin(i).tanl
      ptmp(6) = tpcin(i).invp
      if(ptmp(j) .eq. 0.0) then
         ptmp(j) = 0.01
         delpj   = 0.01
      else
         delpj   = 0.01*ptmp(j)
         ptmp(j) = 1.01*ptmp(j)
      end if
      ptmp(6) = ptmp(6)/sqrt(1.0 + ptmp(5)*ptmp(5))
      call cnvrt(ptmp,pout,zp,vvctrl(1).bmag)
      call ipt(pout,vvctrl(1).rmatch,zp,vvctrl(1).bmag,ang(1),td(1),
     1     cosphi(1),zint(1),iercod,dirvec)
      zeta = dirtpc(1,ktpc)*dirvec(1) + dirtpc(2,ktpc)*dirvec(2)
     1     + dirtpc(3,ktpc)*dirvec(3)
      if(zeta.gt.1.00000) then
      zeta = 0.00
      else
      zeta = acos(zeta)
      end if
      partal(1,j) = (ang(1)-ang(3))/delpj
      partal(2,j) = (zint(1)-zint(3))/delpj
      partal(3,j) = zeta/delpj
83    continue
      do 85 m = 1,3
      poserr(m) = 0.00
      do 86 k = 1,6
      do 86 kp = 1,6
      poserr(m) = poserr(m) + partal(m,k)*partal(m,kp)*pcov(k,kp)
86    continue
85    continue
      zertpc(ktpc) = sqrt(zertpc(ktpc)*zertpc(ktpc) + poserr(2))
      pertpc(ktpc) = sqrt(pertpc(ktpc)*pertpc(ktpc) + poserr(1))
      eangtp(ktpc) = sqrt(eangtp(ktpc)*eangtp(ktpc) + poserr(3))
870   continue
      ztpc(ktpc) = zint(3)
      phitpc(ktpc) = ang(3)
ccc
ccc   For the ktpc-th tpc track the (z,phi) intercept points with an imag.
ccc   cylinder at the matching radius (vvctrl(1).rmatch)
ccc    are stored in ztpc(ktpc)
ccc   and phitpc(ktpc).  The (z,phi) position errors are in zertpc(ktpc) and
ccc   pertpc(ktpc).   The tpc track momentum direction unit vector at the
ccc   point of intercept with the matching cylinder are in dirtpc(1-3,ktpc)
ccc   where indices 1-3 correspond to x,y,z .  The (space) error in
ccc   direction angle is in eangtp(ktpc).
ccc
80    continue

      write(6,403) ktpc
403   format(5x,'number of tpc tracks (ktpc) = ', i8)
      write(6,404)
404   format(5x,'tpc track set-up loop finished')
ccc
ccc   do initial track matching:
ccc
      loop_count = 0
      arfac = 1.00
90    continue
      loop_count = loop_count + 1
      do 91 i = 1,ksvt
      if(iflag(i).eq.1) go to 91
      if(iflag(i).eq.-1) go to 91
      ktr = 0
      do 92 j = 1,ktpc
      if(jflag(j).eq.-1) go to 92
ccc
ccc  Check the consistency of the signs of the charges for the svt
ccc  and tpc tracks.
ccc
      if(pidsvt(i) .ne. pidtpc(j)) go to 92
      phidif = abs(phisvt(i) - phitpc(j))
      phidf2 = abs(C_2PI - phidif)
      phidif = min(phidif,phidf2)
      phierr = persvt(i) + pertpc(j)
      if(phidif.gt.(phierr*arfac)) go to 92
      zdif   = abs(zsvt(i) - ztpc(j))
      zerr = zersvt(i) + zertpc(j)
      if(zdif.gt.(zerr*arfac))    go to 92
      pmdif = abs(pmsvt(i) - pmtpc(j))/(0.50*(pmsvt(i) + pmtpc(j)))
      if(pmdif.gt.(vvctrl(1).pmerr*arfac)) go to 92
      dirdif = dirsvt(1,i)*dirtpc(1,j) + dirsvt(2,i)*dirtpc(2,j)
     1       + dirsvt(3,i)*dirtpc(3,j)
      if(dirdif.gt.1.00000) then
      dirdif = 0.00
      else
      dirdif = acos(dirdif)
      end if
      angerr = eangsv(i) + eangtp(j)
      if(dirdif.gt.(angerr*arfac)) go to 92
      ktr = ktr + 1
      if(vvctrl(1).ktrl2.eq.0) then
      chitmp(ktr) = zdif*zdif/(zersvt(i)*zertpc(j))
     1             + phidif*phidif/(persvt(i)*pertpc(j))
     2       + vvctrl(1).efaca*dirdif*dirdif/(eangsv(i)*eangtp(j))
     3             + (pmdif/vvctrl(1).pmerr)**2
      else if(vvctrl(1).ktrl2.eq.1) then
      chitmp(ktr) = zdif*zdif/(zersvt(i)**2 + zertpc(j)**2)
     1             + phidif*phidif/(persvt(i)**2 + pertpc(j)**2)
     2       + vvctrl(1).efaca*dirdif*dirdif/(eangsv(i)**2 
     3        + eangtp(j)**2) + (pmdif/vvctrl(1).pmerr)**2
      end if
      jtmp(ktr) = j
92    continue
      if(ktr.gt.5) then
      call fcmin(chitmp,jtmp,chi5,j5,ktr,NO_TKS_MAX)
      do 901 k = 1,5
      chisq(k,i) = chi5(k)
901   jtpc(k,i) = j5(k)
      ktr = 5
      else if(ktr.gt.0) then
      do 902 k = 1,ktr
      chisq(k,i) = chitmp(k)
902   jtpc(k,i) = jtmp(k)
      end if
      ntpc(i) = ktr
91    continue
ccc
ccc  Check for svt tracks with no tpc matches.
ccc
      ksw = 0
      do 93 i = 1,ksvt
      if(iflag(i).eq.0 .and. ntpc(i).gt.0) loop_1(i) = loop_count
      if ( iflag(i) .ne. -1) then
         if (ntpc(i).eq.0) then
            iflag(i) = 0
            ksw = 1
         else
            iflag(i) = 1
         endif
      endif
93    continue
      if(vvctrl(1).ktrl5 .ne. 0 .and. loop_count .ge.
     +   vvctrl(1).ktrl5)  go to 772
      if(ksw.eq.1) arfac = arfac + vvctrl(1).arfinc
      if(ksw.eq.1) go to 90
772   continue
      write(6,405)
405   format(5x,'initial matching loop finished')
ccc
ccc  At this point there is at least one tpc track matched with each svt
ccc   track, however this depends on vvctrl(1).ktrl5 option which may 
ccc   be used to limit    
ccc   the number of loops in Level 1 and thereby cause some of the svt
ccc   tracks to have no tpc matching candidates.
      do 95 i = 1,ksvt
      if(ntpc(i).eq.0) go to 95
      do 96 ktr = 1,ntpc(i)
      jflag(jtpc(ktr,i)) = 1
96    continue
95    continue
ccc
ccc   Next, locate and count the svt matches for each tpc track:
ccc
      do 110 j = 1,ktpc
      nsvt(j) = 0
      if(jflag(j).eq.-1) go to 110
      do 111 i = 1,ksvt
      if(ntpc(i).eq.0) go to 111
      do 112 k = 1,ntpc(i)
      if(j.eq.jtpc(k,i)) then
      nsvt(j) = nsvt(j) + 1
      chitmp(nsvt(j)) = chisq(k,i)
      jtmp(nsvt(j)) = i
       end if
112   continue
111   continue
      if(nsvt(j).gt.5) then
      ktr = nsvt(j)
      call fcmin(chitmp,jtmp,chi5,j5,ktr,NO_TKS_MAX)
      nsvt(j) = 5
      do 1119 k = 1,5
1119  isvt(k,j) = j5(k)
      else if(nsvt(j).gt.0) then
      do 1118 k = 1,nsvt(j)
1118  isvt(k,j) = jtmp(k)
      end if
110   continue
      write(6,406)
406   format(5x,'do 110 loop finished')
ccc
ccc   Record best tpc match for each svt track:
ccc
      do i = 1,NO_TKS_MAX
      chisav(i) = 0.0
      end do

ccc   Find largest chi-square
      chimax = 0.00
      do 120 i = 1,ksvt
      if(ntpc(i).eq.0) go to 120
      do 1207 k = 1,ntpc(i)
      if(chisq(k,i).gt.chimax) chimax = chisq(k,i)
1207  continue
120   continue
      if(chimax.lt.3.00) chimax = 3.00
      do 121 i = 1,ksvt
      if(ntpc(i).eq.0) go to 121
      chimin = chimax
      do 122 k = 1,ntpc(i)
      if(chisq(k,i).lt.chimin) jtpc1(i) = jtpc(k,i)
      if(chisq(k,i).lt.chimin) chimin = chisq(k,i)
122   continue
      chisav(i) = chimin
121   continue
ccc
ccc   Record the best svt match for each tpc track:
ccc
      do 123 j = 1,ktpc
      if(nsvt(j).eq.0) go to 123
      chimin = chimax
      do 124 k = 1,nsvt(j)
      if(ntpc(isvt(k,j)).eq.0) go to 124
      do 125 ktr = 1,ntpc(isvt(k,j))
125   if(j.eq.jtpc(ktr,isvt(k,j))) ktrset = ktr
      if(chisq(ktrset,isvt(k,j)).lt.chimin) isvt1(j) = isvt(k,j)
      if(chisq(ktrset,isvt(k,j)).lt.chimin) chimin = chisq(ktrset,
     1   isvt(k,j))
124   continue
123   continue

ccc   Record the second best svt match for each tpc track:
ccc
      do 1123 j = 1,ktpc
      if(nsvt(j).le.1) go to 1123
      chimin = chimax
      do 1124 k = 1,nsvt(j)
      if(ntpc(isvt(k,j)).eq.0) go to 1124
      if(isvt(k,j) .eq. isvt1(j)) go to 1124
      do 1125 ktr = 1,ntpc(isvt(k,j))
1125  if(j.eq.jtpc(ktr,isvt(k,j))) ktrset = ktr
      if(chisq(ktrset,isvt(k,j)).lt.chimin) isvt2(j) = isvt(k,j)
      if(chisq(ktrset,isvt(k,j)).lt.chimin) chimin = chisq(ktrset,
     1   isvt(k,j))
1124  continue
      if(isvt2(j) .gt. 0) chisav_2(j) = chimin
1123  continue
ccc
ccc    Check track matching results:
ccc   Record level 1 bi-directional matching results
ccc           jchk = -1,  unmatched track
ccc           jchk =  1,  matched track
ccc           jchk = 86,  bad track (does not intercept matching
ccc                       radius).
ccc
      do 129 j = 1,ktpc
129   jchk(j) = 86
      nbad(1) = 0
      nmat(1) = 0
      nunasg(1) = 0
      do 130 j = 1,ktpc
      if(jflag(j).eq.-1) then
      nbad(1) = nbad(1) + 1
      go to 130
      end if
      ibest = isvt1(j)
      if(ibest.eq.0) then
      jbest = 0
      else
      jbest = jtpc1(ibest)
      end if
      if(j.eq.jbest) then
      nmat(1) = nmat(1) + 1
      jchk(j) = 1
      else
      nunasg(1) = nunasg(1) + 1
      jchk(j) = -1
      end if
130   continue
      do 131 i = 1,ksvt
131   ichk(i) = 86
      nmat(2) = 0
      nunasg(2) = 0
      nbad(2) = 0
      do 132 i = 1,ksvt
      jbest = jtpc1(i)
      if(jbest.eq.0) then
      ibest = 0
      else
      ibest = isvt1(jbest)
      end if
      if(i.eq.ibest) then
      nmat(2) = nmat(2) + 1
      ichk(i) = 1
      else
      nunasg(2) = nunasg(2) + 1
      ichk(i) = -1
      end if
132   continue
      write(6,407)
407   format(5x,'bi-directional matching finished')
ccc
ccc   Remove all bad and all matched tracks from pool.
ccc
      if(vvctrl(1).ktrl3.eq.0) go to 87
      do 134 i = 1,ksvt
134   if(ichk(i).eq.86.or.ichk(i).eq.1) iskip(i) = 1
      do 135 j = 1,ktpc
135   if(jchk(j).eq.86.or.jchk(j).eq.1) jskip(j) = 1
      if(vvctrl(1).ktrl3.eq.2) go to 300
      go to 87
ccc
ccc   Alternate secondary matching loop.  Check remaining tracks.  Compare
ccc   helix parameters xc, yc, and slope (tan-theta).
ccc
300   continue
      do 301 i = 1,ksvt
      if(iskip(i).eq.1) go to 301
      ktr = 0
      do 302 j = 1,ktpc
      if(jskip(j).eq.1) go to 302
      if(jflag(j).eq.-1) go to 302
      xdif = abs(psvt(1,i) - ptpc(1,j))
      if(xdif.gt.vvctrl(1).xcut) go to 302
      ydif = abs(psvt(2,i) - ptpc(2,j))
      if(ydif.gt.vvctrl(1).ycut) go to 302
      slpdif = abs(psvt(5,i) - ptpc(5,j))
      if(slpdif.gt.vvctrl(1).slpcut) go to 302
      ktr = ktr + 1
      chitmp(ktr) = (xdif/vvctrl(1).xcut)**2 + 
     1   (ydif/vvctrl(1).ycut)**2 + (slpdif/vvctrl(1).slpcut)**2
      jtmp(ktr) = j
302   continue
      if(ktr.gt.5) then
      call fcmin(chitmp,jtmp,chi5,j5,ktr,NO_TKS_MAX)
      do 303 k = 1,5
      chisq(k,i) = chi5(k)
303   jtpc(k,i) = j5(k)
      ktr = 5
      else if(ktr.gt.0) then
      do 304 k = 1,ktr
      chisq(k,i) = chitmp(k)
304   jtpc(k,i) = jtmp(k)
      end if
      ntpc(i) = ktr
301   continue
ccc
ccc   Record best tpc match for each svt (unmatched) track:
ccc
      do 305 i = 1,ksvt
      if(iskip(i).eq.1) go to 305
      chimin = 1000000.
      if(ntpc(i).eq.0) go to 305
      do 306 k = 1,ntpc(i)
      if(chisq(k,i).lt.chimin) jtpc1(i) = jtpc(k,i)
      if(chisq(k,i).lt.chimin) chimin   = chisq(k,i)
306   continue
      chisav(i) = chimin
      isvt1(jtpc1(i)) = i
305   continue
      do 307 i = 1,ksvt
      if(iskip(i).eq.1) go to 307
      if(ntpc(i).eq.0) go to 307
      ichk(i) = 1
      jchk(jtpc1(i)) = 1
      loop_2(i) = 1
307   continue
87    continue
      write(6,408)
408   format(5x,'secondary matching finished')
ccc
ccc    Load matching results into tas variables:
ccc
      ktr = 0
      do 150 i = 1,ksvt
      if(ichk(i).eq.1) then
      if(chisav(i) .gt. vvctrl(1).efacz) go to 150
      ktr = ktr + 1
      if(ktr .gt. evtin_h.maxlen) then
      svm_am = STAFCV_BAD
      goto 999
      end if
      evtin(ktr).id = ktr
      evtin(ktr).idsvt = idsvt(i)
      evtin(ktr).idtpc = idtpc(jtpc1(i))
      evtin(ktr).loop1 = loop_1(i)
      evtin(ktr).loop2 = loop_2(i)
      evtin(ktr).quality = int(1000.0*chisav(i))
           if(isvt2(jtpc1(i)).gt.0) then
                evtin(ktr).idsvt_2   = idsvt(isvt2(jtpc1(i)))
                evtin(ktr).quality_2 = int(1000.0*chisav_2(jtpc1(i)))
           else
                evtin(ktr).idsvt_2   = 0
                evtin(ktr).quality_2 = 0
           end if
      end if
150   continue
      write(6,409) ktr
409   format(5x,'matching results loaded into evt_match: ',i8,
     1  ' matches found')
      evtin_h.nok = ktr

      svm_am = STAFCV_OK

 999  continue
    
      call free(jtmp_p)
      call free(chitmp_p)
      call free(idsvt_p)
      call free(psvt_p)
      call free(pidsvt_p)
      call free(pmsvt_p)
      call free(zersvt_p)
      call free(persvt_p)
      call free(zsvt_p)
      call free(phisvt_p)
      call free(dirsvt_p)
      call free(eangsv_p)
      call free(idtpc_p)
      call free(ptpc_p) 
      call free(pidtpc_p)
      call free(pmtpc_p)
      call free(zertpc_p)
      call free(pertpc_p)
      call free(ztpc_p)
      call free(phitpc_p)
      call free(dirtpc_p)
      call free(eangtp_p)
      call free(ichk_p)
      call free(jchk_p)
      call free( chisq_p)
      call free(jtpc_p)
      call free(ntpc_p)
      call free(iflag_p)
      call free(jflag_p)
      call free(nsvt_p)
      call free(isvt_p)
      call free(jtpc1_p)
      call free(isvt1_p)
      call free(iskip_p)
      call free(jskip_p)
      call free(isvt2_p)
      call free(chisav_p)
      call free(chisav_2_p)
      call free(loop_1_p)
      call free(loop_2_p)


      return
      end
      subroutine cnvrt(pin,pout,q,bmag)
      implicit none
#include "math_constants.inc"
#include "phys_constants.inc"
ccc
ccc   This subr: takes the LBL helix parameters: (r0, phi0, z0, psi,
ccc   tan(theta), and p**(-1) ) and converts to the Wayne State form:
ccc
ccc   q = charge
ccc   bmag = magnetic field in kGauss, .gt. 0.0 if along +z-axis
ccc   fac1 = factor (see notes)
ccc   pi = 3.14...
ccc
ccc   variable and array type declarations
ccc
      real bmag,cth,q,radius,sgn,t0,xctr,yctr,pin,pout
      dimension pin(6), pout(7)
      sgn = (q/abs(q))*(bmag/abs(bmag))
      cth = atan(pin(5))
      radius = cos(cth)/(abs(q)*abs(bmag)*C_D_CURVATURE*pin(6))
      xctr = pin(1)*cos(pin(2)) + radius*cos(pin(4) - sgn*C_PI
     1       /2.00)
      yctr = pin(1)*sin(pin(2)) + radius*sin(pin(4) - sgn*C_PI
     1       /2.00)
      t0 = atan2(pin(1)*sin(pin(2)) - yctr,
     1           pin(1)*cos(pin(2)) - xctr)
      pout(1) = xctr
      pout(2) = yctr
      pout(3) = pin(3)
      pout(4) = radius
      pout(5) = pin(5)
      pout(6) = t0
      pout(7) = pin(1)
      return
      end
      subroutine ipt(p,rd,zp,bmag,ang,xid,cosphi,zint,iercod,dirvec)
      implicit none
ccc
ccc   New subr: ipt
ccc
ccc    (modulo 2.0*pi error corrected 4/11/94).
ccc        Uses the Wayne State helix parameters xctr, yctr, etc. passed
ccc        as arguments.
ccc
ccc        This takes the input helix parameters and computes the intercept
ccc        point with an imaginary cylinder at radius rd (cm).
ccc
ccc    p(i=1,6) = array of input parameters, plus p(7) is r0
ccc    rd  = radius for point of intercept.
ccc    zp = charge
ccc    bmag = magnetic field along +z-axis (is .lt. if along -z axis).
ccc    ang = intercept azimuthal angle
ccc    xid = path angle from point of origin of track to intercept point.
ccc          ( is .gt. 0.0 if going forward in time, .lt.0.0 if going
ccc          backward in time to get to intercept point.)
ccc    cosphi = cosine of angle between particle momentum vector at intercept
ccc             and normal vector to cylinder at intercept point.
ccc    zint = z value of intercept point.
ccc    iercod = 0 , track is intercepted ok.
ccc           = 1 , helix does not intercept the cylinder
ccc    dirvec(i=1,3) = (x,y,z) components of unit vector in direction of
ccc                    particle momentum at the intercept point.
ccc
ccc  variable and array type declarations
ccc

#include "math_constants.inc"
      real ang,cosphi,ddd,dsx,dsy,dsz,eq,fac1,fac2,r,rd,sl,t0
      real xc,yc,z0,zint,zp,dirvec,p
      real bmag,xint,yint,xintpp,yintpp,tint,xid,angint
      integer iercod
      dimension p(7), dirvec(3)
      iercod = 0
      eq = (zp/abs(zp))*(bmag/abs(bmag))
      xc = p(1)
      yc = p(2)
      z0 = p(3)
      r  = p(4)
      sl = p(5)
      t0 = p(6)
      fac1 = xc*xc + yc*yc
      if(abs(sqrt(fac1) - r).gt.rd) then
      iercod = 1
      return
      end if
      if(abs(sqrt(fac1) + r) .lt. rd) then
      iercod = 1
      return
      end if
      fac2 = (rd*rd + fac1 - r*r)/(2.00*rd*sqrt(fac1))
      ang  = atan2(yc,xc) + eq*acos(fac2)
      xint = rd*cos(ang)
      yint = rd*sin(ang)
      xint = xint - xc
      yint = yint - yc
      xintpp = cos(t0)*xint + sin(t0)*yint
      yintpp =-sin(t0)*xint + cos(t0)*yint
      tint = atan2(yintpp,xintpp)
      xid = -eq*tint
      if(p(7).le.rd) then
           if(xid.lt.0.0) xid = C_2PI + xid
      else
           if(xid.gt.0.0) xid = xid - C_2PI
      end if
      zint = z0 + r*sl*xid
      angint = -eq*xid + t0
      cosphi = eq*sin(angint - ang)/sqrt(1.0 + sl*sl)
      dsx = eq*sin(angint)
      dsy = -eq*cos(angint)
      dsz = sl
      ddd = sqrt(1.0 + sl*sl)
      dirvec(1) = dsx/ddd
      dirvec(2) = dsy/ddd
      dirvec(3) = dsz/ddd
      return
      end
      function themcs(pmass,zp,plab,al,alr,ktrl4)
      implicit none
ccc
ccc   variable and array type declarations
ccc
      real al,alr,beta,elab,fac1,fac2,fac3,gam,plab,pmass,zp
       real themcs
      integer ktrl4
      if(al.eq.0.00) then
      themcs = 0.00
      else
      fac1 = al/alr
      elab = sqrt(plab*plab + pmass*pmass)
      gam = elab/pmass
      beta = sqrt(1.00 - 1.00/(gam*gam))
      if(ktrl4.eq.0) then
      fac2 = log10(fac1)/9.00
      fac3 = 14.10
      else
      fac2 = 0.038*log(fac1)
      fac3 = 13.60
      end if
      themcs = fac3*zp*sqrt(fac1)*(1.00 + fac2)/(1000.00*plab*beta)
      end if
      return
      end
      subroutine pid(n,pm,z)
      implicit none
      integer n
      real pm,z
ccc
ccc   particle identification code of geant:
ccc
ccc   see geant users guide, geant 3.10, cons 300
ccc
ccc     truncated to include only pi+ and pi- for all particles.
ccc     this is only for the matching algorithm
ccc
      pm = 0.139567
      z = 0.0
      if(n.eq.8) z = 1.0
      if(n.eq.9) z = -1.0
      return
      end
      subroutine fcmin(chitmp,jtmp,chi5,j5,ktr,NO_TKS_MAX)
      implicit none
ccc
ccc    Subroutine fcmin:  find chi-square minimum
ccc
ccc    This subroutine finds the five lowest chi-square values among
ccc    those listed in array chitmp and puts these chi-square values
ccc    in increasing order into array chi5.  The corresponding j-index
ccc    values are put into array j5.
ccc
ccc    variable and array type declarations
ccc
      integer NO_TKS_MAX
      integer i,iskip,j,jm1,k,imin,jtmp(NO_TKS_MAX),j5(5),ktr
      real chimax, chimin,chitmp(NO_TKS_MAX),chi5(5)


      dimension imin(5)
      do 9 k = 1,5
9     imin(k) = 0
      chimax = 0.00
      do 10 i = 1,ktr
10    if(chitmp(i).gt.chimax) chimax = chitmp(i)
      do 12 j = 1,5
      jm1 = j - 1
      if(j.eq.1) jm1 = 1
      chimin = chimax
      do 11 i = 1,ktr
      iskip = 0
      do 13 k = 1,jm1
13    if(i.eq.imin(k)) iskip = 1
      if(iskip.eq.1) go to 11
      if(chitmp(i).lt.chimin) then
      chimin = chitmp(i)
      imin(j) = i
      end if
11    continue
      chi5(j) = chimin
      j5(j) = jtmp(imin(j))
12    continue
      return
      end
