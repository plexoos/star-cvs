
                 ***************************************
                 *  EVR:  Event Vertex Reconstruction  *
                 ***************************************

                            July 27, 1999

             Maintained by R. L. Ray, ray@physics.utexas.edu
             Last Update: April 6, 2001

General Package Description:
---------------------------

     The evr package will eventually include a set of modules which
perform event vertex reconstruction in STAR for A+A, proton+A, p+p
and A+A peripheral collisions.  Presently there is only one module,
evr_am.F, which is intended for high multiplicity Nucleus+Nucleus
collisions.  This module might also work well for p+A events but should
not be used for p+p collisions or peripheral A+A events.  The latter will
require special event vertex finder/fitter algorithms.

General Description of Module evr_am.F:
--------------------------------------

     Module evr_am.F reads global tracks (i.e. first instance of the global
track table containing fitted or refitted tracks from package egr, for tracks
with TPC and/or SVT and/or SSD space points; no FTPC tracks; no primary
vertex used) from the DST level table type dst_track (local table name
`globtrk'), and run control switches and parameters from table evr_evrpar 
(local table name `evrpar').  The global tracks may be TPC space point only
tracks or may include tracks which have SVT and/or SSD hits.  FTPC tracks
are not used in this module.  The event vertex results are loaded into the
DST table type, dst_vertex (local table name `privert'). 
     
     In general at least 3 global tracks must be selected and available for
use in finding the event vertex at each iteration in the processing.  This
therefore requires events with significant multiplicity.  Also the module
can accommodate any magnetic field value, including the no magnetic field case.

Authors:
-------

     Spiros Margetis - March 1992 and during Winter 1998-1999
     Lanny Ray       - February 1999 - present

Method of Calculation in evr_am.F:
---------------------------------

     Global tracks are initially selected for use based on a minimum pT cut
defined by evr_evrpar.ptmin, the track/detector component (TPC, SVT, SSD),
the value of globtrk.iflag (iflag > 0), charge non-zero, and number of fit
points on track .ge. 25.  The trajectories are extrapolated
to the distance of closest approach (DCA) to the beam axis (assumed to be at
x=y=0).  The z-coordinates of these DCA points (which are located inside the
beam pipe) are binned in 0.5 cm bins and the bin with maximum occupancy is
determined.  This provides a starting seed value for the z position of the
event vertex.  The extrapolated track position uncertainties at the DCA 
points (sigma) are estimated accounting for the following:

     (1) multiple Coulomb scattering (MCS) in the TPC inner field cage (IFC)
         for TPC tracks and in the SVT first layer for tracks with SVT-SSD
         space points.
     (2) errors in the track parameters as given by the track covariance
         matrix (this may be included or not, depending on the value of
         evrpar.covariance, see below).

     Tracks are then selected based on the DCA position using a transverse
cut (evrpar.cutxy) and a longitudinal cut (evrpar.cutz) relative to the seed
position.  The first iteration of the event vertex position is found by
minimizing the DCAs [actually the Sum over (DCA distance/sigma)**2] for all
selected tracks as explained in STAR Note 89.

     Then a tighter, 3D DCA cut is applied using the first vertex position
(evrpar.cut2) to select a refined set of tracks for use in the second
iteration.  The final track selection is then made using this second vertex
position and an even tighter 3D DCA cut (evrpar.cut3) and the final event
vertex fit is obtained.  Global tracks which were used in the final iteration
are marked via the parameter globtrk.id_start_vertex.  For the final vertex
position the 3D DCA positions for all global tracks (with TPC and/or SVT
and/or SSD space points and with iflag > 0) are computed.  For those tracks
whose final DCA are less than evrpar.vcut, globtrk.id_start_vertex is also
marked.  The 3D DCA is loaded into globtrk.impact for all global tracks
(with TPC and/or SVTand/or SSD space points and with iflag > 0).

NOTE: now thge DCA cuts are based on the sigmas of the Z-DCA sequences.
The evrpar cuts are used to limit the computed sigmaz-s. See listing.

     In general, at least 3 global tracks must be used at each iteration.
If less than 3 tracks are encountered at any iteration a message is 
printed and a STAFCV error code is returned to the calling program.
See the following description of the evr_am return values using the STAFCV
code.  The results from each iteration are loaded into the dst_vertex
(privert) table.

Summary for Users:
-----------------

     The user may supply values for the run control and parameters in
table evr_evrpar.  Or the user may elect to use the default values listed
below.  These parameters are:

     ptmin       - minimum pt (GeV/c) for track selection for vertex fitting
     cutxy       - initial transverse DCA position cut (cm) from beam axis
     cutz        - initial longitudinal (z) position cut (cm) from seed value
     cut2        - 3D DCA cut (cm) for 2nd iteration
     cut3        - 3D DCA cut (cm) for 3rd (final) iteration
     vcut        - 3D DCA cut (cm) for marking primary trk candidates
     covariance  - equal 1 (0) to include (not include) track parameter
                   covariance matrix in extrapolated trajectory position
                   uncertainty
     fitoption   - equal 1 (0) to update (not update) global track straight
                   line approximations near event vertex after 1st and 2nd
                   iterations.
                 - equal 2 causes the Beamline to constrain the fit with a
                   sigma error in (x,y) of 0.1 cm.

     Default values saved in evrpars.xdf:

     ptmin       = 0.0
     cutxy       = 1
     cutz        = 10
     cut2        = 2
     cut3        = 0.5
     vcut        = 3.0  << NEW
     covariance  = 0
     fitoption   = 0

     The output written in DST table type dst_vertex (local name `privert') is
briefly listed below.  The complete listing is given later.

     Output variables in table privert:
     ----------------------------------
CC:     privert().id        = Primary key; value of privert_h.nok when
CC:                           row is filled
CC:               iflag     = +yx1 for normal, successfully found primary vertex
CC:                                during the 3rd iteration
CC:                         = -yx3 for initial seed value
CC:                         = -yx2 for first iteration value
CC:                         = -yx1 for second iteration value
CC:                         = -yx4 for failed fit with Determinant of G = 0.0,
CC:                                occuring during any iteration.
CC:                         = -yx5 for failed error covariance matrix evaluation
CC:                                during fit with Determinant of E = 0.0,
CC:                                occuring during any iteration.
CC:                         = -yx6 for failed vertex finding due to too few
CC:                                tracks occuring anytime after the initial
CC:                                vertex seed has been found.
CC:                         = -yx7 for failed vertex finding due to too low
CC:                                a fraction of selected tracks relative
CC:                                to the total number of global tracks in seed
CC:                                occuring anytime after the initial vertex
CC:                                seed has been found.
CC:                         = -yx8 for failed vertex finding due to both of
CC:                                the previous two conditions occuring anytime
CC:                                after the initial vertex seed has been
CC:                                found.
CC:                            x is the event vertex id (for pileups). Zero
CC:                              means one vertex, x=1 is the next one etc.
cc:                            y is the det_id for prevertex finding only. 
cc:                            y=0 is not prevertex, y=1 TPC prevertex, 
cc:                            y=2 SVT, y=3 FTPC etc. det_id compliments this in
fo.
CC:               det_id    = Detectors contributing to all tracks used for
CC:                           primary vertex finding/fitting:
CC:                           This quantity, based on the definitions in
CC:                           $STAR/pams/global/inc/StDetectorDefinitions.h,
CC:                           indicates the full
CC:                           list of tracking detectors which contributed
CC:                           to all the tracks used in determinig the primary
CC:                           vertex.  This might include the SVT, SSD and
CC:                           TPC.  The FTPCs are not included in this, nor
CC:                           in the primary vertex finding process.  The
CC:                           tracks from the initial global track selection
CC:                           loop (do 20 loop) are used for this determination.
CC:                           The 'det_id' from this initial, selected set of
CC:                           tracks is reported for each primary vertex
CC:                           iteration. The following algorithm is used:
CC:                           
CC:                           Detectors contributing        Value assigned to
CC:                              to tracks used             privert().det_id
CC:                           -----------------------------------------------
CC:                           TPC only                      kTpcId
CC:                           SVT only                      kSvtId
CC:                           SSD only (nonsense case)      kSsdId
CC:                           TPC & SVT, not SSD            kTpcSvtId
CC:                           TPC & SSD, not SVT            kTpcSsdId
CC:                           SSD & SVT, not TPC            kSsdSvtId
CC:                           SVT, SSD and TPC              kTpcSsdSvtId
CC:                           -----------------------------------------------
CC:               vtx_id    = kEventVtxId (defined in $STAR/pams/global/inc/
CC:                           StVertexDefinitions.h),
CC:                           indicates the primary vertex
CC:             n_daughters = number of tracks used at each iteration in the
CC:                           fit; only good global tracks with SVT and/or
CC:                           SSD, and/or TPC segments are used and counted.
CC:                           FTPC tracks are not used and are not counted.
CC:             x,y,z       = Primary vertex coords in STAR global c.s. (cm)
CC:          covar(1,2...6) = Covariance error matrix for vrtx position (cm^2)
CC:                           defined in DST document for table dst_vertex.
CC:                chisq(2) = Chi-Square of fit per d.o.f. (number of tracks
CC:                           used minus number of varied quantities, the latter
CC:                           corresponds to one vertex position, so #d.o.f. =
CC:                           ntrks-used - 1).  The second value is the 
CC:                           probability of chi-square calculated using the
CC:                           CERNLIB function PROB(X,N).
CC:            id_aux_ent   = 0; used by ev0 for auxiliary vertex table
CC:                              reference, not used by evr.

***************************************************************************
**           USER NOTE   USER NOTE   USER NOTE   USER NOTE               **
**           ---------   ---------   ---------   ---------               **
**    The final, best value for the event vertex for use in other        **
**    modules MUST be identified by finding the row in dst_vertex        **
**    for which BOTH of the following values occur:                      **
**                                                                       **
**             privert().iflag  = 1                                      **
**             privert().vtx_id = kEventVtxId                            **
**                                                                       **
**    This will not necessarily be on the first row, nor any other       **
**    particular row.  The above is the ONLY way to insure that you      **
**    get the correct event vertex.                                      **
***************************************************************************


Hard-Wired Parameters:
---------------------

     Several control parameters and some geometry and material estimates
are hard-coded for convenience.  The user should not ordinarily care about
these.  The geometry and material quantities are only for rough estimates
of MCS effects; detailed data base values are not necessary.  The parameters
include:

     maxtr    = 5000       -  maximum number of global tracks that can be
                              used in the vertex fit.  The rest, if any, are
                              skipped.  This is pending the implementation
                              of dynamic memory allocation.
     LIFC = 0.0055         -  TPC IFC radiation length fraction
     LSVT1 = 0.017         -  assumed effective SVT 1st layer radiation
                              length fraction (one-third of total SVT)
      Parameter(nbins         = 2400)
      Parameter(nxybins       = 81)
      Parameter(zlimit1       = 385.0)
      Parameter(zlimit2       = 600.0)
      Parameter(beampipecut1  = 4.0)
      Parameter(beampipecut2  = 6.5)
      Parameter(dz_default    = 0.5)
      Parameter(dxy           = 0.1)
      Parameter(zmin          = -600.0)
      Parameter(zrange        = 200.0)
      Parameter(def_seq_range_z = 2.0)
      Parameter(def_seq_range_xy = 1.5)
      DATA ntrkcut  /3/     ! Min. trk # at each step in the finding/fitting
      DATA ntrkratiocut /0.1/! Default min. acceptable track ratio (see above)

     ptdefault = 0.4 GeV/c -  default pt value for all used tracks for No B
                              field case for use in estimating the DCA position
                              uncertainty due to MCS.
      DATA bfield_min /0.1/ ! Lower cutoff on abs(B_field, z component) in
CC                          ! kGauss, below which this case is taken to be
CC                          ! a zero magnetic field run; b is set to 0.000 .
CC                          ! Same value used in TPC tracking code, tpt.


     The following parameters are used for the extrapolated track position
uncertainty (sigma) at the DCA point to the primary vertex due to the
errors in the track helix parameters.

      DATA sigdef  /1.0/    ! Default track position sigma (cm) at DCA point
      DATA sigmin  /0.1/    ! Minimum track position sigma (cm) at DCA point
CC                          ! Changed from 0.01 to 0.1 on Feb. 12, 2001 by
CC                          ! RLR to be compatible with the minimum error
CC                          ! assigned in Subr: EVR_VERTEX_FIT
      DATA sigmax  /10.0/   ! Maximum track position sigma (cm) at DCA point
      DATA sigbig  /100.0/  ! Upper cutoff track position sigma (cm), DCA point

If the computed track position uncertainty ('error') using the helix
parameter covariance matrix is:

  (1)  crazy (i.e. 'error'**2 .le. 0.0 OR 'error' .gt. sigbig)
       then the track position sigma is set to the default, sigdef.
  (2)  less than sigmin, then 'error' is set to sigmin
  (3)  between sigmax and sigbig, then 'error' is set to sigmax
  (4)  between sigmin and sigmax, then 'error' is set to the computed value.  

CC  Load beam line coordinates in STAR Global coordinate system as obtained
CC  from the summer 2000 run.  These values will change every time STAR is
CC  installed in the WAH.  Eventually these values should be determined by
CC  analysis of central events, then loaded into the STAR run conditions DB,
CC  and later retrieved and used in subsequent reconstruction runs.  For now,
CC  these are hardwired into the code in order to improve the transverse
CC  position determination of the primary vertex for low multiplicity events.
CC  The slopes, azimuthal angle, and tanl are based on the full, measured
CC  distributions from -120 to +120 cm provided by Akio Ogawa.
CC
CC  The parameters are:
CC    - (x,y,z)1 (cm) where the actual beam line intersects the z=0 plane
CC    - (x,y,z)2 (cm) where the actual beam line intersects the z= -100 cm plane
CC    - slope of beam line as seen in projection onto x-z and y-z planes
CC    - azimuthal angle (deg) of beam line as seen in projection onto x-y plane
CC    - beam line's tanl parameter
CC    - the assumed value of sigma (cm) to weight the beam line relative to the
CC        extrapolated tracks in the vertex chi-sq fit; suggested values range
CC        from 0.1 to 0.2 cm such that the beam line has negligible effects
CC        on central events but dominant effect in the transverse fit for
CC        low multiplicity events.
CC

      Parameter(BeamlineX1   = 0.561)
      Parameter(BeamlineY1   = 0.352)
      Parameter(BeamlineZ1   = 0.00)
      Parameter(BeamlineX2   = 0.5854)
      Parameter(BeamlineY2   = 0.3762)
      Parameter(BeamlineZ2   = -100.0)
      Parameter(Beamlinephi0 = 44.76)    ! deg
      Parameter(Beamlinetanl = -2910.)
      Parameter(Beamline_xzslope = -0.000244)
      Parameter(Beamline_yzslope = -0.000242)
CCC Set Beamline fitting constraint control switch:
      if(fitoption .eq. 2) then
         Beamline_sigma   = 0.10
      else
         Beamline_sigma   = 100.0
      end if

Unabridged Description of Code Input, Output and Return STAFCV values:
---------------------------------------------------------------------

     The following are taken directly from the comments in evr_am.F:

CC: ARGUMENTS:
CC:          IN:
CC:             evrpar   = Parameters controlling vertex finding
CC:             globtrk  = Track information from egr package; uses the
CC:                        first instance of the global track table
CC:                        corresponding to the fit or refit of only the
CC:                        space points from the tracking detectors.
CC:         OUT:
CC:             privert  = Primary Vertex Information
CC:      UPDATE:
CC:             globtrk.id_start_vertex -- used to indicate primary
CC:                        track candidates based on 3D DCA cut from
CC:                        the found primary vertex; also used to indicate
CC:                        which tracks were used in the final primary
CC:                        vertex fit (see following explanation of
CC:                        packing algorithm).
CC:             globtrk.impact -- Three dimensional distance of closest
CC:                               approach (3D DCA) to the final primary
CC:                               vertex for all good global tracks (i.e.
CC:                               those with iflag > 0) which have
CC:                               TPC and/or SVT and/or SSD space points
CC:                               (not FTPC tracks).
CC:
CC:
CC:     Update variables in table globtrk:
CC:     ---------------------------------
CC:         id_start_vertex = {0, if track is not used in final vertex fit;
CC:                           OR 1, if track is used in final vertex fit}
CC:                           + {10 * privert(final prim. vrtx row#).id,
CC:                              if track passes 3D DCA cut}
CC:                           
CC:                           This marks all global tracks with respect to
CC:                           usage in final primary vertex fit and with
CC:                           respect to a 3D DCA cut from the found primary
CC:                           vertex using the distance cut in
CC:                           evrpar(1).vcut.
CC:         impact          = Three dimensional distance of closest
CC:                           approach (3D DCA) to the final primary
CC:                           vertex for all good global tracks (i.e.
CC:                           those with iflag > 0) which have
CC:                           TPC and/or SVT and/or SSD space points
CC:                           (not FTPC tracks).
CC:                           
CC: RETURNS:    STAF Condition Value
CC:     The code returns one of the following condition values:
CC:
CC:          STAFCV_OK      - indicates normal, successful completion of
CC:                           vertex finding all the way to the final, third
CC:                           fit iteration; indicates to the calling
CC:                           program that event processing should continue.
CC:                           
CC:          STAFCV_BAD     - The following error conditions will result
CC:                           in evr_am returning this STAF condition value:
CC:                           (1) The number of selected tracks for vertex 
CC:                               finding is less than ntrkcut (=3) during
CC:                               any iteration.
CC:                           (2) The ratio of the number of selected global
CC:                               tracks to total number of global tracks
CC:                               with DCA points within the Z-DCA sequence
CC:                               and beam pipe volume is less than the
CC:                               volumetric ratio of a sphere of radius
CC:                               sqrt(3)*sigma(Z_DCA seq.) [corresponding to
CC:                               to the final track cut, dca_cut3] to the
CC:                               sequence-beam pipe volume or, if these have
CC:                               problematic values, less than the default
CC:                               value 'ntrkratiocut' (set to 0.1) during
CC:                               any iteration.
CC:                           (3) The primary vertex table, 'privert', is
CC:                               already filled to its maximum length and
CC:                               cannot have new vertex information added.
CC:                           (4) The detector ID code numbers from 
CC:                               $STAR/pams/global/inc/StDetectorDefinitions.h
CC:                               are out of the assumed range from 1 to 30.
CC:                           (5) The vertex seed z-position lies outside the
CC:                               detector fiducial as specified by parameter
CC:                               'zrange' (=200 cm).
CC:                           (6) The number of tracks associated with the
CC:                               Z-DCA sequence, 'ntracks_seq', is .lt.
CC:                               ntrkratiocut*(globtrk_h.nok - 50).  This
CC:                               eliminates bad events which have mostly
CC:                               garbage tracks.

History of Modifications:
------------------------

CC: MODIFIED TO WORK IN TAS : E. G. Judd, November 1993
CC:   Added switches so the vertex finder can use TPC, SVT or global tracks.
CC:         Also added cuts on pt, and whether or not the track has been
CC:         matched, to improve track selection : E. G. Judd, April 1994
CC: MODIFIED TO WORK IN STAF : S. Margetis, November 1996
CC:
CC:  Modified for greater accepted range in z for vertex position; array
CC:  bounds checking; unused array cleanup; and bug fixes by L. Ray on
CC:  Feb. 22, 1999
CC:
CC:  Following modifications by R.L.Ray during May, 1999:
CC:  (1)  Include optional re-calculation of helix track projection and
CC:       distance of closest approach (DCA) determination for new
CC:       vertex position at each iteration.
CC:  
CC:  (2)  Save initial vertex seed position as well as iterations 1 and 2
CC:       values in privert table with iflag values set as noted above.
CC:  
CC:  (3)  Compute primary vertex covariance matrix and save diagonal
CC:       components in table privert.
CC:       CHANGE July 1999: Save complete primary vertex position covariance
CC:                         matrix in privert().covar[6]
CC:  
CC:  (4)  Estimate multiple Coulomb scattering (MCS) error contribution to
CC:       the uncertainty (sigma) in the extrapolated track position at the
CC:       DCA point.  Use in vertex fit.  Assumes all tracks are TPC only
CC:       and that MCS in TPC inner field cage is dominant effect.  Uses
CC:       spatial rms MCS angle.  Assumes pion mass for MCS angle calculation
CC:       for all tracks.
CC:
CC:       NOTE:  This part will need to be generalized when global tracks
CC:              include SVT tracks and SVT-TPC matched tracks.
CC:       CHANGE July 1999: code checks for SVT or SSD track segments and
CC:                         if these occur an effective SVT radiation 
CC:                         thickness for the first SVT layer is used to
CC:                         estimate the MCS sigma. 
CC:  
CC:  (5)  Modified/corrected helix projection subroutine.
CC:  
CC:  (6)  Include straight track (no B field case) track projection.
CC:  
CC:  (7)  Modified/corrected 3-D DCA subroutine for special case.
CC:  
CC:  (8)  General cleanup and QA verification.
CC:  
CC:  (9)  Use input global track covariance matrix to calculate the
CC:       track position uncertainty at the extrapolated DCA point.
CC:       Use this as an error (sigma) in the i-th track DCA point
CC:       and add in quadrature with the MCS error.
CC:       CHANGE July 1999: Use the Kalman filter/fitter definition; use
CC:                         new global track table (dst_track) with full
CC:                         track fit covariance matrix; use of old
CC:                         globtrk_aux removed.
CC:
CC: (10)  Compute chi-square per track used in fit and save in
CC:       privert().pchi2
CC:       CHANGE July 1999: Compute chi-square per degree of freedom and
CC:                         probability of chi-square and save in
CC:                         privert().chisq(1,2), respectively.
CC:
CC:  Additional changes made in July 1999 by R. L. Ray:
CC:
CC: (11)  Use Detector ID and Vertex ID codes defined in $STAR/pams/global/inc/
CC:       StDetectorDefinitions.h and StVertexDefinitions.h
CC:
CC: (12)  Modified code for no magnetic field case.  If abs(Bz).le.0.001 kGauss,
CC:       Bz is set to 0.0.  In order to have some estimate of the MCS error
CC:       an arbitary value of pT = 0.4 GeV/c is assumed.  The charge is also
CC:       assumed to be +1 for the no B field runs.
CC:
CC: (13)  Calculate 3D DCA to final primary vertex for all good global tracks
CC:       and load into globtrk().impact.
CC:
CC: (14)  Modified for new global track parameters r0,phi0 - 9/29/99 (L.Ray)
CC:
CC: (15)  Corrected handling of anomalously small values of extrapolated
CC:       track position errors; hard coded pion mass (0.14) in multiple
CC:       Coulomb scattering estimate - R. L. Ray, March, 2000.
CC:
CC: (16)  Revised the event abort criteria and diagnostic output - R. L. Ray,
CC:       April, 2000.
CC:
CC: (17)  Use weighted means for initial seed values for vertex z-position
CC:       and for x,y-positions for the case when the beam-beam axis is not
CC:       coincident with the x = y = 0 axis - R. L. Ray, April, 2000.
CC:
CC: (18)  Replaced math library functions sind and cosd with locally
CC:       defined functions - R. L. Ray, April, 2000.
CC:
CC: (19)  Added extra track selection criteria based on a minimum number of
CC:       space points used in the global track fit - R. L. Ray, April, 2000.
CC:
CC: (20)  Changed most Real variables to Real*8 and used explicit double
CC:       precision functions, e.g. dsin(), etc. - Nov. 2000, G. van Buren.
CC:
CC:  Changes in Feb.-April 2001 - R. L. Ray
CC:
CC: (21)  Include Year 2000 run's beam line coordinates in vertex fit with
CC:       small error in order to constrain the transverse vertex position
CC:       for low multiplicity events.  Numbers are hardwired into code and
CC:       should only be used for production of real Y2K data.
CC:       Use the beamline coordinates from Jamie Dunlop's analysis, Mar. 21,
CC:       2001; see http://www.star.bnl.gov/protected/spectra/dunlop/
CC:       vertex_Mar202001/.  Activate this constraint by setting parameter
CC:       evrpar(1).fitoption = 2; otherwise the error associated with the
CC:       beam line is set to 100. cm which effectively removes it from the
CC:       fitting.  The latter should be done for simulations.
CC:
CC: (22)  Extend vertex search region to include full beam pipe volume out 
CC:       to +/- 6m, but only proceed with vertex fitting if seed is within
CC:       TPC, or if |z_seed| <= 2m.  Also, only tracks with DCA points
CC:       within the sequence of z-bins near the seed are used to determine
CC:       the <x>, <y> of the vertex seed.
CC:
CC: (23)  Use variable DCA binning as determined using parameter values
CC:       in code; but use 2x larger z-DCA bins for low multiplicity events
CC:       where globtrk_h.nok <= 50.
CC:
CC: (24)  Track DCA acceptance for each iteration of the vertex
CC:       fit is based on distance cuts computed from the rms of the
CC:       z distribution in the z-DCA sequence.  Preset DCA cuts are
CC:       no longer used directly but are used to limit the computed cuts.
CC:
CC:       New track acceptance criteria:
CC:        a) For the initial seed finding use all DCA points to the x=y=0
CC:           z-axis that lie within the beampipe volume and |z| <= 6m.
CC:        b) Select and proceed with fitting for seeds with <z> within
CC:           TPC as specified from -zrange to +zrange (zrange = 200 cm).
CC:        c) Check #tracks associated with seed Z-DCA sequence and if
CC:           .lt. ntrkratiocut*(globtrk_h.nok - 50) then STOP vertex find/fit
CC:           and return to calling program with STAFCV_BAD.
CC:        d) Fill x,y DCA histograms for sqrt(x*x+y*y) within beampipe and
CC:           for z within z-DCA sequence range, the latter is nominally
CC:           <z> of seed +/- 'def_seq_range_z' (=2cm).
CC:        e) For First fit iteration:
CC:              select tracks with z-DCA within seed sequence range along
CC:              z-axis and transverse x,y DCAs within the larger of
CC:                 evrpar(1).cutxy OR 3*sqrt(2)*sigmaz,
CC:              but not larger than the beampipe radius, in transverse
CC:              distance from the vertex seed.
CC:        f) For Second fit iteration:
CC:              select tracks with DCA point within 3D distance of the
CC:              larger of 2*sqrt(3)*sigmaz or evrpar(1).cut2, but not
CC:              larger than 2*sqrt(3)*sigdef, where sigdef = 1.0 cm.
CC:        g) For Third (final) fit iteration:                 
CC:              select tracks with DCA point within 3D distance of the   
CC:              larger of sqrt(3)*sigmaz or evrpar(1).cut3, but not
CC:              larger than sqrt(3)*sigdef, where sigdef = 1.0 cm.
CC:
CC:           where  sigmaz = rms of z-DCA sequence
CC:                  sqrt(2)*sigmaz = two-dimensional Gaussian rms
CC:                  sqrt(3)*sigmaz = three-dimensional Gaussian rms
CC:
CC:        h) For primary track candidate marker, use 3D DCA from final
CC:           vertex with evrpar(1).vcut as before.
CC:
CC: (25)  Track fit covariance matrix automatically used if globtrk.method
CC:       is 2**kKalmanFitId (i.e., if the Kalman track fitter was used).
CC:
CC: (26)  Changed minimum track number and track ratio requirements to:
CC:        a) minimum number of tracks at each step must be .ge. ntrkcut (=3)
CC:        b) initial number of selected tracks from DO 20 loop must be
CC:           .ge. ntrkratiocut (=0.1)*(globtrk_h.nok)
CC:        c) for all subsequent iterations the ratio of the number of
CC:           accepted tracks after each cut to the total number in the seed
CC:           z-DCA sequence volume must be .ge. the ratio of the 3D dca_cut3
CC:           volume to the z-DCA sequence volume, where these are given by:
CC:                3D dca_cut3 Vol. = (4*pi/3)*(dca_cut3**3)
CC:                z-DCA seq. Vol.  = pi*(beampipe radius**2)*(length of seq)
CC:           For problematic cases the default 'ntrkratiocut' = 0.1 is used.
CC:
CC: (27)  Reduced the array sizes for local track arrays from 20000 to 5000
CC:       to better match the actual size of RHIC AuAu events.
CC:
CC: (28)  Increased the required number of hits on selected tracks from 10
CC:       to .ge. 25.
CC:

Method of Vertex Fitting:
------------------------

CC:  Minimization of the perpendicular distances from the vectors to a point.
CC:
CC:  Consider an arbitrary vector Vi, with a unit vector in the direction
CC:  The distance from a point P to the vector Vi is the crossproduct of the 
CC:  unit vector e(Vi)^ with any line connecting P to any point Q on the line.
CC:  Line PQ = (x0-xi)x^+(y0-yi)y^+(z0-zi)z^
CC:     P=(x0,y0,z0)    Q=(xi,yi,zi)
CC:  The distance is: |d|=|PQ X e(Vi)^|
CC:
CC:  A least square minimization employs a merit function (chi square) to 
CC:  assess quality of fit.  The optimum values of the variables are 
CC:  determined by where the partial derivatives of the merit function are
CC:  equal to zero.  For this case, the merit function is the summation of
CC:  the squares of the perpendicular distances from the vectors (Vi) to a 
CC:  point (Xo, Yo, Zo) [divided by the squares of the uncertanty
CC:  errors?] (sumation over vector number).  The partial derivatives are taken
CC:  with respect to x0, y0, and Z0.  We are left with three equations 
CC:  for three unknowns (Xo,Yo,Zo).  The evaluation is done through matrix 
CC:  manipulation.


References:
----------

S. Margetis and D. Cebra, ``Main Vertex Reconstruction in STAR,'' STAR Note 89,
(1992).



