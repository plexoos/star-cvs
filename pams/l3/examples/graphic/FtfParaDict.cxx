//
// File generated by /afs/rhic/star/ROOT/2.22.10/.i386_redhat51/root/bin/rootcint at Wed Oct  6 15:17:10 1999.
// Do NOT change. Changes will be lost next time file is generated
//
#include "FtfParaDict.h"

#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

//______________________________________________________________________________
TBuffer &operator>>(TBuffer &buf, FtfPara *&obj)
{
   // Read a pointer to an object of class FtfPara.

   ::Error("FtfPara::operator>>", "objects not inheriting from TObject need a specialized operator>> function"); if (obj) { }
   return buf;
}

//______________________________________________________________________________
void FtfPara::Streamer(TBuffer &R__b)
{
   // Stream an object of class FtfPara.

   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(); if (R__v) { }
      R__b >> infoLevel;
      R__b >> segmentRowSearchRange;
      R__b >> trackRowSearchRange;
      R__b >> dEdx;
      R__b >> dEdxNTruncate;
      R__b >> eventReset;
      R__b >> getErrors;
      R__b >> fillTracks;
      R__b >> ghostFlag;
      R__b >> goBackwards;
      R__b >> init;
      R__b >> mergePrimaries;
      R__b >> minHitsPerTrack;
      R__b >> modRow;
      R__b >> nHitsForSegment;
      R__b >> minHitsForFit;
      R__b >> nEta;
      R__b >> nEtaTrack;
      R__b >> nPhi;
      R__b >> nPhiTrack;
      R__b >> nPrimaryPasses;
      R__b >> nSecondaryPasses;
      R__b >> vertexConstrainedFit;
      R__b >> rowInnerMost;
      R__b >> rowOuterMost;
      R__b >> rowStart;
      R__b >> szFitFlag;
      R__b >> bField;
      R__b >> hitChi2Cut;
      R__b >> goodHitChi2;
      R__b >> trackChi2Cut;
      R__b >> deta;
      R__b >> dphi;
      R__b >> detaMerge;
      R__b >> dphiMerge;
      R__b >> etaMin;
      R__b >> etaMinTrack;
      R__b >> etaMax;
      R__b >> etaMaxTrack;
      R__b >> goodDistance;
      R__b >> phiMin;
      R__b >> phiMinTrack;
      R__b >> phiMax;
      R__b >> phiMaxTrack;
      R__b >> phiShift;
      R__b >> ptMinHelixFit;
      R__b >> maxDistanceSegment;
      R__b >> segmentMaxAngle;
      R__b >> szErrorScale;
      R__b >> xyErrorScale;
      R__b >> xVertex;
      R__b >> yVertex;
      R__b >> dxVertex;
      R__b >> dyVertex;
      R__b >> zVertex;
      R__b >> xyWeightVertex;
      R__b >> phiVertex;
      R__b >> rVertex;
      R__b >> phiClosed;
      R__b >> primaries;
      R__b >> nRowsPlusOne;
      R__b >> nPhiPlusOne;
      R__b >> nEtaPlusOne;
      R__b >> nPhiEtaPlusOne;
      R__b >> nPhiTrackPlusOne;
      R__b >> nEtaTrackPlusOne;
      R__b >> phiSlice;
      R__b >> etaSlice;
      R__b >> phiSliceTrack;
      R__b >> etaSliceTrack;
   } else {
      R__b.WriteVersion(FtfPara::IsA());
      R__b << infoLevel;
      R__b << segmentRowSearchRange;
      R__b << trackRowSearchRange;
      R__b << dEdx;
      R__b << dEdxNTruncate;
      R__b << eventReset;
      R__b << getErrors;
      R__b << fillTracks;
      R__b << ghostFlag;
      R__b << goBackwards;
      R__b << init;
      R__b << mergePrimaries;
      R__b << minHitsPerTrack;
      R__b << modRow;
      R__b << nHitsForSegment;
      R__b << minHitsForFit;
      R__b << nEta;
      R__b << nEtaTrack;
      R__b << nPhi;
      R__b << nPhiTrack;
      R__b << nPrimaryPasses;
      R__b << nSecondaryPasses;
      R__b << vertexConstrainedFit;
      R__b << rowInnerMost;
      R__b << rowOuterMost;
      R__b << rowStart;
      R__b << szFitFlag;
      R__b << bField;
      R__b << hitChi2Cut;
      R__b << goodHitChi2;
      R__b << trackChi2Cut;
      R__b << deta;
      R__b << dphi;
      R__b << detaMerge;
      R__b << dphiMerge;
      R__b << etaMin;
      R__b << etaMinTrack;
      R__b << etaMax;
      R__b << etaMaxTrack;
      R__b << goodDistance;
      R__b << phiMin;
      R__b << phiMinTrack;
      R__b << phiMax;
      R__b << phiMaxTrack;
      R__b << phiShift;
      R__b << ptMinHelixFit;
      R__b << maxDistanceSegment;
      R__b << segmentMaxAngle;
      R__b << szErrorScale;
      R__b << xyErrorScale;
      R__b << xVertex;
      R__b << yVertex;
      R__b << dxVertex;
      R__b << dyVertex;
      R__b << zVertex;
      R__b << xyWeightVertex;
      R__b << phiVertex;
      R__b << rVertex;
      R__b << phiClosed;
      R__b << primaries;
      R__b << nRowsPlusOne;
      R__b << nPhiPlusOne;
      R__b << nEtaPlusOne;
      R__b << nPhiEtaPlusOne;
      R__b << nPhiTrackPlusOne;
      R__b << nEtaTrackPlusOne;
      R__b << phiSlice;
      R__b << etaSlice;
      R__b << phiSliceTrack;
      R__b << etaSliceTrack;
   }
}

//______________________________________________________________________________
void FtfPara::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
   // Inspect the data members of an object of class FtfPara.

   TClass *R__cl  = FtfPara::IsA();
   Int_t   R__ncp = strlen(R__parent);
   if (R__ncp || R__cl || R__insp.IsA()) { }
   R__insp.Inspect(R__cl, R__parent, "infoLevel", &infoLevel);
   R__insp.Inspect(R__cl, R__parent, "segmentRowSearchRange", &segmentRowSearchRange);
   R__insp.Inspect(R__cl, R__parent, "trackRowSearchRange", &trackRowSearchRange);
   R__insp.Inspect(R__cl, R__parent, "dEdx", &dEdx);
   R__insp.Inspect(R__cl, R__parent, "dEdxNTruncate", &dEdxNTruncate);
   R__insp.Inspect(R__cl, R__parent, "eventReset", &eventReset);
   R__insp.Inspect(R__cl, R__parent, "getErrors", &getErrors);
   R__insp.Inspect(R__cl, R__parent, "fillTracks", &fillTracks);
   R__insp.Inspect(R__cl, R__parent, "ghostFlag", &ghostFlag);
   R__insp.Inspect(R__cl, R__parent, "goBackwards", &goBackwards);
   R__insp.Inspect(R__cl, R__parent, "init", &init);
   R__insp.Inspect(R__cl, R__parent, "mergePrimaries", &mergePrimaries);
   R__insp.Inspect(R__cl, R__parent, "minHitsPerTrack", &minHitsPerTrack);
   R__insp.Inspect(R__cl, R__parent, "modRow", &modRow);
   R__insp.Inspect(R__cl, R__parent, "nHitsForSegment", &nHitsForSegment);
   R__insp.Inspect(R__cl, R__parent, "minHitsForFit", &minHitsForFit);
   R__insp.Inspect(R__cl, R__parent, "nEta", &nEta);
   R__insp.Inspect(R__cl, R__parent, "nEtaTrack", &nEtaTrack);
   R__insp.Inspect(R__cl, R__parent, "nPhi", &nPhi);
   R__insp.Inspect(R__cl, R__parent, "nPhiTrack", &nPhiTrack);
   R__insp.Inspect(R__cl, R__parent, "nPrimaryPasses", &nPrimaryPasses);
   R__insp.Inspect(R__cl, R__parent, "nSecondaryPasses", &nSecondaryPasses);
   R__insp.Inspect(R__cl, R__parent, "vertexConstrainedFit", &vertexConstrainedFit);
   R__insp.Inspect(R__cl, R__parent, "rowInnerMost", &rowInnerMost);
   R__insp.Inspect(R__cl, R__parent, "rowOuterMost", &rowOuterMost);
   R__insp.Inspect(R__cl, R__parent, "rowStart", &rowStart);
   R__insp.Inspect(R__cl, R__parent, "szFitFlag", &szFitFlag);
   R__insp.Inspect(R__cl, R__parent, "bField", &bField);
   R__insp.Inspect(R__cl, R__parent, "hitChi2Cut", &hitChi2Cut);
   R__insp.Inspect(R__cl, R__parent, "goodHitChi2", &goodHitChi2);
   R__insp.Inspect(R__cl, R__parent, "trackChi2Cut", &trackChi2Cut);
   R__insp.Inspect(R__cl, R__parent, "deta", &deta);
   R__insp.Inspect(R__cl, R__parent, "dphi", &dphi);
   R__insp.Inspect(R__cl, R__parent, "detaMerge", &detaMerge);
   R__insp.Inspect(R__cl, R__parent, "dphiMerge", &dphiMerge);
   R__insp.Inspect(R__cl, R__parent, "etaMin", &etaMin);
   R__insp.Inspect(R__cl, R__parent, "etaMinTrack", &etaMinTrack);
   R__insp.Inspect(R__cl, R__parent, "etaMax", &etaMax);
   R__insp.Inspect(R__cl, R__parent, "etaMaxTrack", &etaMaxTrack);
   R__insp.Inspect(R__cl, R__parent, "goodDistance", &goodDistance);
   R__insp.Inspect(R__cl, R__parent, "phiMin", &phiMin);
   R__insp.Inspect(R__cl, R__parent, "phiMinTrack", &phiMinTrack);
   R__insp.Inspect(R__cl, R__parent, "phiMax", &phiMax);
   R__insp.Inspect(R__cl, R__parent, "phiMaxTrack", &phiMaxTrack);
   R__insp.Inspect(R__cl, R__parent, "phiShift", &phiShift);
   R__insp.Inspect(R__cl, R__parent, "ptMinHelixFit", &ptMinHelixFit);
   R__insp.Inspect(R__cl, R__parent, "maxDistanceSegment", &maxDistanceSegment);
   R__insp.Inspect(R__cl, R__parent, "segmentMaxAngle", &segmentMaxAngle);
   R__insp.Inspect(R__cl, R__parent, "szErrorScale", &szErrorScale);
   R__insp.Inspect(R__cl, R__parent, "xyErrorScale", &xyErrorScale);
   R__insp.Inspect(R__cl, R__parent, "xVertex", &xVertex);
   R__insp.Inspect(R__cl, R__parent, "yVertex", &yVertex);
   R__insp.Inspect(R__cl, R__parent, "dxVertex", &dxVertex);
   R__insp.Inspect(R__cl, R__parent, "dyVertex", &dyVertex);
   R__insp.Inspect(R__cl, R__parent, "zVertex", &zVertex);
   R__insp.Inspect(R__cl, R__parent, "xyWeightVertex", &xyWeightVertex);
   R__insp.Inspect(R__cl, R__parent, "phiVertex", &phiVertex);
   R__insp.Inspect(R__cl, R__parent, "rVertex", &rVertex);
   R__insp.Inspect(R__cl, R__parent, "phiClosed", &phiClosed);
   R__insp.Inspect(R__cl, R__parent, "primaries", &primaries);
   R__insp.Inspect(R__cl, R__parent, "nRowsPlusOne", &nRowsPlusOne);
   R__insp.Inspect(R__cl, R__parent, "nPhiPlusOne", &nPhiPlusOne);
   R__insp.Inspect(R__cl, R__parent, "nEtaPlusOne", &nEtaPlusOne);
   R__insp.Inspect(R__cl, R__parent, "nPhiEtaPlusOne", &nPhiEtaPlusOne);
   R__insp.Inspect(R__cl, R__parent, "nPhiTrackPlusOne", &nPhiTrackPlusOne);
   R__insp.Inspect(R__cl, R__parent, "nEtaTrackPlusOne", &nEtaTrackPlusOne);
   R__insp.Inspect(R__cl, R__parent, "phiSlice", &phiSlice);
   R__insp.Inspect(R__cl, R__parent, "etaSlice", &etaSlice);
   R__insp.Inspect(R__cl, R__parent, "phiSliceTrack", &phiSliceTrack);
   R__insp.Inspect(R__cl, R__parent, "etaSliceTrack", &etaSliceTrack);
}

/********************************************************
* FtfParaDict.cxx
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#endif

extern "C" void G__cpp_reset_tagtableFtfParaDict();

extern "C" void G__set_cpp_environmentFtfParaDict() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("FtfPara.h");
  G__cpp_reset_tagtableFtfParaDict();
}
extern "C" int G__cpp_dllrevFtfParaDict() { return(51111); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* FtfPara */
static int G__FtfPara_FtfPara_0_0(G__value *result7,char *funcname,struct G__param *libp,int hash) {
   FtfPara *p=NULL;
   if(G__getaryconstruct()) p=new FtfPara[G__getaryconstruct()];
   else                    p=new FtfPara;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__FtfParaDictLN_FtfPara);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FtfPara_setDefaults_1_0(G__value *result7,char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((FtfPara*)(G__getstructoffset()))->setDefaults();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FtfPara_DeclFileName_2_0(G__value *result7,char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((FtfPara*)(G__getstructoffset()))->DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FtfPara_DeclFileLine_3_0(G__value *result7,char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((FtfPara*)(G__getstructoffset()))->DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FtfPara_ImplFileName_4_0(G__value *result7,char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((FtfPara*)(G__getstructoffset()))->ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FtfPara_ImplFileLine_5_0(G__value *result7,char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((FtfPara*)(G__getstructoffset()))->ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FtfPara_Class_Version_6_0(G__value *result7,char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((FtfPara*)(G__getstructoffset()))->Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FtfPara_Class_7_0(G__value *result7,char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((FtfPara*)(G__getstructoffset()))->Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FtfPara_IsA_8_0(G__value *result7,char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((FtfPara*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FtfPara_ShowMembers_9_0(G__value *result7,char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((FtfPara*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FtfPara_Streamer_0_1(G__value *result7,char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((FtfPara*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FtfPara_Dictionary_1_1(G__value *result7,char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((FtfPara*)(G__getstructoffset()))->Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FtfPara_FtfPara_2_1(G__value *result7,char *funcname,struct G__param *libp,int hash)
{
   FtfPara *p;
   if(1!=libp->paran) ;
   p=new FtfPara(*(FtfPara*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__FtfParaDictLN_FtfPara);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
static int G__FtfPara_wAFtfPara_3_1(G__value *result7,char *funcname,struct G__param *libp,int hash) {
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (FtfPara *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (FtfPara *)((G__getstructoffset())+sizeof(FtfPara)*i);
   else  delete (FtfPara *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* FtfPara */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncFtfParaDict {
 public:
  G__Sizep2memfuncFtfParaDict() {p=&G__Sizep2memfuncFtfParaDict::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncFtfParaDict::*p)();
};

size_t G__get_sizep2memfuncFtfParaDict()
{
  G__Sizep2memfuncFtfParaDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceFtfParaDict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableFtfParaDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,
-1);
   G__setnewtype(-1,"Signed Character 1 byte",0);
   G__search_typename2("UChar_t",98,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Character 1 byte",0);
   G__search_typename2("Short_t",115,-1,0,
-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes",0);
   G__search_typename2("UShort_t",114,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes",0);
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes",0);
   G__search_typename2("UInt_t",104,-1,0,
-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes",0);
   G__search_typename2("Seek_t",105,-1,0,
-1);
   G__setnewtype(-1,"File pointer",0);
   G__search_typename2("Long_t",108,-1,0,
-1);
   G__setnewtype(-1,"Signed long integer 8 bytes",0);
   G__search_typename2("ULong_t",107,-1,0,
-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes",0);
   G__search_typename2("Float_t",102,-1,0,
-1);
   G__setnewtype(-1,"Float 4 bytes",0);
   G__search_typename2("Double_t",100,-1,0,
-1);
   G__setnewtype(-1,"Float 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,
-1);
   G__setnewtype(-1,"General string",0);
   G__search_typename2("Bool_t",98,-1,0,
-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true)",0);
   G__search_typename2("Byte_t",98,-1,0,
-1);
   G__setnewtype(-1,"Byte (8 bits)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier",0);
   G__search_typename2("Option_t",99,-1,0,
-1);
   G__setnewtype(-1,"Option string",0);
   G__search_typename2("Ssiz_t",105,-1,0,
-1);
   G__setnewtype(-1,"String size",0);
   G__search_typename2("Real_t",102,-1,0,
-1);
   G__setnewtype(-1,"TVector and TMatrix element type",0);
   G__search_typename2("VoidFuncPtr_t",89,-1,0,
-1);
   G__setnewtype(-1,"pointer to void function",0);
   G__search_typename2("FreeHookFun_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocFun_t",81,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocCFun_t",81,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Axis_t",102,-1,0,
-1);
   G__setnewtype(-1,"Axis values type",0);
   G__search_typename2("Stat_t",100,-1,0,
-1);
   G__setnewtype(-1,"Statistics type",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* FtfPara */
static void G__setup_memvarFtfPara(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FtfParaDictLN_FtfPara));
   { FtfPara *p; p=(FtfPara*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->infoLevel)-(long)(p)),115,0,0,-1,-1,-1,1,"infoLevel=",0,"Level of information printed about progress");
   G__memvar_setup((void*)((long)(&p->segmentRowSearchRange)-(long)(p)),115,0,0,-1,-1,-1,1,"segmentRowSearchRange=",0,"Row search range for segments ");
   G__memvar_setup((void*)((long)(&p->trackRowSearchRange)-(long)(p)),115,0,0,-1,-1,-1,1,"trackRowSearchRange=",0,"Row search range for tracks ");
   G__memvar_setup((void*)((long)(&p->dEdx)-(long)(p)),115,0,0,-1,-1,-1,1,"dEdx=",0,"dEdx switch");
   G__memvar_setup((void*)((long)(&p->dEdxNTruncate)-(long)(p)),115,0,0,-1,-1,-1,1,"dEdxNTruncate=",0,"# points to truncate in dEdx");
   G__memvar_setup((void*)((long)(&p->eventReset)-(long)(p)),115,0,0,-1,-1,-1,1,"eventReset=",0,"Flag to reset event in fft ");
   G__memvar_setup((void*)((long)(&p->getErrors)-(long)(p)),115,0,0,-1,-1,-1,1,"getErrors=",0,"Flag to switch error calculation");
   G__memvar_setup((void*)((long)(&p->fillTracks)-(long)(p)),115,0,0,-1,-1,-1,1,"fillTracks=",0,"Flag to switch FtfTrack class filling");
   G__memvar_setup((void*)((long)(&p->ghostFlag)-(long)(p)),115,0,0,-1,-1,-1,1,"ghostFlag=",0,"=1 when there are ghost hits");
   G__memvar_setup((void*)((long)(&p->goBackwards)-(long)(p)),115,0,0,-1,-1,-1,1,"goBackwards=",0,"Flag to go backwards at the end of track reco");
   G__memvar_setup((void*)((long)(&p->init)-(long)(p)),115,0,0,-1,-1,-1,1,"init=",0,"Control initialization ");
   G__memvar_setup((void*)((long)(&p->mergePrimaries)-(long)(p)),115,0,0,-1,-1,-1,1,"mergePrimaries=",0,"Switch to control primary merging ");
   G__memvar_setup((void*)((long)(&p->minHitsPerTrack)-(long)(p)),115,0,0,-1,-1,-1,1,"minHitsPerTrack=",0,"Minimum # hits per track ");
   G__memvar_setup((void*)((long)(&p->modRow)-(long)(p)),115,0,0,-1,-1,-1,1,"modRow=",0,"Modulo pad row number to use ");
   G__memvar_setup((void*)((long)(&p->nHitsForSegment)-(long)(p)),115,0,0,-1,-1,-1,1,"nHitsForSegment=",0,"# hits in initial segments ");
   G__memvar_setup((void*)((long)(&p->minHitsForFit)-(long)(p)),115,0,0,-1,-1,-1,1,"minHitsForFit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nEta)-(long)(p)),115,0,0,-1,-1,-1,1,"nEta=",0,"# volumes in eta ");
   G__memvar_setup((void*)((long)(&p->nEtaTrack)-(long)(p)),115,0,0,-1,-1,-1,1,"nEtaTrack=",0,"# Track areas in eta ");
   G__memvar_setup((void*)((long)(&p->nPhi)-(long)(p)),115,0,0,-1,-1,-1,1,"nPhi=",0,"# volumes in nphi ");
   G__memvar_setup((void*)((long)(&p->nPhiTrack)-(long)(p)),115,0,0,-1,-1,-1,1,"nPhiTrack=",0,"# Track areas in nphi ");
   G__memvar_setup((void*)((long)(&p->nPrimaryPasses)-(long)(p)),115,0,0,-1,-1,-1,1,"nPrimaryPasses=",0,"# iterations looking for primaries");
   G__memvar_setup((void*)((long)(&p->nSecondaryPasses)-(long)(p)),115,0,0,-1,-1,-1,1,"nSecondaryPasses=",0,"# iterations looking for secondaries");
   G__memvar_setup((void*)((long)(&p->vertexConstrainedFit)-(long)(p)),115,0,0,-1,-1,-1,1,"vertexConstrainedFit=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rowInnerMost)-(long)(p)),115,0,0,-1,-1,-1,1,"rowInnerMost=",0,"Row where end track search ");
   G__memvar_setup((void*)((long)(&p->rowOuterMost)-(long)(p)),115,0,0,-1,-1,-1,1,"rowOuterMost=",0,"Outer most row to consider tin tracking");
   G__memvar_setup((void*)((long)(&p->rowStart)-(long)(p)),115,0,0,-1,-1,-1,1,"rowStart=",0,"Row where start track search");
   G__memvar_setup((void*)((long)(&p->szFitFlag)-(long)(p)),115,0,0,-1,-1,-1,1,"szFitFlag=",0,"Switch for sz fit ");
   G__memvar_setup((void*)((long)(&p->bField)-(long)(p)),102,0,0,-1,-1,-1,1,"bField=",0,"Magnetic field  ");
   G__memvar_setup((void*)((long)(&p->hitChi2Cut)-(long)(p)),102,0,0,-1,-1,-1,1,"hitChi2Cut=",0,"Maximum hit chi2 ");
   G__memvar_setup((void*)((long)(&p->goodHitChi2)-(long)(p)),102,0,0,-1,-1,-1,1,"goodHitChi2=",0,"Chi2 to stop looking for next hit ");
   G__memvar_setup((void*)((long)(&p->trackChi2Cut)-(long)(p)),102,0,0,-1,-1,-1,1,"trackChi2Cut=",0,"Maximum track chi2 ");
   G__memvar_setup((void*)((long)(&p->deta)-(long)(p)),102,0,0,-1,-1,-1,1,"deta=",0,"Eta search range ");
   G__memvar_setup((void*)((long)(&p->dphi)-(long)(p)),102,0,0,-1,-1,-1,1,"dphi=",0,"Phi search range ");
   G__memvar_setup((void*)((long)(&p->detaMerge)-(long)(p)),102,0,0,-1,-1,-1,1,"detaMerge=",0,"Eta difference for track merge ");
   G__memvar_setup((void*)((long)(&p->dphiMerge)-(long)(p)),102,0,0,-1,-1,-1,1,"dphiMerge=",0,"Phi difference for track merge");
   G__memvar_setup((void*)((long)(&p->etaMin)-(long)(p)),102,0,0,-1,-1,-1,1,"etaMin=",0,"Min eta to consider ");
   G__memvar_setup((void*)((long)(&p->etaMinTrack)-(long)(p)),102,0,0,-1,-1,-1,1,"etaMinTrack=",0,"Track min eta to consider ");
   G__memvar_setup((void*)((long)(&p->etaMax)-(long)(p)),102,0,0,-1,-1,-1,1,"etaMax=",0,"Max eta to consider ");
   G__memvar_setup((void*)((long)(&p->etaMaxTrack)-(long)(p)),102,0,0,-1,-1,-1,1,"etaMaxTrack=",0,"Track max eta to consider ");
   G__memvar_setup((void*)((long)(&p->goodDistance)-(long)(p)),102,0,0,-1,-1,-1,1,"goodDistance=",0,"In segment building");
   G__memvar_setup((void*)((long)(&p->phiMin)-(long)(p)),102,0,0,-1,-1,-1,1,"phiMin=",0,"Min phi to consider ");
   G__memvar_setup((void*)((long)(&p->phiMinTrack)-(long)(p)),102,0,0,-1,-1,-1,1,"phiMinTrack=",0,"Track min phi to consider ");
   G__memvar_setup((void*)((long)(&p->phiMax)-(long)(p)),102,0,0,-1,-1,-1,1,"phiMax=",0,"Max phi to consider ");
   G__memvar_setup((void*)((long)(&p->phiMaxTrack)-(long)(p)),102,0,0,-1,-1,-1,1,"phiMaxTrack=",0,"Track max phi to consider ");
   G__memvar_setup((void*)((long)(&p->phiShift)-(long)(p)),102,0,0,-1,-1,-1,1,"phiShift=",0,"Shift in phi when calculating phi");
   G__memvar_setup((void*)((long)(&p->ptMinHelixFit)-(long)(p)),102,0,0,-1,-1,-1,1,"ptMinHelixFit=",0,"Minimum pt to apply helix fit");
   G__memvar_setup((void*)((long)(&p->maxDistanceSegment)-(long)(p)),102,0,0,-1,-1,-1,1,"maxDistanceSegment=",0,"Maximum distance for segments ");
   G__memvar_setup((void*)((long)(&p->segmentMaxAngle)-(long)(p)),102,0,0,-1,-1,-1,1,"segmentMaxAngle=",0,"Maximum angle between to consecutive track pieces ");
   G__memvar_setup((void*)((long)(&p->szErrorScale)-(long)(p)),102,0,0,-1,-1,-1,1,"szErrorScale=",0,"sz error scale ");
   G__memvar_setup((void*)((long)(&p->xyErrorScale)-(long)(p)),102,0,0,-1,-1,-1,1,"xyErrorScale=",0,"xy error scale ");
   G__memvar_setup((void*)((long)(&p->xVertex)-(long)(p)),102,0,0,-1,-1,-1,1,"xVertex=",0,"x position primary vertex ");
   G__memvar_setup((void*)((long)(&p->yVertex)-(long)(p)),102,0,0,-1,-1,-1,1,"yVertex=",0,"y position primary vertex ");
   G__memvar_setup((void*)((long)(&p->dxVertex)-(long)(p)),102,0,0,-1,-1,-1,1,"dxVertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dyVertex)-(long)(p)),102,0,0,-1,-1,-1,1,"dyVertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zVertex)-(long)(p)),102,0,0,-1,-1,-1,1,"zVertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xyWeightVertex)-(long)(p)),102,0,0,-1,-1,-1,1,"xyWeightVertex=",0,"Weight vertex in x-y");
   G__memvar_setup((void*)((long)(&p->phiVertex)-(long)(p)),102,0,0,-1,-1,-1,1,"phiVertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rVertex)-(long)(p)),102,0,0,-1,-1,-1,1,"rVertex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phiClosed)-(long)(p)),115,0,0,-1,-1,-1,1,"phiClosed=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->primaries)-(long)(p)),115,0,0,-1,-1,-1,1,"primaries=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nRowsPlusOne)-(long)(p)),105,0,0,-1,-1,-1,1,"nRowsPlusOne=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPhiPlusOne)-(long)(p)),105,0,0,-1,-1,-1,1,"nPhiPlusOne=",0,"Number volumes + 1");
   G__memvar_setup((void*)((long)(&p->nEtaPlusOne)-(long)(p)),105,0,0,-1,-1,-1,1,"nEtaPlusOne=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nPhiEtaPlusOne)-(long)(p)),105,0,0,-1,-1,-1,1,"nPhiEtaPlusOne=",0,"Number volumes + 1 ");
   G__memvar_setup((void*)((long)(&p->nPhiTrackPlusOne)-(long)(p)),105,0,0,-1,-1,-1,1,"nPhiTrackPlusOne=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nEtaTrackPlusOne)-(long)(p)),105,0,0,-1,-1,-1,1,"nEtaTrackPlusOne=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phiSlice)-(long)(p)),102,0,0,-1,-1,-1,1,"phiSlice=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->etaSlice)-(long)(p)),102,0,0,-1,-1,-1,1,"etaSlice=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phiSliceTrack)-(long)(p)),102,0,0,-1,-1,-1,1,"phiSliceTrack=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->etaSliceTrack)-(long)(p)),102,0,0,-1,-1,-1,1,"etaSliceTrack=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__FtfParaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarFtfParaDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncFtfPara(void) {
   /* FtfPara */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FtfParaDictLN_FtfPara));
   G__memfunc_setup("FtfPara",676,G__FtfPara_FtfPara_0_0,105,G__get_linked_tagnum(&G__FtfParaDictLN_FtfPara),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("setDefaults",1156,G__FtfPara_setDefaults_1_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__FtfPara_DeclFileName_2_0,67,-1,-1,0,0,1,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__FtfPara_DeclFileLine_3_0,105,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__FtfPara_ImplFileName_4_0,67,-1,-1,0,0,1,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__FtfPara_ImplFileLine_5_0,105,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__FtfPara_Class_Version_6_0,115,-1,G__defined_typename("Version_t"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__FtfPara_Class_7_0,85,G__get_linked_tagnum(&G__FtfParaDictLN_TClass),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__FtfPara_IsA_8_0,85,G__get_linked_tagnum(&G__FtfParaDictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__FtfPara_ShowMembers_9_0,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__FtfPara_Streamer_0_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Dictionary",1046,G__FtfPara_Dictionary_1_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("FtfPara",676,G__FtfPara_FtfPara_2_1,(int)('i'),G__get_linked_tagnum(&G__FtfParaDictLN_FtfPara),-1,0,1,1,1,0,"u 'FtfPara' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~FtfPara",802,G__FtfPara_wAFtfPara_3_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncFtfParaDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
extern "C" void G__cpp_setup_globalFtfParaDict() {

   /* Setting up global variables */
   G__resetplocal();


   G__resetglobalenv();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
extern "C" void G__cpp_setup_funcFtfParaDict() {
   G__lastifuncposition();


   G__resetifuncposition();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__FtfParaDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__FtfParaDictLN_FtfPara = { "FtfPara" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableFtfParaDict() {
  G__FtfParaDictLN_TClass.tagnum = -1 ;
  G__FtfParaDictLN_FtfPara.tagnum = -1 ;
}

extern "C" void G__cpp_setup_tagtableFtfParaDict() {

   /* Setting up class,struct,union tag entry */
   G__tagtable_setup(G__get_linked_tagnum(&G__FtfParaDictLN_FtfPara),sizeof(FtfPara),-1,0,(char*)NULL,G__setup_memvarFtfPara,G__setup_memfuncFtfPara);
}
extern "C" void G__cpp_setupFtfParaDict() {
  G__check_setup_version(51111,"G__cpp_setupFtfParaDict()");
  G__set_cpp_environmentFtfParaDict();
  G__cpp_setup_tagtableFtfParaDict();

  G__cpp_setup_inheritanceFtfParaDict();

  G__cpp_setup_typetableFtfParaDict();

  G__cpp_setup_memvarFtfParaDict();

  G__cpp_setup_memfuncFtfParaDict();
  G__cpp_setup_globalFtfParaDict();
  G__cpp_setup_funcFtfParaDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncFtfParaDict();
  return;
}
class G__cpp_setup_initFtfParaDict {
  public:
    G__cpp_setup_initFtfParaDict() { G__add_setup_func("FtfParaDict",&G__cpp_setupFtfParaDict); }
   ~G__cpp_setup_initFtfParaDict() { G__remove_setup_func("FtfParaDict"); }
};
G__cpp_setup_initFtfParaDict G__cpp_setup_initializerFtfParaDict;

