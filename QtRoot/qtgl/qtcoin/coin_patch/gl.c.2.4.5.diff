--- ./glue/gl.c.orig	2006-10-18 11:11:12.000000000 -0400
+++ ./glue/gl.c	2006-10-18 13:41:45.000000000 -0400
@@ -347,16 +347,7 @@
 #endif /* GL_COLOR_TABLE_WIDTH_EXT */
 
 /* ********************************************************************** */
-static inline GLenum coin_get_gl_error() {
-   GLenum glerr = GL_NO_ERROR
-   static int GlErrorOn = -1;
-   if (GlErrorOn  == -1 ) {
-      GlErrorOn = 0;
-      if (coin_getenv("COIN_CHECK_GL_ERROR")
-            GlErrorOn = 1; 
-   }
-   return glerr;
-}
+
 /* Resolve and return the integer value of an environment variable. */
 static int
 glglue_resolve_envvar(const char * txt)
@@ -365,6 +356,30 @@
   return val ? atoi(val) : 0;
 }
 
+/* Look up the GL error as soon as  env COIN_CHECK_GL_ERROR is defined    */
+static inline GLenum
+glglue_geterror() {
+   GLenum glerr = GL_NO_ERROR;
+   static int GLErrorOn = -1;
+   if (GLErrorOn  == -1 ) {
+#ifdef COIN_DEBUG
+      GLErrorOn = glglue_resolve_envvar("COIN_NO_CHECK_GL_ERROR") ? 0 : 1;
+#else
+      GLErrorOn = glglue_resolve_envvar("COIN_CHECK_GL_ERROR");
+#endif
+      cc_debugerror_postwarning("glglue_geterror",
+                                  "glGetError has been set %d", GLErrorOn );
+   }
+   if (GLErrorOn) glerr = glGetError();
+   return glerr;
+}
+
+/* An external interface to look up the GL error  */
+GLenum
+cc_glue_glGetError() {
+  return glglue_geterror();
+}
+
 /* Returns whether or not COIN_GLGLUE_SILENCE_DRIVER_WARNINGS is set
    to a value > 0. If so, all known driver bugs will just be silently
    accepted and attempted worked around. */
@@ -2094,7 +2109,7 @@
      * current OpenGL context. */
     gi->versionstr = (const char *)glGetString(GL_VERSION);
     assert(gi->versionstr && "could not call glGetString() -- no current GL context?");
-    assert(glGetError() == GL_NO_ERROR && "GL error when calling glGetString() -- no current GL context?");
+    assert(glglue_geterror() == GL_NO_ERROR && "GL error when calling glGetString() -- no current GL context?");
 
     glglue_set_glVersion(gi);
     glxglue_init(gi);
@@ -4145,7 +4160,7 @@
 
     const GLubyte * str = glGetString(GL_VERSION);
     assert(str && "could not call glGetString() -- no current GL context?");
-    assert(glGetError() == GL_NO_ERROR && "GL error when calling glGetString() -- no current GL context?");
+    assert(glglue_geterror() == GL_NO_ERROR && "GL error when calling glGetString() -- no current GL context?");
 
     (void)fprintf(stdout, "glGetString(GL_VERSION)=='%s'\n", str);
     (void)fprintf(stdout, "glGetString(GL_VENDOR)=='%s'\n", glGetString(GL_VENDOR));
@@ -4762,12 +4777,12 @@
 coin_catch_gl_errors(cc_string * str)
 {
   unsigned int errs = 0;
-  GLenum glerr = glGetError();
+  GLenum glerr = glglue_geterror();
   while (glerr != GL_NO_ERROR) {
     if (errs > 0) { cc_string_append_char(str, ' '); }
     cc_string_append_text(str, coin_glerror_string(glerr));
     errs++;
-    glerr = glGetError();
+    glerr = glglue_geterror();
   }
   return errs;
 }
