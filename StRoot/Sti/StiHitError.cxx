//StiHitError.h
//Andrew Rose, Wayne State University
//01.21.2002

/*! \class StiHitErrorMaker
  The hit errors are ideally derived purely from the geometry of the
  detector; error(x)=(cell size length in x)/::sqrt(12). However, realistic 
  hit errors are often calculated from the hit residuals.

  The ITTF hit errors can be assigned using either the default geometric
  calculation or the real calculated errors. The state of assigned errors
  is determined from the boolean errorDefault; use of default errors will
  also generate an error message.

  Real errors are generated by fitting and parameterizing a histogram of
  hit residuals in 3D (radius, dip angle, and drift time). In the future, 
  the user can either pass the hist directly, or pass a fit from such a 
  histogram. The original parameterization method used in Tpt is 
  determined by StRedsidualMaker and implemented in tpt_hit_uncert, both
  by Mike Lisa. The method used here closely follows his code.

  For details of Mike's analysis of the hit errors, see his web page:
  http://www.star.bnl.gov/~lisa/HitErrors (Mar 14, 2001)

  \author A. A. Rose (Wayne State)

*/

#include <cmath>
#include "StiHitError.h"

#define DEG2RAD 57.2958

StiHitError::StiHitError()
{/*If using the default constructor, user must set own parameters through
   the functions setIntrinsic, setDrift, and setTan
 */

  //Do Nothing!
}

StiHitError::StiHitError(double iCross, double dCross, double tCross, 
			 double iDip, double dDip, double tDip)
{/*Constructor initializes parameters to passed values. Values should be
   passed as: Crossing angle intrinsic sigma, crossing angle drift sigma,
   crossing angle (crossing sigma).
 */
  setIntrinsic(iCross, iDip);
  setDrift(dCross, dDip);
  setTan(tCross, tDip);
}

StiHitError::~StiHitError(){}

double StiHitError::getDipError(double z, double angle)
{
  //translate from z to drift length
  double mDlen = dlen(z);
  double dEr = calcEr(intrinsicDip, driftDip, tanDip, mDlen, angle);
  return dEr;
}

double StiHitError::getCrossError(double z, double angle)
{
  //translate from z to drift length
  double mDlen = dlen(z);
  double dEr = calcEr(intrinsicCross, driftCross, tanCross, mDlen, angle);
  return dEr;
}

double dlen(double z)
{//Calculate the drift length from the z coordinate of the hit
  return (200. - z);
}
double StiHitError::calcEr(double intr, double drift, double stan, 
			   double dlen, double angle)
{
  double rang = angle/DEG2RAD;
  double cosa = cos(rang);
  double tana = tan(rang);
  double calE = ::sqrt(intr + drift*dlen/(cosa*cosa) + stan*(tana*tana));
  
  return calE;
}

void StiHitError::setIntrinsic(double iDip, double iCross)
{
  intrinsicCross=iCross;
  intrinsicDip  = iDip;
}

void StiHitError::setDrift(double iDip, double iCross)
{
  driftCross=iCross;
  driftDip  = iDip;
}

void StiHitError::setTan(double iDip, double iCross)
{
  tanCross=iCross;
  tanDip  = iDip;
}







