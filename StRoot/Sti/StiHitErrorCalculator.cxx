//StiHitError.h
//Andrew Rose, Wayne State University
//01.21.2002

/*! \class StiHitErrorMaker

  Real errors are generated by fitting and parameterizing a histogram of
  hit residuals in 3D (radius, dip angle, and drift time). The original 
  parameterization method used in Tpt is determined by StRedsidualMaker 
  and implemented in tpt_hit_uncert, both by Mike Lisa. The method used 
  here closely follows his code.

  For details of Mike's analysis of the hit errors, see his web page:
  http://www.star.bnl.gov/~lisa/HitErrors (Mar 14, 2001)

  The default error function returns a zero error over all space. This 
  should allow easier error checking for pathalogic and error behavior.


  \author A. A. Rose (Wayne State)
  \date 2.20.2002
*/

#include <utility>
using std::pair;
#include <cmath>
#include <iostream>

//Root includes
#include "TF2.h"

//StiIncludes
#include "StiIOBroker.h"
#include "StiDetector.h"
#include "StiHit.h"
#include "StiHitErrorCalculator.h"

class StiIOBroker;
class TF2;
class StiHit;
class StiDetector;

#define DEG2RAD 57.2958

StiHitErrorCalculator::StiHitErrorCalculator(){
}
StiHitErrorCalculator::~StiHitErrorCalculator(){
}

StiHitErrorDefault::StiHitErrorDefault()
     :mIOBroker(StiIOBroker::instance()), mSubject(StiIOBroker::instance()),
      fTpcSource(0), fSvtSource(0), fFtpcSource(0), 
      fTpcCrossParameterization((TF2*)NULL),fTpcDipParameterization((TF2*)NULL),
      fSvtParameterization((TF2*)NULL), fFtpcParameterization((TF2*)NULL)
{
  mSubject->attach(this);
  getNewState();

  Init();
}

StiHitErrorDefault::~StiHitErrorDefault()
{
  //delete StiHitError Functions
  //disconnect from IO Broker
    if (mSubject) {
	mSubject->detach(this);
    }
}

void StiHitErrorDefault::Init()
{//set parameters from IOBroker->Database or defaults
  

  //set default error function
  TF2* defaultFunc = new TF2("zero","0.");        //reutrns 0 over all space

  //get TPC parameters from database
  //no brokered io for now, set function to a default string
  SetTpcDipParameterization(new TF2("tpcdip","1.68243e-03+5.23272e-05*(200.-x)/cos(y/57.2958)+5.75341e-02*(tan(y/57.2958)*tan(y/57.2958)"));
  SetTpcCrossParameterization(new TF2("tpccross","3.12735e-03+1.51055e-04*(200.-x)/cos(y/57.2958)+2.43806e-02*(tan(y/57.2958)*tan(y/57.2958)"));

  //get Ftpc parameters from database
  SetFtpcParameterization(defaultFunc);

  //get SVT parameters from database
  SetSvtParameterization(defaultFunc);

}

//get methods
pair<double, double> StiHitErrorDefault::getHitError(StiHit* mHit, double cross, double dip)
{
  float ecross=0., edip=0.;

  //retrieve detector info and set function pointer
  const string& thisDet=mHit->detector()->getName();
  if(thisDet=="TPC")
    {
      ecross=fTpcCrossParameterization->Eval(mHit->z(), cross);
      edip=fTpcDipParameterization->Eval(mHit->z(), dip);
    }
  else if (thisDet=="FTPC")
    {
      ecross=fFtpcParameterization->Eval(mHit->z(), cross);
      edip=fFtpcParameterization->Eval(mHit->z(), dip);
    }
  else if (thisDet=="SVT")
    {
      ecross=fSvtParameterization->Eval(mHit->z(), cross);
      edip=fSvtParameterization->Eval(mHit->z(), dip);
    }
  else       
    {
      cout <<"StiHitErrorDefault::getHitError: \n"
	   <<"\t Request for errors of unsupported detector."<<endl;
    }

   

  return pair<double, double>(ecross,edip);
}


int StiHitErrorDefault::querySource(StiHit* mHit)
{

  const string& thisDet=mHit->detector()->getName();
  if(thisDet=="TPC")
    {
      return (fTpcSource);
    }
  else if (thisDet=="FTPC")
    {
      return (fFtpcSource);
    }
  else if (thisDet=="SVT")
    {
      return (fSvtSource);
    }
  else
    {
      cout << "StiHitErrorDefault::querySource: Error\n"
	   << "\t Query hit error status for undefined detector: "
	   << mHit->detector() <<endl;
      return -1;
    }
}

//set methods
void StiHitErrorDefault::userSetParameterization(StiDetector* mDetector, TF2* mFunc)
{
  const string& thisDet=mDetector->getName();
  if(thisDet=="TPC")
    {
      SetTpcSource(2);
      SetTpcDipParameterization(mFunc);
      SetTpcCrossParameterization(mFunc);
    }
  else if (thisDet=="FTPC")
    {
      SetFtpcSource(2);
      SetFtpcParameterization(mFunc);
    }
  else if (thisDet=="SVT")
    {
      SetSvtSource(2);
      SetSvtParameterization(mFunc);
    }
  else
    {
      cout <<"StiHitErrorCalculator::userSetParameterization: \n"
           <<"\t Error! Attepmt to set parameters for unknown detector "
	   <<mDetector->getName()<<endl;
    }
}


void StiHitErrorDefault::SetTpcSource(int mSource)  {fTpcSource=mSource;}
void StiHitErrorDefault::SetFtpcSource(int mSource) {fFtpcSource=mSource;}
void StiHitErrorDefault::SetSvtSource(int mSource)  {fSvtSource=mSource;}

void StiHitErrorDefault::SetTpcDipParameterization(TF2* newF)
{
  fTpcDipParameterization=newF;
}

void StiHitErrorDefault::SetTpcCrossParameterization(TF2* newF)
{
  fTpcCrossParameterization=newF;
}

void StiHitErrorDefault::SetSvtParameterization(TF2* newF)
{
  fSvtParameterization=newF;
}

void StiHitErrorDefault::SetFtpcParameterization(TF2* newF)
{
  fFtpcParameterization=newF;
}
