// $Id: StEmcGainMonitor.h,v 1.7 2003/01/11 23:34:50 suaide Exp $
// $Log: StEmcGainMonitor.h,v $
// Revision 1.7  2003/01/11 23:34:50  suaide
// added back. Deleted by mistake before
//
// Revision 1.5  2002/12/02 21:30:56  suaide
// New EMC calibration maker
//
// Revision 1.1  2001/12/29 20:33:51  suaide
// added documentation
//
// Revision 1.3  2001/10/26 21:00:33  suaide
// Many modifications to optimize for real data

/*!\class StEmcGainMonitor
\author Alexandre A. P. Suaide

This class check BEMC towers gain variation from production QA histograms.
It uses tower spectra histogram generated by StEmcADCtoEMaker as input
*/

#ifndef STAR_StEmcGainMonitor
#define STAR_StEmcGainMonitor

#include "TH2.h"
#include "TH2.h"
#include "TString.h"
//#include "tables/St_emcTowerGain_Table.h"
#include "StEmcEqualSpectra.h"

class StEmcGainMonitor : public TObject 
{
  private: 
            StEmcEqualSpectra *mSpec;
            TString      mDir[100];
            TString      mFiles[10000];
            TString      mTimeStamp[10000];
            Int_t        mNDir;
            Int_t        mNFiles;
            Int_t        mReference;
            Float_t      mAvgRef[4800];
            Float_t      mRmsRef[4800];
            Float_t      mStatRef[4800];
            Float_t      mGain[4800];
            Float_t      mGainErr[4800];
            
            TH2F*        mHistGain;
            Float_t      mAdc1,mAdc2;
            Int_t        mMode;
    
  public: 
                      StEmcGainMonitor();///< Default constructor 
    virtual           ~StEmcGainMonitor();///< Default destructor 
    
            Bool_t    ProcessFiles();///< Process histogram files 
            void      CalculateRefGain(Int_t);
            void      CalculateGain(Int_t);
            void      SaveHist(char*);
            
            void      ClearDir()              { mNDir = 0; }///< Clear directory list 
            void      ClearFileList()         { mNFiles = 0;}
            void      AddDir(char* f)         { mDir[mNDir] = f; mNDir++; }  ///< Add histogram directory from production   
            
            void      SetLimits(Float_t a, Float_t b) { mAdc1 = a; mAdc2 = b; }
            void      SetMode(Int_t a)        { mMode = a; }
            void      SetGainFile(Int_t i, char* file, char* time) { mFiles[i] = file; mTimeStamp[i] = time; }
            
            Int_t     GetNDirEntries()        { return mNDir; }///< Get number of directories entries 
            Float_t   GetAvgRef(Int_t id)     { return mAvgRef[id-1];}
            Float_t   GetRmsRef(Int_t id)     { return mRmsRef[id-1];}
            Float_t   GetGain(Int_t id)       { return mGain[id-1];}
            char*     GetDirEntry(Int_t i)    { return (char*)mDir[i].Data(); } ///< Get dir entry
   ClassDef(StEmcGainMonitor, 1)  
};

#endif
