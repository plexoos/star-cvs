// $Id: StEmcGainMonitor.h,v 1.3 2002/06/26 02:09:17 jklay Exp $
// $Log: StEmcGainMonitor.h,v $
// Revision 1.3  2002/06/26 02:09:17  jklay
// Gain calculated from ped-subtracted mean above 30 ADC counts
//
// Revision 1.2  2002/05/22 18:50:38  jklay
// Fixed bug in the way emcTowerGain table is filled
//
// Revision 1.1  2001/12/29 20:33:51  suaide
// added documentation
//
// Revision 1.3  2001/10/26 21:00:33  suaide
// Many modifications to optimize for real data

/*!\class StEmcGainMonitor
\author Alexandre A. P. Suaide

This class check BEMC towers gain variation from production QA histograms.
It uses tower spectra histogram generated by StEmcADCtoEMaker as input
*/

#ifndef STAR_StEmcGainMonitor
#define STAR_StEmcGainMonitor

#include "TH2.h"
#include "TH2.h"
#include "TString.h"
#include "tables/St_emcTowerGain_Table.h"

class StEmcGainMonitor : public TObject 
{
  private: 
    TH2F            *m_Tower;    //!
    TH2F            *m_TowerSubPed;    //!Pedestal subtracted version of m_Tower
    TH2F            *m_TowerMean;//!
    TH2F            *m_TowerRMS; //!
    TH2F            *m_TowerRelGain;//!For Mean>30
    TH2F            *m_TowerRelGainDayByDay;//!For ADC>30/ADC>0
    TH2F            *m_TowerRelGain1;//!For Mean>30
    TH2F            *m_TowerRelGainDayByDay1;//!For ADC>80/ADC>30
    TH2F            *m_TowerTmp; //!

    St_emcTowerGain *gainTable;
    
    Int_t           runMode;
    
    TString         dir[300];
    TString         histFileName;
    Int_t           nDir;
    
    Int_t           baseday,baseyear;
    Int_t           nFilesMax;
    
    Bool_t          GetHist(const char*, const char*,Int_t&,Int_t&);
    void            GetYearDay(const char*,Int_t&,Int_t&);
    void            CalcMeanRMS(Int_t,Int_t,Int_t);
    void            SubtractPedestal();
    void            Init();
    void            WriteTower();
    void            WriteMeanRMS();
    
  public: 
                      StEmcGainMonitor();///< Default constructor 
    virtual           ~StEmcGainMonitor();///< Default destructor 
            Bool_t    ProcessFiles();///< Process histogram files 
            void      SetHistFileName(char* f){ histFileName = f; }///< Set output file name 
            void      SetRunMode(Int_t i)     { runMode = i;}///< Set run mode 
            void      AddDir(char* f)         { dir[nDir] = f; nDir++; }  ///< Add histogram directory from production   
            void      ClearDir()              { nDir = 0; }///< Clear directory list 
            Int_t     GetNDirEntries()        { return nDir; }///< Get number of directories entries 
            char*     GetDirEntry(Int_t i)    { return (char*)dir[i].Data(); } ///< Get dir entry
            void      SetNFilesMax(Int_t i)   { nFilesMax=i; }///< Set max number of files to be processed on each directory
 
   ClassDef(StEmcGainMonitor, 1)  
};

#endif
