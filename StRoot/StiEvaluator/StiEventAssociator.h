//StiEventAssociator.h
//M.L. Miller (Yale Software)
//12/01

#ifndef StiEventAssociator_HH
#define StiEventAssociator_HH

#include <map>
using namespace std;

//We need this for struct trackPing
#include "StAssociationMaker/StAssociationMaker.h"
#include "StAssociationMaker/StTrackPairInfo.hh"

#include "StiTrackPairInfo.h"

class StiTrackAssociator;
class StiTrack;
class StMcTrack;
class StGlobalTrack;
class StiTrackContainer;
class StiTrackAssociator;

class StiEventAssociator
{
public:
    typedef pair<StTrackPairInfo*, StiTrackPairInfo> InfoPair;
    typedef multimap<StMcTrack*, InfoPair> McToInfoPairMap;
    typedef McToInfoPairMap::value_type McToInfoPairMap_ValType;
    ///Note: we use map and not multi-map for ITTF -> Mc relationship
    typedef map<StiTrack*,  InfoPair> StiToInfoPairMap;
    
    ///Singleton instance.  First call sets Association Maker pointer.
    static StiEventAssociator* instance(StAssociationMaker* a=0);

    ///We include this to avoid compiler warnings generated by singleton pattern.
    friend class nobody;

    ///Associate the entire event
    void associate(StMcEvent*);

    ///Access to the map keyed by Monte-Carlo track
    McToInfoPairMap& mcToInfoPairMap();

    ///Access to the map keyed by ITTF track
    StiToInfoPairMap& stiToInfoPairMap();
    
private:
    StiEventAssociator(); //Not implemented
    StiEventAssociator(StAssociationMaker*);
    virtual ~StiEventAssociator();
    
    static StiEventAssociator* sInstance;

private:
    void fillForFoundTrack(StiKalmanTrack*);
    void fillForMcTrack(StMcTrack* );

private:
    StAssociationMaker* mAssociationMaker;
    StiTrackAssociator* mTrackAssociator;
    StiTrackContainer* mTrackStore;
    StMcEvent* mMcEvent;
    
    McToInfoPairMap mMcKeyMap;
    StiToInfoPairMap mStiKeyMap;
};

//inlines

inline StiEventAssociator::McToInfoPairMap& StiEventAssociator::mcToInfoPairMap()
{
    return mMcKeyMap;
}

inline StiEventAssociator::StiToInfoPairMap& StiEventAssociator::stiToInfoPairMap()
{
    return mStiKeyMap;
}

#endif
