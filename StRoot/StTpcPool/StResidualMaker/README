StResidualMaker - mike lisa (lisa@mps.ohio-state.edu)

=============================================================================

                     PURPOSE

This little package generates TPC hit residual distributions in local-x and z
as a function of drift distance and crossing angle (alpha for local-x, lambda
for z).  Then, it generates 2D histograms of the RMS vs drift distance vs
crossing angle, and also Gaussian sigma vs those two variables. 

Then, it fits the width histograms to the functional form expected (see
e.g. Blum and Rolandi)

sigma^2 = sigma_int^2 +
          sigma_diff^2*ddrift/cos^2(angle) +
          sigma_cross^2*tan^2(angle)

where:
sigma_int is the "intrinsic" resolution
sigma_diff is the diffusion constant (transverse for local-x, longitudinal for z)
sigma_cross quantifies the effect finite crossing-angle and wire coupling

so, those three numbers should characterize the residuals.

The reason we do this is because hit-finders NEVER seem to be able to calculate
good hit uncertainties ("errors").  I believe this is a generic effect, and that
the only way to estimate the position uncertainty is by using information available
only at the _tracking_ (as opposed to hitfinding) level.  So, what we do in STAR
is to take the numbers above, and give them (thru database etc) to the tracker.
When the tracker is considering a hit, it knows crossing angles and drift distance,
and can assign a position uncertainty to that hit.

=============================================================================

                    How to use

To generate the distributions for study:
----------------------------------------
You need to be looking at STAR DSTs (event.root files) *WITH* the hits saved
(obviously).  Use the ROOT macro Residuals.C in the macros area of this package.
In Residuals.C, you can select the pT range you want to look at.  Usually only a
few thousand AuAu events are needed.  A file called ResidualMakerHistos.root will
be created.

After going through the events, you can then immediately analyze the distributions
without leaving root (see below).  Or...

If you quit root before analyzing the distributions:
----------------------------------------------------
You can re-configure the StResidualMaker (get all the histograms back) just
by going back into root4star and executing the simple macro ReadBack.C


To analyze the residual distributions and make cool pictures:
-------------------------------------------------------------
Run the macro FitAllSigmas.C which is also in the macros area.  Separately
for inner and outer sectors, and for local-x and z directions, and for globals
and primaries, it will fit the residual width distributions to the formula
above, make a nice picture (they will fly by, but don't worry, they get saved
as .gif files), and give you the three numbers you need.

You have to pass FitAllSigmas.C the pointer to the StResidualMaker.  It is called
"rm" and is in global scope.


If you want to change how the widths are calculated:
----------------------------------------------------
Well, go right ahead and edit the code!  For your convenience (OK, it's actually
for MY convenience), if you do this, you do NOT have to run through the event.root
files again.  Just
1) recompile (obviously)
2) go into root4star and execute ReadBack.C
3) say rm->Finish();    // this is important-- it recalculates the widths
4) you're good to go.


=============================================================================


KNOWN BUGS: (as of 23mar2002)
----------
* For "technical reasons" (i.e. Mike is not a very good programmer), there are
  several places where we instantiate new histograms, but never delete them.  So
  it's a memory leak.  Most of these places are documented in the code (as well
  as reasons why we do NOT delete them).  But this is only done at the analysis
  at the end, so it's not like we're wasting memory with each event.  So, there
  are no plans to fix it.  I just tell you, since root will yell about memory leaks.

* This code was originally used on year-1 data, and worked dandy.  To calculate
  the residuals, it propogates using the helix of the StTrack.
  (track->geometry()->helix())
  Well, this works fine for globals, whose points are all inside the TPC.  But
  primaries now include the primary vertex as a point, and the helix parameters
  (e.g. curvature) account for the energy loss in beampipe, SVT, etc.  The result
  is that the residuals-- at least the way I calculate them-- are all screwed up
  for the primaries.  The fix to this is to use the "outer helix" for the
  primaries (track->outerGeometry()->helix()).  I will fix (and test) this soon...
  But again, it's not a big deal-- you can do everything with the globals.

=============================================================================

