/**

\mainpage TTM - tpc Track to  endcap Tower Matcher
	        \image html  logo.jpg "TTM"
	        \image latex logo.eps "TTM" width=3cm
\author Piotr A. Zolnierczuk
\date    created 2003/12/08
\version 2.1


\section intro Introduction
    This a set of MuDST based classes intended to facilitate TPC track to EEMC tower matching.
They are also used to calibrate EEMC towers with MIPs and electrons.

The main class is EEmcTTMMaker and there are additional classes 
as EEmcTower, EEmcTTMatch and EEmcTTDisplay.
	

\section algorithm Matching algorithm
Here's an outline of the matching algorithm (see also EEmcTTMMaker::Make) is as follows:
	
1. Events with CTB sum greater than MaxCTBsum (EEmcTTMMaker::SetMaxCTBSum) are rejected.
    
2. Build a list of good tracks for a given event. The tracks are accepted 
via EEmcTTMMaker::AcceptTrack:
     - use only TPC tracks
     - use only primary tracks  (type() == primary, see StEvent manual for information)
     - flag() \> 0        (see StEvent manual for information)
     - number of hits per track  \>= MinTrackHits   (EEmcTTMMaker::SetMinTrackHits)
     - track  length   \>= MinTrackLength           (EEmcTTMMaker::SetMinTrackLength)
     - track transverse momentum >= MinTrackPt     (EEmcTTMMaker::SetMinTrackPt)
     - MinTrackEta <= track pseudorapidity at the origin <= MaxTrackEta 
(EEmcTTMMaker::SetMinTrackEta and EEmcTTMMaker::SetMaxTrackEta)

3. Loop over all EEMC tower hits with adc value above the pedestal
For each tower try to match a track at a set of preselected depths z_1,z_2,...
(see EEmcTTMMaker::AddZPosition and EEmcTTMMaker::ResetZPositionsArray):
	- extrapolate a track to a depth z_i (i.e. find an intersection r_i of a track with a plane z=z_i) with EEmcTTMatch::ExtrapolateToZ)
	- if the distance from the intersection point to the tower center in phi and eta is smaller than a predefined fractions (EEmcTTMMaker::SetDeltaPhiCut and EEmcTTMMaker::SetDeltaEtaCut) of the corresponding tower half-witdh the track is said to match a tower at a depth z_i  (EEmcTTMMaker::MatchTrack). To be more explicit:
		- r_i    - the intersection point of a track point with a plane z=z_i
		- r_tw   - tower center
		- tw_eta - tower half witdth in pseudorapidity
		- tw_phi - tower half witdth in phi
		- f_eta  - distance cut in eta (EEmcTTMMaker::SetDeltaEtaCut)
		- f_phi  - distance cut in phi (EEmcTTMMaker::SetDeltaPhiCut)
		- track matches a tower at depth z_i if	
\code
	(r_i.eta - r_tw.eta) < f_eta*tw_eta AND (r_i.phi - r_tw.phi) < f_phi*tw_phi
\endcode
	- a track matches a tower if it matches a tower at \b each of the predefined depths
	 
4. If a match is found a tower with a list of matched tracks is added to the list of matches, which is accessible with EEmcTTMMaker::GetMatchList.



\section params Parameters
Here is a list of the default values. Each parameter is changeable via corresponding SetXXX method.

    \subsection eventparams Event selection parameters
    - CTB sum is no greater than EEmcTTMMaker::kDefMaxCTBsum

    \subsection trackparams Track selection parameters
    - track has at least EEmcTTMMaker::kDefMinTrackHits hist
    - track is at least  EEmcTTMMaker::kDefMinTrackLength cm long
    - track pt is at least EEmcTTMMaker::kDefMinTrackPt GeV
    - track pseudorapidity at the origin is at least EEmcTTMMaker::kDefMinTrackEta
    - track pseudorapidity at the origin is no greater than EEmcTTMMaker::kDefMaxTrackEta

    \subsection matchparams Track matching parameters
    - track must be no further than EEmcTTMMaker::kDefDeltaPhiCut x tower phi-half-width 
from the tower center
    - track must be no further than EEmcTTMMaker::kDefDeltaEtaCut x tower eta-half-width 
the tower center
    - tracks are matched at the following depths (cf. StRoot/StEEmcUtil/EEmcGeom/EEmcGeomDefs.h)
      - pres=kEEmcZPRE1+0.1cm
      - post=kEEmcZPOST-0.1cm 
      - smd=kEEmcZSMD

\section results Matching Results
EEmcTTMMaker main "product" is a list of EEmcTTMatch'es which in turn is a EEmcTower object plus a list of StMuTrack's that fullfill the above mentioned criteria. 
One can also ask EEmcTTMMaker to produce a nanodst ROOT file (ndst.root) with a ttm tree which contains four branches: 
	- matches - list of matches 
	- info    - a copy of StEventInfo from muDST
	- summary - a copy of StEventSummary from muDST
	- trigger - a copy of StMuTriggerIdCollection from muDST

See also macro readnanodst.C for in Section \ref exampleread for an example how to read nanodst.

Here are some examples of matched tracks (from Run2003)
        \image html  snapshot.jpg "Screen Shot"
        \image html  eemc.jpg "Multi-track event"
        \image latex eemc.eps "Multi-track event" width=10cm



\section example Example
\subsection examplecreate Using EEmcTTMMaker

\include ttmexample.C



\subsection exampleread   Reading Nano DST file

\include readndst.C	
     

\section mainremarks Remarks
\todo write additional makers that would produce electron and MIP calibrations
\todo more documentation?


*/

