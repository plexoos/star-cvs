-*- mode:outline -*-
Time-stamp: <00/08/24 12:41:19 calderon>

* StEventUtitites
  This repository contains small to moderate sized
  analysis utilities and helper functions/classes
  based on StEvent. Other than in StEvent there is
  no restriction on DB access and use of external
  libraries.
  This file is best edited with (x)emacs.

* Conventions
  All Header files should start with "Stu" instead of
  "St" to avoid name conflicts ("u" for utilities).
  Standard STAR coding rules apply.
  The rest is pretty much up to the author. Important
  is that the class/function must be documented
  in the README file (i.e. this file). Please see the
  template at the end of the file.
  Please no 'makers'!
  If you want to modify an existing utility which was
  not entered by yourself please contact the author
  before you submit you changes.

* List of Available Utilities

** StuCounter: Functions to count selected global/primary tracks
----------------------------------------------------------------
Files:       StuCounter.hh
Author:      Thomas Ullrich
Date:        Nov 15, 1999
Description:
Set of functions which perform simple counting
tasks. All functions are inline function and one
only needs to include the header file to use them.
No need to link with any library.

Syntax:
       unsigned int numberOfTracks(StEvent& evt, StTrackType ttyp,
                                   unsigned int minHits = 0);
Returns number of tracks in event 'evt' of type 'ttyp' (global/primary)
with greater or equal 'minHits' hits. 'minHits' default to 0.

There are two related specialised functions for the two track types:
       unsigned int numberOfGlobalTracks(StEvent& evt, unsigned int minHits = 0);
       unsigned int numberOfTracks(StEvent& evt, unsigned int minHits = 0);
Examples:
       int n = numberOfTracks(evt, global);
       int m = numberOfGlobalTracks(evt);       // same as above
       int k = numberOfPrimaryTracks(evt, 10);  // all primary tracks with >= 10 hits
       int j = numberOfTracks(evt,primary, 10); // same as above


** StuCutEvent and StuCutTrack: Classes for applying StEvent cuts
-----------------------------------------------------------------
Files:       StuCutTrack.hh, StuCutTrack.cxx,
             StuCutEvent.hh, StuCutEvent.cxx 
Author:      Art Poskanzer, LBNL
Date:        Dec 1999
Description:

All functions and data members are static. Therefore, there is no need
to instantiate. Just use StuCutEvent::func(); or
StuCutTrack::func();. The reason for making them static was to keep
count of the number of events and tracks removed by each cut. Call the
PrintCutList functions in Finish to print these counters.

Right now the event cuts are on multiplicity and primary vertex position.
The track cuts are on fit points and the ratio of fit point to max points.
It is set up so that other cuts can be easily added. If lo >= hi on a cut
the cut is not applied.

In CheckEvent and CheckTrack the calling argument is a pointer to the event
or track.

CutTrack also stores the number of tracks with positive and negative
pseudorapidity. In CheckEvent::CheckEtaSymmetry these counters are used to 
calculate (Pos - Neg) / (Pos + Neg) and put a cut on this ratio. The purpose
is to eliminate beam-gas background where most of the particles would go one
way or the other.


** StuProbabilityPidAlgorithm: Class for Particle Identification
-----------------------------------------------------------------
Files:       StuProbabilityPidAlgorithm.h, StuProbabilityPidAlgorithm.cxx
Author:      Aihong Tang, Kent State University 
             Richard Witt (FORTRAN version), Kent State University
Date:        March 2000
Description:

StuProbabilityPidAlgorithm is a functor inherited from StPidAlgorithm.
It can give three most likehood particletypes for a given track in StEvent.

It depends on a set of parmeters, which can be read in from database or 
from the current working directory.

For detail usage, go to tutorial section of:
StRoot/StPidAmpMaker/doc/index.html

** StuFixTopoMap: Used to fix the MDC3 files with a wrong topology map
------------------------------------------
Files:       StuFixTopoMap
Author:      Thomas Ullrich, Mike Miller
Date:        June 14, 2000
Description:
Some of the MDC3 files have a wrong topology map
for primary tracks.  This implements a fix of the
topology map after the fact.  Note that it can only
use information at the StEvent level, so it is essentially
a map of the of points NOT of the FIT
points (which is the one that primary tracks have 
by default).

There is no header file, for this function, so
one needs to define a prototype when one wants 
to use the function

bool StuFixTopoMap(StTrack* track);

and then load the StEventUtilities shared library
to get it in your analysis session.

** StuRefMult: Function to return a standard event multiplicity
----------------------------------------------------------------
Files:       StuRefMult.hh
Author:      Manuel Calderon de la Barca Sanchez
Date:        Aug 24, 2000
Description:
Function to give a standard reference multiplicity for                   
an event, uncorrected of course.  The agreed upon cuts are:              
primary tracks only                                                      
flag > 0                                                                 
charge < 0                                                               
fit points >= 10                                                         
abs(eta) < 0.5                                                           
dca < 3 cm                                                               
The header file just contains an inline function and one
only needs to include the header file to use it.
No need to link with any library.

Example:

unsigned int mult = uncorrectedMultiplicity(evt);

** StuJitterBug: Function to Abort a T0 jitter event
----------------------------------------------------
Files:       StuJitterBug.hh
Author:      Peter G. Jones
Date:        Sep 20, 2000
Description:
Contains a function which can be called to detect events in
which the CTB signal is out of time (so-called T0 jitter).
The algorithm sums over all slats the CTB signal for the event
and the pre-sample preceding it. If the pre-sample is greater
than 1% of the event sample, the function returns kTRUE.
Else, it retruns kFALSE. Abort the event if kTRUE. You don't
need to load any library to use it, just include the header file.
Here's how:

#include "StuJitterBug.hh"

StEvent *event;
if( jitterBugAbort(event) ) return kStWarn;

<next entry comes here>


* Template
  Please use the following template for documentation.

** <UtilityName>: <very short description>
------------------------------------------
Files:       <list of files>
Author:      <authorsName>
Date:        <checkindate>
Description:
<your detailed description goes here ...>>>>>>>> 1.2

