README file for Transient OO Data Model developer.
Time-stamp: <99/01/14 15:07:50 ullrich> 

Package coordinator: Thomas Ullrich

Modification history
====================

01/30/1999 T. Wenaus
  - minor changes to table loader constructor interfaces
  - StTables/ => tables/ which is understood by standard makefiles
01/15/1999 T. Wenaus
  - table-based constructors added throughout so event can be loaded 
    from Objy or ROOT via tables
  - changed StEvent constructor to create its collections
  - StEventSummary renamed back to StDstEventSummary; it is the
    DST-level event summary
  - installed as package StEvent; include references #include "StEvent/"

01/14/1999 Original version. Author: Thomas Ullrich


Description
===========

Memory Management:
------------------
The tree has to be set up by hand, i.e. the elements have
to be created and assigned.
The whole event tree incl. all hits, tracks, vertices etc.
gets deleted when invoking the destructor of StEvent.
With other words:

StEvent event;

// setup event ...

delete event;     // removes the whole tree

There is currently one open question and that is if the instance
of StRun (referred to by StEvent) should be deleted or not.

Reference Counting
------------------
The StGlobalTrack::addXXXHit() and removeXXXHit() methods
automatically  manage the reference counting,
i.e. they increase or decrease the reference counter
of the referring hit (see StHit).
Hits associated with tracks *have* to be assigned only with
these functions (there's anyhow no otgher way ;-)).

Collection classes
------------------
All typedefs to Std. Lib containers incl. the iterators.
All hits are contained by value, tracks and vertices are
stored by pointer. The latter ones are stored in list<T>
containers, the other in vector<T>'s.
(list allow insertion and deletion in anywhere, vectors
don't). StVertexCollection *has* to store the elements
by pointer (polymorphism StVertex/StV0Vertex).

Missing stuff
-------------
TOF, RICH, pixels and probably much more.


Compiler flags
--------------
In order to get this stuff to compile MACROS have to
be defined. This is necessary to deal with the different
compiler versions. Here I adopted the MACROS already in use
in the StarClassLibrary.
I'm not sure if Victor put them already in the official
makefiles. Better mention them here anyway.
Not all are used in the data model but in the SCL (which is
used heavily).

i386_redhat50:       egcs > 1.02 or gcc > 2.8
                     -DST_NO_NUMERIC_LIMITS
                     -DST_NO_EXCEPTIONS
                     -DST_NO_NAMESPACES

i386_redhat51:       egcs > 1.02 or gcc > 2.8
                     -DST_NO_NUMERIC_LIMITS
                     -DST_NO_EXCEPTIONS
                     -DST_NO_NAMESPACES

i386_redhat52:       egcs > 1.02 or gcc > 2.8
                     -DST_NO_NUMERIC_LIMITS
                     -DST_NO_EXCEPTIONS
                     -DST_NO_NAMESPACES

hp_ux102:            no flags with aCC

sun4x_*:             CC4 with STARS ObjectSpace Version
		    -DST_NO_MEMBER_TEMPLATES -DST_NO_NUMERIC_LIMITS
		    -DST_NO_EXCEPTIONS -DST_NO_TEMPLATE_DEF_ARGS
		    -DST_NO_NAMESPACES

On Sun don't forget to set:
	STDHOME      := /afs/rhic/star/packages/ObjectSpace/2.0m
	CPPFLAGS     := -I$(STDHOME) -I$(STDHOME)/ospace/std 
        and link with -L$(STDHOME)/lib -lospace		

Tests done
----------
Compiles on hp_ux102 and sun4x. linux not tested yet.

Templates
---------
If needed the SCL template classes could be replaced, the
STL containers, iterators and algorithms used cannot.
Most of the list, vectors are typedef'ed since the lack
of template default arguments in SUN makes the definition
look confusing (allocator has to be added each time).

