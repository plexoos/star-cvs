<?xml version='1.0' encoding='UTF-8' ?>

<!-- This file should contain generic information to run a Data job. -->
<jobDescription>
    <jobType>
        <Pythia>
            <pythiaInit>
                <pyFrame  Comment=' Reference frame' widget='combobox'>CMS</pyFrame>
                <pyBeam   Comment=' Beam type      ' widget='combobox'>p</pyBeam>
                <pyTarget Comment=' Target type    ' widget='combobox'>p</pyTarget>
                <pyEnergy Comment=' Beam Energy    ' widget='entry'>200.0</pyEnergy>
            </pythiaInit>
        </Pythia>
    </jobType>

    <standardElements>
        <jobControl>
            <jobName widget='entry' id='jobName'>DataTesting</jobName>
            <outputDir widget='entry' id='outputDir'>$env(MYDATA)/Pythia/test</outputDir>
            <starLibVersion widget='entry' id='starLibVersion'>$env(STAR_VERSION)</starLibVersion>
            <localDir widget='entry' id='localDir'>[pwd]</localDir>
            <eventsPerJob widget='entry' id='eventsPerJob'>1000</eventsPerJob>
            <jobPurpose widget='text'>You should replace this text with the reason for this job.
            </jobPurpose>
        </jobControl>

        <!-- To drive everything we need an xml file for star-submit. -->
        <starSubmit nProcesses='20' simulateSubmission='true'>
            <command>
        starver <refer refersTo='starLibVersion'/>
        cd <refer refersTo='localDir'/>
        root4star -q -b <refer refersTo='outputDir'/>/scripts/doEStruct.C\(\"\",\"$SCRATCH\",\"<refer refersTo='outputDir'/>/scripts\",<refer refersTo='eventsPerJob'/>\)            </command>
            <stdout URL="file:OUTPUTDIR/logs/$JOBID.log"/>
            <output fromScratch="data/*.root" toURL="file:OUTPUTDIR/data/" />
            <output fromScratch="cuts/*.root" toURL="file:OUTPUTDIR/cuts/" />
            <output fromScratch="QA/*.root"   toURL="file:OUTPUTDIR/QA/" />
        </starSubmit>

        <!-- Need appropriate event cuts. -->
        <eventCuts>
            <eventCut Comment = 'centrality cut, number of tracks in |eta| &lt; 0.5'>
                <cutName>centrality</cutName>
                <Value widget = 'entry'>1</Value>
                <Value widget = 'entry'>50</Value>
            </eventCut>
            <eventCut Comment = 'number of tracks passing track cuts'>
                <cutName>numTracks</cutName>
                <Value widget = 'entry'>1</Value>
                <Value widget = 'entry'>50</Value>
            </eventCut>
        </eventCuts>

        <!-- And appropriate track cuts. -->
        <trackCuts>
            <trackCut Comment = 'charge cut'>
                <cutName>Charge</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
            <trackCut Comment = 'pt cut'>
                <cutName>Pt</cutName>
                <Value widget = 'entry'>0.15</Value>
                <Value widget = 'entry'>2.0</Value>
            </trackCut>
            <trackCut Comment = 'phi cut'>
                <cutName>Phi</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
            <trackCut Comment = 'eta cut'>
                <cutName>Eta</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
        </trackCuts>

        <!-- The doEStruct macro is complicated.
             The main part is in a generic file. -->
        <doEStructMacro>
            <analysisType id='analysisType' widget='entry'>StEStructFluctuation</analysisType>
            <libraries id='libraries' widget='none'>
    gSystem->Load("StEStructPoolEventGenerators");
    // pythia stuff
    gSystem->Load("libEG");
    gSystem->Load("libEGPythia6");
    gSystem->Load("libPythia6");
            </libraries>
            <centralities id='centralities' widget='entry'>1 4 7 10 14 25</centralities>
            <ptCentralities id='ptCentralities' widget='entry'>1 4 7 10 14 25</ptCentralities>
            <declareSimHistograms id='declareSimHistograms' widget='none'>;</declareSimHistograms>
            <centralityInEtaOne id='centralityInEtaOne' widget='entry'>true</centralityInEtaOne>
    <!-- Reader depends on type of data. -->
            <declareReader id='declareReader' widget = 'text'>
    char* jobid = gSystem->Getenv("JOBID");
    int jobId = 1;
    if (jobid) {
        char* ptr = strstr(jobid,"_");
        if (ptr) {
            ptr++;
            jobId = atoi(ptr)+1;
        }
    } else {
        jobId = 2;
    }
    TPythia6* pythia = new TPythia6();
<!--    char *kinematics = <variable refersTo='pyFrame'/>
    char *beam = <variable stringInLine='pyBeam'/>
    char *target = <variable stringInLine='pyTarget'/>
    char *energy = <variable stringInLine='pyEnergy'/>
    pythia-&gt;Initialize(kinematics,beam,target,energy);
 -->
    pythia-&gt;Initialize("CMS","p","p",200);

    int timestamp = time(NULL);
    int iseed = (int)((float)timestamp/(float)jobId);

    pythia-&gt;SetMRPY(1,iseed);
    pythia-&gt;SetMRPY(2,0); 
    cout&lt;&lt;"&lt;seedValue&gt;"&lt;&lt;iseed&lt;&lt;"&lt;/seedValue&gt;"&lt;&lt;endl;

    //  reader = reader interface + pointer to Data Maker + cut classes

    StEStructPythia** readers = new StEStructPythia*[numberOfAnalyses];
    for (int i=0;i&lt;numberOfAnalyses;i++) {
        int mCent = i;
        if (!strcmp(analysisType,"StEStructFluctuation") &amp;&amp; numberOfAnalyses == 1) {
            mCent = -1;
        }
        readers[i] = new StEStructPythia(pythia,ecuts[i],tcuts[i],skipMake[i],centralityInEtaOne,mCent,-1);
    }
            </declareReader>
            <fillSimHistograms id='fillSimHistograms' widget = 'none'>;</fillSimHistograms>
            <saveSimHistograms id='saveSimHistograms' widget = 'none'>;</saveSimHistograms>
        </doEStructMacro>

    </standardElements>
</jobDescription>
