<?xml version='1.0' encoding='UTF-8' ?>

<!-- This file contains the doEStruct macro fragment needed for an EStruct
     analysis job. This macro is shared between different types of analysis.
     I keep the common code here so changes propagate everywhere they should. -->

<!-- I am getting a cr when I resolve a variable which causes the
     ending ;, " and/or } to be on the following line.
     To deal with this I put these characters into the transformation.
     Seems awkward. Also end up with ""; lines in cases where the
     variable is empty. -->
<jobDescription>
    <standardElements>
        <doEStructMacro>

            <main widget='text'>
void doEStruct( const char* filelist,
                const char* outputDir,
                const char* scriptDir,
                int maxNumEvents = 1000 ) {

    char cutFile[1024];
    char buffer[1024];

    const char* scratchDir = <variable stringInLine='jobName'/>
    sprintf(cutFile,"%s/CutsFile.txt",scriptDir);

    gROOT-&gt;LoadMacro("load2ptLibs.C");
    load2ptLibs();
    gROOT-&gt;LoadMacro("getOutFileName.C");
    gROOT-&gt;LoadMacro("support.C");

    <variable refersTo='libraries'/>

    // simple (global) centrality definition ...not persistant to event file.
    StEStructCentrality* cent=StEStructCentrality::Instance();
    const double mbBins[] = <variable listOf='centralities'/>
    int mbNBins = <variable sumOf='centralities'/>
    cent-&gt;setCentralities(mbBins,mbNBins);
    <!-- Histograms to keep track of centrality definitions. -->
    TH1D *cenClass   = new TH1D("cenClass","cenClass",mbNBins,-1.5,mbNBins-0.5);
    TH1D *impactDefs   = new TH1D("impactDefs","impactDefs",mbNBins,0.5,mbNBins+0.5);
    for (int i=0;i&lt;mbNBins;i++) {
        impactDefs-&gt;Fill(i,mbBins[i]);
    }


    char *analysisType = <variable stringInLine='analysisType'/>

    const  double ptCut[] = <variable listOf='ptCuts'/>
    int mbNPts = <variable sumOf='ptCuts'/>
    const  double ptMultCut[] = <variable listOf='ptCentralities'/>
    int mbNPtBins = <variable sumOf='ptCentralities'/>

    <variable refersTo='cutModeInit'/>
    <variable refersTo='declarePtDefHistograms'/>

    <variable refersTo='declareSimHistograms'/>


    // Need an EStruct maker.
    StEStructAnalysisMaker *estructMaker = new StEStructAnalysisMaker(analysisType);

    // Set up the Analysis codes and initialize the cuts.

    bool centralityInEtaOne = <variable boolInLine='centralityInEtaOne'/>
//    char** dataDirs             = getDirNames("data",numberOfAnalyses);
//    char** cutDirs              = getDirNames("cuts",numberOfAnalyses);
//    char** QADirs               = getDirNames("QA",numberOfAnalyses);
    char** outputFile           = new char*[numberOfAnalyses];
    StEStructEventCuts** ecuts  = new StEStructEventCuts*[numberOfAnalyses];
    StEStructTrackCuts** tcuts  = new StEStructTrackCuts*[numberOfAnalyses];
    bool* skipMake = new bool[numberOfAnalyses];
    for(int i=0;i&lt;numberOfAnalyses;i++){
        ecuts[i]      = new StEStructEventCuts(cutFile);
        tcuts[i]      = new StEStructTrackCuts(cutFile);
        skipMake[i]   = true;
        if (!strcmp(analysisType,"StEStructFluctuation") &amp;&amp; numberOfAnalyses == 1) {
            outputFile[i] = getOutFileName(outputDir,scratchDir,"data","");
        } else {
            sprintf(buffer,"_cent%i",i);
            outputFile[i] = getOutFileName(outputDir,scratchDir,"data",buffer);
        }
    }
    skipMake[0] = false;

    <variable refersTo='declareReader'/>

    //  build the numberOfAnalyses readers and numberOfAnalyses analysis objects
    //  analysis = analysis interface and contains pair-cut object (needs file)
    for(int i=0;i&lt;numberOfAnalyses;i++){
        <variable refersTo='declareAnalysis'/>
        analysis[i]-&gt;setCutFile(cutFile,cent);
        analysis[i]-&gt;setOutputFileName(outputFile[i]);
        estructMaker-&gt;SetReaderAnalysisPair(readers[i],analysis[i]);
    }


    int istat=0, i=0;
    estructMaker-&gt;Init();
    estructMaker-&gt;startTimer();

    int counter=0;
    while (istat!=2) {

        istat=estructMaker-&gt;Make();

        int iCen;
        int iPtCen;
        <variable refersTo='getCurrentAnalysis'/>
        if (currentAnalysis &amp;&amp; currentAnalysis-&gt;mCurrentEvent) {
            iCen = currentAnalysis-&gt;mCurrentEvent-&gt;Centrality();
            cenClass-&gt;Fill(iCen);
            <variable refersTo='fillPtDefHistograms'/>
        }

        <variable refersTo='fillSimHistograms'/>

        i++; counter++;
        if (counter==100) {
            cout&lt;&lt;"doing event ="&lt;&lt;i&lt;&lt;endl;
            counter=0;
        }
        if ( maxNumEvents!=0 &amp;&amp; i&gt;=maxNumEvents ) {
            istat=2;
        }
    }
    estructMaker-&gt;stopTimer();
    char* statsFileName=getOutFileName(outputDir,scratchDir,"stats","");
    ofstream ofs(statsFileName);

    ofs&lt;&lt;endl;
    estructMaker-&gt;logAnalysisTime(ofs);
    estructMaker-&gt;logInputEvents(ofs);
    estructMaker-&gt;logOutputEvents(ofs);
    estructMaker-&gt;logOutputRate(ofs);

    for (int i=0;i&lt;numberOfAnalyses;i++) {
        sprintf(buffer,"cuts_cent%i",i);
        if (!strcmp(analysisType,"StEStructFluctuation") &amp;&amp; numberOfAnalyses == 1) {
            char *rootCutFile = getOutFileName(outputDir,scratchDir,"cuts","");
        } else {
            sprintf(buffer,"_cent%i",i);
            char *rootCutFile = getOutFileName(outputDir,scratchDir,"cuts",buffer);
        }
        TFile *tfc = new TFile(rootCutFile,"RECREATE");
        ecuts[i]-&gt;writeCutHists(tfc);
        tcuts[i]-&gt;writeCutHists(tfc);

        ofs&lt;&lt;"  *************** ";
        ofs&lt;&lt;" Cut Stats for Analysis Number = "&lt;&lt;i;
        ofs&lt;&lt;"  *************** "&lt;&lt;endl;
        ecuts[i]-&gt;printCuts(ofs);
        tcuts[i]-&gt;printCuts(ofs);

        <variable refersTo='pairCutsWrite'/>

        tfc-&gt;Close();
    }
    // 
    // --&gt; root QA file
    // Only fill QA for fluctuations.
    // Only have one object in this case.
    // Hijing impact parameter information is written to this file.
    // For correlation analysis of data this file will be empty.
    // 
    char *rootQAFile = getOutFileName(outputDir,scratchDir,"QA","");
    TFile *tfq = new TFile(rootQAFile,"RECREATE");
    <variable refersTo='savePtDefHistograms'/>
    <variable refersTo='saveSimHistograms'/>
    tfq-&gt;Close();

    estructMaker-&gt;Finish();
}
            </main>
        </doEStructMacro>
    </standardElements>
</jobDescription>
