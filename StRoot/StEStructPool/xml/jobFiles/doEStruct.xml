<?xml version='1.0' encoding='UTF-8' ?>

<!-- This file contains the doEStruct macro fragment needed for an EStruct
     analysis job. This macro is shared between different types of analysis.
     I keep the common code here so changes propagate everywhere they should. -->

<!-- I am getting a cr when I resolve a variable which causes the
     ending ;, " and/or } to be on the following line.
     To deal with this I put these characters into the transformation.
     Seems awkward. Also end up with ""; lines in cases where the
     variable is empty. -->
<jobDescription>
    <standardElements>
        <doEStructMacro>

            <main widget='text'>
void doEStruct( const char* filelist,
                const char* outputDir,
                const char* scriptDir,
                int maxNumEvents = 1000 ) {

    char cutFile[1024];
    sprintf(cutFile,"%s/CutsFile.txt",scriptDir);
    const char* jobName = <variable stringInLine='jobName'/>

    gROOT-&gt;LoadMacro("load2ptLibs.C");
    load2ptLibs();
    gROOT-&gt;LoadMacro("getOutFileName.C");
    gROOT-&gt;LoadMacro("support.C");
    <variable refersTo='libraries'/>

    // simple (global) centrality definition ...not persistant to event file.
    StEStructCentrality* cent=StEStructCentrality::Instance();
    const double mbBins[] = <variable listOf='centralities'/>
    int mbNBins = <variable sumOf='centralities'/>
    cent-&gt;setCentralities(mbBins,mbNBins);

    <variable listOf='keepZBuffers'/>
    <variable sumOf='keepZBuffers'/>

    <variable listOf='ptCuts'/>
    <variable sumOf='ptCuts'/>
    <variable listOf='ptCentralities'/>
    <variable sumOf='ptCentralities'/>

    <variable inLine='useImpactParameter'/>
    <variable inLine='useAllTracks'/>

    <variable inLine='cutMode'/>
    <variable inLine='analysisMode'/>
    <variable inLine='useGlobalTracks'/>
    <variable refersTo='declareAnalysis'/>

    // Need an EStruct maker.
    char *analysisType = <variable stringInLine='analysisType'/>
    StEStructAnalysisMaker *estructMaker = new StEStructAnalysisMaker(analysisType);

    // Set up the Analysis codes and initialize the cuts.

    // Not sure we need this AddDirectory stuff anymore.
    StEStructEventCuts* ecuts  = new StEStructEventCuts(cutFile);
    StEStructTrackCuts* tcuts  = new StEStructTrackCuts(cutFile);

    <variable stringInLine='pyFrame'/>
    <variable stringInLine='pyBeam'/>
    <variable stringInLine='pyTarget'/>
    <variable inLine='pyEnergy'/>
    <variable inLine='pyTune'/>

    <variable refersTo='declareReader'/>
    estructMaker-&gt;SetEventReader(reader);
                                                                                                                       
    // create the QAHist object (must come after centrality and cutbin objects)
    StEStructQAHists* qaHists = new StEStructQAHists(EventType);
    estructMaker-&gt;SetQAHists(qaHists);

    //  build the numberOfAnalyses readers and numberOfAnalyses analysis objects
    //  analysis = analysis interface and contains pair-cut object (needs file)
    for(int i=0;i&lt;numberOfAnalyses;i++) {
        <variable refersTo='allocateAnalysis'/>
    }
    estructMaker-&gt;SetAnalyses(analysis,numberOfAnalyses);


    estructMaker-&gt;Init();
    <variable stringInLine='weightsFile'/>
    if (strcmp(weightsFile,"") &amp;&amp; strcmp(weightsFile,"none")) {
        estructMaker->SetReactionPlaneAnalysis(weightsFile);
    }

    <variable inLine='sortEvents'/>
    <variable refersTo='preLoop'/>

    int counter=0, istat=0, i=0;
    while (istat!=2) {

        <variable refersTo='preEvent'/>
        istat=estructMaker-&gt;Make();

        i++; counter++;
        if (counter==200) {
            cout&lt;&lt;"doing event ="&lt;&lt;i&lt;&lt;endl;
            counter=0;
        }
        if ( maxNumEvents!=0 &amp;&amp; i&gt;=maxNumEvents ) {
            istat=2;
        }
        <variable refersTo='postEvent'/>
    }

    <variable refersTo='postLoop'/>

    // --&gt; statistics file
    ofstream ofs(getOutFileName(outputDir,jobName,"stats"));
    estructMaker-&gt;logAllStats(ofs);
    ecuts-&gt;printCuts(ofs);
    ecuts-&gt;printCutStats(ofs);
    tcuts-&gt;printCuts(ofs);
    tcuts-&gt;printCutStats(ofs);
    <variable refersTo='pairCutsWrite'/>
    ofs&lt;&lt;endl;
    ofs.close();

    // --&gt; root cut histogram file
    TFile *tfc = new TFile(getOutFileName(outputDir,jobName,"cuts"),"RECREATE");
    ecuts-&gt;writeCutHists(tfc);
    tcuts-&gt;writeCutHists(tfc);
    StEStructCutBin* cb = StEStructCutBin::Instance();
    cb-&gt;writeCutBinHists();
    tfc-&gt;Close();

    // --&gt; root QA histogram file
    estructMaker-&gt;writeQAHists(getOutFileName(outputDir,jobName,"QA"));

    // --&gt; Write out the data in the form of root histograms.
    estructMaker-&gt;Finish();
}
            </main>
        </doEStructMacro>
    </standardElements>
</jobDescription>
