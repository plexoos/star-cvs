<?xml version='1.0' encoding='UTF-8' ?>

<!-- This file should contain generic information to run a Hijing job. -->
<jobDescription>
    <jobType>
        <Hijing>
            <!-- Of course we need the Hijing parameters. -->
            <hijingParams>
                <hEnergy Comment=' Frame/Energy                    '>
                    <charValue widget = 'entry'> 'CMS' </charValue>
                    <floatValue widget = 'entry'> 200.0 </floatValue>
                </hEnergy>
                <hProjectile Comment=' Projectile  type/A/Z            '>
                    <charValue widget = 'entry'> 'A' </charValue>
                    <intValue widget = 'entry'> 197 </intValue>
                    <intValue widget = 'entry'>  79 </intValue>
                </hProjectile>
                <hTarget Comment=' Target      type/A/Z            '>
                    <charValue widget = 'entry'> 'A' </charValue>
                    <intValue widget = 'entry'> 197 </intValue>
                    <intValue widget = 'entry'>  79 </intValue>
                </hTarget>
                <hImpact Comment=' Impact parameter min/max (fm)   '>
                    <floatValue widget = 'entry'>  0.0 </floatValue>
                    <floatValue widget = 'entry'> 20.0 </floatValue>
                </hImpact>
                <hQuench Comment=' Jet quenching (1=yes/0=no)      '>
                    <intValue widget = 'entry'> 1 </intValue>
                </hQuench>
                <hHardScattering Comment=' Hard scattering/pt jet          '>
                    <intValue widget = 'entry'> 0 </intValue>
                    <floatValue widget = 'entry'> 2.0 </floatValue>
                </hHardScattering>
                <hMaxJets Comment=' Max # jets per nucleon (D=10)   '>
                    <intValue widget = 'entry'> 10 </intValue>
                </hMaxJets>
                <hIHPR2_11_12 Comment=' Set ihpr2(11) and ihpr2(12)     '>
                    <intValue widget = 'entry'> 1 </intValue>
                    <intValue widget = 'entry'> 0 </intValue>
                </hIHPR2_11_12>
                <hIHPR2_21_18 Comment=' Set ihpr2(21) and ihpr2(18)     '>
                    <intValue widget = 'entry'> 0 </intValue>
                    <intValue widget = 'entry'> 0 </intValue>
                </hIHPR2_21_18>
                <hBProduction Comment=' set B production                '>
                    <floatValue widget = 'entry'> 1.5 </floatValue>
                </hBProduction>
                <hIStat Comment=' istat=1 old istat>1 new         '>
                    <intValue widget = 'entry'> 2 </intValue>
                </hIStat>
            </hijingParams>
        </Hijing>
    </jobType>

    <standardElements>
        <jobControl>
            <jobName widget='entry' id='jobName'>hijingTesting</jobName>
            <outputDir widget='entry' id='outputDir'>$env(MYDATA)/Hijing/test</outputDir>
            <starLibVersion widget='entry' id='starLibVersion'>$env(STAR_VERSION)</starLibVersion>
            <localDir widget='entry' id='localDir'>[pwd]</localDir>
            <eventsPerJob widget='entry' id='eventsPerJob'>1000</eventsPerJob>
            <jobPurpose widget='text'>You should replace this text with the reason for this job.
            </jobPurpose>
        </jobControl>

        <!-- To drive everything we need an xml file for star-submit. -->
        <starSubmit nProcesses='20' simulateSubmission='true' fileListSyntax='paths'>
            <command>
    starver <refer refersTo='starLibVersion'/>
    cd <refer refersTo='localDir'/>
    root4star -q -b <refer refersTo='outputDir'/>/scripts/doEStruct.C\(\"\",\"$SCRATCH\",\"<refer refersTo='outputDir'/>/scripts\",<refer refersTo='eventsPerJob'/>\)
            </command>
            <stdout URL="file:OUTPUTDIR/logs/$JOBID.log"/>
            <stderr URL="file:OUTPUTDIR/logs/$JOBID.err"/>
            <output fromScratch="data/*.root" toURL="file:OUTPUTDIR/data/" />
            <output fromScratch="cuts/*.root" toURL="file:OUTPUTDIR/cuts/" />
            <output fromScratch="QA/*.root"   toURL="file:OUTPUTDIR/QA/" />
            <output fromScratch="stats/*.txt" toURL="file:OUTPUTDIR/stats/" />
        </starSubmit>

        <!-- Need appropriate event cuts. -->
        <eventCuts>
            <eventCut Comment = 'centrality requirement, impact parameter or ntracks'>
                <cutName>centrality</cutName>
                <Value widget = 'entry'>0</Value>
                <Value widget = 'entry'>20</Value>
            </eventCut>
        </eventCuts>

        <!-- And appropriate track cuts. -->
        <trackCuts>
            <trackCut Comment = 'charge cut'>
                <cutName>Charge</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
            <trackCut Comment = 'pt cut'>
                <cutName>Pt</cutName>
                <Value widget = 'entry'>0.15</Value>
                <Value widget = 'entry'>20.0</Value>
            </trackCut>
            <trackCut Comment = 'phi cut'>
                <cutName>Phi</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
            <trackCut Comment = 'eta cut'>
                <cutName>Eta</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
        </trackCuts>
        <!-- The doEStruct macro is complicated.
             The main part should is in a generic file which we merge in. -->
        <doEStructMacro>
            <analysisType id='analysisType' widget='combobox'>StEStructCorrelation</analysisType>
            <libraries id='libraries' widget='none'>
    gROOT-&gt;LoadMacro("getRandomSeed.C");
    gSystem-&gt;Load("THijing");
    char buffer[1024];
    sprintf(buffer,"%s/hijev.inp",scriptDir);
    THijing *hijingGenerator = new THijing(buffer);
            </libraries>
            <centralities id='centralities' widget='entry'>0.0 6.0 8.6 10.6 12.4 14.0 20.0</centralities>
            <ptCentralities id='ptCentralities' typedef='const  double ptMultCut[] = ' typedef2='int mbNPtBins = '>0.0 6.0 8.6 10.6 12.4 14.0 20.0</ptCentralities>
            <!-- A few Hijing specific histogram declarations. -->
            <useImpactParameter id='useImpactParameter' typedef='bool useImpactParameter = ' widget='entry'>true</useImpactParameter>
            <!-- Reader depends on type of data. -->
            <declareReader id='declareReader' widget = 'text'>
    int iseed = getRandomSeed();
    hijingGenerator-&gt;SetRandomSeed(iseed);
    cout&lt;&lt;"&lt;seedValue&gt;"&lt;&lt;iseed&lt;&lt;"&lt;/seedValue&gt;"&lt;&lt;endl;
    StEStructHijing* reader = new StEStructHijing(hijingGenerator,ecuts,tcuts,useImpactParameter,-1);

    // EventType is for qaHistograms. Depends on type of reader though.
    int EventType = 1;
            </declareReader>

            <preLoop id='preLoop' widget = 'text'>
    // Put special processing that needs to be done before the event loop here.
    // In this case we may want to sort Hijing accoring to multiplicity or impact parameter.
    TTimeStamp TS;
    int startTime = TS.GetSec();
    int **iv = new int*[maxNumEvents];
    if (sortEvents) {
        StEStructEvent *ev;
        for (int ie=0;ie&lt;maxNumEvents;ie++) {
            iv[ie] = new int[25];
        }
        int preStat=0, ie = 0;
        double *centMeasure = new double[maxNumEvents];
        while (preStat!=2) {
            hijingGenerator-&gt;SaveRandomSeeds(iv[ie]);
            ev = reader-&gt;next();
            if (!ev) {
                continue;
            }
            centMeasure[ie] = ev-&gt;Centrality();

            ie++;
            if ((ie%200) == 0) {
                TTimeStamp TS;
                cout &lt;&lt; "checking event =" &lt;&lt; ie &lt;&lt; " at " &lt;&lt; TS.GetSec()-startTime &lt;&lt; " seconds after start of loop." &lt;&lt; endl;
            }
            if ( maxNumEvents!=0 &amp;&amp; ie&gt;=maxNumEvents ) {
                preStat=2;
            }
            delete ev;
        }
        estructMaker-&gt;quickSort(centMeasure,maxNumEvents);
        delete [] centMeasure;
    }
            </preLoop>
            <preEvent id='preEvent' widget = 'text'>
        // Special processing before each event can go here.
        if (sortEvents) {
            int ie = estructMaker-&gt;GetSortedIndex(counter);
            hijingGenerator-&gt;RestoreRandomSeeds(iv[ie]);
        }
            </preEvent>
            <postEvent id='postEvent' widget = 'text'>
        // Special processing after each event can go here.
            </postEvent>
            <postLoop id='postLoop' widget = 'text'>
    // If special processing needs clean up code put it here.
    if (sortEvents) {
        for (int ie=0;ie&lt;maxNumEvents;ie++) {
            delete iv[ie];
        }
        delete [] iv;
    }
            </postLoop>
        </doEStructMacro>
    </standardElements>
</jobDescription>
