<?xml version='1.0' encoding='UTF-8' ?>

<!-- This file should contain generic information to run a Hijing job. -->
<jobDescription>
    <jobType>
        <Hijing>
            <!-- Of course we need the Hijing parameters. -->
            <hijingParams>
                <hEnergy Comment=' Frame/Energy                    '>
                    <charValue widget = 'entry'> 'CMS' </charValue>
                    <floatValue widget = 'entry'> 200.0 </floatValue>
                </hEnergy>
                <hProjectile Comment=' Projectile  type/A/Z            '>
                    <charValue widget = 'entry'> 'A' </charValue>
                    <intValue widget = 'entry'> 197 </intValue>
                    <intValue widget = 'entry'>  79 </intValue>
                </hProjectile>
                <hTarget Comment=' Target      type/A/Z            '>
                    <charValue widget = 'entry'> 'A' </charValue>
                    <intValue widget = 'entry'> 197 </intValue>
                    <intValue widget = 'entry'>  79 </intValue>
                </hTarget>
                <hImpact Comment=' Impact parameter min/max (fm)   '>
                    <floatValue widget = 'entry'>  0.0 </floatValue>
                    <floatValue widget = 'entry'> 20.0 </floatValue>
                </hImpact>
                <hQuench Comment=' Jet quenching (1=yes/0=no)      '>
                    <intValue widget = 'entry'> 1 </intValue>
                </hQuench>
                <hHardScattering Comment=' Hard scattering/pt jet          '>
                    <intValue widget = 'entry'> 0 </intValue>
                    <floatValue widget = 'entry'> 2.0 </floatValue>
                </hHardScattering>
                <hMaxJets Comment=' Max # jets per nucleon (D=10)   '>
                    <intValue widget = 'entry'> 10 </intValue>
                </hMaxJets>
                <hIHPR2_11_12 Comment=' Set ihpr2(11) and ihpr2(12)     '>
                    <intValue widget = 'entry'> 1 </intValue>
                    <intValue widget = 'entry'> 0 </intValue>
                </hIHPR2_11_12>
                <hIHPR2_21_18 Comment=' Set ihpr2(21) and ihpr2(18)     '>
                    <intValue widget = 'entry'> 0 </intValue>
                    <intValue widget = 'entry'> 0 </intValue>
                </hIHPR2_21_18>
                <hBProduction Comment=' set B production                '>
                    <floatValue widget = 'entry'> 1.5 </floatValue>
                </hBProduction>
                <hIStat Comment=' istat=1 old istat>1 new         '>
                    <intValue widget = 'entry'> 2 </intValue>
                </hIStat>
            </hijingParams>
        </Hijing>
    </jobType>

    <standardElements>
        <jobControl>
            <jobName widget='entry' id='jobName'>hijingTesting</jobName>
            <outputDir widget='entry' id='outputDir'>$env(MYDATA)/Hijing/test</outputDir>
            <starLibVersion widget='entry' id='starLibVersion'>$env(STAR_VERSION)</starLibVersion>
            <localDir widget='entry' id='localDir'>/afs/rhic/star/users/prindle/star/fluctuations</localDir>
            <eventsPerJob widget='entry' id='eventsPerJob'>1000</eventsPerJob>
            <jobPurpose widget='text'>You should replace this text with the reason for this job.
            </jobPurpose>
        </jobControl>

        <!-- To drive everything we need an xml file for star-submit. -->
        <starSubmit nProcesses='20' simulateSubmission='true'>
            <command>
    starver <refer refersTo='starLibVersion'/>
    cd <refer refersTo='localDir'/>
    root4star -q -b <refer refersTo='outputDir'/>/scripts/doEStruct.C\(\"\",\"$SCRATCH\",\"<refer refersTo='outputDir'/>/scripts\",<refer refersTo='eventsPerJob'/>\)
            </command>
            <stdout URL="file:OUTPUTDIR/logs/$JOBID.log"/>
            <output fromScratch="data/*.root" toURL="file:OUTPUTDIR/data/" />
            <output fromScratch="cuts/*.root" toURL="file:OUTPUTDIR/cuts/" />
            <output fromScratch="QA/*.root"     toURL="file:OUTPUTDIR/QA/" />
            <output fromScratch="stats/*.txt"   toURL="file:OUTPUTDIR/stats/" />
        </starSubmit>

        <!-- Need appropriate event cuts. -->
        <eventCuts>
            <eventCut Comment = 'centrality cut, number of tracks in |eta| &lt; 0.5'>
                <cutName>centrality</cutName>
                <Value widget = 'entry'>1</Value>
                <Value widget = 'entry'>2000</Value>
            </eventCut>
            <eventCut Comment = 'number of tracks passing track cuts'>
                <cutName>numTracks</cutName>
                <Value widget = 'entry'>1</Value>
                <Value widget = 'entry'>2000</Value>
            </eventCut>
        </eventCuts>

        <!-- And appropriate track cuts. -->
        <trackCuts>
            <trackCut Comment = 'charge cut'>
                <cutName>Charge</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
            <trackCut Comment = 'pt cut'>
                <cutName>Pt</cutName>
                <Value widget = 'entry'>0.15</Value>
                <Value widget = 'entry'>2.0</Value>
            </trackCut>
            <trackCut Comment = 'phi cut'>
                <cutName>Phi</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
            <trackCut Comment = 'eta cut'>
                <cutName>Eta</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
        </trackCuts>
        <!-- The doEStruct macro is complicated.
             The main part should is in a generic file which we merge in. -->
        <doEStructMacro>
            <analysisType id='analysisType' widget='combobox'>StEStructFluctuation</analysisType>
            <libraries id='libraries' widget='none'>
    gSystem-&gt;Load("THijing");
    sprintf(buffer,"%s/hijev.inp",scriptDir);
    THijing *hijingGenerator = new THijing(buffer);
            </libraries>
            <centralities id='centralities' widget='entry'>0.0 6.0 8.6 10.6 12.4 14.0 20.0</centralities>
            <ptCentralities id='ptCentralities' widget='entry'>0.0 6.0 8.6 10.6 12.4 14.0 20.0</ptCentralities>
            <!-- A few Hijing specific histogram declarations. -->
            <declareSimHistograms id='declareSimHistograms' widget='text'>
        TH1D *impact   = new TH1D("impact","impact",100,0.0,20.0);
        TH1D *binary   = new TH1D("binary","binary",2000,0.5,2000.5);
        TH1D *participant = new TH1D("participant","participant",500,0.5,500.5);

        TH1D **bin = new TH1D*[mbNBins-1];
        TH1D **part = new TH1D*[mbNBins-1];
        for (int i=0;i&lt;mbNBins-1;i++) {
            sprintf(buffer,"binary_%i",i);
            bin[i]  = new TH1D(buffer,buffer,2000,0.5,2000.5);
            sprintf(buffer,"participant_%i",i);
            part[i] = new TH1D(buffer,buffer,500,0.5,500.5);
        }
            </declareSimHistograms>
            <centralityInEtaOne id='centralityInEtaOne' widget='entry'>false</centralityInEtaOne>
            <!-- Reader depends on type of data. -->
            <declareReader id='declareReader' widget = 'text'>
    StEStructHijing** readers = new StEStructHijing*[numberOfAnalyses];
    for (int i=0;i&lt;numberOfAnalyses;i++) {
        int mCent = i;
        if (!strcmp(analysisType,"StEStructFluctuation") &amp;&amp; numberOfAnalyses == 1) {
            mCent = -1;
        }
        readers[i] = new StEStructHijing(hijingGenerator,ecuts[i],tcuts[i],skipMake[i],centralityInEtaOne,mCent,-1);
    }
            </declareReader>
            <fillSimHistograms id='fillSimHistograms' widget = 'text'>
        if (currentAnalysis &amp;&amp; currentAnalysis-&gt;mCurrentEvent) {
            impact-&gt;Fill(hijingGenerator-&gt;GetImpactParameter());
            binary-&gt;Fill(hijingGenerator-&gt;GetBinaryCollisions());
            participant-&gt;Fill(hijingGenerator-&gt;GetParticipants());
            iCen = currentAnalysis-&gt;mCurrentEvent-&gt;Centrality();
            if (iCen >= 0) {
                bin[iCen]-&gt;Fill(hijingGenerator-&gt;GetBinaryCollisions());
                part[iCen]-&gt;Fill(hijingGenerator-&gt;GetParticipants());
            }
        }
            </fillSimHistograms>
            <saveSimHistograms id='saveSimHistograms' widget = 'text'>
    impact-&gt;Write();
    binary-&gt;Write();
    participant-&gt;Write();
    for (int i=0;i&lt;mbNBins-1;i++) {
        bin[i]-&gt;Write();
        part[i]-&gt;Write();
    }
            </saveSimHistograms>
        </doEStructMacro>
    </standardElements>
</jobDescription>
