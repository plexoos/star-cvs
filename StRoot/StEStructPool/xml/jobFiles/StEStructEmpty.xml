<jobDescription>
    <standardElements>
        <doEStructMacro>
            <analysisType id='analysisType' widget='combobox'>StEStructEmpty</analysisType>
            <!--  Really don't want pt cut information in Empty at all.
                 The problem is that each of the job specific xml files has
                 values for use by the fluctuation code. These next two
                 lines at least make syntactically correct code in the
                 macro which is ignored and (hopefully) causes no problems -->
            <ptCuts id='ptCuts' widget='none' typedef='const  double ptCut[] = ' typedef2='int mbNPts = '>0.15 20.0</ptCuts>
            <ptCentralities id='ptCentralities' widget='none' typedef='const  double ptMultCut[] = ' typedef2='int mbNPtBins = '>0 2000</ptCentralities>
            <cutMode id='cutMode' widget='combobox' Comment='2pt analysis binning mode' typedef='int cutBinMode = '>0</cutMode>
            <declareAnalysis id='declareAnalysis' widget='text'>
    int numberOfAnalyses = mbNBins-1;
    // choose the mode for the binning. Do we really need this for an Empty analysis?
    StEStructCutBin* cb=StEStructCutBin::Instance();
    cb-&gt;setMode(cutBinMode);
    StEStructEmptyAnalysis** analysis = new StEStructEmptyAnalysis*[numberOfAnalyses];
            </declareAnalysis>
            <allocateAnalysis id='allocateAnalysis' widget='text'>
        analysis[i] = new StEStructEmptyAnalysis();
        analysis[i]-&gt;setOutputFileName(getOutFileName(outputDir,jobName,"data",i));
            </allocateAnalysis>
            <pairCutsWrite id='pairCutsWrite' widget='none'>
    pcuts-&gt;printCuts(ofs);
            </pairCutsWrite>
            <weightsFile id='weightsFile' widget='entry' Comment='weights file for reaction plane analysis' typedef='char *weightsFile = '>none</weightsFile>
        </doEStructMacro>

    </standardElements>
</jobDescription>
