<?xml version='1.0' encoding='UTF-8' ?>

<!-- This file should contain generic information to run a Data job. -->
<jobDescription>
    <jobType>
        <Data/>
    </jobType>
    <standardElements>
        <jobControl>
            <jobName widget='entry' id='jobName'>DataTesting</jobName>
            <outputDir widget='entry' id='outputDir'>$env(MYDATA)/Data/test</outputDir>
            <starLibVersion widget='entry' id='starLibVersion'>$env(STAR_VERSION)</starLibVersion>
            <localDir widget='entry' id='localDir'>[pwd]</localDir>
            <eventsPerJob widget='entry' id='eventsPerJob'>0</eventsPerJob>
            <jobPurpose widget='text'>You should replace this text with the reason for this job.
            </jobPurpose>
        </jobControl>

        <!-- To drive everything we need an xml file for star-submit. -->
        <starSubmit simulateSubmission='true' maxFilesPerProcess='100' fileListSyntax='paths'>
            <command>
        starver <refer refersTo='starLibVersion'/>
        cd <refer refersTo='localDir'/>
        root4star -q -b <refer refersTo='outputDir'/>/scripts/doEStruct.C\(\"$FILELIST\",\"$SCRATCH\",\"<refer refersTo='outputDir'/>/scripts\",<refer refersTo='eventsPerJob'/>\)
            </command>
            <stdout URL="file:OUTPUTDIR/logs/$JOBID.log"/>
            <stderr URL="file:OUTPUTDIR/logs/$JOBID.err"/>
            <output fromScratch="data/*.root" toURL="file:OUTPUTDIR/data/" />
            <output fromScratch="cuts/*.root" toURL="file:OUTPUTDIR/cuts/" />
            <output fromScratch="QA/*.root"   toURL="file:OUTPUTDIR/QA/" />
            <output fromScratch="stats/*.txt" toURL="file:OUTPUTDIR/stats/" />
        </starSubmit>

        <!-- Need appropriate event cuts. -->
        <eventCuts>
            <eventCut Comment = 'centrality cut, number of tracks in |eta| &lt; 0.5'>
                <cutName>centrality</cutName>
                <Value widget = 'entry'>1</Value>
                <Value widget = 'entry'>2000</Value>
            </eventCut>
        </eventCuts>

        <!-- And appropriate track cuts. -->
        <trackCuts>
            <trackCut Comment = 'Require good flag'>
                <cutName>Flag</cutName>
                <Value widget = 'entry'>0</Value>
                <Value widget = 'entry'>699</Value>
            </trackCut>
            <trackCut Comment = 'charge cut'>
                <cutName>Charge</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
            <trackCut Comment = 'Number of fit points'>
                <cutName>NFitPoints</cutName>
                <Value widget = 'entry'>15</Value>
                <Value widget = 'entry'>50</Value>
            </trackCut>
            <trackCut Comment = 'Ratio of Fit points / Maximum points on track'>
                <cutName>NFitPerNMax</cutName>
                <Value widget = 'entry'>0.53</Value>
                <Value widget = 'entry'>1.0</Value>
            </trackCut>
            <trackCut Comment = 'DCA of global track'>
                <cutName>GlobalDCA</cutName>
                <Value widget = 'entry'>0.0</Value>
                <Value widget = 'entry'>3.0</Value>
            </trackCut>
            <trackCut Comment = 'chi squared cut'>
                <cutName>Chi2</cutName>
                <Value widget = 'entry'>0.0</Value>
                <Value widget = 'entry'>99.0</Value>
            </trackCut>
            <trackCut Comment = 'pt cut'>
                <cutName>Pt</cutName>
                <Value widget = 'entry'>0.15</Value>
                <Value widget = 'entry'>50.0</Value>
            </trackCut>
            <trackCut Comment = 'phi cut'>
                <cutName>Phi</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
            <trackCut Comment = 'eta cut'>
                <cutName>Eta</cutName>
                <Value widget = 'entry'>-1</Value>
                <Value widget = 'entry'>1</Value>
            </trackCut>
            <trackCut Comment = 'electron cut'>
                <cutName>NSigmaElectron</cutName>
                <Value widget = 'entry'>-1.5</Value>
                <Value widget = 'entry'>1.5</Value>
            </trackCut>
        </trackCuts>

        <!-- The doEStruct macro is complicated. -->
        <!-- The main part is in a generic file. -->
        <doEStructMacro>
            <analysisType id='analysisType' widget='entry'>StEStructCorrelation</analysisType>
            <useGlobalTracks id='useGlobalTracks' widget='entry' Comment='if true we use global tracks' typedef='bool useGlobalTracks = '>false</useGlobalTracks>
    <!-- Reader depends on type of data. -->
            <declareReader id='declareReader' widget = 'text'>
    //  reader = reader interface + pointer to Data Maker + cut classes
    StMuDstMaker*         mk     = new StMuDstMaker(0,0,"",filelist,".",500);
    StEStructMuDstReader* reader = new StEStructMuDstReader(mk,ecuts,tcuts);
    reader->setUseGlobalTracks(useGlobalTracks);

    // EventType is for qaHistograms. Depends on type of reader though.
    int EventType = 0;
            </declareReader>
            <preLoop id='preLoop' widget = 'text'>
    // Put special processing that needs to be done before the event loop here.
    // TEventList sorts its list. I sub-classed it and added an Append method to avoid sorting.
    TChain *ch = mk-&gt;chain();
    int nEvents = ch-&gt;GetEntries();
    cout &lt;&lt; "Total number of events in chain = " &lt;&lt; nEvents &lt;&lt; endl;
    StEStructTEventList *evList = new StEStructTEventList();

    if (sortEvents) {
        ch-&gt;SetBranchStatus("*",0);
        ch-&gt;SetBranchStatus("MuEvent.*",1);
        ch-&gt;SetBranchStatus("PrimaryTracks.*",1);
        ch-&gt;SetBranchStatus("GlobalTracks.*",1);
        if (ch-&gt;GetBranch("PrimaryVertices")) {
            ch-&gt;SetBranchStatus("PrimaryVertices.*",1);
        }
        ecuts-&gt;setDoFillHists(true);
        tcuts-&gt;setDoFillHists(false);

        float *m = (float *) malloc(sizeof(float)*nEvents);
        float *z = (float *) malloc(sizeof(float)*nEvents);
        int   *index = (int   *) malloc(sizeof(int)*nEvents);
        StEStructEvent *ev;
        int igood = -1;
        int iev = -1;
        bool done = false;
        TTimeStamp TS;
        int startTime = TS.GetSec();
        while (!done) {
            // This simply reads an event and fills a StEStructEvent object,
            // applying cuts. If event fails ev will be NULL;
            iev++;
            ev = reader-&gt;next();
            done = reader-&gt;done();
            if (!ev) {
                continue;
            }
            igood++;
            if ((igood%500) == 0) {
                TTimeStamp TS;
                cout &lt;&lt; "scanning event " &lt;&lt; iev &lt;&lt; " at " &lt;&lt; TS.GetSec()-startTime &lt;&lt; " seconds since start of scan loop." &lt;&lt; endl;
            }
            m[igood] = ev-&gt;Ntrack();
            z[igood] = ev-&gt;Vz();
            index[igood] = iev;
            delete ev;
        }
        nEvents = igood;
        StarTSP *tsp = new StarTSP(igood);
        int *f = tsp-&gt;getFileNumbers(ch,igood,index);
        cout &lt;&lt; "Events passing cuts = " &lt;&lt; igood &lt;&lt; endl;
        float *ff = (float *) malloc(sizeof(float)*igood);
        for (int ie=0;ie&lt;igood;ie++) {
            ff[ie] = 0;
        }
        int *eList = tsp-&gt;sortLists(m,z,ff);

        // Note that we are appending to evList that already has one entry
        // per event in the chain. The point is that StMuDstMaker is keeping
        // track of how many events it has read. I would reset if if I knew how.
        for (int ie=0;ie&lt;igood;ie++) {
            evList-&gt;Append(index[eList[ie]]);
        }
        delete m;
        delete z;
        delete f;
        delete ff;
        delete index;
        delete eList;
        // Need to delete and recreate readers. They think they have read everything there is in the chain.
        delete mk;
        delete reader;
        mk     = new StMuDstMaker(0,0,"",filelist,".",500);
        reader = new StEStructMuDstReader(mk,ecuts,tcuts);
        reader-&gt;setUseGlobalTracks(useGlobalTracks);
        estructMaker-&gt;SetEventReader(reader);
        ecuts-&gt;setDoFillHists(false);
        tcuts-&gt;setDoFillHists(true);
        ch = mk-&gt;chain();
    } else {
        for (int ie=0;ie&lt;nEvents;ie++) {
            evList-&gt;Append(ie);
        }
    }

    // Only reading a few branches should in principle speed up the reading.
    // In practice it seems to make no difference (reading only the MuEvent branch is faster, but
    // once we include the PrimaryTracks branch it is as fast to reas the entire event!)
    // Might be safer to remove all this SetBranchStatus stuff here.
    ch-&gt;SetBranchStatus("*",0);
    ch-&gt;SetBranchStatus("MuEvent.*",1);
    ch-&gt;SetBranchStatus("PrimaryTracks.*",1);
    ch-&gt;SetBranchStatus("GlobalTracks.*",1);
    if (ch-&gt;GetBranch("PrimaryVertices")) {
        ch-&gt;SetBranchStatus("PrimaryVertices.*",1);
    }
    if (ch-&gt;GetBranch("BTofHeader")) {
        ch-&gt;SetBranchStatus("BTofHeader.*",1);
    }

    int counter=0, istat=0;
    mk-&gt;SetEventList(evList);
            </preLoop>
            <preEvent id='preEvent' widget = 'text'>
        // Special processing before each event can go here.
            </preEvent>
            <postEvent id='postEvent' widget = 'text'>
        // Special processing after each event can go here.
            </postEvent>
            <postLoop id='postLoop' widget = 'text'>
    // If special processing needs clean up put code here.
            </postLoop>
        </doEStructMacro>

    </standardElements>
</jobDescription>
