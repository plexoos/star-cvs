<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

<xs:annotation>
    <xs:documentation>
You should replace this text with the reason you are running this job.
This is only for your later information when you wonder what the
hell is in this directory.
    </xs:documentation>
</xs:annotation>

<xs:element name='jobDescription'>
    <xs:complexType>
        <xs:all minOccurs='1' maxOccurs='1'>
            <xs:element name='jobType'>
                <xs:complexType>
                    <xs:choice>
                        <xs:element name='Data'>
                            <xs:complexType>
                                <xs:attribute URL='dataDefault.xml'/>
                                <xs:attribute Comment='Analyze production data'/>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name='GEANT'>
                            <xs:complexType>
                                <xs:attribute URL='geantDefault.xml'/>
                                <xs:attribute Comment='Analyze data from Monte Carlo -> GEANT -> production files'/>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name='Hijing'>
                            <xs:complexType>
                                <xs:all>
                                    <xs:element ref='hijingParams'/>
                                </xs:all>
                                <xs:attribute URL='hijingDefault.xml'/>
                                <xs:attribute Comment='Generate and analyze Hijing directly'/>
                            </xs:complexType>
                        </xs:element>
                        <xs:element name='Pythia'>
                            <xs:complexType>
                                <xs:all>
                                    <xs:element ref='pythiaMacro'/>
                                </xs:all>
                                <xs:attribute URL='pythiaDefault.xml'/>
                                <xs:attribute Comment='Generate and analyze Pythia directly'/>
                            </xs:complexType>
                        </xs:element>
                    </xs:choice>
                </xs:complexType>
            </xs:element>
            <xs:element name='standardElements'>
                <xs:complexType>
                    <xs:all>
                        <xs:element ref='jobControl'/>
                        <xs:element ref='starSubmit'/>
                        <xs:element ref='eventCuts'/>
                        <xs:element ref='trackCuts'/>
                        <xs:element ref='pairCuts' minOccurs='0'/>
                        <xs:element ref='doEStructMacro'/>
                    </xs:all>
                </xs:complexType>
            </xs:element>
        </xs:all>
    </xs:complexType>
</xs:element>

<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- This is for items that span files used in batch jobs
     and a few things didn't fit other places.  -->
<xs:element name='jobControl'>
    <xs:complexType>
        <xs:all>
            <xs:element name='jobName'>
                <xs:complexType>
                    <xs:attribute name='id' type='xs:string'/>
                    <xs:attribute name='widget' type='widgetTypes'/>
                    <xs:attribute Comment='For interaction with batch system'/>
                </xs:complexType>
            </xs:element>
            <xs:element name='outputDir'>
                <xs:complexType>
                    <xs:attribute name='id' type='xs:string'/>
                    <xs:attribute name='widget' type='widgetTypes'/>
                    <xs:attribute Comment='Directory you want all ouput to end up in.'/>
                </xs:complexType>
            </xs:element>
            <xs:element name='starLibVersion'>
                <xs:complexType>
                    <xs:attribute name='id' type='xs:string'/>
                    <xs:attribute name='widget' type='widgetTypes'/>
                    <xs:attribute Comment='Version of STAR library to use when running job.'/>
                </xs:complexType>
            </xs:element>
            <xs:element name='localDir'>
                <xs:complexType>
                    <xs:attribute name='id' type='xs:string'/>
                    <xs:attribute name='widget' type='widgetTypes'/>
                    <xs:attribute Comment='Local directory where you have done "co StRoot/..." and compiled.'/>
                </xs:complexType>
            </xs:element>
            <xs:element name='eventsPerJob'>
                <xs:restriction base='xs:integer'/>
                <xs:complexType>
                    <xs:attribute name='id' type='xs:string'/>
                    <xs:attribute name='widget' type='widgetTypes'/>
                    <xs:attribute Comment='Passed as argument to doEStruct.C as number of events to analyze'/>
                </xs:complexType>
            </xs:element>
            <xs:element name='jobPurpose'>
                <xs:complexType>
                    <xs:attribute name='widget' type='widgetTypes'/>
                    <xs:attribute Comment='For you to remember why you ran this job'/>
                </xs:complexType>
            </xs:element>
        </xs:all>
    </xs:complexType>
</xs:element>

<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     Here we define a schema for the file that is passed to star-submit. -->
<xs:element name='starSubmit'>
    <xs:complexType>
        <xs:attribute name='simulateSubmission' type='xs:boolean' default='false'
                Comment='If true create files but do not submit jobs'/>
        <xs:attribute name='name' type='xs:string'
                Comment='job name for underlying batch system'/>
        <xs:attribute name='mail' type='xs:boolean' default='false'
                Comment='If true then output can be returned by mail'/>
        <xs:attribute name='nProcesses' type='xs:integer'
                Comment='Number of processes to dispatch (only if no input present)'/>
        <xs:attribute name='maxFilesPerProcess' type='xs:integer'
                Comment='Maximum number of data files per job.'/>
        <xs:attribute name='minFilesPerProcess' type='xs:integer'
                Comment='Minimum number of data files per job.'/>
        <xs:attribute name='filesPerHour' type='xs:integer'
                Comment='Used to determine batch queue'/>
        <xs:attribute name='fileListSyntax' default='paths' type='pathType'
                Comment='paths or rootd'/>
        <xs:attribute name='minStorageSpace' type='xs:integer'
                Comment='Used when deciding if node has sufficient resources to run job'/>
        <xs:attribute name='maxStorageSpace' type='xs:integer'
                Comment='Used when deciding if node has sufficient resources to run job'/>
        <xs:attribute name='minMemory' type='xs:integer'
                Comment='Used when deciding if node has sufficient resources to run job'/>
        <xs:attribute name='maxMemory' type='xs:integer'
                Comment='Used when deciding if node has sufficient resources to run job'/>
        <xs:attribute name='inputOrder' type='xs:integer'
                Comment='? Only if all input is from the file catalog'/>
        <xs:attribute name='minWallTime' type='xs:integer'
                Comment='unused at present'/>
        <xs:attribute name='maxWallTime' type='xs:integer'
                Comment='Job is cancelled after this amount of time'/>
        <xs:all>
            <xs:element name='command' type='xs:string'>
                <xs:complexType mixed='true'>
                    <xs:sequence>
                        <xs:element name='refer'   minOccurs='0' maxOccurs='unbounded'>
                            <xs:complexType>
                                <xs:attribute name='refersTo' type='xs:string'/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <xs:element name='stdout' minOccurs='0' maxOccurs='1'>
                <xs:complexType>
                    <xs:attribute name='URL' type='xs:string'
                            Comment='output location for normal output. stdout and stderr cannot be the same (if both are specified)'/>
                    <xs:attribute name='discard' type='xs:boolean'
                            Comment='if true output is discarded'/>
                </xs:complexType>
            </xs:element>
            <xs:element name='stdin' minOccurs='0' maxOccurs='1'>
                <xs:complexType>
                    <xs:attribute name='URL' type='xs:string'
                            Comment='input specification.'/>
                </xs:complexType>
            </xs:element>
            <xs:element name='stderr' minOccurs='0' maxOccurs='1'>
                <xs:complexType>
                    <xs:attribute name='URL' type='xs:string'
                            Comment='output location for errors. stdout and stderr cannot be the same (if both are specified)'/>
                    <xs:attribute name='discard' type='xs:boolean'
                            Comment='if true errors are discarded'/>
                </xs:complexType>
            </xs:element>
            <xs:element name='input' minOccurs='0' maxOccurs='unbounded'>
                <xs:complexType>
                    <!-- nFiles, singleCopy and preferStorage only apply when input
                         is from a catalog query. I don't know how to enforce this
                         through shemas yet. -->
                    <xs:attribute name='URL' type='xs:string'
                            Comment='Data source. Often a file catalog query.'/>
                    <!-- Note that nFiles should be an integer OR the string 'all'
                         Not sure how to do this right off, so make it a string. -->
                    <xs:attribute name='nFiles' type='xs:string' default='100'
                            Comment='An integer or all. Number of files to be returned by catalog query'/>
                    <xs:attribute name='singleCopy' type='xs:boolean' default='true'
                            Comment='If false the catalog query may return more than one copy of a data file'/>
                    <xs:attribute name='preferStorage' type='xs:string'
                            Comment='NFS or local. local should be faster but job may have to wait for specific machine.'/>
                </xs:complexType>
            </xs:element>
            <xs:element name='output' minOccurs='0' maxOccurs='unbounded'>
                <xs:complexType>
                    <xs:attribute name='fromScratch' type='xs:string'
                            Comment='File specifying the (temporary) job output storage.'/>
                    <xs:attribute name='toURL' type='xs:string'
                            Comment='Final output location. (outputDir automatically inserted)'/>
                </xs:complexType>
            </xs:element>
        </xs:all>
    </xs:complexType>
</xs:element>

<xs:simpleType name='pathType'>
    <xs:restriction base='xs:string'>
        <xs:enumeration value='paths'/>
        <xs:enumeration value='rootd'/>
    </xs:restriction>
</xs:simpleType>

<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- Here we define a schema for event cuts.
     Allow one trigger selection and any number of event cuts.
     Note that trigger selection and trigger cut are redundant,
     but they are allowed by the code that read the cuts file and I'm
     currently too lazy to figure out how to enforce a choice of only one. -->
<xs:element name='eventCuts'>
    <xs:complexType>
        <xs:all>
            <xs:element ref='triggerTag' minOccurs='0' maxOccurs='1'/>
            <xs:element ref='eventCut' minOccurs='0' maxOccurs='unbounded'/>
        </xs:all>
    </xs:complexType>
</xs:element>

<!-- triggerTag is an ascii string specifying a data set. -->
<xs:element name='triggerTag'>
    <xs:complexType>
        <xs:restriction base='xs:string'>
            <xs:enumeration value='AuAu200GeVMinBias2001' Comment='tag for 2001, 200GeV AuAu minimum bias trigger'/>
            <xs:enumeration value='AuAu62GeVMinBias2004'  Comment='tag for 2004, 62GeV AuAu minimum bias trigger'/>
            <xs:enumeration value='AuAu200GeVMinBias2004' Comment='tag for 2004, 200GeV AuAu minimum bias trigger'/>
            <xs:enumeration value='CuCu62GeVProductionMinBias2005'  Comment='tag for 2005, 62GeV CuCu minimum bias trigger'/>
            <xs:enumeration value='CuCu200GeVProductionMinBias2005' Comment='tag for 2005, 200GeV CuCu minimum bias trigger'/>
        </xs:restriction>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>

<!-- An event cut has a name and two decimal values. -->
<xs:element name='eventCut'>
    <xs:complexType>
        <xs:sequence>
            <xs:element name='cutName' type='eventCutNames'/>
            <xs:element ref='Value'/>
            <xs:element ref='Value'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>

<!-- The event cut name is restricted to valid cut names. -->
<xs:simpleType name='eventCutNames'>
    <xs:restriction base='xs:string'>
        <xs:enumeration value='triggerWord'    Comment='min, max trigger words'/>
        <xs:enumeration value='primaryVertexZ' Comment='min, max Z vertex position'/>
        <xs:enumeration value='centrality'     Comment='min, max reference multiplicity'/>
        <xs:enumeration value='numTracks'      Comment='min max tracks passing quality cuts'/>
    </xs:restriction>
</xs:simpleType>

<!-- Each value is an un-restricted decimal number but we associate
     a widget. This is a suggestions to a gui about how to present an
     edit field for this value. -->
<xs:element name='Value'>
    <xs:complexType>
        <xs:restriction base='xs:decimal'/>
        <xs:attribute name='widget' type='widgetTypes'/>
    </xs:complexType>
</xs:element>
<xs:simpleType name='widgetTypes'>
    <xs:restriction base='xs:string'>
        <xs:enumeration value='none'/>
        <xs:enumeration value='entry'/>
        <xs:enumeration value='text'/>
        <xs:enumeration value='combobox'/>
    </xs:restriction>
</xs:simpleType>

<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- Track cuts are almost the same as the event cuts. -->
<xs:element name='trackCuts'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='trackCut' minOccurs='0' maxOccurs='unbounded'/>
        </xs:sequence>
    </xs:complexType>
</xs:element>

<!-- A track cut has a name and two decimal values. -->
<xs:element name='trackCut'>
    <xs:complexType>
        <xs:sequence>
            <xs:element name='cutName' type='trackCutNames'/>
            <xs:element ref='Value' minOccurs='0' maxOccurs='unbounded'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>

<!-- Track cut name is restricted to valid cut names. -->
<xs:simpleType name='trackCutNames'>
    <xs:restriction base='xs:string'>
        <xs:enumeration value='Flag'>
            <xs:Comment>min, max values for Flag</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='Charge'>
            <xs:Comment>min, max values for Charge</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='NFitPoints'>
            <xs:Comment>min, max values for number of fit points on track</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='NFitPerNMax'>
            <xs:Comment>min, max values for ratio of fits points to maximum possible points on track</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='GlobalDCA'>
            <xs:Comment>min, max values for distance of closest approach of global track</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='Chi2'>
            <xs:Comment>min, max values for chi^2 fit of track</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='Yt'>
            <xs:Comment>min, max values for transverse rapidity</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='Pt'>
            <xs:Comment>min, max values for transverse momentum</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='Phi'>
            <xs:Comment>min, max values for phi</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='Eta'>
            <xs:Comment>min, max values for eta</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='NSigmaElectron'>
            <xs:Comment>min, max values for distance from dE/dx electon expectation</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='NSigmaPion'>
            <xs:Comment>min, max values for distance from dE/dx pion expectation</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='NSigmaKaon'>
            <xs:Comment>min, max values for distance from dE/dx Kaon expectation</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='NSigmaProton'>
            <xs:Comment>min, max values for distance from dE/dx proton expectation</xs:Comment>
        </xs:enumeration>
    </xs:restriction>
</xs:simpleType>

<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- Track pair cuts are the same as the track cuts, in form. -->
<xs:element name='pairCuts'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='pairCut' minOccurs='0' maxOccurs='unbounded'/>
        </xs:sequence>
    </xs:complexType>
</xs:element>

<!-- A pair cut has a name and two decimal values. -->
<xs:element name='pairCut'>
    <xs:complexType>
        <xs:sequence>
            <xs:element name='cutName' type='pairCutNames'/>
            <xs:element ref='Value' minOccurs='0' maxOccurs='unbounded'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>

<!-- Pair cut name is restricted to valid cut names. -->
<xs:simpleType name='pairCutNames'>
    <xs:restriction base='xs:string'>
        <xs:enumeration value='DeltaPhi'>
            <xs:Comment>min, max: Cut on phi separation</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='DeltaEta'>
            <xs:Comment>min, max: Cut on Eta separation</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='DeltaMt'>
            <xs:Comment>min, max: Cut in transvers mass difference</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='qInv'>
            <xs:Comment>min, max: Cut on difference in momentum</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='EntranceSep'>
            <xs:Comment>min, max: Cut on separation distance at entrance to the TPC</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='ExitSep'>
            <xs:Comment>min, max: Cut on separation distance at exit of the TPC</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='MidTpcSepLikeSign'>
            <xs:Comment>min, max: Cut on separation distance at middle the TPC</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='MidTpcSepUnlikeSign'>
            <xs:Comment>min, max: Cut on separation distance at middle of the TPC</xs:Comment>
        </xs:enumeration>
        <xs:enumeration value='Quality'>
            <xs:Comment>min, max: HBT group split track cut</xs:Comment>
        </xs:enumeration>
    </xs:restriction>
</xs:simpleType>

<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- doEStruct macro is mostly text.
     We modify this text for different types of analysis.
     One way of doing this is using elements as variables. -->
<xs:element name='doEStructMacro'>
    <xs:complexType>
        <xs:all>
            <xs:element ref='analysisType'/>
            <xs:element ref='libraries'/>
            <xs:element ref='centralities'/>
            <xs:element ref='ptCuts'/>
            <xs:element ref='ptCentralities'/>
            <xs:element ref='cutModeInit'/>
            <xs:element ref='declarePtDefHistograms'/>
            <xs:element ref='declareSimHistograms'/>
            <xs:element ref='centralityInEtaOne'/>
            <xs:element ref='declareReader'/>
            <xs:element ref='declareAnalysis'/>
            <xs:element ref='getCurrentAnalysis'/>
            <xs:element ref='fillPtDefHistograms'/>
            <xs:element ref='fillSimHistograms'/>
            <xs:element ref='pairCutsWrite'/>
            <xs:element ref='savePtDefHistograms'/>
            <xs:element ref='saveSimHistograms'/>
            <xs:element ref='main'/>
        </xs:all>
    </xs:complexType>
</xs:element>

<xs:element name='analysisType'>
    <xs:complexType>
        <xs:restriction base='analysisTypeNames'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>fluctuation or correlation</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:simpleType name='analysisTypeNames'>
    <xs:restriction base='xs:string'>
        <xs:enumeration value='StEStructFluctuation' Comment='Fill histograms for fluctuation analysis.'/>
        <xs:enumeration value='StEStructCorrelation' Comment='Fill histograms for correlation analysis.'/>
    </xs:restriction>
</xs:simpleType>
<xs:element name='libraries'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Libraries beyond standard required libraries</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='centralities'>
    <xs:complexType>
        <xs:restriction base='decimalList'>
            <xs:minLength value='2'/>
        </xs:restriction>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='entry'/>
        <xs:attribute name='Comment' type='xs:string'>Centrality cuts. (normally cut on number of track)</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='ptCuts'>
    <xs:complexType>
        <xs:restriction base='xs:decimalList'>
            <xs:minLength value='2'/>
        </xs:restriction>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='entry'/>
        <xs:attribute name='Comment' type='xs:string'>pt slices</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='ptCentralities'>
    <xs:complexType>
        <xs:restriction base='decimalList'>
            <xs:minLength value='2'/>
        </xs:restriction>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='entry'/>
        <xs:attribute name='Comment' type='xs:string'>Centrality cuts for each pt slice</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='cutModeInit'>
    <xs:complexType>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Initialize cut mode for corr, pt histograms for fluct.</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='declarePtDefHistograms'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Code for declaring extra histograms in macro</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='declareSimHistograms'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Code for declaring extra histograms in macro</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='centralityInEtaOne'>
    <xs:complexType>
        <xs:restriction base='xs:boolean'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>true to use all tracks in acceptance, false to use reference multiplicity</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='declareReader'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Reader depends on type of analysis</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='declareAnalysis'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Declare FluctAnal or 2ptCorrelation</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='getCurrentAnalysis'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Write fluct. QA histograms.</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='fillPtDefHistograms'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Write fluct. QA histograms.</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='fillSimHistograms'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Fill extra histograms in event processing loop</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='pairCutsWrite'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Write pair cut information.</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='savePtDefHistograms'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Write fluct. QA histograms.</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='saveSimHistograms'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='id' type='xs:string' use='required'/>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>Save extra histograms into QA file</xs:attribute>
    </xs:complexType>
</xs:element>
<xs:element name='main'>
    <xs:complexType mixed='true'>
        <xs:sequence>
            <xs:element name='variable' maxOccurs='unbounded'>
                <xs:complexType>
                    <xs:attribute name='refersTo' type='xs:string'/>
                    <xs:attribute name='stringInLine' type='xs:string'/>
                    <xs:attribute name='boolInLine' type='xs:string'/>
                    <xs:attribute name='intInLine' type='xs:string'/>
                    <xs:attribute name='listOf' type='xs:string'/>
                    <xs:attribute name='sumOf' type='xs:string'/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name='widget' type='widgetTypes' default='text'/>
        <xs:attribute name='Comment' type='xs:string'>This is the macro for all EStruct analysis. Display is after substitutions.</xs:attribute>
    </xs:complexType>
</xs:element>

<xs:simpleType name='integerList'>
    <xs:list itemType='xs:integer'/>
</xs:simpleType>
<xs:simpleType name='decimalList'>
    <xs:list itemType='xs:decimal'/>
</xs:simpleType>

<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- All Hijing parameters need to exist in the file and in the proper order. -->
<!-- There must be a better way than defining a different element for
     all the parameters, but I haven't found it and want to get on with
     the rest of the project. -->
<xs:element name='hijingParams'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='hEnergy'/>
            <xs:element ref='hProjectile'/>
            <xs:element ref='hTarget'/>
            <xs:element ref='hImpact'/>
            <xs:element ref='hQuench'/>
            <xs:element ref='hHardScattering'/>
            <xs:element ref='hMaxJets'/>
            <xs:element ref='hIHPR2_11_12'/>
            <xs:element ref='hIHPR2_21_18'/>
            <xs:element ref='hBProduction'/>
            <xs:element ref='hIStat'/>
        </xs:sequence>
    </xs:complexType>
</xs:element>

<!-- Hijing parameters has at least one value and it may be char, int or float. -->
<xs:element name='hEnergy'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='charValue'/>
            <xs:element ref='floatValue'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>
<xs:element name='hProjectile'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='charValue'/>
            <xs:element ref='intValue'/>
            <xs:element ref='intValue'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>
<xs:element name='hTarget'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='charValue'/>
            <xs:element ref='intValue'/>
            <xs:element ref='intValue'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>
<xs:element name='hImpact'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='floatValue'/>
            <xs:element ref='floatValue'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>
<xs:element name='hQuench'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='intValue'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>
<xs:element name='hHardScattering'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='intValue'/>
            <xs:element ref='floatValue'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>
<xs:element name='hMaxJets'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='intValue'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>
<xs:element name='hIHPR2_11_12'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='intValue'/>
            <xs:element ref='intValue'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>
<xs:element name='hIHPR2_21_18'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='intValue'/>
            <xs:element ref='intValue'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>
<xs:element name='hBProduction'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='floatValue'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>
<xs:element name='hIStat'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='intValue'/>
        </xs:sequence>
        <xs:attribute name='Comment' type='xs:string' use='required'/>
    </xs:complexType>
</xs:element>

<xs:complexType name='charValue'>
    <xs:restriction base='xs:string'/>
    <xs:attribute name='widget' type='widgetTypes'/>
</xs:complexType>
<xs:complexType name='intValue'>
    <xs:restriction base='xs:integer'/>
    <xs:attribute name='widget' type='widgetTypes'/>
</xs:complexType>
<xs:complexType name='floatValue'>
    <xs:restriction base='xs:decimal'/>
    <xs:attribute name='widget' type='widgetTypes'/>
</xs:complexType>

<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!-- Pythia is just a bunch of text. Include widget attribute -->
<xs:element name='pythiaMacro'>
    <xs:complexType>
        <xs:sequence>
            <xs:element ref='code'/>
        </xs:sequence>
    </xs:complexType>
</xs:element>

<xs:element name='code'>
    <xs:complexType>
        <xs:restriction base='xs:string'/>
        <xs:attribute name='widget' type='widgetTypes'/>
    </xs:complexType>
</xs:element>

</xs:schema>
