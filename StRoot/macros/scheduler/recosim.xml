<job  maxFilesPerProcess="1" simulateSubmission ="false">
<stdout URL="file:./$JOBID.out" />
<!-- 
<input URL="file:/star/simu/simu/gstardata/rcf1206/done/rcf1206_99_700evts.fzd"></input>
-->
 <input URL="file:/star/simu/simu/gstardata/rcf1206/done/*.fzd"></input>
   <command>       
   <![CDATA[
    # --------------------------
    #  Reconstruction of the simulated jobs
    # --------------------------
    set jobTitle="STAR Reconstruction of the simulated events"   
    time
    echo ${jobTitle}
    # --------------------------
    #  Some user constants
    # --------------------------

    set nSimulatedEvents=5
    set finalDirectory=/star/rcf/prodlog/P04id/log/trs

    # --------------------------

    # check which site we are working on
    set BNL=0
    set remoteNode=stargrid02.rcf.bnl.gov 

    # ---  URL: http://www-pdsf.nersc.gov/~username/   ----
    set localWebPage=~/public_html

    if ( `hostname -d` == "rcf.bnl.gov" ) then;
        set BNL=1
        set remoteNode=pdsfgrid2.nersc.gov 
        # ---  URL: http://www.rhic.bnl.gov/~username/  ----
        set localWebPage=~/WWW
    endif
    # ----  at  BNL (local node) -----
    #
    set finalNode=gsiftp://${remoteNode}
    set finalPackageDirectory=${finalNode}/${finalDirectory}

    # local file directory tree definition
    set packageDirectory=${localWebPage}/gridwork/reco
    set packageDirectoryBin=${packageDirectory}/bin  
    set registerDirectory=${packageDirectory}/register/$REQUESTID
    # ---- prepare the local directory tree 
    #
    mkdir -p ${registerDirectory}
    mkdir -p ${packageDirectoryBin}

    #--  Prepare the catalog
    # 
    if ( ! -f ${registerDirectory}/../index.html ) then;
       echo "<HTML><TITLE>${jobTitle} catalog </TITLE> <BODY> <small> <code> <ul>"  >${registerDirectory}/../index.html
    endif
    echo "<li><a href="$REQUESTID">Job: $REQUESTID `date`</a>" >> ${registerDirectory}/../index.html
    #
    if ( ! -f ${registerDirectory}/index.html ) then;
       echo "<HTML><TITLE>${jobTitle} $REQUESTID catalog </TITLE> <BODY> <small> <code> <ul>"  >${registerDirectory}/index.html
    endif
    echo "<li><a href="$PROCESSID.html">Process: $PROCESSID `date` </a>" >> ${registerDirectory}/index.html

    set localLogFile=${registerDirectory}/$PROCESSID.html
    #
    # ----- end of the node parameteres -----
 


    # ----- The list of the application parameters  -----
    #

    set JOBSEED = $PROCESSID$REQUESTID

    #
    # -----    End of the application parameters   -----

    if ("${BNL}" == "0") then;
       module load globus
    endif
# ---
#   Start the local Web page
# ---
    echo "<HTML><TITLE>${jobTitle} $PROCESSID.$REQUESTID has been started </TITLE> <BODY> <small> <code> <pre>"  >${localLogFile}
    cd ${packageDirectoryBin}

#    -------------------------------
#    Set the proper version of STAR software release
#    -------------------------------

    source /star/u/starreco/.cshrc
    source /afs/rhic.bnl.gov/rhstar/group/.stardev
    stardev
    setenv StarEndMakerShell

    echo "STAR_LIB=${STAR_LIB} STAR_PATH= ${STAR_PATH}"
    if ("${BNL}" == "1") then;
      unsetenv  STAR_LIB
      set STAR_LIB=/afs/rhic.bnl.gov/star/packages/DEV/.i386_linux24/lib
    endif
    

#    -------------------------------
#    Go to the working are 
#    -------------------------------

    cd $SCRATCH

#    -------------------------------
#    Bring the remote file in 
#    -------------------------------

     set JOBFILEBASENAME=`basename ${INPUTFILE0}`
     set ZEBRAINPUT=${JOBFILEBASENAME}
     if ("${BNL}" == "1") then;
       ln -s  ${INPUTFILE0}  $SCRATCH/${ZEBRAINPUT}
     else
       globus-url-copy -p 25  ${remoteNode}${INPUTFILE0}  file:$SCRATCH/${ZEBRAINPUT}
     endif


    #set nFile=0
    #while ( $nFile < $INPUTFILECOUNT )
    #  eval set filename = '$INPUTFILE'$nFile 

        # put your script here, with filename as input file
    #   echo $filename 
    #   set nFile++
    # end


#    -------------------------------
#   start "root4star" from the bin directory
#    -------------------------------
    echo root4star -b -l -q \'bfc.C\(${nSimulatedEvents},\"trs,srs,fss,y2004,tpc,l0,svt,Cdst,Kalman,tags,Tree,bbcsim,tofsim,evout,est,-xi,-v0,xi2,XiSvt,svtdEdx,emcY2,eefs,GeantOut,big,-dstout,CMuDst,fzin\",\"${ZEBRAINPUT}\"\)\'  >>${localLogFile}
    root4star -b -l -q \'bfc.C\(${nSimulatedEvents},\"trs,srs,fss,y2004,tpc,l0,svt,Cdst,Kalman,tags,Tree,bbcsim,tofsim,evout,est,-xi,-v0,xi2,XiSvt,svtdEdx,emcY2,eefs,GeantOut,big,-dstout,CMuDst,fzin\",\"${ZEBRAINPUT}\"\)\' 
    # --- check output
    #  we should see 4 files with non-zero length
    if (! -s ${JOBFILEBASENAME}.tags.root) then;
      echo "root4star ERROR. The output file ${JOBFILEBASENAME}.tags.root was not created. Abort \!\!\! "
      echo "<b>root4star ERROR. The output file ${JOBFILEBASENAME}.tags.root was not created. Abort \!\!\! </b>"     >>${localLogFile}
      exit $status
    endif

    if (! -s ${JOBFILEBASENAME}.hist.root) then;
      echo "root4star ERROR. The output file ${JOBFILEBASENAME}.hist.root was not created. Abort \!\!\! "
      echo "<b>root4star ERROR. The output file ${JOBFILEBASENAME}.hist.root was not created. Abort \!\!\! </b>"      >>${localLogFile}
      exit $status
    endif

    if (! -s ${JOBFILEBASENAME}.geant.root) then;
      echo "root4star ERROR. The output file \"${JOBFILEBASENAME}.geant.root\" was not created. Abort \!\!\! "
      echo "<b>root4star ERROR. The output file \"${JOBFILEBASENAME}.geant.root\" was not created. Abort \!\!\! </b>"  >>${localLogFile}
      exit $status
    endif

    if (! -s ${JOBFILEBASENAME}..event.root) then;
      echo "root4star ERROR. The output file \"${JOBFILEBASENAME}.event.root\" was not created. Abort \!\!\! "
      echo "<b>root4star ERROR. The output file \"${JOBFILEBASENAME}.event.root\" was not created. Abort \!\!\! </b>"  >>${localLogFile}
      exit $status
    endif

#    -------------------------------
#    register the result file (for the sake of the debugging)
#    -------------------------------

    ls -l *.root >>${localLogFile}
         
#    -------------------------------
#    Copy output files to the permanent place
#    -------------------------------

   foreach joboutfile (*.root) 
     echo " Starting ${joboutfile} transfering to BNL" >>${localLogFile}
     echo " Starting ${joboutfile} transfering to BNL"
     globus-url-copy -p 20 file:$SCRATCH/${joboutfile}    ${finalPackageDirectory}/${joboutfile}
   end      
     time
     time >>${localLogFile}
 # ----
 #   close local Web page
 # ----
    echo "</PRE></BODY><HTML>"  >>${localLogFile}
 ]]>
   </command>  
    <output fromScratch="$ZEBRAOUTPUT" >
       <copy ref="pyResult" URI="file:$packageDirectory/testpyth.$PROCESSID.fz" />
       <register ref="pyResult" URI="catalog:star.bnl.gov?att1=nt1,att2=nt2" />
    </output>
</job>
