#include "StRichLambdaUstTrack.h"

ClassImp(StRichLambdaUstTrack)
StRichLambdaUstTrack::StRichLambdaUstTrack() {
    nFitPoints = -999;
    trackQ = -999;
    originX = -999;
    originY = -999;
    originZ = -999;
    curvature = -999;
    psi = -999;
    massSquared = -999;
    cherenkovAngle = -999;
    nPhotons = -999;
    firstX = -999;
    firstY = -999;
    firstZ = -999;
    lastX = -999;
    lastY = -999;
    lastZ = -999;
    otherIndex = -999;
    globalPx = -999;
    globalPy = -999;
    globalPz = -999;
    p = -999;
    DCA = -999;
    DCAx = -999;
    DCAy = -999;
    DCAz = -999;
    DCA3d = -999;
    gSDCA = -999;
    gSDCA2d = -999;
    eta = -999;
    localRadX = -999;
    localRadY = -999;
    localRadZ = -999;
    localRadPx = -999;
    localRadPy = -999;
    localRadPz = -999;
    globalRadX = -999;
    globalRadY = -999;
    globalRadZ = -999;
    globalRadPx = -999;
    globalRadPy = -999;
    globalRadPz = -999;
    localPadX = -999;
    localPadY = -999;
    localPadZ = -999;
    localPadPx = -999;
    localPadPy = -999;
    localPadPz = -999;
    globalPadPx = -999;
    globalPadPy = -999;
    globalPadPz = -999;
    globalPadX = -999;
    globalPadY = -999;
    globalPadZ = -999;
    crossedRich = -999;
    isLambda = -999;
    lambdaMass = -999;
    alphaLambda = -999;
    ptArmLambda = -999;
    globalXLambda = -999;
    globalYLambda = -999;
    globalZLambda = -999;
    globalPxLambda = -999;
    globalPyLambda = -999;
    globalPzLambda = -999;
    otherLambdaDaughter = -999;
    isAntiLambda = -999;
    antiLambdaMass = -999;
    alphaAntiLambda = -999;
    ptArmAntiLambda = -999;
    globalXAntiLambda = -999;
    globalYAntiLambda = -999;
    globalZAntiLambda = -999;
    globalPxAntiLambda = -999;
    globalPyAntiLambda = -999;
    globalPzAntiLambda = -999;
    otherAntiLambdaDaughter = -999;
    isK0Short = -999;
    k0ShortMass = -999;
    alphaK0Short = -999;
    ptArmK0Short = -999;
    globalXK0Short = -999;
    globalYK0Short = -999;
    globalZK0Short = -999;
    globalPxK0Short = -999;
    globalPyK0Short = -999;
    globalPzK0Short = -999;
    otherK0ShortDaughter = -999;
    residX = -999;
    residY = -999;
    resid = -999;
    mipIndex = -999;
    spX = -999;
    spY = -999;
    spDx = -999;
    spDy = -999;
    spCdx = -999;
    spCdy = -999;
    spMass2 = -999;
    spCherenkovAngle = -999;
    spNphotons = -999;
    trackFlag = -999;
}
StRichLambdaUstTrack::StRichLambdaUstTrack(StRichLambdaUstTrack& in) {
    nFitPoints = in.GetNFitPoints();
    trackQ = in.GetTrackQ();
    originX = in.GetOriginX();
    originY = in.GetOriginY();
    originZ = in.GetOriginZ();
    curvature = in.GetCurvature();
    psi = in.GetPsi();
    massSquared = in.GetMassSquared();
    cherenkovAngle = in.GetCherenkovAngle();
    nPhotons = in.GetNPhotons();
    firstX = in.GetFirstX();
    firstY = in.GetFirstY();
    firstZ = in.GetFirstZ();
    lastX = in.GetLastX();
    lastY = in.GetLastY();
    lastZ = in.GetLastZ();
    otherIndex = in.GetOtherIndex();
    globalPx = in.GetGlobalPx();
    globalPy = in.GetGlobalPy();
    globalPz = in.GetGlobalPz();
    p = in.GetP();
    DCA = in.GetDCA();
    DCAx = in.GetDCAx();
    DCAy = in.GetDCAy();
    DCAz = in.GetDCAz();
    DCA3d = in.GetDCA3d();
    gSDCA = in.GetGSDCA();
    gSDCA2d = in.GetGSDCA2d();
    eta = in.GetEta();
    localRadX = in.GetLocalRadX();
    localRadY = in.GetLocalRadY();
    localRadZ = in.GetLocalRadZ();
    localRadPx = in.GetLocalRadPx();
    localRadPy = in.GetLocalRadPy();
    localRadPz = in.GetLocalRadPz();
    globalRadX = in.GetGlobalRadX();
    globalRadY = in.GetGlobalRadY();
    globalRadZ = in.GetGlobalRadZ();
    globalRadPx = in.GetGlobalRadPx();
    globalRadPy = in.GetGlobalRadPy();
    globalRadPz = in.GetGlobalRadPz();
    localPadX = in.GetLocalPadX();
    localPadY = in.GetLocalPadY();
    localPadZ = in.GetLocalPadZ();
    localPadPx = in.GetLocalPadPx();
    localPadPy = in.GetLocalPadPy();
    localPadPz = in.GetLocalPadPz();
    globalPadPx = in.GetGlobalPadPx();
    globalPadPy = in.GetGlobalPadPy();
    globalPadPz = in.GetGlobalPadPz();
    globalPadX = in.GetGlobalPadX();
    globalPadY = in.GetGlobalPadY();
    globalPadZ = in.GetGlobalPadZ();
    crossedRich = in.GetCrossedRich();
    isLambda = in.GetIsLambda();
    lambdaMass = in.GetLambdaMass();
    alphaLambda = in.GetAlphaLambda();
    ptArmLambda = in.GetPtArmLambda();
    globalXLambda = in.GetGlobalXLambda();
    globalYLambda = in.GetGlobalYLambda();
    globalZLambda = in.GetGlobalZLambda();
    globalPxLambda = in.GetGlobalPxLambda();
    globalPyLambda = in.GetGlobalPyLambda();
    globalPzLambda = in.GetGlobalPzLambda();
    otherLambdaDaughter = in.GetOtherLambdaDaughter();
    isAntiLambda = in.GetIsAntiLambda();
    antiLambdaMass = in.GetAntiLambdaMass();
    alphaAntiLambda = in.GetAlphaAntiLambda();
    ptArmAntiLambda = in.GetPtArmAntiLambda();
    globalXAntiLambda = in.GetGlobalXAntiLambda();
    globalYAntiLambda = in.GetGlobalYAntiLambda();
    globalZAntiLambda = in.GetGlobalZAntiLambda();
    globalPxAntiLambda = in.GetGlobalPxAntiLambda();
    globalPyAntiLambda = in.GetGlobalPyAntiLambda();
    globalPzAntiLambda = in.GetGlobalPzAntiLambda();
    otherAntiLambdaDaughter = in.GetOtherAntiLambdaDaughter();
    isK0Short = in.GetIsK0Short();
    k0ShortMass = in.GetK0ShortMass();
    alphaK0Short = in.GetAlphaK0Short();
    ptArmK0Short = in.GetPtArmK0Short();
    globalXK0Short = in.GetGlobalXK0Short();
    globalYK0Short = in.GetGlobalYK0Short();
    globalZK0Short = in.GetGlobalZK0Short();
    globalPxK0Short = in.GetGlobalPxK0Short();
    globalPyK0Short = in.GetGlobalPyK0Short();
    globalPzK0Short = in.GetGlobalPzK0Short();
    otherK0ShortDaughter = in.GetOtherK0ShortDaughter();
    residX = in.GetResidX();
    residY = in.GetResidY();
    resid = in.GetResid();
    mipIndex = in.GetMipIndex();
    spX = in.GetSpX();
    spY = in.GetSpY();
    spDx = in.GetSpDx();
    spDy = in.GetSpDy();
    spCdx = in.GetSpCdx();
    spCdy = in.GetSpCdy();
    spMass2 = in.GetSpMass2();
    spCherenkovAngle = in.GetSpCherenkovAngle();
    spNphotons = in.GetSpNphotons();
    trackFlag = in.GetTrackFlag();
}