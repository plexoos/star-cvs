#!/bin/bash

####################################################
# Check the analysis environment
####################################################
export ANALYSIS_DIR="${0%/*}"
if [[ -f "./.analysis.cfg.sh" ]]
then
    source "./.analysis.cfg.sh"
fi
if [[ -f "$ANALYSIS_DIR/StPi0Common/macros/commands" ]]
then
    source "$ANALYSIS_DIR/StPi0Common/macros/commands"
else
    echo "Analysis environment is not configured!"
fi
if [[ "$ANALYSIS_MACRO_PATH" == "" ]]
then
    export ANALYSIS_MACRO_PATH=". ./macros"
fi
####################################################

####################################################
function do_submit () {
    #export ARGS="$@"

    export SUMSOPT=''
    if [[ "$MYSUBMITPOLICY" != "" ]] ; then export SUMSOPT="$SUMSOPT -p $MYSUBMITPOLICY" ; fi
    if [[ "$MYSUBMITNOCHECKFILELIST" == "yes" ]] ; then export SUMSOPT="$SUMSOPT -u ie" ; fi
    if [[ "$MYSUBMITNOCHECKQUEUE" == "yes" ]] ; then export SUMSOPT="$SUMSOPT -u nqc" ; fi
    if [[ "$SUMSOPT" != "" ]] ; then export SUMSOPT=" --$SUMSOPT" ; fi

    export COMMAND=${MYSTARSUBMIT}' '"$@"${SUMSOPT}
    echo "$COMMAND"
    if [[ "$MYDOSUBMIT" == "yes" ]]
    then
	$COMMAND
    fi
}

####################################################
function add_possible_option () {
    export POSS_OPT=$@
    if [[ `echo $POSSIBLE_OPTIONS | grep -c -e "$POSS_OPT"` == "0" ]]
    then
	export POSSIBLE_OPTIONS="$POSSIBLE_OPTIONS\n$POSS_OPT"
    fi
}

####################################################
function add_possible_submit () {
    export POSS_SUB=$@
    if [[ `echo $POSSIBLE_SUBMITS | grep -c -e "$POSS_SUB"` == "0" ]]
    then
	export POSSIBLE_SUBMITS="$POSSIBLE_SUBMITS\n$POSS_SUB"
    fi
}

####################################################
function add_possible_query () {
    export POSS_QUE=$@
    if [[ `echo $POSSIBLE_QUERIES | grep -c -e "$POSS_QUE"` == "0" ]]
    then
	export POSSIBLE_QUERIES="$POSSIBLE_QUERIES\n$POSS_QUE"
    fi
}

####################################################
function finalize_options_query () {
    export MYQUERY_general='runtype=physics,available=1,sanity=1,emc=1,tpc=1'${MYQUERY_filetype}${MYQUERY_storage}
    export MYQUERY_general_sim='runtype=simulation'${MYQUERY_filetype_sim}${MYQUERY_storage}
}
function finalize_options_eventroot () {
    if [[ "$USEEVENTROOT" == "yes" ]] ; then export MYQUERY_filetype=',filetype=daq_reco_event' ; else export MYQUERY_filetype=',filetype=daq_reco_MuDst' ; fi
    if [[ "$USEEVENTROOT" == "yes" ]] ; then export MYQUERY_filetype_sim=',filetype=MC_reco_event' ; else export MYQUERY_filetype_sim=',filetype=MC_reco_MuDst' ; fi
    finalize_options_query
}
function finalize_options_xrootd () {
    if [[ "$USEXROOTD" == "yes" ]]
    then
	export MYFILELISTSYNTAX='xrootd'
	export MYQUERY_storage=''
    else
	export MYFILELISTSYNTAX='paths'
	export MYQUERY_storage=',storage!=HPSS'
    fi
    finalize_options_query
}
function finalize_options_discardstdout () {
    if [[ "$MYDISCARDSTDOUT" == "yes" ]] ; then export MYDISCARDSTDOUT='true'  ; fi
    if [[ "$MYDISCARDSTDOUT" == "no" ]]  ; then export MYDISCARDSTDOUT='false' ; fi
}
function finalize_options_discardstderr () {
    if [[ "$MYDISCARDSTDERR" == "yes" ]] ; then export MYDISCARDSTDERR='true'  ; fi
    if [[ "$MYDISCARDSTDERR" == "no" ]]  ; then export MYDISCARDSTDERR='false' ; fi
}
function finalize_options_final () {
    if [[ "${MYFINAL_ANALYSIS//*temp*/yes}" != "yes" ]]
    then
	set_option 'files_per_job_analysis=100000 files_per_hour_analysis=100'
    fi
}

####################################################
function check_option () {
    export OPTN=$1
    export OPT=$2
    export TITLE=$3
    export VAR=$4
    export DEFAULT=$5
    export CALLBACK=$6
    if [[ "$DEFAULT" == "" ]] ; then export DEFAULT='yes' ; fi

    if [[ "$ADD_POSSIBLE_OPTIONS" == "yes" ]] ; then add_possible_option "$OPT - $TITLE (=$DEFAULT if empty)" ; fi

    if [[ "$OPTN" == "$OPT" ]]
    then
        if [[ "$USE_THIS_OPTION_FOUND" == "yes" ]] ; then export THIS_OPTION_FOUND='yes' ; fi
	export VAR_CHANGED_NAME=${VAR}_CHANGED
	if [[ ( "${!VAR_CHANGED_NAME}" == "" ) || ( "$ALLOW_CHANGE_VARS" == "yes" ) ]]
	then
	    export $VAR=$DEFAULT
	    if [[ "$ALLOW_CHANGE_VARS" == "yes" ]] ; then export ${VAR}_CHANGED='yes' ; fi
	    if [[ "$CALLBACK" != "" ]]
	    then
		$CALLBACK
	    fi
	fi
    else
        if [[ "${OPTN//$OPT=*/yes}" == "yes" ]]
        then
	    if [[ "$USE_THIS_OPTION_FOUND" == "yes" ]] ; then export THIS_OPTION_FOUND='yes' ; fi
	    export VAR_CHANGED_NAME=${VAR}_CHANGED
	    if [[ ( "${!VAR_CHANGED_NAME}" == "" ) || ( "$ALLOW_CHANGE_VARS" == "yes" ) ]]
	    then
		export VALUE=${OPTN//$OPT=/}
		if [[ "$VALUE" == "" ]] ; then export VALUE=$DEFAULT ; fi
		export $VAR=$VALUE
		if [[ "$ALLOW_CHANGE_VARS" == "yes" ]] ; then export ${VAR}_CHANGED='yes' ; fi
		if [[ "$CALLBACK" != "" ]]
		then
		    $CALLBACK
		fi
	    fi
	fi
    fi
}

####################################################
function set_option () {
    export OPTIONS_="$@"
    for OPTION_ in $OPTIONS_
    do
	check_option $OPTION_ 'data_path' 'Data root directory, <path>' 'DATA_PATH' $DATA_PATH
    	check_option $OPTION_ 'dataout_path' 'Data output root directory, <path>' 'DATAOUT_PATH' $DATAOUT_PATH
        check_option $OPTION_ 'datafinal_path' 'Data final root directory, <path>' 'DATAFINAL_PATH' $DATAFINAL_PATH
        check_option $OPTION_ 'scratch_path' 'Scratch directory, <path>' 'SCRATCH' $SCRATCH
        check_option $OPTION_ 'local' 'Run local jobs, yes|no' 'MYDOSUBMITLOCAL' 'yes'
        check_option $OPTION_ 'submit' 'Do real submit, yes|no' 'MYDOSUBMIT' 'yes'
        check_option $OPTION_ 'final' 'Run temp and/or final, temp|temp+final|final' 'MYFINAL_ANALYSIS' 'final' 'finalize_options_final'
        check_option $OPTION_ 'check_script_data' 'Check if data script compiles and runs, yes|no' 'MYCHECK_DATA' 'yes'
        check_option $OPTION_ 'check_script_analysis' 'Check if analysis script compiles and runs, yes|no' 'MYCHECK_ANALYSIS' 'yes'
        check_option $OPTION_ 'make' '"make" on the fly, yes|no' 'MYDOMAKE' 'yes'
        check_option $OPTION_ 'cons' '"cons" on the fly, yes|no' 'MYDOCONS' 'yes'
        check_option $OPTION_ 'debug' 'Run in the debugger, yes|no' 'MYDEBUG' 'yes'
        check_option $OPTION_ 'simu_njobs' 'Number of simulation jobs per submit' 'SIMU_JOBS' $SIMU_JOBS
        check_option $OPTION_ 'simu_nevents' 'Number of simulated events per job' 'SIMU_NEVENTS' $SIMU_NEVENTS
        check_option $OPTION_ 'keep_fzd' 'Keep *.fzd files from simulation, yes|no' 'SIMU_KEEP_FZD' 'yes'
        check_option $OPTION_ 'events_per_job' 'Number of events per job to be processed' 'MYEVENTSPERJOB' $MYEVENTSPERJOB
        check_option $OPTION_ 'files_per_job_data' 'Number of files per job for the data pass' 'MYFILESPERJOB_DATA' $MYFILESPERJOB_DATA
        check_option $OPTION_ 'files_per_job_analysis' 'Number of files per job for the analysis pass' 'MYFILESPERJOB_ANALYSIS' $MYFILESPERJOB_ANALYSIS
        check_option $OPTION_ 'files_per_hour_simu' 'Number of files per hour for the starsim' 'MYFILESPERHOUR_SIMU' $MYFILESPERHOUR_SIMU
        check_option $OPTION_ 'files_per_hour_data' 'Number of files per hour for the data pass' 'MYFILESPERHOUR_DATA' $MYFILESPERHOUR_DATA
        check_option $OPTION_ 'files_per_hour_analysis' 'Number of files per hour for the analysis pass' 'MYFILESPERHOUR_ANALYSIS' $MYFILESPERHOUR_ANALYSIS
        check_option $OPTION_ 'discard_stdout' 'Discard stdout of the jobs, yes|no' 'MYDISCARDSTDOUT' 'yes' 'finalize_options_discardstdout'
        check_option $OPTION_ 'discard_stderr' 'Discard stderr of the jobs, yes|no' 'MYDISCARDSTDERR' 'yes' 'finalize_options_discardstderr'
        check_option $OPTION_ 'eventroot' 'Use event.root files, yes|no' 'USEEVENTROOT' 'yes' 'finalize_options_eventroot'
        check_option $OPTION_ 'xrootd' 'Use xrootd, yes|no' 'USEXROOTD' 'yes' 'finalize_options_xrootd'
        check_option $OPTION_ 'jprof' 'Use Jprof profiler, yes|no' 'MYJPROF' 'yes'
        check_option $OPTION_ 'keep_scratch' 'Keep scratch directory after local job finishes, yes|no' 'MYKEEPSCRATCH' 'yes'
        check_option $OPTION_ 'condor' 'Submit with (Condor) policy, <policy>' 'MYSUBMITPOLICY' 'bnl_condor_cas'
        check_option $OPTION_ 'no_dataset_check' 'Do not check dataset against files_per_job requirement, yes|no' 'MYSUBMITNOCHECKFILELIST' 'yes'
        check_option $OPTION_ 'no_queue_check' 'Do not check queue before submit, yes|no' 'MYSUBMITNOCHECKQUEUE' 'yes'
        check_option $OPTION_ 'help' 'Show usage, yes|no' 'SHOW_HELP' 'yes'
        check_option $OPTION_ 'sleep_analysis' 'Random sleep after analysis, yes|no' 'MYSLEEP' 'yes'
        check_option $OPTION_ 'star-submit-template' 'Which version to use, <command>' 'MYSTARSUBMIT' $MYSTARSUBMIT
        check_option $OPTION_ 'weight_iteration' 'Weight iteration, 0|1|2...' 'WEIGHT_ITERATION' $WEIGHT_ITERATION
    done
}

####################################################
function set_default_options () {
    export IS_LOCAL='yes'
    export IS_RCF='no'
    export IS_PDSF='no'
    export CATALOG=""
    if [[ "$DOMAINNAME" == "rhic.bnl.gov" ]] 
    then
	export IS_LOCAL='no'
	export IS_RCF='yes'
	export CATALOG='star.bnl.gov'
    fi
    if [[ "$DOMAINNAME" == "nersc.gov" ]] 
    then 
	export IS_LOCAL='no'
	export IS_PDSF='yes'
	export CATALOG='pdsf.nersc.gov'
    fi

    if [[ "$PWD" == "" ]] ; then export PWD=`pwd` ; fi

    if [[ "$STAR_HOST_SYS" == "" ]] ; then export STAR_HOST_SYS=`get_sys` ; fi

    export MYSIMURUN=run_simulation
    export MYSIMUJOB=run_simulation.xml

    export MYDATASCRIPT=run_data.C
    export MYDATARUN=run_data
    export MYDATAJOB=run_data.xml

    export MYANALYSISSCRIPT=run_analysis.C
    export MYANALYSISFINALSCRIPT=run_analysis_final.C
    export MYANALYSISRUN=run_analysis
    export MYANALYSISJOB=run_analysis.xml

    export MYSTARLEVEL='dev'
    #'SL07b'

    export DATA_PATH=$PWD/data
    export DATAOUT_PATH=$PWD/data_output
    export DATAFINAL_PATH=$PWD/data_final
    if [[ "$SCRATCH" == "" ]] ; then export SCRATCH=/tmp/${USER} ; fi

    export MYDOSUBMIT='yes'
    export MYDOSUBMITLOCAL='no'
    if [[ "$IS_LOCAL" == "yes" ]]
    then
	export MYDOSUBMIT='no'
	export MYDOSUBMITLOCAL='yes'
    fi
    export MYFINAL_ANALYSIS='temp+final'
    export MYCHECK_DATA='no'
    export MYCHECK_ANALYSIS='no'
    export MYDOMAKE='no'
    export MYDOCONS='no'
    export MYDEBUG='no'
    export SIMU_JOBS='100'
    export SIMU_NEVENTS='5000'
    export SIMU_KEEP_FZD='no'
    export MYEVENTSPERJOB='-1'
    export MYFILESPERJOB_DATA='200'
    export MYFILESPERJOB_ANALYSIS='20'
    export MYFILESPERHOUR_SIMU='0.3'
    export MYFILESPERHOUR_DATA='3'
    export MYFILESPERHOUR_ANALYSIS='40'
    export MYDISCARDSTDOUT='false'
    export MYDISCARDSTDERR='false'
    export USEEVENTROOT='no'
    if [[ "$IS_RCF" == "yes" ]] ; then export USEXROOTD='yes' ; else export USEXROOTD='no' ; fi
    export MYJPROF='no'
    export MYKEEPSCRATCH='no'
    export MYSUBMITPOLICY=''
    export MYSUBMITNOCHECKFILELIST='no'
    export MYSUBMITNOCHECKQUEUE='no'
    export SHOW_HELP=''
    export MYSLEEP='no'
    export MYSTARSUBMIT='star-submit-template'
    export WEIGHT_ITERATION='0'

    set_option "$DEFAULT_SUBMIT_OPTIONS"
}

####################################################
function submit_analysis () {
    if [[ ( "$4" == "" ) || ( "$4" == "$2" ) ]] ; then add_possible_submit "$2 - $8" ; else add_possible_submit "$2" ; fi
    if [[ ( "$4" != "" ) && ( "$4" != "$2" ) ]] ; then add_possible_submit "        $4 - $8" ; fi
    export MYTAG="$4"
    if [[ "$MYTAG" == "" ]] ; then export MYTAG=$2 ; fi
    export THIS_OPTION="$1"
    if [[ ( "${MYTAG//$THIS_OPTION/yes}" == "yes" ) || ( "$THIS_OPTION" == "$2" ) ]]
    then
	export THIS_OPTION_FOUND='yes'
	echo "Running $MYTAG..."
	if [[ "$SCRIPT_ANALYSIS_GOOD" == "yes" ]]
	then
	    mkdir -p ${6}
	    mkdir -p ${9}
	    export MYCONFIG="$3"
	    export MYWEIGHTFILE="$7"
	    export REQUESTID=`get_random_number 32`
	    export JOBID=${REQUESTID}_0
	    export FILESPERJOB=$MYFILESPERJOB_ANALYSIS
	    if [[ "${MYFINAL_ANALYSIS//*temp*/yes}" == "yes" ]]
	    then
		export FILES="$5"
		export STDOUT=${MYTAG}_temp_$JOBID.out
		export STDERR=${MYTAG}_temp_$JOBID.err
		export STDOUTJOB=${MYTAG}_temp_\$JOBID.out
		export STDERRJOB=${MYTAG}_temp_\$JOBID.err
	    else
		export FILES="$6/${MYTAG}_temp_*.root"
		export STDOUT=${MYTAG}_final_$JOBID.out
		export STDERR=${MYTAG}_final_$JOBID.err
		export STDOUTJOB=${MYTAG}_final_\$JOBID.out
		export STDERRJOB=${MYTAG}_final_\$JOBID.err
	    fi
	    if [[ "$MYDOSUBMITLOCAL" == "yes" ]]
	    then

		export SCRATCH_JOB=$SCRATCH/$JOBID
		echo "Running in $SCRATCH_JOB..."
		rm -fr $SCRATCH_JOB
		mkdir -p $SCRATCH_JOB
		cp -fr $ANALYSIS_DIR/StPi0Analysis/macros/$MYANALYSISRUN $SCRATCH_JOB/
		export FILELIST=$PWD/sched${JOBID}.list
		rm -fr $FILELIST ; touch $FILELIST
		for FILE in $FILES ; do echo "file:$FILE" >> $FILELIST ; done
		export STDOUTFILE=$SCRATCH_JOB/$STDOUT
		export STDERRFILE=$SCRATCH_JOB/$STDERR
		if [[ "$MYDISCARDSTDOUT" == "true" ]] ; then export STDOUTFILE='/dev/null' ; fi
		if [[ "$MYDISCARDSTDERR" == "true" ]] ; then export STDERRFILE='/dev/null' ; fi
#csh << ENDOFINPUT > $STDOUTFILE 2> $STDERRFILE
csh << ENDOFINPUT > $STDOUTFILE 2>&1
if { which starver } then
    echo "Changing STAR version to $MYSTARLEVEL"
    starver $MYSTARLEVEL
endif
$SCRATCH_JOB/$MYANALYSISRUN \
$PWD \
$ANALYSIS_DIR \
$MYDEBUG \
$MYANALYSISSCRIPT \
$MYANALYSISFINALSCRIPT \
"$MYTAG" \
"$MYCONFIG" \
$SCRATCH_JOB \
${6} \
${9} \
$FILELIST \
$REQUESTID \
$JOBID \
'1' \
$MYDOCONS \
$MYDOMAKE \
.$STAR_HOST_SYS \
$MYFINAL_ANALYSIS \
$MYWEIGHTFILE \
$MYSLEEP \
$MYDISCARDSTDOUT
ENDOFINPUT
		if [[ "$STDOUTFILE" != "/dev/null" ]] ; then cp -fr $STDOUTFILE $6/ ; fi
		#if [[ "$STDERRFILE" != "/dev/null" ]] ; then cp -fr $STDERRFILE $6/ ; fi
		if [[ "$MYKEEPSCRATCH" != "yes" ]] ; then rm -fr $SCRATCH_JOB ; fi

	    else

        	do_submit \
		    -entities \
mytag=`xml_escape_star-submit-template $MYTAG`,\
myconfig=`xml_escape_star-submit-template $MYCONFIG`,\
myquery=`xml_escape_star-submit-template file:"$FILES"`,\
mypathout=`xml_escape_star-submit-template ${6}`,\
mypathfinal=`xml_escape_star-submit-template ${9}`,\
myscript=`xml_escape_star-submit-template $MYANALYSISSCRIPT`,\
myscriptfinal=`xml_escape_star-submit-template $MYANALYSISFINALSCRIPT`,\
mymaxfiles=`xml_escape_star-submit-template $FILESPERJOB`,\
myminfiles=`xml_escape_star-submit-template $FILESPERJOB`,\
myfilesperhour=`xml_escape_star-submit-template $MYFILESPERHOUR_ANALYSIS`,\
mypwd=`xml_escape_star-submit-template $PWD`,\
mypwdanalysis=`xml_escape_star-submit-template $ANALYSIS_DIR`,\
mydebug=`xml_escape_star-submit-template $MYDEBUG`,\
myfinal=`xml_escape_star-submit-template $MYFINAL_ANALYSIS`,\
myrun=`xml_escape_star-submit-template $MYANALYSISRUN`,\
mydocons=`xml_escape_star-submit-template $MYDOCONS`,\
mydomake=`xml_escape_star-submit-template $MYDOMAKE`,\
mystarver=`xml_escape_star-submit-template $MYSTARLEVEL`,\
myweightfile=`xml_escape_star-submit-template $MYWEIGHTFILE`,\
mydiscardstdout=`xml_escape_star-submit-template $MYDISCARDSTDOUT`,\
mydiscardstderr=`xml_escape_star-submit-template $MYDISCARDSTDERR`,\
mystdout=`xml_escape_star-submit-template $STDOUTJOB`,\
mystderr=`xml_escape_star-submit-template $STDERRJOB`,\
mysleep=`xml_escape_star-submit-template $MYSLEEP`\
		-template "$ANALYSIS_DIR/StPi0Analysis/macros/$MYANALYSISJOB"

	    fi
	fi
    fi
}

####################################################
function submit_datapass () {
    if [[ ( "$6" == "" ) || ( "$6" == "$2" ) ]] ; then add_possible_submit "$2 - $7" ; else add_possible_submit "$2" ; fi
    if [[ ( "$6" != "" ) && ( "$6" != "$2" ) ]] ; then add_possible_submit "        $6 - $7" ; fi
    export MYQUERYSTR="$3"
    export MYQUERY=${MYQUERYSTR#catalog:*\?}
    export MYQUERY_EXISTS=${MYQUERYSTR//catalog:*/yes}
    if [[ "$MYQUERY_EXISTS" == "yes" ]]
    then
	if [[ ( "$6" == "" ) || ( "$6" == "$2" ) ]] ; then add_possible_query "$2 - $MYQUERY" ; fi
	if [[ ( "$6" != "" ) && ( "$6" != "$2" ) ]] ; then add_possible_query "$6 - $MYQUERY" ; fi
    fi
    export THIS_OPTION="$1"
    export MYTAG="$6"
    if [[ "$MYTAG" == "" ]] ; then export MYTAG=$2 ; fi
    if [[ "${MYTAG//$THIS_OPTION/yes}" == "yes" ]]
    then
	export THIS_OPTION_FOUND='yes'
	echo "Running $MYTAG..."
	if [[ "$SCRIPT_DATA_GOOD" == "yes" ]]
	then
	    mkdir -p $5
	    export MYFILELIST=${MYQUERYSTR#filelist:\/\/}
	    export MYFILELIST_EXISTS=${MYQUERYSTR//filelist:*/yes}
	    export MYFILES=${MYQUERYSTR#file:\/\/}
	    export MYFILES_EXISTS=${MYQUERYSTR//file:*/yes}
	    export FILELIST_SYNTAX=$MYFILELISTSYNTAX
	    if [[ "$MYQUERY_EXISTS" == "yes" ]]
	    then
	        echo "Number of events: "
    	        echo "get_file_list.pl -keys 'sum(events)' -cond '"$MYQUERY"' -distinct"
    	        get_file_list.pl -keys 'sum(events)' -cond $MYQUERY -distinct
	    else
	        export FILELIST_SYNTAX='paths'
	    fi
    
	    if [[ "$MYDOSUBMITLOCAL" == "yes" ]]
	    then
    
	        export REQUESTID=`get_random_number 32`
	        export JOBID=${REQUESTID}_0
	        export SCRATCH_JOB=$SCRATCH/$JOBID
		echo "Running in $SCRATCH_JOB..."
	        rm -fr $SCRATCH_JOB
	        mkdir -p $SCRATCH_JOB
	        cp -fr $ANALYSIS_DIR/StPi0DataMaker/macros/$MYDATARUN $SCRATCH_JOB/
	        if [[ "$MYFILELIST_EXISTS" == "yes" ]]
	        then
	            export FILELIST=$MYFILELIST
	        else
		    export FILELIST=$PWD/sched${JOBID}.list
		    rm -fr $FILELIST ; touch $FILELIST
		    if [[ "$MYFILES_EXISTS" == "yes" ]]
		    then
		        ls -1 --indicator-style=none $MYFILES >> $FILELIST
		    fi
		    if [[ "$MYQUERY_EXISTS" == "yes" ]]
		    then
		        get_file_list.pl -keys "path,filename" -cond "$MYQUERY" -delim '/' -limit 0 >> $FILELIST
		    fi
	        fi
	        export STDOUT=${MYTAG}_${JOBID}.out
		export STDOUTFILE=$SCRATCH_JOB/$STDOUT
		if [[ "$MYDISCARDSTDOUT" == "true" ]] ; then export STDOUTFILE='/dev/null' ; fi
csh << ENDOFINPUT > $STDOUTFILE 2>&1
if { which starver } then
    echo "Changing STAR version to $MYSTARLEVEL"
    starver $MYSTARLEVEL
endif
$SCRATCH_JOB/$MYDATARUN \
$PWD \
$ANALYSIS_DIR \
$MYDEBUG \
$MYDATASCRIPT \
"$MYTAG" \
"$4" \
$SCRATCH_JOB \
$FILELIST \
$JOBID \
$MYDOCONS \
$FILELIST_SYNTAX \
"$5" \
$MYJPROF \
$MYEVENTSPERJOB
ENDOFINPUT
	        cp -fr $SCRATCH_JOB/$STDOUT $5/
	        if [[ "$MYKEEPSCRATCH" != "yes" ]] ; then rm -fr $SCRATCH_JOB ; fi

	    else

	        do_submit\
		    -entities \
mytag=`xml_escape_star-submit-template $MYTAG`,\
myconfig=`xml_escape_star-submit-template $4`,\
mymaxfiles=`xml_escape_star-submit-template $MYFILESPERJOB_DATA`,\
myminfiles=`xml_escape_star-submit-template $MYFILESPERJOB_DATA`,\
myfilesperhour=`xml_escape_star-submit-template $MYFILESPERHOUR_DATA`,\
myquery=`xml_escape_star-submit-template $MYQUERYSTR`,\
mypathout=`xml_escape_star-submit-template $5`,\
myscript=`xml_escape_star-submit-template $MYDATASCRIPT`,\
myrun=`xml_escape_star-submit-template $MYDATARUN`,\
mypwd=`xml_escape_star-submit-template $PWD`,\
mypwdanalysis=`xml_escape_star-submit-template $ANALYSIS_DIR`,\
mydebug=`xml_escape_star-submit-template $MYDEBUG`,\
mydocons=`xml_escape_star-submit-template $MYDOCONS`,\
myfilelistsyntax=`xml_escape_star-submit-template $FILELIST_SYNTAX`,\
mydiscardstdout=`xml_escape_star-submit-template $MYDISCARDSTDOUT`,\
mydiscardstderr=`xml_escape_star-submit-template $MYDISCARDSTDERR`,\
mystarver=`xml_escape_star-submit-template $MYSTARLEVEL`,\
myjprof=`xml_escape_star-submit-template $MYJPROF`,\
mynevents=`xml_escape_star-submit-template $MYEVENTSPERJOB`\
		    -template "$ANALYSIS_DIR/StPi0DataMaker/macros/$MYDATAJOB"
	    fi
	fi
    fi
}

####################################################
function submit_starsim () {
    if [[ ( "$9" == "" ) || ( "$9" == "$2" ) ]] ; then add_possible_submit "$2 - $8" ; else add_possible_submit "$2" ; fi
    if [[ ( "$9" != "" ) && ( "$9" != "$2" ) ]] ; then add_possible_submit "        $9 - $8" ; fi
    if [[ "$1" == "$2" ]]
    then
	export THIS_OPTION_FOUND='yes'
	export MYTAG=$2
	echo "Running $MYTAG..."
	mkdir -p $3
	export REQUESTID=`get_random_number 32`
	export FILELIST=$3/_filelist_${REQUESTID}.list ; rm -f $FILELIST ; touch $FILELIST
	for (( ID=$(($SIMU_JOBS)) ; ID ; --ID )) ; do touch $3/_${REQUESTID}.${ID} ; echo file:$3/_${REQUESTID}.${ID} >> $FILELIST ; done
	if [[ "$MYDOSUBMITLOCAL" == "yes" ]]
	then

	    export JOBID=${REQUESTID}_0
	    export SCRATCH_JOB=$SCRATCH/$JOBID
	    rm -fr $SCRATCH_JOB
	    mkdir -p $SCRATCH_JOB
	    cp -fr $ANALYSIS_DIR/StPi0Simulation/macros/$MYSIMURUN $SCRATCH_JOB/
	    export STDOUT=${MYTAG}_${JOBID}.out
	    export STDOUTFILE=$SCRATCH_JOB/$STDOUT
	    if [[ "$MYDISCARDSTDOUT" == "true" ]] ; then export STDOUTFILE='/dev/null' ; fi
csh << ENDOFINPUT > $STDOUTFILE 2>&1
if { which starver } then
    echo "Changing STAR version to $5"
    starver $5
else
    echo 'No starver!!! Check if STAR environment is set up.'
endif
$SCRATCH_JOB/$MYSIMURUN \
$PWD \
$ANALYSIS_DIR \
$MYDEBUG \
"$MYTAG" \
$4 \
$SCRATCH_JOB \
$SIMU_NEVENTS \
$JOBID \
"$7" \
"$6" \
"$3" \
$SIMU_KEEP_FZD
ENDOFINPUT
	    cp -fr $SCRATCH_JOB/$STDOUT $3/
	    if [[ "$MYKEEPSCRATCH" != "yes" ]] ; then rm -fr $SCRATCH_JOB ; fi

	else
# $(( 1000 / SIMU_NEVENTS )) - fractional numbers don't work in bash!
	    do_submit\
		-entities \
mytag=`xml_escape_star-submit-template $MYTAG`,\
myscript=`xml_escape_star-submit-template $4`,\
myquery=`xml_escape_star-submit-template filelist:$FILELIST`,\
mydebug=`xml_escape_star-submit-template $MYDEBUG`,\
mymaxfiles=`xml_escape_star-submit-template 1`,\
myminfiles=`xml_escape_star-submit-template 1`,\
myfilesperhour=`xml_escape_star-submit-template $MYFILESPERHOUR_SIMU`,\
mypathout=`xml_escape_star-submit-template $3`,\
mypwd=`xml_escape_star-submit-template $PWD`,\
mypwdanalysis=`xml_escape_star-submit-template $ANALYSIS_DIR`,\
mynevents=`xml_escape_star-submit-template $SIMU_NEVENTS`,\
myconfig=`xml_escape_star-submit-template $6`,\
mygeometrytag=`xml_escape_star-submit-template $7`,\
mystarver=`xml_escape_star-submit-template $5`,\
mykeepfzd=`xml_escape_star-submit-template $SIMU_KEEP_FZD`,\
mydiscardstdout=`xml_escape_star-submit-template $MYDISCARDSTDOUT`,\
mydiscardstderr=`xml_escape_star-submit-template $MYDISCARDSTDERR`,\
myrun=`xml_escape_star-submit-template $MYSIMURUN`\
		-template "$ANALYSIS_DIR/StPi0Simulation/macros/$MYSIMUJOB"
	fi
	for (( ID=$(($SIMU_JOBS)) ; ID ; --ID )) ; do rm -f $3/_${REQUESTID}.${ID} ; done
        rm -f $FILELIST
    fi
}

####################################################
function submit_starsim_file () {
    export CURRENT_OPTION="$1"
    export CURRENT_FILE="$2"
    if [[ -f "$CURRENT_FILE" ]]
    then
	export SIMU_NAME=''
	export SIMU_TAG=''
        export SIMU_SUBTAG=''
        export SIMU_DIR=''
        export SIMU_SCRIPT=''
        export SIMU_STARLEVEL=''
        export SIMU_GEOMETRY=''
        export SIMU_BFCHAIN=''
	source "$CURRENT_FILE"
	if [[ ("$SIMU_NAME" != "") && ("$SIMU_TAG" != "") && ("$SIMU_DIR" != "") && ("$SIMU_SCRIPT" != "") && ("$SIMU_STARLEVEL" != "") && ("$SIMU_GEOMETRY" != "") && ("$SIMU_BFCHAIN" != "") ]]
	then
	    submit_starsim "$CURRENT_OPTION" "$SIMU_TAG" "$SIMU_DIR" "$SIMU_SCRIPT" "$SIMU_STARLEVEL" "$SIMU_BFCHAIN" "$SIMU_GEOMETRY" "$SIMU_NAME" "$SIMU_SUBTAG"
	else
	    echo "Request is not complete in $CURRENT_FILE"
	fi
    else
	echo "Cannot find file $CURRENT_FILE"
    fi
}

####################################################
function submit_datapass_file () {
    export CURRENT_OPTION="$1"
    export CURRENT_FILE="$2"
    if [[ -f "$CURRENT_FILE" ]]
    then
	export DATA_NAME=''
        export DATA_TAG=''
        export DATA_SUBTAG=''
        export DATA_QUERY=''
        export DATA_CONFIG=''
        export DATA_DIR=''
	source "$CURRENT_FILE"
        if [[ ("$DATA_NAME" != "") && ("$DATA_TAG" != "") && ("$DATA_QUERY" != "") && ("$DATA_CONFIG" != "") && ("$DATA_DIR" != "") ]]
        then
    	    submit_datapass "$CURRENT_OPTION" "$DATA_TAG" "$DATA_QUERY" "$DATA_CONFIG" "$DATA_DIR" "$DATA_SUBTAG" "$DATA_NAME"
        else
    	    echo "Request is not complete in $CURRENT_FILE"
	fi
    else
	echo "Cannot find file $CURRENT_FILE"
    fi
}

####################################################
function submit_analysis_file () {
    export CURRENT_OPTION="$1"
    export CURRENT_FILE="$2"
    if [[ -f "$CURRENT_FILE" ]]
    then
        export ANALYSIS_NAME=''
        export ANALYSIS_TAG=''
        export ANALYSIS_SUBTAG=''
        export ANALYSIS_DATA=''
        export ANALYSIS_CONFIG=''
        export ANALYSIS_WEIGHT=''
        export ANALYSIS_OUTDIR=''
        export ANALYSIS_FINALDIR=''
	source "$CURRENT_FILE"
        if [[ ("$ANALYSIS_NAME" != "") && ("$ANALYSIS_TAG" != "") && ("$ANALYSIS_DATA" != "") && ("$ANALYSIS_CONFIG" != "") && ("$ANALYSIS_OUTDIR" != "")  && ("$ANALYSIS_FINALDIR" != "") ]]
        then
	    submit_analysis "$CURRENT_OPTION" "$ANALYSIS_TAG" "$ANALYSIS_CONFIG" "$ANALYSIS_SUBTAG" "$ANALYSIS_DATA" "$ANALYSIS_OUTDIR" "$ANALYSIS_WEIGHT" "$ANALYSIS_NAME" "$ANALYSIS_FINALDIR"
        else
    	    echo "Request is not complete in $CURRENT_FILE"
        fi
    else
	echo "Cannot find file $CURRENT_FILE"
    fi
}

####################################################
function show_help () {
    echo ""
    echo -e "Usage: submit [OPTIONS] [SUBMIT] $OPTIONS_HELP"
    echo ""
    echo "CONFIGURATION:"
    if [[ "$IS_RCF" == "yes" ]]
    then
	echo "We are on RCF"
    elif [[ "$IS_PDSF" == "yes" ]]
    then
	echo "We are on PDSF"
    else
	echo "We are not on RCF nor PDSF"
    fi
    if [[ "$IS_LOCAL" == "yes" ]]
    then
	echo "We are running locally"
    fi
    if [[ "$HOME" == "" ]]
    then
	echo "No home directory!"
    else
	echo "Home directory           $HOME"
    fi
    echo "Data directory           $DATA_PATH"
    echo "Output directory         $DATAOUT_PATH"
    echo "Final directory          $DATAFINAL_PATH"
    echo "Scratch directory        $SCRATCH"
    echo "Do real submit           $MYDOSUBMIT"
    if [[ "$MYSUBMITPOLICY" != "" ]]
    then
	echo "    Submit policy        $MYSUBMITPOLICY"
    fi
    if [[ "$MYSUBMITNOCHECKQUEUE" == "yes" ]]
    then
	echo "    Do not check queue"
    fi
    if [[ "$MYSUBMITNOCHECKFILELIST" == "yes" ]]
    then
	echo "    Do not check dataset"
    fi
    echo "Run local jobs           $MYDOSUBMITLOCAL"
    echo "    Keep scratch         $MYKEEPSCRATCH"
    echo "Run 'cons'               $MYDOCONS"
    echo "Run 'make'               $MYDOMAKE"
    echo "Library to use           $MYSTARLEVEL"
    echo "Run in gdb               $MYDEBUG"
    echo "Simulation               $MYSIMUJOB + $MYSIMURUN, $SIMU_JOBS jobs/submit, $SIMU_NEVENTS events/job"
    echo "    Keep *.fzd files     $SIMU_KEEP_FZD"
    echo "Data pass                $MYDATAJOB + $MYDATARUN + $MYDATASCRIPT"
    echo "    Use xrootd           $USEXROOTD"
    echo "    Use Jprof            $MYJPROF"
    if [[ "$CATALOG" == "" ]]
    then
	echo "    No FileCatalog hostname!"
    else
	echo "    FileCatalog          $CATALOG"
    fi
    echo "    File list syntax     $MYFILELISTSYNTAX"
    echo "Analysis pass            $MYANALYSISJOB + $MYANALYSISRUN + $MYANALYSISSCRIPT + $MYANALYSISFINALSCRIPT, $MYFINAL_ANALYSIS, weight iteration $WEIGHT_ITERATION"
}

####################################################
# Initialize command line arguments
####################################################
export OPTIONS=$@
export SPECIAL_EMPTY_OPTION='__SPECIAL_EMPTY_NONEXISTENT_OPTION__'
if [[ "$OPTIONS" == "" ]] ; then export OPTIONS=$SPECIAL_EMPTY_OPTION ; fi
export OPTIONS_OPTIONS=''
export OPTIONS_SUBMIT=''
export OPTIONS_UNKNOWN=''
export POSSIBLE_OPTIONS=''
export POSSIBLE_SUBMITS=''
export POSSIBLE_QUERIES=''
export SCRIPT_DATA_GOOD='no'
export SCRIPT_ANALYSIS_GOOD='no'
export SUBMIT_FOUND='no'
####################################################

####################################################
# Read command-line options
####################################################
set_default_options
export ADD_POSSIBLE_OPTIONS='yes'
export USE_THIS_OPTION_FOUND='yes'
export ALLOW_CHANGE_VARS='yes'
for OPTION in $OPTIONS
do
    export THIS_OPTION_FOUND='no'
    set_option "$OPTION"
    if [[ "$THIS_OPTION_FOUND" != "yes" ]] ; then export OPTIONS_SUBMIT="$OPTIONS_SUBMIT $OPTION" ; else export OPTIONS_OPTIONS="$OPTIONS_OPTIONS $OPTION" ; fi
done
export ALLOW_CHANGE_VARS='no'
export USE_THIS_OPTION_FOUND='no'
export ADD_POSSIBLE_OPTIONS='no'
####################################################

####################################################
# Check scripts if required
####################################################
if [[ "$MYCHECK_DATA" == "yes" ]]
then
    export SUBMIT_FOUND='yes'
    echo -n "Testing data script..."
    if (root4star -b -q load_libs.C load_data_libs.C $MYDATASCRIPT+ 2&> $ANALYSIS_WORKING_DIR/$MYDATASCRIPT.test.out)
    then
	export SCRIPT_DATA_GOOD="yes"
	echo " Succesful"
    else
	echo " Failed! (see the log in $ANALYSIS_WORKING_DIR/$MYDATASCRIPT.test.out)"
	echo "Cannot run $MYDATASCRIPT"
    fi
else
    export SCRIPT_DATA_GOOD='yes'
fi

if [[ "$MYCHECK_ANALYSIS" == "yes" ]]
then
    export SUBMIT_FOUND='yes'
    echo -n "Testing analysis script..."
    if (root -b -q load_libs.C $MYANALYSISSCRIPT+ 2&> $ANALYSIS_WORKING_DIR/$MYANALYSISSCRIPT.test.out)
    then
	export SCRIPT_ANALYSIS_GOOD="yes"
	echo " Succesful"
    else
	echo " Failed! (see the log in $ANALYSIS_WORKING_DIR/$MYANALYSISSCRIPT.test.out)"
	echo "Cannot run $MYANALYSISSCRIPT"
    fi
else
    export SCRIPT_ANALYSIS_GOOD='yes'
fi
####################################################

####################################################
# Scan directories for the submit macros
####################################################
export SIMU_FILES=''
export DATA_FILES=''
export ANALYSIS_FILES=''
export IFS_OLD=$IFS
export IFS=':'
for DIRECTORY in $ANALYSIS_MACRO_PATH
do
#echo $DIRECTORY
    export IFS=$IFS_OLD
    for FILE in "$DIRECTORY"/submit.starsim.*  ; do if [[ -f $FILE ]] ; then export SIMU_FILES="$SIMU_FILES:$FILE" ; fi ; done
    for FILE in "$DIRECTORY"/submit.data.*     ; do if [[ -f $FILE ]] ; then export DATA_FILES="$DATA_FILES:$FILE" ; fi ; done
    for FILE in "$DIRECTORY"/submit.analysis.* ; do if [[ -f $FILE ]] ; then export ANALYSIS_FILES="$ANALYSIS_FILES:$FILE" ; fi ; done
    export IFS=':'
done
export IFS=$IFS_OLD
####################################################

####################################################
# Read the command-line submits
####################################################
for OPTION in $OPTIONS_SUBMIT
do
    export THIS_OPTION_FOUND='no'
    export IFS_OLD=$IFS
    export IFS=':'
    for ANALYSIS_FILE in $ANALYSIS_FILES
    do
	export IFS=$IFS_OLD
	set_default_options
	if [[ "$OPTIONS_OPTIONS" != "" ]]
	then
	    export ALLOW_CHANGE_VARS='yes'
	    set_option "$OPTIONS_OPTIONS"
	    export ALLOW_CHANGE_VARS='no'
	fi
	submit_analysis_file "$OPTION" "$ANALYSIS_FILE"
	export IFS=':'
    done
    export IFS=$IFS_OLD
    export IFS_OLD=$IFS
    export IFS=':'
    for DATA_FILE in $DATA_FILES
    do
	export IFS=$IFS_OLD
	set_default_options
	if [[ "$OPTIONS_OPTIONS" != "" ]]
	then
	    export ALLOW_CHANGE_VARS='yes'
	    set_option "$OPTIONS_OPTIONS"
	    export ALLOW_CHANGE_VARS='no'
	fi
	submit_datapass_file "$OPTION" "$DATA_FILE"
	export IFS=':'
    done
    export IFS=$IFS_OLD
    export IFS_OLD=$IFS
    export IFS=':'
    for SIMU_FILE in $SIMU_FILES
    do
	export IFS=$IFS_OLD
	set_default_options
	if [[ "$OPTIONS_OPTIONS" != "" ]]
	then
	    export ALLOW_CHANGE_VARS='yes'
	    set_option "$OPTIONS_OPTIONS"
	    export ALLOW_CHANGE_VARS='no'
	fi
	submit_starsim_file  "$OPTION" "$SIMU_FILE"
	export IFS=':'
    done
    export IFS=$IFS_OLD
    if [[ "$THIS_OPTION_FOUND" != "yes" ]] ; then export OPTIONS_UNKNOWN="$OPTIONS_UNKNOWN $OPTION" ; else export SUBMIT_FOUND='yes' ; fi
done
####################################################

####################################################
# Adjust options and submits after reading the command line
####################################################
export OPTIONS_HELP=''
export POSSIBLE_OPTIONS=`echo -e $POSSIBLE_OPTIONS | sort -bd`
export POSSIBLE_SUBMITS=`echo -e $POSSIBLE_SUBMITS | sort -bd`
export POSSIBLE_QUERIES=`echo -e $POSSIBLE_QUERIES | sort -bd`
if [[ "$POSSIBLE_OPTIONS" != "" ]] ; then export OPTIONS_HELP="${OPTIONS_HELP}\n\nOPTIONS (name1=value1 name2=value2 name3 ...):$POSSIBLE_OPTIONS" ; fi
if [[ "$POSSIBLE_SUBMITS" != "" ]] ; then export OPTIONS_HELP="${OPTIONS_HELP}\n\nSUBMIT (submit1 submit2 submit3 ...):$POSSIBLE_SUBMITS" ; fi
if [[ "$POSSIBLE_QUERIES" != "" ]] ; then export OPTIONS_HELP="${OPTIONS_HELP}\n\nCATALOG QUERIES:$POSSIBLE_QUERIES" ; fi
####################################################

####################################################
# Show the help page if needed
####################################################
if [[ ( "$SHOW_HELP" == "" ) && ( "$SUBMIT_FOUND" == "no" ) ]] ; then export SHOW_HELP='yes' ; fi
if [[ "$SHOW_HELP" == "yes" ]] ; then show_help ; fi
####################################################

####################################################
# Report unrecognized options
####################################################
export OPTIONS_UNKNOWN=${OPTIONS_UNKNOWN# $SPECIAL_EMPTY_OPTION}
if [[ "$OPTIONS_UNKNOWN" != "" ]]
then
    echo ""
    echo "UNKNOWN OPTIONS: $OPTIONS_UNKNOWN"
fi
####################################################
