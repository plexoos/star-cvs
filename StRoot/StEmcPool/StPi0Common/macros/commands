#!/bin/bash

function do_escape () {
    export REPLACEMENT_STR=$1
    export REPLACEMENT_HEX=$2
    export ESCAPE_CHARS_HEX=$3
    export OUTPUT_HEX=$4
    shift
    shift
    shift
    shift
    export STR=$@
    #printf "REPLACEMENT_STR=$REPLACEMENT_STR\n"
    #printf "REPLACEMENT_HEX=$REPLACEMENT_HEX\n"
    #printf "ESCAPE_CHARS_HEX=$ESCAPE_CHARS_HEX\n"
    #printf "OUTPUT_HEX=$OUTPUT_HEX\n"
    #printf "STR=$STR\n"
    export STR_OUT=""
    for (( i=0 ; $i < ${#STR} ; i=((i+1)) ))
    do
	export CHAR=${STR:$i:1}
	export REPLACEMENT=${CHAR}
	for ESCAPE_CHAR_HEX in ${ESCAPE_CHARS_HEX}
	do 
	    if [[ `printf "${CHAR}"` == `printf '\x'${ESCAPE_CHAR_HEX}` ]]
	    then 
		export REPLACEMENT=${REPLACEMENT_STR//${REPLACEMENT_HEX}/`${OUTPUT_HEX//${REPLACEMENT_HEX}/${ESCAPE_CHAR_HEX}}`}
	    fi
	done
	#printf "char $i: $CHAR -> $REPLACEMENT\n"
	export STR_OUT=${STR_OUT}${REPLACEMENT}
    done
    printf "%s" "${STR_OUT}"
}

function xml_escape () {
    export HEX=$1
    shift
    # Need to quote $HEX
    do_escape '&#xHEX;' 'HEX' "${HEX}" 'printf HEX' "$@"
}

function xml_escape_xml () {
    # Need to quote & < > " '
    xml_escape '22 26 27 3C 3E' "$@"
}

function xml_escape_star-submit-template () {
    # Need to quote & < > " ' , space =
    xml_escape '22 26 27 3C 3E 2C 20 3D' "$@"
}

function bash_escape () {
    export HEX=$1
    shift
    # Need to quote $HEX
    do_escape '\HEX' 'HEX' "${HEX}" 'printf \xHEX' "$@"
}

function bash_escape_all () {
    # Need to quote \ | & ; ( ) < > ' " ` $ ! # space tab newline
    bash_escape '5C 7C 26 3B 28 29 3C 3E 22 27 60 21 24 23 20' "$@"
}

function bash_escape_quo () {
    # Need to quote \ " ` $
    bash_escape '5C 22 60 24' "$@"
}

function bash_escape_apo () {
    # Need to quote <none>
    bash_escape '' "$@"
}

function csh_escape () {
    bash_escape "$@"
}

function csh_escape_all () {
    # Need to quote \ | & ; ( ) < > ' " ` $ ! # space tab newline
    csh_escape '5C 7C 26 3B 28 29 3C 3E 22 27 60 21 24 23 20' "$@"
}

function csh_escape_quo () {
    # Need to quote \ " ` $
    csh_escape '5C 22 60 24' "$@"
}

function csh_escape_apo () {
    # Need to quote <none>
    csh_escape '' "$@"
}

function cpp_escape () {
    bash_escape "$@"
}

function cpp_escape_quo () {
    # Need to quote
    cpp_escape '22 5C' "$@"
}

#export a=23\ ab
#export a="123 abc (\"qw!<@>p'o&]"
#echo $a
#xml_escape $a
#bash_escape_all "$a"
#bash_escape_quo "$a"
#bash_escape_apo "$a"
#if [[ $a == `bash_escape_all "$a"` ]] ; then echo "!!! ALL WORKS !!!"; fi
#if [[ \"$a\" == \"`bash_escape_quo "$a"`\" ]] ; then echo "!!! QUO WORKS !!!"; fi
#if [[ \'"$a"\' == \'`bash_escape_apo "$a"`\' ]] ; then echo "!!! APO WORKS !!!"; fi
#exit 0

function run_command () {
    export DEBUG=$1
    export COMMAND=$2
    shift
    shift
    export ARGS=$@
    printf "$0: DEBUG = $DEBUG\n"
    printf "$0: COMMAND = ${COMMAND}\n"
    printf "$0: ARGS = ${ARGS}\n"
    if [[ "$DEBUG" == "yes" ]] 
    then
	printf "$0: Running command in gdb...\n"
	gdb `which "$COMMAND"` << ENDOFINPUT
run $ARGS
where
c
where
c
where
c
where
c
where
c
where
c
quit
ENDOFINPUT
    else
	printf "$0: Running command...\n"
	bash -c "$COMMAND $ARGS"
	#${COMMAND} ${ARGS}
    fi
}

function resubmit () {
export IDS=$1
export IDS=`echo "$IDS" | grep -o -E '[0-9A-F]{32}'`
export DATA_PATH=$2
export EXECUTE=$3
export CURDIR=$4
export FINISHED=$5

export DATA_PATH_default=data
export EXECUTE_default=no
export CURDIR_default=.
export FINISHED_default=FINISHED
if [[ -f "./.analysis.cfg.sh" ]]
then
    source "./.analysis.cfg.sh"
    export CURDIR_default=$ANALYSIS_WORKING_DIR
fi

if [[ "$IDS" == "" ]]
then
    echo "Usage:"
    echo ""
    echo "    resubmit <request ID> [ <data directories, default \"<working directory>/$DATA_PATH_default\"> [ <execute? yes|no, default \"$EXECUTE_default\"> [ <working directory, default \"$CURDIR_default\"> [ <final tag, default \"$FINISHED_default\"> ] ] ] ]"
    echo ""
    exit 1
fi

if [[ "$CURDIR" == "" ]]
then
    export CURDIR=$CURDIR_default
    echo "# No working directory specified, using default \"$CURDIR\""
fi

if [[ "$DATA_PATH" == "" ]]
then
    export DATA_PATH=$CURDIR/$DATA_PATH_default
    echo "# No data directories specified, using default \"$DATA_PATH\""
fi

if [[ "$EXECUTE" == "" ]]
then
    export EXECUTE=$EXECUTE_default
    echo "# No execution flag specified, using default \"$EXECUTE\""
fi

if [[ "$FINISHED" == "" ]]
then
    export FINISHED=$FINISHED_default
    echo "# No final tag specified, using default \"$FINISHED\""
fi

echo "# Request ID:        $IDS"
echo "# Data directories:  $DATA_PATH"
echo "# Execute:           $EXECUTE"
echo "# Working directory: $CURDIR"
echo "# Final tag:         \"$FINISHED\""

export STATUSCODE=0

for ID in $IDS
do

export JOBS=$CURDIR/sched${ID}_*.list

export TOTAL=0
export RESUBMIT=0
export NUMBERS=""

echo -n "# Searching files "

for JOB in $JOBS
do
    export FILES_TMP=${JOB/.list/.root}
    export FILES=""
    for DATA_PATH_1 in $DATA_PATH
    do
	export FILES="$FILES "${FILES_TMP/$CURDIR\/sched/$DATA_PATH_1\/\*_}
    done
    export NUMBER=${JOB/.list/}
    export NUMBER=${NUMBER/$CURDIR\/sched${ID}_/}
    export EXISTS=false
    export EXISTS_FILE=false
    for FILE in $FILES
    do
	if [[ ( -f "$FILE" ) && ( ( -f "${FILE/.root/.out}" ) || ( -f "${FILE/.root/.err}" ) ) ]]
	then
    	    export EXISTS_FILE=true
	    export GREPPED=`tail -q -n 100 "${FILE/.root/.out}" | grep -s -m 1 -c -o -E "[^\"]$FINISHED[^\"]"`
	    if [[ "$GREPPED" == "1" ]]
	    then
        	export EXISTS=true
		echo -n "."
	    else
		export GREPPED=`grep -s -m 1 -c -o -E "[^\"]$FINISHED[^\"]" "${FILE/.root/.out}"`
		if [[ "$GREPPED" == "1" ]]
		then
        	    export EXISTS=true
		    echo -n ","
		else
		    export GREPPED=`tail -q -n 100 "${FILE/.root/.err}" | grep -s -m 1 -c -o -E "[^\"]$FINISHED[^\"]"`
		    if [[ "$GREPPED" == "1" ]]
		    then
        		export EXISTS=true
			echo -n ":"
		    else
			export GREPPED=`grep -s -m 1 -c -o -E "[^\"]$FINISHED[^\"]" "${FILE/.root/.err}"`
			if [[ "$GREPPED" == "1" ]]
			then
        		    export EXISTS=true
			    echo -n ";"
			fi
		    fi
		fi
	    fi
	fi
    done
    if [[ "$EXISTS" == "false" ]]
    then
	if [[ "$EXISTS_FILE" == "false" ]]
	then
	    echo -n "-"
	else
    	    echo -n "!"
	fi
	if [[ "$NUMBERS" == "" ]]
	then
	    export NUMBERS=$NUMBER
	else
	    export NUMBERS=$NUMBERS,$NUMBER
	fi
	export RESUBMIT=$(($RESUBMIT+1))
    fi
    export TOTAL=$(($TOTAL+1))
done

echo " done"

if [[ ( "$RESUBMIT" != "0" ) && ( "$RESUBMIT" != "" ) ]]
then
    echo "# Your command to resubmit $RESUBMIT of $TOTAL jobs is..."
    export COMMAND="star-submit -r $NUMBERS \"$CURDIR/$ID.session.xml\""
    echo $COMMAND
    if [[ "$EXECUTE" == "yes" ]]
    then
	echo "# Executing..."
	`$COMMAND`
    fi
    export STATUSCODE=1
else
    echo "# No jobs to resubmit, $TOTAL total."
fi

done

exit $STATUSCODE
}

function get_random_number () {
#    export NUM_OUT=""
#    for (( D=$1 ; D != 0 ; D-- )) ; do export NUM_OUT=${NUM_OUT}$(( ( ( `date +%-N` / 1000 ) % 10 ) )) ; done
#    printf "${NUM_OUT}"
    if [[ "$1" == "" ]]
    then
	echo "Usage: get_random_number <Ndigits>"
    fi

    export NUM_OUT=""
    while (( ${#NUM_OUT} < $1 ))
    do
	export NUM_OUT=${NUM_OUT}`date +%s`
    done
    printf "${NUM_OUT:(( ${#NUM_OUT} - $1 )):$1}"
}

function clear_sched () {
    export PATHCLEAN=$1
    export PATHCLEAN_default='.'
    if [[ -f "./.analysis.cfg.sh" ]]
    then
	source "./.analysis.cfg.sh"
	export PATHCLEAN_default=$ANALYSIS_WORKING_DIR
    fi

    if [[ "$PATHCLEAN" == "" ]]
    then
	export PATHCLEAN=$PATHCLEAN_default
	#echo "$0: Path not specified, using default \"$PATHCLEAN\""
    fi

    if [[ "$PATHCLEAN" != "" ]]
    then
	echo "$0: Cleaning scheduler files in $PATHCLEAN"
        rm -f "$PATHCLEAN/sched*.csh"
        rm -f "$PATHCLEAN/sched*.list"
        rm -f "$PATHCLEAN/sched*.dataset"
        rm -f "$PATHCLEAN/sched*.dataset.tmp"
        rm -f "$PATHCLEAN/sched*.report"
        rm -f "$PATHCLEAN/sched*.condor"
        rm -f "$PATHCLEAN/sched*.condor.log"
        rm -f "$PATHCLEAN/*.session.xml"
        rm -f "$PATHCLEAN/*.test.out"
        rm -f "$PATHCLEAN/schedTemplateExp.xml"
        rm -f "$PATHCLEAN/last.kumac*"
        rm -f "$PATHCLEAN/paw.metafile"
    fi
}

function get_file_size () {
    export STR=`ls -al "$1" | grep -o -E '[^ ]{10}[[:space:]]+[[:digit:]]+[[:space:]]+[[:alnum:]]+[[:space:]]+[[:alnum:]]+[[:space:]]+[[:digit:]]+' | grep -o -E '[[:digit:]]+$'`
    #export STR=`du -b $1`
    #export STR1=${STR//	*/}
    echo "${STR}"
}

function copy_file_qa () {
    export SRC=$1
    export DST=$2
    echo "Copying file ${SRC} to ${DST}..."
    if [[ -e "$SRC" ]]
    then
	export ATTEMPTS_NUM=120;
    else
	export ATTEMPTS_NUM=0;
	echo "$SRC does not exist!"
    fi
    export ATTEMPTS_TIMEOUT=300;
    export SUCCESS='false'
    for (( ATTEMPT=1 ; ATTEMPT<=$ATTEMPTS_NUM ; ++ATTEMPT ))
    do
	cp -fr "$SRC" "$DST"
	if [[ -e "$DST" ]]
	then
	    export SIZE_SRC=`get_file_size "$SRC"`
	    export SIZE_DST=`get_file_size "$DST"`
	    if [[ "$SIZE_SRC" == "$SIZE_DST" ]]
	    then
		export SUCCESS='true'
		break
	    else
		echo "Copied size does not match the source: $SIZE_SRC, $SIZE_DST"
	    fi
	else
	    echo "Cannot find the copied file"
	fi
	if [[ "$SUCCESS" != "true" ]]
	then
	    echo "Sleeping $ATTEMPTS_TIMEOUT seconds..."
	    sleep $ATTEMPTS_TIMEOUT
	fi
    done
    if [[ "$SUCCESS" == "true" ]]
    then
	echo "Copy successful on attempt $ATTEMPT, size $SIZE_DST"
    else
	echo "Copy did not succeed after $ATTEMPTS_NUM attempts!"
    fi
}

function get_sys() {
    if { which livesys &> /dev/null ; }
    then
	livesys
    else
	if { which sys &> /dev/null ; }
	then
	    sys
	else
	    if { which root-config &> /dev/null ; }
	    then
		root-config --arch
	    else
		echo 'unknown_sys'
	    fi
	fi
    fi
}

function copy () {
    export COPY_STPI0COMMON='no'
    export COPY_MYSIMULATION='no'
    export COPY_MYDATAMAKER='no'
    export COPY_STPI0ANALYSIS='no'
    export COPY_STPI0RESULTS='no'
    export COPY_STPHOTONCOMMON='no'
    export COPY_STPHOTONDATAMAKER='no'
    export COPY_STPHOTONANALYSIS='no'
    export COPY_COMPILED='no'
    export SRC_PATH=''
    export DST_PATH=''
    export SRC_ANALYSIS_PATH=''
    export DST_ANALYSIS_PATH=''
    export ANALYSIS_PATH_DEFAULT='StRoot/StEmcPool'

    for OPT in "$@" ;
    do
	if [[ "$OPT" == "StPi0Common" ]] ; then export COPY_STPI0COMMON='yes' ;
	elif [[ "$OPT" == "-StPi0Common" ]] ; then export COPY_STPI0COMMON='no' ;
	elif [[ "$OPT" == "StPi0DataMaker" ]] ; then export COPY_MYDATAMAKER='yes' ;
	elif [[ "$OPT" == "-StPi0DataMaker" ]] ; then export COPY_MYDATAMAKER='no' ;
	elif [[ "$OPT" == "StPi0Simulation" ]] ; then export COPY_MYSIMULATION='yes' ;
	elif [[ "$OPT" == "-StPi0Simulation" ]] ; then export COPY_MYSIMULATION='no' ;
	elif [[ "$OPT" == "StPi0Analysis" ]] ; then export COPY_STPI0ANALYSIS='yes' ;
	elif [[ "$OPT" == "-StPi0Analysis" ]] ; then export COPY_STPI0ANALYSIS='no' ;
	elif [[ "$OPT" == "StPi0Results" ]] ; then export COPY_STPI0RESULTS='yes' ;
	elif [[ "$OPT" == "-StPi0Results" ]] ; then export COPY_STPI0RESULTS='no' ;
	elif [[ "$OPT" == "StPhotonCommon" ]] ; then export COPY_STPHOTONCOMMON='yes' ;
	elif [[ "$OPT" == "-StPhotonCommon" ]] ; then export COPY_STPHOTONCOMMON='no' ;
	elif [[ "$OPT" == "StPhotonDataMaker" ]] ; then export COPY_STPHOTONDATAMAKER='yes' ;
	elif [[ "$OPT" == "-StPhotonDataMaker" ]] ; then export COPY_STPHOTONDATAMAKER='no' ;
	elif [[ "$OPT" == "StPhotonAnalysis" ]] ; then export COPY_STPHOTONANALYSIS='yes' ;
	elif [[ "$OPT" == "-StPhotonAnalysis" ]] ; then export COPY_STPHOTONANALYSIS='no' ;
	elif [[ "$OPT" == "compiled" ]] ; then export COPY_COMPILED='yes' ;
	elif [[ "$OPT" == "-compiled" ]] ; then export COPY_COMPILED='no' ;
	elif [[ "$OPT" == "simulation" ]]
	then
	    export COPY_STPI0COMMON='yes'
	    export COPY_MYSIMULATION='yes'
	elif [[ "$OPT" == "-simulation" ]]
	then
	    export COPY_STPI0COMMON='no'
	    export COPY_MYSIMULATION='no'
	elif [[ "$OPT" == "data" ]]
	then
	    export COPY_STPI0COMMON='yes'
	    export COPY_MYDATAMAKER='yes'
	elif [[ "$OPT" == "-data" ]]
	then
	    export COPY_STPI0COMMON='no'
	    export COPY_MYDATAMAKER='no'
	elif [[ "$OPT" == "analysis" ]]
	then
	    export COPY_STPI0COMMON='yes'
	    export COPY_STPI0ANALYSIS='yes'
	elif [[ "$OPT" == "-analysis" ]]
	then
	    export COPY_STPI0COMMON='no'
	    export COPY_STPI0ANALYSIS='no'
	elif [[ "$OPT" == "analysisFinal" ]]
	then
	    export COPY_STPI0COMMON='yes'
	    export COPY_STPI0ANALYSIS='yes'
	elif [[ "$OPT" == "-analysisFinal" ]]
	then
	    export COPY_STPI0COMMON='no'
	    export COPY_STPI0ANALYSIS='no'
	elif [[ "$OPT" == "results" ]]
	then
	    export COPY_STPI0COMMON='yes'
	    export COPY_STPI0ANALYSIS='yes'
	    export COPY_STPI0RESULTS='yes'
	elif [[ "$OPT" == "-results" ]]
	then
	    export COPY_STPI0COMMON='no'
	    export COPY_STPI0ANALYSIS='no'
	    export COPY_STPI0RESULTS='no'
	elif [[ "$OPT" == "photondata" ]]
	then
	    export COPY_STPI0COMMON='yes'
	    export COPY_STPHOTONCOMMON='yes'
	    export COPY_STPHOTONDATAMAKER='yes'
	elif [[ "$OPT" == "-photondata" ]]
	then
	    export COPY_STPI0COMMON='no'
	    export COPY_STPHOTONCOMMON='no'
	    export COPY_STPHOTONDATAMAKER='no'
	elif [[ "$OPT" == "photonanalysis" ]]
	then
	    export COPY_STPI0COMMON='yes'
	    export COPY_STPHOTONCOMMON='yes'
	    export COPY_STPHOTONANALYSIS='yes'
	elif [[ "$OPT" == "-photonanalysis" ]]
	then
	    export COPY_STPI0COMMON='no'
	    export COPY_STPHOTONCOMMON='no'
	    export COPY_STPHOTONANALYSIS='no'
	elif [[ "$OPT" == "all" ]]
	then
	    export COPY_STPI0COMMON='yes'
	    export COPY_MYDATAMAKER='yes'
	    export COPY_MYSIMULATION='yes'
	    export COPY_STPI0ANALYSIS='yes'
	    export COPY_STPI0RESULTS='yes'
	    export COPY_STPHOTONCOMMON='yes'
	    export COPY_STPHOTONDATAMAKER='yes'
	    export COPY_STPHOTONANALYSIS='yes'
	    #export COPY_COMPILED='yes'
	elif [[ "$OPT" == "-all" ]]
	then
	    export COPY_STPI0COMMON='no'
	    export COPY_MYDATAMAKER='no'
	    export COPY_MYSIMULATION='no'
	    export COPY_STPI0ANALYSIS='no'
	    export COPY_STPI0RESULTS='no'
	    export COPY_STPHOTONCOMMON='no'
	    export COPY_STPHOTONDATAMAKER='no'
	    export COPY_STPHOTONANALYSIS='no'
	    #export COPY_COMPILED='no'
	elif [[ "$SRC_PATH" == "" ]] ; then export SRC_PATH=$OPT ;
	elif [[ "$DST_PATH" == "" ]] ; then export DST_PATH=$OPT ;
	elif [[ "$SRC_ANALYSIS_PATH" == "" ]] ; then export SRC_ANALYSIS_PATH=$OPT ;
	elif [[ "$DST_ANALYSIS_PATH" == "" ]] ; then export DST_ANALYSIS_PATH=$OPT ;
	else echo "Skipping unknown option $OPT" ; fi
    done

    if [[ "$SRC_PATH" == "" ]]
    then
	#export SRC_PATH=$0
	export SRC_PATH="${0%/StRoot/*}"
    fi
    if [[ "$DST_PATH" == "" ]] ; then export DST_PATH=`pwd` ; fi
    if [[ "$SRC_ANALYSIS_PATH" == "" ]] ; then export SRC_ANALYSIS_PATH=${SRC_PATH}/$ANALYSIS_PATH_DEFAULT ; fi
    if [[ "$DST_ANALYSIS_PATH" == "" ]] ; then export DST_ANALYSIS_PATH=${DST_PATH}${SRC_ANALYSIS_PATH#$SRC_PATH} ; fi

    if [[ "$@"'x' == "x" ]]
    then
	if [[ ( -d "$SRC_ANALYSIS_PATH/StPi0Common" ) ]] ; then export COPY_STPI0COMMON='yes' ; fi
	if [[ ( -d "$SRC_ANALYSIS_PATH/StPi0Common" ) && ( -d "$SRC_ANALYSIS_PATH/StPi0Simulation" ) ]] ; then export COPY_MYSIMULATION='yes' ; fi
	if [[ ( -d "$SRC_ANALYSIS_PATH/StPi0Common" ) && ( -d "$SRC_ANALYSIS_PATH/StPi0DataMaker" ) ]] ; then export COPY_MYDATAMAKER='yes' ; fi
	if [[ ( -d "$SRC_ANALYSIS_PATH/StPi0Common" ) && ( -d "$SRC_ANALYSIS_PATH/StPi0Analysis" ) ]] ; then export COPY_STPI0ANALYSIS='yes' ; fi
	if [[ ( -d "$SRC_ANALYSIS_PATH/StPi0Common" ) && ( -d "$SRC_ANALYSIS_PATH/StPi0Results" ) ]] ; then export COPY_STPI0RESULTS='yes' ; fi
	if [[ ( -d "$SRC_ANALYSIS_PATH/StPi0Common" ) && ( -d "$SRC_ANALYSIS_PATH/StPhotonCommon" ) ]] ; then export COPY_STPHOTONCOMMON='yes' ; fi
	if [[ ( -d "$SRC_ANALYSIS_PATH/StPi0Common" ) && ( -d "$SRC_ANALYSIS_PATH/StPhotonCommon" ) && ( -d "$SRC_ANALYSIS_PATH/StPhotonDataMaker" ) ]] ; then export COPY_STPHOTONDATAMAKER='yes' ; fi
	if [[ ( -d "$SRC_ANALYSIS_PATH/StPi0Common" ) && ( -d "$SRC_ANALYSIS_PATH/StPhotonCommon" ) && ( -d "$SRC_ANALYSIS_PATH/StPhotonAnalysis" ) ]] ; then export COPY_STPHOTONANALYSIS='yes' ; fi
	export COPY_COMPILED='no'
    fi

    echo "Copy StPi0Common:          $COPY_STPI0COMMON"
    echo "Copy StPi0DataMaker:       $COPY_MYDATAMAKER"
    echo "Copy StPi0Simulation:      $COPY_MYSIMULATION"
    echo "Copy StPi0Analysis:        $COPY_STPI0ANALYSIS"
    echo "Copy StPi0Results:         $COPY_STPI0RESULTS"
    echo "Copy StPhotonCommon:       $COPY_STPHOTONCOMMON"
    echo "Copy StPhotonDataMaker:    $COPY_STPHOTONDATAMAKER"
    echo "Copy StPhotonAnalysis:     $COPY_STPHOTONANALYSIS"
    echo "Copy compiled libraries:   $COPY_COMPILED"
    echo "Source directory:          $SRC_PATH"
    echo "Destination directory:     $DST_PATH"
    echo "Source subdirectory:       $SRC_ANALYSIS_PATH"
    echo "Destination subdirectory:  $DST_ANALYSIS_PATH"

    if [[ "${COPY_STPI0COMMON} ${COPY_MYDATAMAKER} ${COPY_MYSIMULATION} ${COPY_STPI0ANALYSIS} ${COPY_STPI0RESULTS} ${COPY_STPHOTONCOMMON} ${COPY_STPHOTONDATAMAKER} ${COPY_STPHOTONANALYSIS}" != "no no no no no no no no" ]]
    then
	if [[ ( "$SRC_PATH" == "" ) || ( "$DST_PATH" == "" ) ]]
	then
	    export COPY_STPI0COMMON='no'
	    export COPY_MYSIMULATION='no'
	    export COPY_MYDATAMAKER='no'
	    export COPY_STPI0ANALYSIS='no'
	    export COPY_STPI0RESULTS='no'
	    export COPY_STPHOTONCOMMON='no'
	    export COPY_STPHOTONDATAMAKER='no'
	    export COPY_STPHOTONANALYSIS='no'
	    export COPY_COMPILED='no'
	    echo "Please specify source and destination directories!"
	else
	    mkdir -p "$DST_ANALYSIS_PATH"
	fi
    fi

    if [[ "$COPY_STPI0COMMON" == "yes" ]]
    then
	echo "Copying StPi0Common..."
	cp -rf "$SRC_ANALYSIS_PATH/StPi0Common" "$DST_ANALYSIS_PATH"
	chmod a+x "$DST_ANALYSIS_PATH/StPi0Common/macros/configure"
    fi

    if [[ "$COPY_MYDATAMAKER" == "yes" ]]
    then
	echo "Copying StPi0DataMaker..."
	cp -rf "$SRC_ANALYSIS_PATH/StPi0DataMaker" "$DST_ANALYSIS_PATH"
    fi

    if [[ "$COPY_MYSIMULATION" == "yes" ]]
    then
	echo "Copying StPi0Simulation..."
	cp -rf "$SRC_ANALYSIS_PATH/StPi0Simulation" "$DST_ANALYSIS_PATH"
    fi

    if [[ "$COPY_STPI0ANALYSIS" == "yes" ]]
    then
	echo "Copying StPi0Analysis..."
	cp -rf "$SRC_ANALYSIS_PATH/StPi0Analysis" "$DST_ANALYSIS_PATH"
    fi

    if [[ "$COPY_STPI0RESULTS" == "yes" ]]
    then
	echo "Copying StPi0Results..."
	cp -rf "$SRC_ANALYSIS_PATH/StPi0Results" "$DST_ANALYSIS_PATH"
    fi

    if [[ "$COPY_STPHOTONCOMMON" == "yes" ]]
    then
	echo "Copying StPhotonCommon..."
	cp -rf "$SRC_ANALYSIS_PATH/StPhotonCommon" "$DST_ANALYSIS_PATH"
    fi

    if [[ "$COPY_STPHOTONDATAMAKER" == "yes" ]]
    then
	echo "Copying StPhotonDataMaker..."
	cp -rf "$SRC_ANALYSIS_PATH/StPhotonDataMaker" "$DST_ANALYSIS_PATH"
    fi

    if [[ "$COPY_STPHOTONANALYSIS" == "yes" ]]
    then
	echo "Copying StPhotonAnalysis..."
	cp -rf "$SRC_ANALYSIS_PATH/StPhotonAnalysis" "$DST_ANALYSIS_PATH"
    fi

    if [[ "$COPY_COMPILED" == "yes" ]]
    then
	if [[ "$STAR_HOST_SYS" == "" ]] ; then export STAR_HOST_SYS=`get_sys` ; fi
	echo "Copying compiled libraries .$STAR_HOST_SYS ..."
	cp -rf "$SRC_PATH/.$STAR_HOST_SYS" "$DST_PATH"
    fi
}

function configure () {
    export CONFIGURE_SIMULATION='no'
    export CONFIGURE_DATA='no'
    export CONFIGURE_ANALYSIS='no'
    export CONFIGURE_RESULTS='no'
    export CONFIGURE_PHOTONDATA='no'
    export CONFIGURE_PHOTONANALYSIS='no'
    export SRC_PATH=''
    export DST_PATH=''
    export SRC_PATH_DEFAULT=${0%/StRoot/*}'/StRoot/StEmcPool'
    export DST_PATH_DEFAULT=`pwd`
    export MYCXXFLAGS_DEFAULT='-Wall -Wextra -fPIC -g'

    for OPT in "$@" ;
    do
	if [[ "$OPT" == "simulation" ]] ; then export CONFIGURE_SIMULATION='yes' ;
	elif [[ "$OPT" == "data" ]] ; then export CONFIGURE_DATA='yes' ;
	elif [[ "$OPT" == "analysis" ]] ; then export CONFIGURE_ANALYSIS='yes' ;
	elif [[ "$OPT" == "analysisFinal" ]] ; then export CONFIGURE_ANALYSIS='yes' ;
	elif [[ "$OPT" == "results" ]] ; then export CONFIGURE_RESULTS='yes' ;
	elif [[ "$OPT" == "photondata" ]] ; then export CONFIGURE_PHOTONDATA='yes' ;
	elif [[ "$OPT" == "photonanalysis" ]] ; then export CONFIGURE_PHOTONANALYSIS='yes' ;
	elif [[ "$OPT" == "all" ]]
	then
	    export CONFIGURE_SIMULATION='yes'
	    export CONFIGURE_DATA='yes'
	    export CONFIGURE_ANALYSIS='yes'
	    export CONFIGURE_RESULTS='yes'
	    export CONFIGURE_PHOTONDATA='yes'
	    export CONFIGURE_PHOTONANALYSIS='yes'
	elif [[ "$SRC_PATH" == "" ]] ; then export SRC_PATH="$OPT" ;
	elif [[ "$DST_PATH" == "" ]] ; then export DST_PATH="$OPT" ;
	else echo "Skipping unknown option $OPT" ; fi
    done

    if [[ "$SRC_PATH" == "" ]] ; then export SRC_PATH=$SRC_PATH_DEFAULT ; fi
    if [[ "$DST_PATH" == "" ]] ; then export DST_PATH=$DST_PATH_DEFAULT ; fi

    if [[ "$MYCXXFLAGS" == "" ]] ; then export MYCXXFLAGS=$MYCXXFLAGS_DEFAULT ; fi

    pushd "$SRC_PATH" > /dev/null
    export SRC_PATH=`pwd`
    popd > /dev/null

    pushd "$DST_PATH" > /dev/null
    export DST_PATH=`pwd`
    popd > /dev/null

    if [[ "$OPTIONS"'x' == "x" ]]
    then
	if [[ ( -d "$SRC_PATH/StPi0Common" ) && ( -d "$SRC_PATH/StPi0Simulation" ) ]] ; then export CONFIGURE_SIMULATION='yes' ; fi
	if [[ ( -d "$SRC_PATH/StPi0Common" ) && ( -d "$SRC_PATH/StPi0DataMaker" ) ]] ; then export CONFIGURE_DATA='yes' ; fi
	if [[ ( -d "$SRC_PATH/StPi0Common" ) && ( -d "$SRC_PATH/StPi0Analysis" ) ]] ; then export CONFIGURE_ANALYSIS='yes' ; fi
	if [[ ( -d "$SRC_PATH/StPi0Common" ) && ( -d "$SRC_PATH/StPi0Results" ) ]] ; then export CONFIGURE_RESULTS='yes' ; fi
	if [[ ( -d "$SRC_PATH/StPi0Common" ) && ( -d "$SRC_PATH/StPhotonCommon" ) && ( -d "$SRC_PATH/StPhotonDataMaker" ) ]] ; then export CONFIGURE_PHOTONDATA='yes' ; fi
	if [[ ( -d "$SRC_PATH/StPi0Common" ) && ( -d "$SRC_PATH/StPhotonCommon" ) && ( -d "$SRC_PATH/StPhotonAnalysis" ) ]] ; then export CONFIGURE_PHOTONANALYSIS='yes' ; fi
    fi

    echo "Configure simulation:      $CONFIGURE_SIMULATION"
    echo "Configure data:            $CONFIGURE_DATA"
    echo "Configure analysis:        $CONFIGURE_ANALYSIS"
    echo "Configure results:         $CONFIGURE_RESULTS"
    echo "Configure photon data:     $CONFIGURE_PHOTONDATA"
    echo "Configure photon analysis: $CONFIGURE_PHOTONANALYSIS"
    echo "Code directory:            $SRC_PATH"
    echo "Working directory:         $DST_PATH"

#    if [[ "${CONFIGURE_SIMULATION} ${CONFIGURE_DATA} ${CONFIGURE_ANALYSIS} ${CONFIGURE_RESULTS} ${CONFIGURE_PHOTONDATA} ${CONFIGURE_PHOTONANALYSIS}" != "no no no no no no" ]]
#    then

	if [[ "$STAR_HOST_SYS" == "" ]] ; then export STAR_HOST_SYS=`get_sys` ; fi

	export RCFILE_SH=$DST_PATH/.analysis.cfg.sh
	rm -fr "$RCFILE_SH"
	echo "#!/bin/bash" > "$RCFILE_SH"
	echo "" >> "$RCFILE_SH"
	echo "export ANALYSIS_DIR=\"$SRC_PATH\"" >> "$RCFILE_SH"
	echo "export ANALYSIS_WORKING_DIR=\"$DST_PATH\"" >> "$RCFILE_SH"
	echo "export ANALYSIS_MACRO_PATH=\".:./macros:$SRC_PATH/StPi0Common/macros:$SRC_PATH/StPi0Analysis/macros:$SRC_PATH/StPi0Simulation/macros:$SRC_PATH/StPi0DataMaker/macros:$SRC_PATH/StPi0Results/macros:$SRC_PATH/StPhotonCommon/macros:$SRC_PATH/StPhotonDataMaker/macros:$SRC_PATH/StPhotonAnalysis/macros\"" >> "$RCFILE_SH"
	echo "export STAR_HOST_SYS=\"$STAR_HOST_SYS\"" >> "$RCFILE_SH"
	echo "" >> "$RCFILE_SH"
	echo "#export DEFAULT_SUBMIT_OPTIONS=\"\$DEFAULT_SUBMIT_OPTIONS check_script_data check_script_analysis debug discard_stdout=no discard_stderr=no sleep_analysis\"" >> "$RCFILE_SH"

	export RCFILE_MAKE=$DST_PATH/Makefile.cfg
	rm -fr "$RCFILE_MAKE"
	echo "ANALYSIS_DIR=\"$SRC_PATH\"" >> "$RCFILE_MAKE"
	echo "ANALYSIS_WORKING_DIR=\"$DST_PATH\"" >> "$RCFILE_MAKE"
	echo "STAR_HOST_SYS=\"$STAR_HOST_SYS\"" >> "$RCFILE_MAKE"
	echo "MYCXXFLAGS=\"$MYCXXFLAGS\"" >> "$RCFILE_MAKE"

	export RCFILE_ROOT=$DST_PATH/.rootrc
	rm -fr "$RCFILE_ROOT"
	echo "+ACLiC.IncludePaths:          -I\"$SRC_PATH\" -I\"$DST_PATH/StRoot\"" >> "$RCFILE_ROOT"
	#echo "ACLiC.BuildDir:              \"$DST_PATH/.$STAR_HOST_SYS\"" >> "$RCFILE_ROOT"
	echo "+Unix.*.Root.IncludePath:     -I\"$SRC_PATH\" -I\"$DST_PATH/StRoot\" -I\"$SRC_PATH/StPi0Common/macros\" -I\"$SRC_PATH/StPi0Analysis/macros\" -I\"$SRC_PATH/StPi0Simulation/macros\" -I\"$SRC_PATH/StPi0DataMaker/macros\" -I\"$SRC_PATH/StPi0Results/macros\" -I\"$SRC_PATH/StPhotonCommon/macros\" -I\"$SRC_PATH/StPhotonDataMaker/macros\" -I\"$SRC_PATH/StPhotonAnalysis/macros\"" >> "$RCFILE_ROOT"
	echo "+WinNT.*.Root.IncludePath:    -I\"$SRC_PATH\" -I\"$DST_PATH/StRoot\" -I\"$SRC_PATH/StPi0Common/macros\" -I\"$SRC_PATH/StPi0Analysis/macros\" -I\"$SRC_PATH/StPi0Simulation/macros\" -I\"$SRC_PATH/StPi0DataMaker/macros\" -I\"$SRC_PATH/StPi0Results/macros\" -I\"$SRC_PATH/StPhotonCommon/macros\" -I\"$SRC_PATH/StPhotonDataMaker/macros\" -I\"$SRC_PATH/StPhotonAnalysis/macros\"" >> "$RCFILE_ROOT"
	echo "+Unix.*.Root.MacroPath:      .:$SRC_PATH/StPi0Common/macros:$SRC_PATH/StPi0Analysis/macros:$SRC_PATH/StPi0Simulation/macros:$SRC_PATH/StPi0DataMaker/macros:$SRC_PATH/StPi0Results/macros:$SRC_PATH/StPhotonCommon/macros:$SRC_PATH/StPhotonDataMaker/macros:$SRC_PATH/StPhotonAnalysis/macros" >> "$RCFILE_ROOT"
	echo "+WinNT.*.Root.MacroPath:     .;$SRC_PATH/StPi0Common/macros;$SRC_PATH/StPi0Analysis/macros;$SRC_PATH/StPi0Simulation/macros;$SRC_PATH/StPi0DataMaker/macros;$SRC_PATH/StPi0Results/macros;$SRC_PATH/StPhotonCommon/macros;$SRC_PATH/StPhotonDataMaker/macros;$SRC_PATH/StPhotonAnalysis/macros" >> "$RCFILE_ROOT"

	chmod a+x "$SRC_PATH/StPi0Common/macros/commands"
	chmod a+x "$SRC_PATH/StPi0Common/macros/configure"
	chmod a+x "$SRC_PATH/StPi0Common/macros/copy"
	chmod a+x "$SRC_PATH/StPi0Common/macros/clear_sched"
	chmod a+x "$SRC_PATH/StPi0Common/macros/resubmit"
	chmod a+x "$SRC_PATH/StPi0Common/macros/submit"

	if [[ "${CONFIGURE_SIMULATION}" != "no" ]] ; then chmod a+x "$SRC_PATH/StPi0Simulation/macros/run_simulation" ; fi
	if [[ "${CONFIGURE_DATA}" != "no" ]] ; then       chmod a+x "$SRC_PATH/StPi0DataMaker/macros/run_data" ; fi
	if [[ "${CONFIGURE_ANALYSIS}" != "no" ]] ; then   chmod a+x "$SRC_PATH/StPi0Analysis/macros/run_analysis" ; fi
	if [[ "${CONFIGURE_RESULTS}" != "no" ]] ; then    chmod a+x "$SRC_PATH/StPi0Results/macros/show_analysis" ; fi
	if [[ "${CONFIGURE_RESULTS}" != "no" ]] ; then    chmod a+x "$SRC_PATH/StPi0Results/macros/browse_analysis" ; fi
	if [[ "${CONFIGURE_PHOTONANALYSIS}" != "no" ]] ; then   chmod a+x "$SRC_PATH/StPhotonAnalysis/macros/show_photon" ; fi

        #ln -sf "$SRC_PATH/StPi0Common/macros/commands"    "$DST_PATH"
        #ln -sf "$SRC_PATH/StPi0Common/macros/configure"   "$DST_PATH"
        #ln -sf "$SRC_PATH/StPi0Common/macros/copy"        "$DST_PATH"
        ln -sf "$SRC_PATH/StPi0Common/macros/clear_sched" "$DST_PATH"
        ln -sf "$SRC_PATH/StPi0Common/macros/resubmit"    "$DST_PATH"
        ln -sf "$SRC_PATH/StPi0Common/macros/submit"      "$DST_PATH"
        ln -sf "$SRC_PATH/StPi0Common/macros/Makefile"    "$DST_PATH"
        ln -sf "$SRC_PATH/StPi0Common/macros/style.C"     "$DST_PATH"
	if [[ "${CONFIGURE_DATA}" != "no" ]] ; then     ln -sf "$SRC_PATH/StPi0DataMaker/macros/run_data.C"          "$DST_PATH" ; fi
	if [[ "${CONFIGURE_DATA}" != "no" ]] ; then     ln -sf "$SRC_PATH/StPi0DataMaker/macros/log4j.xml"           "$DST_PATH" ; fi
	if [[ "${CONFIGURE_ANALYSIS}" != "no" ]] ; then ln -sf "$SRC_PATH/StPi0Analysis/macros/run_analysis.C"       "$DST_PATH" ; fi
	if [[ "${CONFIGURE_ANALYSIS}" != "no" ]] ; then ln -sf "$SRC_PATH/StPi0Analysis/macros/run_analysis_final.C" "$DST_PATH" ; fi
	if [[ "${CONFIGURE_RESULTS}" != "no" ]] ; then  ln -sf "$SRC_PATH/StPi0Results/macros/show_analysis.C"       "$DST_PATH" ; fi
	#if [[ "${CONFIGURE_RESULTS}" != "no" ]] ; then  ln -sf "$SRC_PATH/StPi0Results/macros/data_arrays_others.C"  "$DST_PATH" ; fi
	#if [[ "${CONFIGURE_RESULTS}" != "no" ]] ; then  ln -sf "$SRC_PATH/StPi0Results/macros/data_arrays_this.C"    "$DST_PATH" ; fi
	if [[ "${CONFIGURE_RESULTS}" != "no" ]] ; then  ln -sf "$SRC_PATH/StPi0Results/macros/show_analysis"         "$DST_PATH" ; fi
	if [[ "${CONFIGURE_RESULTS}" != "no" ]] ; then  ln -sf "$SRC_PATH/StPi0Results/macros/browse_analysis.C"     "$DST_PATH" ; fi
	if [[ "${CONFIGURE_RESULTS}" != "no" ]] ; then  ln -sf "$SRC_PATH/StPi0Results/macros/browse_analysis"       "$DST_PATH" ; fi
	if [[ "${CONFIGURE_PHOTONANALYSIS}" != "no" ]] ; then ln -sf "$SRC_PATH/StPhotonAnalysis/macros/show_photon" "$DST_PATH" ; fi
	if [[ "${CONFIGURE_PHOTONANALYSIS}" != "no" ]] ; then ln -sf "$SRC_PATH/StPhotonAnalysis/macros/show_photon.C" "$DST_PATH" ; fi

#    fi
}
