#!/bin/bash

# this script checks if ANY of the BEMC trigger
# configuration had changed. If so, it updated the
# database with the new trigger configuration
#
# it runs as a cronjob every 5-10 minutes in the emc01
# machine
#
# this script follows the steps bellow
#
# 1. check the file RUNMODE. If content is STOP, exit the
#    program. This is done if, for some reason, we
#    want to stop the script from updating the DB
#
# 2. SCP the config_crate* and pedestal_crate* files
#    from sc3.starp.bnl.gov machine
#
# 3. SCP the trigegr masks from startrg2.starp.bnl.gov machine
#
# 4. Copy these files to the sc3 and startrg2 directories
#
# 5. Compare these files to the files saved in the sc3.saved 
#    and startrg2.saved directories
#    
# 6. If there is no difference, clear the sc3 and startrg2
#    directories and exit
#
# 7. If ANY difference was found, copy the contents of the
#    sc3 and startrg2 directories to sc3.saved and startrg2.saved
#    Also saves the directory with timestamped names in the
#    backup directory
#
# 8. runs the root4star macro that create the tables from
#    the files in those directories and save them to the DB
#    It also creates plain text file bemcStatus.txt with the same information
#    for the trigger people and Pplots
#
# 9. clear the sc3 and startrg2 directories and exit
#
# you can also run it by hand with the command
#
#    updateTriggerDB TIMESTAMP FORCE
#
# where TIMESTAMP is on the format
#
#    YYYYMMDD.hhmmss
# 
# if FORCE = yes  we force saving the DB
#
# this procedure overwrites the RUNMODE variable
#
# AAPSUAIDE, 12/2004
# Oleksandr Grebenyuk, April 2007

export EMCONLINE_TRG_DIR=${0}
export EMCONLINE_TRG_DIR=${EMCONLINE_TRG_DIR%/*}
if [[ -f ./.emconline_trg.cfg.sh ]]
then
    source ./.emconline_trg.cfg.sh
elif [[ -f ${EMCONLINE_TRG_DIR}/.emconline_trg.cfg.sh ]]
then                                                                                                                                                                        
    source ${EMCONLINE_TRG_DIR}/.emconline_trg.cfg.sh
else
    echo "EMC Online environment is not configured, please run configure.emconline_trg"
    exit 1
fi

cd ${EMCONLINE_TRG_DIR}

echo "EMC Online trigger monitoring"

export TIMESTAMP=${1}
export FORCE=${2}
export MODE=${3}
if [[ "${TIMESTAMP}" == "" ]]
then
    # TIMESTAMP is SET in UTC time, not local time
    echo "Getting timestamp from the system"
    export TIMESTAMP=`date -u +%G%m%d.%H%M%S`
else
    export MODE=RUN
fi
if [[ "${MODE}" == "" ]]
then
    export MODE=`cat ${EMCONLINE_TRG_RUNMODE_FILE}`
    export MODE=`echo ${MODE}`
fi
if [[ "${FORCE}" == "" ]]
then
    export FORCE=no
fi

if [[ "${SCP}" == "" ]] ; then export SCP=scp ; fi

rm -f ${EMCONLINE_TRG_LASTRUN_FILE}
export DATE=`date -u`
export DATE_LOCAL=`date`
echo "LAST TIME IT WAS EXECUTED = ${DATE} (${DATE_LOCAL})" > ${EMCONLINE_TRG_LASTRUN_FILE}
echo "TIMESTAMP = ${TIMESTAMP}" >> ${EMCONLINE_TRG_LASTRUN_FILE}
echo "RUN MODE = ${MODE} " >> ${EMCONLINE_TRG_LASTRUN_FILE}

cat ${EMCONLINE_TRG_LASTRUN_FILE}

if [[ "${MODE}" != "RUN" ]]
then
    exit
fi

mkdir -p ${EMCONLINE_TRG_CURRCONF_DIR}
mkdir -p ${EMCONLINE_TRG_LASTCONF_DIR}
mkdir -p ${EMCONLINE_TRG_BACKUP_DIR}

echo "Copying the files to this machine..."
rm -fr ${EMCONLINE_TRG_CURRCONF_DIR}/*
${SCP} ${EMCONLINE_SLOWCTRL_PED_DIR}/${CRATE_PEDESTAL_FILES_MASK} ${EMCONLINE_TRG_CURRCONF_DIR}
${SCP} ${EMCONLINE_SLOWCTRL_CFG_DIR}/${CRATE_CONFIG_FILES_MASK} ${EMCONLINE_TRG_CURRCONF_DIR}
${SCP} ${EMCONLINE_SLOWCTRL_CFG_DIR}/${CRATES_CONFIG_FILE_MASK} ${EMCONLINE_TRG_CURRCONF_DIR}
${SCP} ${EMCONLINE_SLOWCTRL_DSMMASK_DIR}/${DSM_MASK_FILES_MASK} ${EMCONLINE_TRG_CURRCONF_DIR}

# start checking
export SAVE=false
export UPDATESTATUS=false
export UPDATEPEDESTAL=false
export UPDATELUT=false
export DIFF_OPTIONS='-bBN'

echo "Checking config files"
for file in ${CRATE_CONFIG_FILES}
do
    export FILE1=${EMCONLINE_TRG_CURRCONF_DIR}/${file}
    export FILE2=${EMCONLINE_TRG_LASTCONF_DIR}/${file}
    if [[ -f ${FILE1} ]]
    then
	export DIFF=`diff ${DIFF_OPTIONS} ${FILE1} ${FILE2}`
	echo "${file} ${DIFF}"
	if [[ "`echo ${DIFF}`" != "" ]]
	then
	    export SAVE=true
    	    export UPDATESTATUS=true
    	    export UPDATELUT=true
	fi
    fi
done

echo "Checking Pedestal files"
for file in ${CRATE_PEDESTAL_FILES}
do
    export FILE1=${EMCONLINE_TRG_CURRCONF_DIR}/${file}
    export FILE2=${EMCONLINE_TRG_LASTCONF_DIR}/${file}
    if [[ -f ${FILE1} ]]
    then
	export DIFF=`diff ${DIFF_OPTIONS} ${FILE1} ${FILE2}`
	echo "${file} ${DIFF}"
	if [[ "`echo ${DIFF}`" != "" ]]
	then
	    export SAVE=true
	    export UPDATEPEDESTAL=true
	fi
    fi
done

echo "Checking BemcConfig.dat"
for file in ${CRATES_CONFIG_FILE}
do
    export FILE1=${EMCONLINE_TRG_CURRCONF_DIR}/${file}
    export FILE2=${EMCONLINE_TRG_LASTCONF_DIR}/${file}
    if [[ -f ${FILE1} ]]
    then
	export TMP1=${EMCONLINE_TRG_DIR}/${file}.curr.tmp
	export TMP2=${EMCONLINE_TRG_DIR}/${file}.last.tmp
	rm -f ${TMP1}
	rm -f ${TMP2}
	cat ${FILE1} | grep TriggerPedestalShift > ${TMP1}  
	cat ${FILE2} | grep TriggerPedestalShift > ${TMP2}  
	export DIFF=`diff ${DIFF_OPTIONS} ${TMP1} ${TMP2}`
	echo "${file} ${DIFF}"
	if [[ "`echo ${DIFF}`" != "" ]]
	then 
	    export SAVE=true
	    export UPDATEPEDESTAL=true
	fi
	rm -f ${TMP1}
	rm -f ${TMP2}
    fi
done

echo "Checking Trigger mask files"
for file in ${DSM_MASK_FILES}
do
    export FILE1=${EMCONLINE_TRG_CURRCONF_DIR}/${file}
    export FILE2=${EMCONLINE_TRG_LASTCONF_DIR}/${file}
    if [[ -f ${FILE1} ]]
    then
	export DIFF=`diff ${DIFF_OPTIONS} ${FILE1} ${FILE2}`
	echo "${file} ${DIFF}"
	if [[ "`echo ${DIFF}`" != "" ]]
	then 
    	    export SAVE=true
	    export UPDATESTATUS=true
	fi
    fi
done

if [[ "${FORCE}" == "yes" ]]
then
    export SAVE=true
    export UPDATESTATUS=true
    export UPDATEPEDESTAL=true
    export UPDATELUT=true
fi
             
echo "Forced mode = ${FORCE}"
echo "Saving      = ${SAVE}"
echo "  STATUS    = ${UPDATESTATUS}"
echo "  PEDESTAL  = ${UPDATEPEDESTAL}"
echo "  LUT       = ${UPDATELUT}"

###############################################################
###############################################################
# this is the part that runs root4star and save the tables
#

if [[ "${SAVE}" == "true" ]]
then

    echo "Making backup of files with TS = ${TIMESTAMP}"
    mkdir -p ${EMCONLINE_TRG_BACKUP_DIR}/${TIMESTAMP}
    cp -rf ${EMCONLINE_TRG_CURRCONF_DIR}/* ${EMCONLINE_TRG_BACKUP_DIR}/${TIMESTAMP}/

    echo "Removing old saved files"
    rm -rf ${EMCONLINE_TRG_LASTCONF_DIR}/*

    echo "Copying current files to last saved directory"
    mv -f ${EMCONLINE_TRG_CURRCONF_DIR}/* ${EMCONLINE_TRG_LASTCONF_DIR}/

    echo "Removing latest bemcStatus.txt file"
    rm -f ${EMCONLINE_TRG_BEMCSTATUS_FILE}

    mkdir -p ${EMCONLINE_TRG_TABLES_DIR}

    starver ${EMCONLINE_TRG_STARVER}

    echo "Saving data in the last saved directory with TS = ${TIMESTAMP}"
    root4star -b -q ${EMCONLINE_TRG_SCRIPT}\(\"${TIMESTAMP}\",${UPDATESTATUS},${UPDATEPEDESTAL},${UPDATELUT},${EMCONLINE_TRG_SAVEDB},${EMCONLINE_TRG_SAVETABLES},\"${EMCONLINE_TRG_TABLES_DIR}\",\"${EMCONLINE_TRG_LASTCONF_DIR}\",\"${EMCONLINE_TRG_BEMCSTATUS_FILE}\",\"${EMCONLINE_TRG_BCECONF_FILE}\",\"${EMCONLINE_TRG_BCWCONF_FILE}\"\)

    cp -f ${EMCONLINE_TRG_BEMCSTATUS_FILE} ${EMCONLINE_TRG_BACKUP_DIR}/${TIMESTAMP}/
    cp -f ${EMCONLINE_TRG_BEMCSTATUS_FILE} ${EMCONLINE_TRG_LASTCONF_DIR}/

    if [[ -f ${EMCONLINE_TRG_BEMCSTATUS_FILE} ]]
    then
	echo "Copying bemcStatus.txt to consumers"
	for consumer in ${EMCONLINE_TRG_BEMCSTATUS_CONSUMERS}
	do
	    echo "${consumer}..."
	    ${SCP} ${EMCONLINE_TRG_BEMCSTATUS_FILE} ${consumer}/
	done
    fi
    
else
    echo "Removing files from current directory"
    rm -rf ${EMCONLINE_TRG_CURRCONF_DIR}/*

    echo "Nothing happened. Exiting..."
fi
