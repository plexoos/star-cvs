StTimeRandomizerMaker

A maker that randomly changes every event's timestamp to cover the user
supplied time period. Used to process the Monte-Carlo simulated data sampling
the realistic time-dependent detector acceptance as recorded in the database.

It reads the timestamps file during Init() and generates a timestamp for
every event in one of the two modes:

A. Generates a random timestamp and run number using event numbers in the
file as weight (if normalizeEventsTotal is zero).
The run number usually changes on event by event basis, this can generate
a huge CPU and DB load if a significant processing is performed in InitRun().

B. Travels the file sequentially (if normalizeEventsTotal is not zero) by
a fixed step in such a way that after normalizeEventsTotal events the whole
file is covered.
The step is sum(Number of events in file)/normalizeEventsTotal and before
beginning the counter in initialized to a random number from 0 to step.
This way after running many jobs of normalizeEventsTotal events each the
whole time period is sampled according to the event numbers specified in
the file, and run number does not change often.
This is a preferred way of running.

User has to create this maker BEFORE St_db_Maker.

Timestamps file (Run Date Time Number-of-events):
--------------------------------------------
4037002 20030206 061453 6677
4037005 20030206 103446 89282
4037009 20030206 114401 36999
4037010 20030206 121931 99071
4037025 20030207 000547 510
4037029 20030207 002935 20340
4038034 20030208 020245 42778
4039010 20030208 142318 17269
...
--------------------------------------------

User's macro:
--------------------------------------------
// Load the library
gSystem->Load("StTimeRandomizerMaker");

// Create the time randomizer
StTimeRandomizerMaker *timeRandomizer = new StTimeRandomizerMaker();
// timestamps filename
timeRandomizer->setRunTimesFilename("timestamps.txt");
// ~number of events normally processed per job, set to 0 to have
// a random timestamp every event
timeRandomizer->setNormalizeEventsTotal(20000);
// StEvent dataset name when running StIOMaker over event.root files
timeRandomizer->setDatasetNameStEvent("IO_Root/.data/bfcTree/eventBranch/StEvent");
// Seed for the random numbers generator
// Default is zero, non-reproducable
timeRandomizer->setSeed(0);
// Sarting ID for the event counting, default is zero
timeRandomizer->setBaseEventId(0);

// here we create St_db_Maker, it will use the generated event timestamps
St_db_Maker *dbMaker = new St_db_Maker("db", "MySQL:StarDb", "$STAR/StarDb");
--------------------------------------------

TRandom3 is utilized with user defined seed (default is zero) in Init() for
the Uniform() random numbers.

Events are assigned a sequential IDs, starting from the user defined base ID.
Set it to a different (large) number for each job if you want all events to
have globally unique IDs.

Originally released by Oleksandr Grebenyuk as part of the pi0 analysis code.
