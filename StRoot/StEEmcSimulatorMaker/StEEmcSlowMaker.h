// $Id: StEEmcSlowMaker.h,v 1.1 2004/12/15 17:02:56 balewski Exp $

#ifndef STAR_StEEmcSlowMaker
#define STAR_StEEmcSlowMaker

/*!
 *                                                                     
 * \class  StEEmcSlowMaker
 * \author H. Spinka, J. Balewski, J. Webb
 * \date   12/13/04
 * \brief  Slow simulator for EEMC, for use with muDst
 *
 * StEEmcSlowMaker is the slow simulator for the EEMC.  At present,
 * it adds poisson statistics to the simulated response of the
 * SMD, pre- and postshower detector chain.  It is also capable of
 * adding realistic pedestal offsets (and widths) based on database
 * information.
 * 
 * Geant energy deposit was converted to an ADC response by the
 * StEEmcFastMaker.  This is inverted using gains stored with the 
 * "sim" flavor in the database, and thre resulting energy deposit
 * is converted to number of mips.  This is converted to the mean
 * number of photoelectrons produced based on QA measurements at
 * ANL (currently a fixed mean of 2.0 pe per mip for SMD, and 
 * 3.9 pe per mip pre/post).  Poisson statistics are applied, and
 * the results smeared with the single pe resolution.
 *
 * Physics parameters are configurable through various "set" methods
 * below.  Defaults should be good for most applications.
 *
 * By default, the ADC values stored in the muDst are overwritten
 * with the values computed in this maker.  i.e. makers in the chain
 * which follow this maker will see more realistic SMD and pre/postshower
 * response than those which come before it in the chain... i.e. unless
 * you know what you're doing, put this before your anlaysis maker!
 *
 * Present status: work ongoing to add more realistic light yield, 1 p.e. 
 * resolution, etc.
 *
 * For the time being, towers remain a straight energy deposit --> adc
 * coversion.  See StEEmcFastMaker.
 *
 * See also http://www.star.bnl.gov/STAR/eemc/software/slowSimu/
 *
 * To reproduce the figures on the web page, use the following parameters:
 *
 * Figures 1 & 2
 *
 * slowSim->setSinglePeResolution(0.1);
 * slowSim->setNpePerMipSmd(2.0);
 * slowSim->setNpePerMipPre(3.9);
 * slowSim->setMipElossSmd(1.33/1000.);
 * slowSim->setMipElossPre(1.33/1000.);
 *
 * Figures 3 & 4
 *
 * slowSim->setMipElossSmd(1.00/1000.);
 *
 */                                                                      

#ifndef StMaker_H
#include "StMaker.h"
#endif

class TObjArray;
class StMuDstMaker;
class StEEmcDbMaker;
class StMuEmcCollection;

#include "SlowSimUtil.h"

class StEEmcSlowMaker : public StMaker , public SlowSimUtil{

 private: 

  enum {mxH=32};
  StMuDstMaker* mMuDstMaker;  
  StEEmcDbMaker *eeDb;
  TObjArray  *mHList; /// output histo access point

  int   nInpEve; // private event counter

  TH1F *hA[mxH]; // some global (test) histograms  
  void InitHisto();

  /// Process endcap preshower and overwrite ADC values with
  /// new values computed by the slow simulator
  void MakePre( StMuEmcCollection *emc );
  /// Process endcap smd strips [UV] and overwrite ADC values 
  /// with new values computed by the slow simulator
  void MakeSMD   ( StMuEmcCollection *emc );

  /// Offset by pedestal (default false)
  Bool_t mAddPed;
  /// Smear the pedestals (default false)
  Bool_t mSmearPed;
  /// Drop bad channels (default false)
  Bool_t mDropBad;
  /// Overwrite muDst values(default true)
  Bool_t mOverwrite;

  /// Number of sigma over pedestal defined in DB
  Float_t mKSigma;
  
 public: 

  /// Class constructor
  StEEmcSlowMaker(const char *self="eemcSlowSimuMaker", const char* muDstMakerName="MuDst");
  /// Class destructor
  virtual       ~StEEmcSlowMaker();

  /// Initialization
  virtual Int_t Init();
  /// Run specific initialization
  virtual Int_t InitRun  (int runNo );
  /// Finish
  virtual Int_t Finish();
  /// Processes a single event
  virtual Int_t  Make();

  /// Optional pointer to a TObjarray, if you're interested 
  /// in saving any of the histograms generated by this maker.
  void SetHList(TObjArray * x){mHList=x;} 

  /// Add pedestal offsets from DB
  void setAddPed( Bool_t a=true );
  /// Smear the pedestal with sigma from DB
  void setSmearPed( Bool_t s=true );
  /// Drop bad channels marked as "fail" in DB
  void setDropBad( Bool_t d=true );

  /// Overwrite the muDst values
  void setOverwrite( Bool_t o=true );
  
  /// Set the energy lost by one MIP in an 
  /// SMD strip [GeV].
  void setMipElossSmd( Float_t e );
  /// Set the number of photoelectrons per 
  /// mip for the specified SMD strip [0..287]
  void setNpePerMipSmd( Int_t strip, Float_t npe );
  /// Sets the number of photoelectrons per mip 
  /// for all SMD stips to the specified value
  void setNpePerMipSmd( Float_t npe );

  /// Set the energy lost by one MIP in a 
  /// pre or postshower layer [GeV].
  void setMipElossPre( Float_t e );
  /// Sets the number of photoelectrons per mip 
  /// for the pre/postshower layers
  void setNpePerMipPre( Float_t npe );

  /// Set the resolution of the single photoelectron 
  /// peak for the MAPMT's
  void setSinglePeResolution( Float_t r );

  /// Displayed on session exit, leave it as-is please ...
  virtual const char *GetCVS() const {
    static const char cvs[]="Tag $Name:  $ $Id: StEEmcSlowMaker.h,v 1.1 2004/12/15 17:02:56 balewski Exp $ built "__DATE__" "__TIME__ ; 
    return cvs;
  }

  ClassDef(StEEmcSlowMaker, 1)   //StAF chain virtual base class for Makers
};

inline void StEEmcSlowMaker::setSmearPed( Bool_t s ){ mSmearPed = s; }
inline void StEEmcSlowMaker::setAddPed( Bool_t a ) { mAddPed = a; }
inline void StEEmcSlowMaker::setDropBad( Bool_t d ) { mDropBad = d; }
inline void StEEmcSlowMaker::setOverwrite( Bool_t o ) { mOverwrite = o; }

inline void StEEmcSlowMaker::setMipElossSmd(Float_t e){ mip2ene=e; }
inline void StEEmcSlowMaker::setMipElossPre(Float_t e){ Pmip2ene=e; }
inline void StEEmcSlowMaker::setSinglePeResolution(Float_t s){ sig1pe=s; }
inline void StEEmcSlowMaker::setNpePerMipSmd( Int_t strip, Float_t npe ) { mip2pe[strip] = npe; }
inline void StEEmcSlowMaker::setNpePerMipSmd( Float_t npe ) { for ( Int_t i = 0; i < 288; i++ ) mip2pe[i] = npe; }
inline void StEEmcSlowMaker::setNpePerMipPre( Float_t npe ) { Pmip2pe = npe; }

#endif


// $Log: StEEmcSlowMaker.h,v $
// Revision 1.1  2004/12/15 17:02:56  balewski
// try 2
//
