#!/usr/bin/csh
#  $Id: hijing_sim.batch,v 1.3 1998/04/13 16:03:49 fisyak Exp $
#  $Log: hijing_sim.batch,v $
#  Revision 1.3  1998/04/13 16:03:49  fisyak
#  Correct HPUX flags
#
#  Revision 1.2  1998/04/10 14:03:15  fisyak
#  Add supermodule in shared libraries
#
#  Revision 1.1  1998/04/04 15:00:03  fisyak
#  add hijing_sim.batch
#
#  Revision 1.1  1998/03/23 02:34:29  fisyak
#  Add pyhtia batch job
#
# This script is to submit an example job to execute  NQS queues.
# You can submit it with the command: 
#	qsub -q express star_nqs.batch
# You can modify your copy of this script to suit your needs.
#
# When this script starts executing, assumes as default directory
# the directory from where you submitted it. First compiles any
# fortran files and after that creates the executable at the NQS
# workspace. Several files are linked to the current directory to
# create the default running environment.
# 
# During the execution output files are written at the directory you
# submitted the script. Check if your quota space is enough.
#
#
# NQS embedded directives  follow
#@$-lt 1000      # time limit in seconds
#@$-r  hijing    # request name
#@$-lf 90mb      # output file size limit
#$-eo            # merge std error and out
# QSUB-mb -me    # send mail at beginning and end of request execution
#$-M $USER       # Send mail to these users
#$-s /usr/local/bin/tcsh # under what shell to execute
#
# Go to the directory from where job was submitted.
#
#printenv
echo Starting job execution at `date`
set dir  = /star/mds/data/SD98/auau200
set set  = central/hijing/set0001/regular
set trig = 200
set file = auau_ce_b0-2
set part = 1_200
while ( $#argv > 0 )
        switch ($1)
        case -d:        # top level directory
        shift; if ( $#argv > 0 ) set dir  = $1
                breaksw
        case -s:        # set number
        shift; if ( $#argv > 0 ) set set  = $1
                breaksw
        case -t:        # No.of event
        shift; if ( $#argv > 0 ) set trig = $1
                breaksw
        case -f:        # file
        shift; if ( $#argv > 0 ) set file = $1
                breaksw
        case -p:        # part
        shift; if ( $#argv > 0 ) set part = $1
                breaksw
        default:
                echo $1 unrecognised
        endsw
        shift
end
#set log = `echo ${dir}/${set}/${file}_${part}_${trig} | sed -e 's/\//_/g' `_`date +"%d_%h_%Y"`
set log = `echo ${file}_${part}_${trig} | sed -e 's/\//_/g' `_`date +"%d_%h_%Y"`
#
cd ${dir}
if (  -d gst/${set} == 0) mkdir -p gst/${set}
cd ${SCRATCH}
if ( -d log == 0) mkdir log
if ( -d log/${part} == 0) mkdir log/${part}
cd ${SCRATCH}/log/${part}
# ============================================
staf -w 0 << EOF > $SCRATCH/log/${part}/${log}
Root  Geant
* sets standard geant geometry and  parameters for "physics on" running
def $STAR/kumacs/sim
exec  set_hadr_phys_on
make geometry sim/gstar/gstar_input
*
* make geant to save secondaries which produced TPC hits:
Mode TRAC  SIMU 1
detp TRAC  DCAY 210 210 0.1 0.01
mode tpce  simu 2
debug off

* keep track of memory/cpu consumption
ghist star.his  STAR
gstat time size mult stak

user/input  U ${dir}/evg/${set}/${file}_${part}.xdf
user/output O ${dir}/gst/${set}/${file}_${part}_new.fzd
trig  ${trig}

* show histograms
ge/rz/cd //PAWC
hi/list

exit
EOF
#
# Clean files/links not needed anymore...
echo
echo   Job finished at `date`
#
#END


