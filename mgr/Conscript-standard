#!/opt/star/bin/perl
#use Env;
Import qw ( env INCLUDE LIB BIN  EXPORT BUILD OBJ);
(my $build = $OBJ) =~ s/\#//g;
$build =~ s/\\/\//g;# print "OBJ = $OBJ build = $build MAIN = $MAIN\n";
(my $ObjDir = DirPath '.') =~ s/\\/\//g;# print "ObjDir = $ObjDir\n";
(my $Dir = $ObjDir) =~ s/$build\///g; #print "Dir = $Dir\n";
$ObjDir = "#" . $ObjDir; #print "ObjDir = $ObjDir\n";
(my $obj_dir = $ObjDir) =~ s/^\#//g;# print "obj_dir = $obj_dir\n";
my $STAR_SYS = $env->{ENV}->{STAR_SYS};
my @Repo = Repository_List; #print "Repositories = |@Repo|\n";
my $pkg  = basename($Dir);# print "Run cons in $Dir for $PKG\n";
my $PKG = $pkg;
my @idlML    = find_idlM($Dir);   #  $i = 0; for my $s (@idlM) {print "i=",$i++," idlM = ",$s,"\n";}
my @srcL     = find_sources($Dir);#  my $i=0; for my $s (@src) {print "i=",$i++," src = ",$s,"\n";}
#my @h_filesL = find_hfiles($Dir);   #$i = 0; for my $s (@h_files) {print "i=",$i++," h_files = ",$s,"\n";}
opendir (DIR, $Dir) or die "Can't open $Dir\n";
my @dirEntries = readdir DIR;
closedir DIR; #print "dirEntries = @dirEntries\n";
my @h_filesL = ();
foreach my $entry (@dirEntries) {
  next if $entry !~ /\.h$/ && $entry !~ /\.hh$/;
  push @h_filesL, $entry;
}
foreach my $Rep (@Repo) {
  my $RepDir = $Rep . "/" . $Dir;# print "RepDir = $RepDir\n";
  if (-d $RepDir) {
    my @srcR = find_sources($RepDir);
    foreach my $i (@srcR) {push @srcL,  $i;}
    my @idlMR = find_idlM($RepDir);
    foreach my $i (@idlMR) {push @idlML, $i;}
#    my @h_filesR = find_hfiles($RepDir);
#    foreach my $i (@h_filesR) {push @h_filesL, $i;}
    opendir (DIR, $RepDir) or die "Can't open $RepDir\n";
    my @dirEntries = readdir DIR;
    closedir DIR; #print "dirEntries = @dirEntries\n";
    foreach my $entry (@dirEntries) {
      next if $entry !~ /\.h$/ && $entry !~ /\.hh$/;
      push @h_filesL, $entry;
    }
  }
}
my @src     = sortu (@srcL);# print "@src\n";
my @h_files = sortu (@h_filesL);
my @idlM    = sortu (@idlML);
if ($#idlM > -1) {$PKG = "St_" . $PKG;}
printf ("Run Conscript-standard in %-30s  for %-20s\n",$Dir, $PKG) unless ($param::quiet);
my $obj  = $ObjDir;  #print "obj = $obj\n";
my $SO_PKG = $PKG . "." . $env->{SUFSOLIB}; #print "SO_PKG = $SO_PKG\n";
my $LIBS  = $env->{LIBS};
my $LIBPATH = $env->{LIBPATH};
if ($pkg =~ /^StDb/) {
  $LIBPATH .= ":/opt/star/lib/mysql";# print "LIBPATH = $LIBPATH\n";
  $LIBS .= " -lmysqlclient";
}
if ($pkg =~ /^pyth$/){
  my $CERN_ROOT = $env->{ENV}->{CERN_ROOT};# print "CERN_ROOT = $CERN_ROOT\n";
  $LIBPATH .= ":" . $CERN_ROOT . "/lib";
  if ($STAR_SYS =~ /^i386/) {$LIBS .= " -lpythia6115";} 
  else                      {$LIBS .= " -lpythia6125";} 
}
(my $share = $EXPORT .  "/" . $Dir) =~ s/\/pams//g;# print "new share $share\n";
$share =~ s/\/StRoot//g;
$share =~ s/\/(sim|gen)//g; 
my $CPPP =  ":#" . $Dir . ":" . $env->{CPPPATH};# print "CPPP = $CPPP\n";
my $include = $INCLUDE . "/" . $pkg;
my $LIBPKG = "";
if ($Dir =~ /pams\// || $STAR_SYS =~ /^intel_wnt$/) {
  $LIBPKG = "lib" . $pkg . "." . $env->{SUFLIB};
  (my $lib_lib = $LIB) =~ s/^\#//g;
  $LIBS .= " " . $lib_lib . "/" . $LIBPKG;#     print "LIBS    = $LIBS\n";
  foreach my $rep (@Repo) {
    my $_lib = $rep . "/" . $lib_lib . "/". $LIBPKG;# print "_lib = $_lib\n";
    next if !-e "$_lib";
    $LIBS .= " " . $_lib;#     print "LIBS    = $LIBS\n"
  }
}
my $CXXFLAGS = $env->{CXXFLAGS};
if ($STAR_SYS =~ /^sun4x_5/) {$CXXFLAGS .= " -ptr" . $obj_dir;}
$env2 = $env->clone('CPPPATH'      => $CPPP,
		    'CXXFLAGS'     => $CXXFLAGS,
                    'LIBPATH'      => $LIBPATH,
                    'LIBS'         => $LIBS);
my $cscanner= find scan::cpp($env2->{_cwd}, $env2->{CPPPATH});
my $CPPPATH = $cscanner->iflags;#  print "CPPPATH = $CPPPATH\n";
my $STIC_CPPPATH = $CPPPATH;
my @cpps = split /:/,$env2->{CPPPATH};# print "@cpps\n";
my $ROOTCINT_CPP ="";
foreach my $cpp (@cpps) {
  if ($cpp =~ /cern/ ||
      $cpp eq "/usr/include"
     )  {next;}
  if ($ROOTCINT_CPP) {$ROOTCINT_CPP .= ":" . $cpp;}
  else               {$ROOTCINT_CPP .= $cpp;}
}
$cscanner= find scan::cpp($env2->{_cwd}, $ROOTCINT_CPP);# print "ROOTCINT_CPP = $ROOTCINT_CPP\n";
my $ROOTCINT_CPPPATH = $cscanner->iflags;# print "ROOTCINT_CPPPATH = $ROOTCINT_CPPPATH\n";
my $DIR = cwd(); #print "DIR = $DIR\n";
my $line;
my @Defs = ();
if ($Dir !~ /pams\//) {
  foreach $h (@h_files) {
    if ($h =~ /LinkDef/ || $h =~ /Stypes/) {push @Defs, $h; next;}
    my $hh = $Dir . "/" . $h;
    if (-r $hh) {
      open (In,$hh) or die "Can't open $hh";
      while ($line = <In>) {if ($line =~/ClassDef/) {push @Defs, $h; next;}}
      close(In);
    }
    else {      
      foreach my $Rep (@Repo) {
	my $RepDir = $Rep . "/" . $Dir;# print "RepDir = $RepDir\n";
	if (-d $RepDir) {
	  my $hh = $RepDir . "/" . $h;
	  if (-r $hh) {
	    open (In,$hh) or die "Can't open $hh";
	    while ($line = <In>) {if ($line =~/ClassDef/) {push @Defs, $h; next;}}
	    close(In);
	  }
	}
      }
    }
  }
}
else {
  if ($#idlM > -1) {
    for $idl (@idlM) {
      my $stem = basename($idl,".idl"); #print "idl = $idl  stem = $stem\n";
      my $idm  = $stem . ".idl";
      my $idMM = $DIR . "/" . $Dir . "/" . $idl;# print "idMM = $idMM\n";
      my $idM  = "#" . $Dir . "/" . $idl;# print "idM = $idM\n";
      my @idlS = ($idM);
      my $modh = $INCLUDE . "/"   . $stem . ".h";
      my $modi = $INCLUDE . "/"   . $stem . ".inc";
      my $modH = $include . "/"   . "St_" . $stem . "_Module.h"; 
      my $modC = $share . "/"   . "St_" . $stem . "_Module.cxx";# print "mod = $mod\n";
      if (-r $idMM) {
	open (IN, "<$idMM") or die  "Can't open $idMM";
	while ($line = <IN>) {
	  if ($line !~ "include") {next;}
	  if ($line =~ "PAM")     {next;}
	  my @words = split '"', $line; my $idt = $INCLUDE . "/" . $words[1]; #print "idt = $idt\n";
	  push @idlS, $idt; 
	}
	close (IN);
      }
	if ($STAR_SYS !~ /^intel_wnt$/) {
	  Command $env2 [$modh], @idlS,  qq(stic.pl %> -r $STIC_CPPPATH -q %1);  
	  Command $env2 [$modi], @idlS,  qq(stic.pl %> -r $STIC_CPPPATH -q %1);  
	  Command $env2 [$modH], @idlS,  qq(stic.pl %> -r $STIC_CPPPATH -q %1);  
	  Command $env2 [$modC], @idlS,  qq(stic.pl %> -r $STIC_CPPPATH -q %1);  
	}
	my @objmod = ($modC);
	Install $env2 $ObjDir, @objmod;#  print "Install @objmod in $ObjDir\n";
      (my $mod = $modC) =~  s/$share/$obj/g; 
      push @src, $mod;# print "src + $mod: @src\n";
      push @Defs, $modH;
    }
  }
}
if ($#Defs > -1) {
  my @CintFiles = 
  ($share . "/"  . $PKG . "_Cint.cxx", $share . "/"  . $PKG . "_Cint.h", $share . "/"  . "LinkDef.h"); 
#  Depends $env2, [@CintFiles], [@St_base];
  Command $env2 [@CintFiles], @Defs,  qq(RootCint.pl "%>" "%<" "$ROOTCINT_CPPPATH" );
  my $linkdef = pop @CintFiles;# print "ObjDir and Cints: $ObjDir => @CintFiles\n";
  Install $env2 $ObjDir, @CintFiles;
  (my $cint =  $CintFiles[0]) =~ s/$share/$obj/g;
  push @src, $cint;# print "+==========add $cint\n"; 
}
if ($#src > -1) {
  if ($LIBPKG) {
    Library      $env2 $LIBPKG, @src;  
    Install $env2 $LIB, $LIBPKG;# print "Install $env2 $LIB, $LIBPKG\n";
    my $libpkg = $LIB . "/" . basename($LIBPKG);
    Depends $env2 $SO_PKG, $libpkg;
  }
  LinkedModule $env2 $SO_PKG, @src;
  Install $env2 $LIB, $SO_PKG;
}  
