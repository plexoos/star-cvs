#!/usr/local/bin/perl
# $Id: bfcc,v 1.3 2000/09/28 14:33:22 fisyak Exp $
# $Log: bfcc,v $
# Revision 1.3  2000/09/28 14:33:22  fisyak
# replace link by copy
#
# Revision 1.2  2000/08/31 22:23:47  didenko
# change to T0Maker
#
# Revision 1.1  2000/08/09 16:06:10  fisyak
# Chain with precalibration
#
# Revision 1.11  2000/07/19 21:26:51  didenko
# fix shell
#
# Revision 1.10  2000/06/14 21:26:39  didenko
# script interface for rcrs production
#
# Revision 1.9  2000/01/26 05:27:10  didenko
# set disk name for simu data
#
# Revision 1.8  2000/01/26 00:00:22  didenko
# add remove link for tpc calibration
#
# Revision 1.7  2000/01/21 20:21:10  didenko
# add links of StDb/calibration/tpc for cosmic run
#
# Revision 1.5  1999/10/12 16:01:13  didenko
# fixed disk names
#
# Revision 1.4  1999/06/15 22:48:29  fisyak
# Production version
#
# Revision 1.3  1999/05/21 19:48:24  fisyak
# Add recognition of file name by . and no. of events to process from file name
#
# Revision 1.2  1999/05/20 21:58:31  didenko
# Replace cshell version by perl one
#
use Env;
use File::Basename;
use File::Copy;
system 'echo "Starting job execution at" `date` " on " $HOSTNAME';
print "STAR_LEVEL = $STAR_LEVEL\n";
my $Chain = "";
die "No input Chain defined" if ! defined($ARGV[0]);
for (my $i = 0;$i<=$#ARGV;$i++){
  if ($ARGV[$i] && ! ($ARGV[$i] =~ /\./)) {$Chain .= " " .  $ARGV[$i];}
}
my  $input_file;
if ($ACTUAL_INPUT0) {
  chomp ($ACTUAL_INPUT0);
  print "Input: ",$ACTUAL_INPUT0, "\n";
  $input_file = basename($ACTUAL_INPUT0);
  print "input: ",$input_file,"\n";
  my $OUTPUT_FILE0 = convert($ACTUAL_OUTPUT0);
  my $OUTPUT_FILE1 = convert($ACTUAL_OUTPUT1);
  my $OUTPUT_FILE2 = convert($ACTUAL_OUTPUT2);
  my $OUTPUT_FILE3 = convert($ACTUAL_OUTPUT3);
  my $OUTPUT_FILE4 = convert($ACTUAL_OUTPUT4);
  my $OUTPUT_FILE5 = convert($ACTUAL_OUTPUT5);
  my $OUTPUT_FILE6 = convert($ACTUAL_OUTPUT6);
  my $OUTPUT_FILE7 = convert($ACTUAL_OUTPUT7);
  my $OUTPUT_FILE8 = convert($ACTUAL_OUTPUT8);
  my $OUTPUT_FILE9 = convert($ACTUAL_OUTPUT9);
  print "Output:", $ACTUAL_OUTPUT0,",",$ACTUAL_OUTPUT1,",",$ACTUAL_OUTPUT2,",",$ACTUAL_OUTPUT3,",",$ACTUAL_OUTPUT4,",",$ACTUAL_OUTPUT5,",",$ACTUAL_OUTPUT6,",",$ACTUAL_OUTPUT7,",",$ACTUAL_OUTPUT8,",",$ACTUAL_OUTPUT9,"\n";
  print "Output:", $OUTPUT_FILE0,",",$OUTPUT_FILE1,",",$OUTPUT_FILE2,",",$OUTPUT_FILE3,",",$OUTPUT_FILE4,",",$OUTPUT_FILE5,",",$OUTPUT_FILE6,",",$OUTPUT_FILE7,",",$OUTPUT_FILE8,",",$OUTPUT_FILE9,"\n";
  my $output_file0 = basename($OUTPUT_FILE0);
  my $output_file1 = basename($OUTPUT_FILE1);
  my $output_file2 = basename($OUTPUT_FILE2);
  my $output_file3 = basename($OUTPUT_FILE3);
  my $output_file4 = basename($OUTPUT_FILE4);
  my $output_file5 = basename($OUTPUT_FILE5);
  my $output_file6 = basename($OUTPUT_FILE6);
  my $output_file7 = basename($OUTPUT_FILE7);
  my $output_file8 = basename($OUTPUT_FILE8);
  my $output_file9 = basename($OUTPUT_FILE9);
  my $out_dir      = dirname ($OUTPUT_FILE0);
  print "Output:", $output_file0,",",$output_file1,",",$output_file2,",",$output_file3,",",$output_file4,",",$output_file5,",",$output_file6,",",$output_file7,",",$output_file8,",",$output_file9,"\n";
  print "Dirname:", $out_dir, "\n";
  if ($out_dir && !-d $out_dir) {mkdir $out_dir,0773;}
  if (-f $output_file0) {system 'rm $output_file0';}
  if (-f $output_file1) {system 'rm $output_file1';}
  if (-f $output_file2) {system 'rm $output_file2';}
  if (-f $output_file3) {system 'rm $output_file3';}
  if (-f $output_file4) {system 'rm $output_file4';}
  if (-f $output_file5) {system 'rm $output_file5';}
  if (-f $output_file6) {system 'rm $output_file6';}
  if (-f $output_file7) {system 'rm $output_file7';}
  if (-f $output_file8) {system 'rm $output_file8';}
  if (-f $output_file9) {system 'rm $output_file9';}
  symlink $INPUT0      ,  $input_file;

#  symlink $OUTPUT_FILE0,  $output_file0; # dst  
#  symlink $OUTPUT_FILE1,  $output_file1; # hist 
#  symlink $OUTPUT_FILE2,  $output_file2; # tags 
#  symlink $OUTPUT_FILE3,  $output_file3; # runco
#  symlink $OUTPUT_FILE4,  $output_file4; # event
#  symlink $OUTPUT_FILE5,  $output_file5;
#  symlink $OUTPUT_FILE6,  $output_file6;
#  symlink $OUTPUT_FILE7,  $output_file7;
#  symlink $OUTPUT_FILE8,  $output_file8;
#  symlink $OUTPUT_FILE9,  $output_file9;
#-------------------------------------
  symlink $output_file0,  $OUTPUT0; # dst  
  symlink $output_file1,  $OUTPUT1; # hist 
  symlink $output_file2,  $OUTPUT2; # tags 
  symlink $output_file3,  $OUTPUT3; # runco
  symlink $output_file4,  $OUTPUT4; # event
  symlink $output_file5,  $OUTPUT5; 
  symlink $output_file6,  $OUTPUT6;
  symlink $output_file7,  $OUTPUT7;
  symlink $output_file8,  $OUTPUT8;
  symlink $output_file9,  $OUTPUT9;
#-------------------------------------
}
else {
  for (my $i = 0;$i<=$#ARGV;$i++){
    if ($ARGV[$i] && $ARGV[$i] =~ /\./) {$input_file =  $ARGV[$i];}
  }
}
die "No input file has been defined" if ! $input_file;
my $NofEvents = 10000;
if ($input_file =~ /evts/){
  my $dummy,  $evts, $ev;
  ($dummy, $dummy, $evts)  = split /_/, $input_file;
  ($ev, $dumm) = split /e/, $evts;
  if ($ev > 0 && $ev < 100000000) {$NofEvents = $ev;}
}
my $inFile = $input_file;
  $inFile =~ s/daq/log/g;

symlink "/star/data03/reco/StarDb", "StarDb";
my $cmd = " root4star -q -b 'bfc.C(200,\"in TpcT0\",\"" . $input_file . "\")\' >& /star/data03/reco/StarDb/log/" . $inFile;
system 'echo "Start calibration job execution at" `date` " on " `hostname`'; 
print "$cmd\n";
system $cmd;
system 'echo "Finished calibration job execution at" `date` " on " `hostname`'; 
$cmd = " root4star -b -q 'bfc.C(" . $NofEvents . ",\"" . $Chain . "\",\"" . $input_file . "\")\'";
print $cmd,"\n";
system $cmd;
system 'echo "Finished job execution at" `date` " on " `hostname`'; 
#cp2disk($output_file0, $OUTPUT_FILE0); # dst  
cp2disk($output_file1, $OUTPUT_FILE1); # hist 
cp2disk($output_file2, $OUTPUT_FILE2); # tags 
cp2disk($output_file3, $OUTPUT_FILE3); # runco
#cp2disk($output_file4, $OUTPUT_FILE4); # event
cp2disk($output_file5, $OUTPUT_FILE5);
cp2disk($output_file6, $OUTPUT_FILE6);
cp2disk($output_file7, $OUTPUT_FILE7);
cp2disk($output_file8, $OUTPUT_FILE8);
cp2disk($output_file9, $OUTPUT_FILE9);
system 'echo "Finished with files copying at" `date` " on " `hostname`'; 

exit 0;
#______________________________________________________
sub cp2disk($$) {
  my ($sp, $tp) = @_;
  my($mode, $length, $atime, $mtime) = (stat($sp))[2,7,8,9];
  print "Request for copy of $sp(mode=$mode,length=$length,atime=$atime,mtime=$mtime) to $tp\n";
  if (-r $sp) {
    if (! File::Copy::copy($sp, $tp)) {
      warn qq($0: can\'t copy "$sp" to "$tp" ($!)\n); #'
    }
    else {
      print "Copied $sp to $tp\n";
    }
  }
}
#______________________________________________________
sub convert($) {
  my $new_name = @_[0];
#  $new_name =~ s'/home/starreco/reco'/star/rcf/disk00001/star/reco'g;
  $new_name =~ s|/home/starreco/reco|/star/data04/reco|g;
  return $new_name;
}
#________________________________________________________________________________
__END__;





