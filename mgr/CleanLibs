#!/usr/bin/env perl

#
# 2009 - J.Lauret - added detection of dead links
#        Also added -debug, -clink, -h, --help, -nov
#
# Use -h or --help for help on options
#
#

use Env;
# if (defined($AFS)) {$File::Find::dont_use_nlink;}
use File::Find;

# Added so it does not depend on soft-link but
# rather on afs/cons created tree structure.
# chomp($fs=`fs sysname`);
$SYSNM = $ENV{STAR_HOST_SYS};
if ( ! defined($SYSNM) ){
    chomp($SYSNM=`fs sysname`);
}

if($SYSNM ne ""){
    $SYSNM =~ s/(.*)\'(.*)\'/$2/;
    #print `pwd`."$SYSNM";
    if( -d ".$SYSNM"){
	# use @sys, we found it.
	$SYSNM = ".$SYSNM/";
    } else {
	# revert to default
	$SYSNM = "";
    }
}

my $debug = 0;
my $clink = 0;
my $cleanl= 1; 

my @dirs  = ();
my $pwd   = undef;
my $pdir  = "";

my $SELF = $0; 
my $KEEP;


$SELF =~ s/.*\///; 

# default value for keep - could be overwritten by numerical argument
if( $^O eq "linux"){
    $KEEP = 2;
} else {
    $KEEP = 1;
}


#
# parse arguments
#
foreach $arg (@ARGV){
    if ( $arg eq "-clink"){
	# enable link cleaning
	$clink = 1;
    } elsif ( $arg eq "-debug" ){
	$debug = 1;
    } elsif ( $arg eq "-nov" ){
	$cleanl= 0;
    } elsif ( $arg eq "-h" || $arg eq "--help"){
	print qq~
 Usage: % $SELF {-debug|-h|--help|-clink|-nov} [subdirectory]

 -debug          enables debug printouts
 -h or --help	 print this help and exit 
 -nov            do not perform versioning cleanup (default is to clean)
 -clink          clean dead links in STAR OS dependent sub-directories
          	
 subdirectory: default values will include $SYSNM/{obj,OBJ,IOBJ,GOBJ}
	
~;
	exit;
	
    } else {
	# assumes as before this is a specific directory to be cleaned
	if ( $arg =~ m/^\d+$/){
	    $KEEP = $arg;
	} else {
	    my ($dir);
	    if ( ! -d $arg ){ $dir = $SYSNM.$arg;}
	    else {            $dir = $arg;}
	    push(@dirs, $dir);
	}
    }	
}

# to enable the same default as before, check @dirs if empty
if ( $#dirs == -1){
    push(@dirs,$SYSNM."obj");
    push(@dirs,$SYSNM."OBJ");
    push(@dirs,$SYSNM."IOBJ");
    push(@dirs,$SYSNM."GOBJ");
}




if ( $clink){
    # remove dead files
    foreach my $dir (@dirs) {
	next if ( ! -e $dir);
	print "Run $SELF in $dir - dead link detection\n";
	open(PP,"/usr/bin/find $dir -type l -print |");
	while ( defined($f = <PP>)) {
	    chomp($f);
	    $l = readlink($f);
	    if ( $l =~ m/^\.+/){
		$f =~ m/(.*\/)(.*)/;
		$c = $1.$l;
		if ( ! -e $c){
		    print "$f $c\n";
		    unlink($f);
		}
	    } else {
		if ( $l !~ m/.*\.\d+/){ #<-- exclude those, there are versions from cons
		    print "Not relative $l\n";
		}
	    }
	}
	close(PP);
    }
}    
if ( $cleanl ){
    # clean multiple revision
    foreach my $dir (@dirs) {
	if (-l $dir) {
	    $dir = readlink($dir);
	}
	if (-r $dir) {
	    print "Run $SELF in $dir keep = $KEEP\n";
	    &File::Find::find (\&wanted_S,$dir);
	}
    }
}



sub wanted_S {
    ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
    my $name = $File::Find::name; 
    print "name = $name\n"                                   if ($debug);
    
    if (-e _ && /\.\d+$/) {    
	print "Version $name\n"                              if ($debug);
	my $so = $_; $so =~ s/\.\d*$//;
	my $link = $so;
	if (-l $link) {
	    # print "$link\n";
	    my $file = readlink $link;      
	    print "Found Link = $link -> $file\n"            if ($debug);
	    
	    my $vers = $file; $vers =~ s/$so\.//; 
	    print "so = $so vers = $vers\n"                  if ($debug);
	    
	    #      chop ($file);
	    $so .= ".[0-9]*";  print "so = $so\n"            if ($debug);
	    my @So = glob $so; print "So = @So\n"            if ($debug);
	    my $keep = 0;
	    foreach my $s (@So) {
		my $v = $s; $v =~ s/$link\.//; 
		print "s = $s v = $v vers = $vers\n"         if ($debug);
		next if !$v;
		if ($vers == $v) {
		    print "keep \t$file => \t$link\n"        if ($debug);
		    next;
		}
		my $diff = $vers - $v - $KEEP;
		if ($diff lt 0) {
		    print "keep \t$file => \t$link / $s : $vers - $v - $KEEP = $diff < 0\n" if ($debug);
		    next;
		}
		print "Delete $s \n";
		unlink $s or die "Could not remove $s (check token or access)\n";
	    }
	}
    } else {
	# we are in a sub-dir
	# `/bin/ls -l $name`;
	# chomp($pwd = `pwd`);
	# print "$name (1)\n";
	if ($debug){
	    if ( $pdir ne $dir ){
		chomp($pwd = `pwd`);
		# print "$dir $pwd\n";
		$pdir = $dir;
	    }
	    &CheckAndRemove(1,"$pwd/",$_);
	}
    }
}



sub CheckAndRemove {
    my($l,$d,$f)=@_;
    my($link);

    return if (! -e $f);
		
    $link = readlink($f);
    # end recursion
    return if $link eq "";

    if ($d eq ""){
	$f =~ m/(.*\/)(.*)/;
	$link = $1."/".$link;
    } else {
	$link = "$d$link";
    }
    # for($i=0;$i<$l;$i++){ print " ";}
    # print "$f -> $link\n";
    
    if ( ! -e $link){
	# for($i=0;$i<$l;$i++){ print " ";}
	print "Missing $link (should remove $f)\n";
	# unlink($f);
	return;
    } else {
	&CheckAndRemove($l+1,"","$link");
    }
}

