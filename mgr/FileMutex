#!/bin/csh
# * $Id: FileMutex,v 1.3 2006/07/27 15:37:43 fine Exp $
# Author: Valeri Fine fine@bnl.gov
# Date:   25.06.2006
#
# The Dijkstra semaphore (pseudo) implpementation to synchronize file access
# See: http://en.wikipedia.org/wiki/Semaphore_(programming) 
#
# Usage FileMutex ["Lock" | "Unlock" | "Init"]  [$REQUESTID] [$MUTEXDIR] [$PROCESSID]
# where the $REQUESTID variable is to be generated by  SUMS
#
# It is assumed that the combination [$REQUESTID] + [$PROCESSID] is unique for
# all processes you want share your resource among.
# and the all processes prpvde one and the same value for [$REQUESTID]
# Both conditions above are safisfied automatically if the jobs are submitted via SUMS
#i.e one doesn't provide any 

if (  $1 != "" ) then
  set SEMAPHORE_TYPE=$1
  shift
else
  # Init semaphiore "by default"
  set SEMAPHORE_TYPE="Init"
endif

# use the REQUESTID "by default"
if (  $1 != "" ) then
  set MUTEX_ID=$1
  shift
else
  set MUTEX_ID=$REQUESTID
endif

# The mutex directory should be defined with the absolute path
if (  $1 != "" ) then
  set MUTEX_DIR=`echo $1`
  shift
else
  set MUTEX_DIR=`echo $HOME/Mutex`
  mkdir -p $MUTEX_DIR >&/dev/null
endif

# The mutex comment
if (  $1 != "" ) then
  set MUTEX_COMMENT=MUTEX_COMMENT
else
  set MUTEX_COMMENT="PROCESSID"
endif


set INIT_MUTEX_FILE_COMPLETE=$MUTEX_DIR/$MUTEX_ID.init
set SEMAPHORE_MUTEX_FILE=$MUTEX_DIR/$MUTEX_ID.unlock


#echo ------------------------------------------------------
#echo  SEMAPHORE_TYPE            $SEMAPHORE_TYPE 
 echo  MUTEX_ID                  $MUTEX_ID 
 echo  MUTEX_DIR                 $MUTEX_DIR 
#echo  MUTEX_COMMENT             $SEMAPHORE_TYPE 
#echo  INIT_MUTEX_FILE_COMPLETE  $INIT_MUTEX_FILE_COMPLETE 
#echo  SEMAPHORE_MUTEX_FILE      $SEMAPHORE_MUTEX_FILE
#echo ------------------------------------------------------

switch ( $SEMAPHORE_TYPE )
  case "Lock" :
   # -----  P-semaphore (Lock) ------------------
   while (1)
     if ( ! -e $INIT_MUTEX_FILE_COMPLETE ) then
        echo The \"FileMutex Init\" has not been called yet. Please fix your script!
        breaksw
     endif
     rm $SEMAPHORE_MUTEX_FILE >&/dev/null
     if ( ! $status ) break
     echo "waiting the critical section access permission . . . "
     sleep 3  
   end
   breaksw
   
   
  case "Unlock" :
  # -----  V-semaphore (Unlock) -----------------
    if ( ! -e $INIT_MUTEX_FILE_COMPLETE ) then
        echo The \"FileMutex Init\" has not been called yet. Please fix your script!
        breaksw
    endif
    touch $SEMAPHORE_MUTEX_FILE
    if (  -e $SEMAPHORE_MUTEX_FILE ) then
       echo "Granted access for others!"
    else  
    endif
    breaksw
    
  case "Init" :
  # -----  Init-semaphore -----------------------
   mkdir -p $MUTEX_DIR >&/dev/null
   if ( ! -e $INIT_MUTEX_FILE_COMPLETE ) then
   #
   #  The critical section initialization
   # ---- V-semaphore (inlock) ---------------
      if ( ! -e $SEMAPHORE_MUTEX_FILE ) then
         touch  > $SEMAPHORE_MUTEX_FILE 
         touch  > $INIT_MUTEX_FILE_COMPLETE
      endif
   endif
   breaksw
default:
  echo 'Usage: FileMutex ["Lock" | "Unlock" | "Init"] [$REQUESTID] [$MUTEXDIR] [$PROCESSID]'
  echo '-----  default parameteres:  FileMutex Init $REQUESTID $HOME/Mutex  $PROCESSID'
  breaksw
  
endsw
