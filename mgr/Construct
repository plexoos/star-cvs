#!/opt/star/bin/perl
use Env;
if (defined($AFS)) {$File::Find::dont_use_nlink;}
use File::Basename;
use Sys::Hostname;
use Cwd;
use File::Find ();
#________________________________________
*name           = *File::Find::name;
*prune          = *File::Find::prune;
*dir            = *File::Find::dir;
*topdir         = *File::Find::topdir;
*topdev         = *File::Find::topdev;
*topino         = *File::Find::topino;
*topmode        = *File::Find::topmode;
*topnlink       = *File::Find::topnlink;
#use strict;
  my $pwd = cwd();
  if ($pwd =~ '^/afs/') {$File::Find::dont_use_nlink;}

my $DEBUG = "-g";
@search_files   = ();
if (defined($NODEBUG)) {$DEBUG = "-O2";}
my $O        = "o";
my $A        = "a";
my $Cxx      = "cxx";
my $so       = "so";
my $EXESUF   = "";

my $SoOUT    = "-o ";
my $Cout     = "-o ";
my $Fout     = "-o ";
my $Lout     = "-o ";
my $Cinp     = "";
my $CXXinp   = "";

my $CPP      = "gcc";
my $CPPFLAGS = "";
my $CXX      = "g++";
my $CXXFLAGS = "-fpic -w";
my $CC       = "gcc";
my $CFLAGS   = "-fpic -w";
my $FC       = "f77";
my $FFLAGS   = "-KPIC -w -DCERNLIB_TYPE";
my $AR       = "ar";
my $ARFLAGS  = "rvu";
my $LD       = $CXX;
my $LDFLAGS  = $CXXFLAGS;
my $SO       = $CXX;
my $SOFLAGS  = "";
my $EXEFLAGS = "NONE";
#my $STIC     = $STAF_BIN . "/" . "stic";
my $STIC     = "stic";
my $STICFLAGS= "";
my $GEANT3   = $STAF_BIN . "/" . "geant3";
my $KUIP     = $CERN_ROOT . "/bin/kuipc";
my $ROOTCINT = $ROOTSYS . "/bin/rootcint";
my $LIBS     = "";
my $Libraries= "";
my $CLIBS    = "";
my $FLIBS    = "";
my $CERNLIBS = "";
my $OSFID    = "";
my $ROOTCINTD= "";
my $LINKMODULECOM = "%SO %DEBUG %SOFLAGS %SoOUT%> %< %_LDIRS %LIBS";
my $FCCOM    = "%FC %FFLAGS %CPPFLAGS %DEBUG %FEXTEND %_IFLAGS %FCPPPATH -c %< %Fout%>";
my $GEANT3COM= "%GEANT3 %< -o %<:.F; %FC %FFLAGS %CPPFLAGS %DEBUG %_IFLAGS %FCPPPATH -c %<.F -o %>";
my $INCLUDE_PATH  = $INCLUDE;
$_ = $STAR_HOST_SYS;
print "System: ", $_,"\n" unless ($param::quiet);
#if (/^i386_linux2/ || /^i386_redhat50/ || /^i386_redhat51/ ||  /^i386_redhat52/ || /^i386_redhat60/) {
if (/^i386_/) {
#    case linux but gcc is EGCS
#  ====================
  $OSFID    = "lnx Linux linux LINUX CERNLIB_LINUX CERNLIB_UNIX CERNLIB_LNX CERNLIB_QMLNX NEW_ARRAY_ON GNU_GCC ST_NO_NUMERIC_LIMITS ST_NO_EXCEPTIONS ST_NO_NAMESPACES";
  $CXXFLAGS = "-fPIC -Wall";
#                                             -fpipe
  $CFLAGS   = "-fPIC -Wall";
  $CPPFLAGS.= "f2cFortran";
  $LDFLAGS  = "-Wl,-Bstatic";
  $EXEFLAGS = $CXXFLAGS . " -Wl,-Bdynamic";
  $SOFLAGS  = "-shared";  
  $CLIBS    = "-L/usr/pgi/linux86/lib -L/usr/X11R6/lib  -lXt -lXpm -lX11  -lpgc -lm -ldl  -rdynamic";
  if (/^i386_redhat51egcs$/) {
    $FC       = "g77";
    $FFLAGS   = "-w -O -fno-second-underscore";
    $FCCOM    = "%FC -E -P %CPPFLAGS %DEBUG %_IFLAGS %FCPPPATH -c %< %Fout%>.g &&"; 
    $FCCOM   .= "%GEANT3 -v 1 -i %>.g %Fout%>.f &&"; 
    $FCCOM   .= "%FC %FFLAGS -c %>.f %Fout%>";
  }
  else {
    $FC       = "pgf77";
    $FLIBS    = "-L/usr/pgi/linux86/lib -lpgftnrtl -lpgc";
    $FLIBS   .= " -L/opt/star/lib -lpgf77S -lpgf77A";
    $FLIBS   .= " -L/usr/local/lib/gcc-lib/i686-pc-linux-gnu/egcs-2.91.66 -lg2c";
    $FFLAGS   = "-DPGI";  
    $FEXTEND  = "-Mextend";
    #  $FLIBS   .= "-lcrypt";
  }
  if (/^i386_linux2/) {$FLIBS   .= " -lI77 -lF77";}
}
elsif (/^hp_ux102/) {
#    case "hp":
#  ====================
  $OSFID = "HPUX CERNLIB_HPUX CERNLIB_UNIX ST_NO_NAMESPACES ST_NO_EXCEPTIONS";
#  if (defined(NODEBUG)) {$DEBUG = "-O";}
  $OSFID   .= " NEW_ARRAY_ON";
  $CXX      = "aCC";
  $CC       = "cc";
  $LD       = $CXX;
  $SO       = $CXX;
  $CXXFLAGS = " -z +Z  -Dextname";
  $CFLAGS   = " -Ae -z +Z -Dextname";  
  if (defined($SCL_OPTIMISE)){ # from Brian
    $CXXFLAGS .= " +Olibcalls +Onolimit";
  }
  else {$CXXFLAGS .= " +d";}
  $LDFLAGS   = "-z -Wl,+s -Wl,-E,+vnocompatwarnings";
  $EXEFLAGS  = $CXXFLAGS . " " . $LDFLAGS . " -Wl,-N"; 
  $SOFLAGS   = "-b -z";  
  $CLIBS     = "-lXm -lXt -lX11 -lm -lPW -ldld";
  $FC        = "fort77";
  $FLIBS     = "/opt/fortran/lib/libU77.a";
#  $FFLAGS    = "+DA1.0 +ppu +Z  +U77 -K";
#  $FFLAGS    = "+DA1.0 +ppu +B +Z -K";
  $FFLAGS    = "-WF,-P +ppu +Z +B -K";
  $FEXTEND   = "+es";
}
elsif (/^sun4x_55/ ||  /^sun4x_56/) {
  $ROOTCINTD = "-DSOLARIS";
  $CPPFLAGS  =~ s/SunOS//g;
  $OSFID     = "CERNLIB_SOLARIS CERNLIB_SUN CERNLIB_UNIX DS_ADVANCED QUIET_ASP SOLARIS ";
  $OSFID    .= "ST_NO_EXCEPTIONS ST_NO_MEMBER_TEMPLATES ST_NO_NAMESPACES ";
  $OSFID    .= "ST_NO_NUMERIC_LIMITS ST_NO_TEMPLATE_DEF_ARGS SUN Solaris sun sun4os5 sun4x_56";
  $CC        = "/opt/SUNWspro/bin/cc";
  $CXX       = "/opt/SUNWspro/bin/CC";
  $FC        = "/opt/SUNWspro/bin/f77";
  $CXXFLAGS  = "-KPIC +w -features=no_castop -features=no_anachronisms";
#  $CLIBS     = "-L/opt/SUNWspro/lib -L/opt/SUNWspro/SC4.2/lib  -lm -lc -L/usr/ucblib -R/usr/ucblib -lucb -lmapmalloc";
#  $CLIBS     = "-L/opt/SUNWspro/lib -L/opt/SUNWspro/SC4.2/lib  -lm -lc -L/usr/ucblib -R/usr/ucblib -lucb -lmapmalloc";
  $CLIBS     = "-lw -lgen -lsocket -lnsl -lintl";
  $FLIBS     = "-lM77 -lF77 -lsunmath";
  $FFLAGS    = "-KPIC -w";
  $FEXTEND   = "-e";
  $CFLAGS    = "-KPIC";
  $LD        = $CXX;
  $LDFLAGS   = "-Bstatic"; 
  $EXEFLAGS  = "-z muldefs -Bdynamic -t";
  $SO        = $CXX;
  $SOFLAGS   = "-G";
  my $STDHOME= "/afs/rhic/star/packages/ObjectSpace/2.0m";
  $CXXFLAGS .= " -I" . $STDHOME . " -I" . $STDHOME ."/ospace/std -I" . $STDHOME . "/ospace";
  $LINKMODULECOM = "test -d %>:d/Templates.DB &&";
  $LINKMODULECOM.= "%SO %DEBUG %SOFLAGS %SoOUT%> %< %>:d/Templates.DB/*.o %_LDIRS %LIBS ||";
  $LINKMODULECOM.= "%SO %DEBUG %SOFLAGS %SoOUT%> %< %_LDIRS %LIBS ";
}
elsif (/^intel_wnt/) {
#  $DEBUG    = "-Zi";
  $DEBUG    = "";
  $EXESUF   = ".exe";
  $O        = "obj";
  $A        = "lib";
  $Cxx      = "cxx";
  $so       = "DLL";
  $AR       = "set LIB && lib"; print "NT Lib: lib = $lib / LIB = $LIB\n";
  $ARFLAGS  = "-nologo -MACHINE:IX86";
  $Cout     = "-Fo";
  $Fout     = "-Fo";
  $Lout     = "-out:";
  $SoOUT    = "-out:";
  $Cinp     = "-Tc";
  $CXXinp   = "-Tp";
  $Copt     = "-O2";
  $CXXOpt   = "-O2";

  $GEANT3   += $EXESUF;
  $ROOTCINT += $EXESUF;

  $ROOTCINTD = "-DWIN32";
  $OSFID     = "VISUAL_CPLUSPLUS CERNLIB_WINNT CERNLIB_MSSTDCALL WIN32 ";
  $OSFID    .= "ST_NO_NAMESPACES ";
  $CPP       = "cl";
  $CC        = "cl";
#  $CXX       = "set inc && path && cl";
  $CXX       = "cl";
  $FC        = "fl32";
  $CLIBS     = "ws2_32.lib mswsock.lib user32.lib kernel32.lib msvcrt.lib oldnames.lib MSVCIRT.LIB";
  $FLIBS     = "DFORDLL.LIB";
  $FFLAGS    =  $DEBUG . " -MD -G5 -fpp -Oxp -nokeep -nologo";
  $FEXTEND   = "-extend_source";
  $CFLAGS    =  $DEBUG . " -MD -G5 -nologo -DASU_MALLOC_OFF";
  $CXXFLAGS  =  $CFLAGS;
  $LD        =  $CXX;
#  $LDFLAGS   =  $DEBUG . $(conlflags); 
  $SO        =  "link";
  $SOFLAGS   =  $DEBUG . " -DEBUG -NODEFAULTLIB -INCREMENTAL:NO -NOLOGO -DLL ";
  $LINKMODULECOM = 
"BINDEXPLIB.exe %> %< > %>.def && %AR %ARFLAGS %Lout%>.lib  %< -def:%>.def && %SO %SOFLAGS %SoOUT%> %< %_LDIRS %LIBS %Libraries";
  $LIB .= ";" . $ROOTSYS . "\\lib";
  $Libraries = $ROOTSYS . "/lib/*.lib" . " ws2_32.lib mswsock.lib user32.lib kernel32.lib msvcrt.lib oldnames.lib MSVCIRT.LIB";
}

$MAIN    = cwd();
$INCLUDE = "#include";
$EXPORT = "#.share";
$FFLAGS .= " -DCERNLIB_TYPE";
my $FLAGS = $CPPFLAGS . " " . $OSFID . " __ROOT__";
$CPPFLAGS = "-D" . join (" -D", split (" ",$FLAGS));
if (! $param::quiet) {
  print "STAR     = \t$STAR\n";
  print "CPPFLAGS = \t$CPPFLAGS\n";
  print "FFLAGS   = \t$FFLAGS  \n";
  print "CPP      = \t$CPP    \nCPPFLAGS = \t$CPPFLAGS\n"; 
  print "CC       = \t$CC     \tCCFLAGS  = \t$CFLAGS     \tCLIBS    =\t$CLIBS\n"; 
  print "CXX      = \t$CXX    \tCXXFLAGS = \t$CXXFLAGS\n";
  print "FC       = \t$FC     \nFFLAGS   = \t$FFLAGS     \tFLIBS    =\t$FLIBS\n"; 
  print "LD       = \t$LD     \tLDFLGAS  = \t$LDFLAGS    \nEXEFLAGS =\t$EXEFLAGS\n";
  print "LIBPATH  = \t$LIBPATH\tLIBS     = \t$LIBS       \nLibraries=\t$Libraries\n";
  print "SO       = \t$SO     \tSOFLGAS  = \t$SOFLAGS\n";
}
#my $ROOTLIBS    = " -lRint -lNew  -lBase -lCint -lClib -lCont -lFunc";
my $ROOTLIBS    = " -L$ROOTSYS/lib -lRint -lNew -lBase -lCint -lClib -lCont -lFunc";
   $ROOTLIBS   .= " -lGraf -lGraf3d -lHist -lHtml -lMatrix -lMeta -lMinuit -lNet -lPhysics";
   $ROOTLIBS   .= " -lPostscript -lProof -lTree -lUnix -lZip";
my $ROOTGLIBS   = " -lGpad -lGui -lGX11 -lX3d -lXpm";
my $ROOTSRC = "/afs/rhic/star/ROOT/" . $ROOT_LEVEL . "/ROOT/src";
$CPPPATH = $INCLUDE . ":" .  $ROOTSRC . ":" . $CERN_ROOT . "/include:". $STAF . "/inc:/opt/star/include";
$FCPPPATH ="";
print "CPPPATH  = \t$CPPPATH\n" unless ($param::quiet);
Repository ($STAR);
(my $DirPath  = cwd()) =~ s/\/$//g;#print " in DirPath=$DirPath\n" unless ($param::quiet);
my $build  = "." . $STAR_HOST_SYS; print "build for $build\n" unless ($param::quiet);
$BUILD  = "#" . $build;
$LIB    = $BUILD . "/lib";
$BIN    = $BUILD . "/bin"; 
$OBJ    = $BUILD . "/obj";
my $obj = $build . "/obj";
$LIBPATH = $LIB;
Link $OBJ => $DirPath; print "Link $BUILD => $DirPath\n" unless ($param::quiet);
my @Repo = Repository_List;# print "Repositories = |@Repo|\n" unless ($param::quiet);
my @Reps = ($DirPath);
foreach my $rep (@Repo) {
  push @Reps, $rep;
} print "Repositories: @Reps\n"  unless ($param::quiet);
if ($STAR_HOST_SYS !~ /^intel_wnt/) {
  $CERNLIBS .= " " . `cernlib geant321 pawlib graflib/X11 packlib mathlib kernlib`;
  chop ($CERNLIBS);
  $Libraries =  $CERNLIBS . " " . $ROOTLIBS . " " . $ROOTGLIBS . " -lXpm  ";
  if ($STAR_HOST_SYS !~ /^hp_ux/) {$Libraries .=  " ". $FLIBS . " " . $CLIBS . " ";}
  chop ($Libraries);
  print "Libraries     = \t$Libraries\n" unless ($param::quiet);
}
else {
  $CPPPATH  = "";
  $FCPPPATH = "";
#  dfordll.lib";
  foreach my $dir ($DirPath, @Reps) {
    $INCLUDE_PATH .= ";" . $dir . "/include";
    $INCLUDE_PATH .= ";" . $dir . "/StRoot";
    $INCLUDE_PATH .= ";" . $dir . "/pams";
    $INCLUDE_PATH .= ";" . $dir . "/include/tables";
  }
  my $ROOTSRC = $AFS_RHIC . "\\star\\ROOT\\" . $ROOT_LEVEL . "\\ROOT\\src";
  $INCLUDE_PATH .= ";" . $ROOTSRC;
  $INCLUDE_PATH .= ";" . $STAF . "/inc";
  $INCLUDE_PATH .= ";" . $CERN_ROOT . "/include";
}
$env = new cons(
		'CPPPATH'      => $CPPPATH,
		'CPPFLAGS'     => $CPPFLAGS,
		'DEBUG'        => $DEBUG,
		'FC'	       => $FC,
		'FFLAGS'       => $FFLAGS,
		'FEXTEND'      => $FEXTEND,
		'FCPPPATH'     => $FCPPPATH,
		'Fout'         => $Fout,
		'CXXinp'       => $CXXinp,
		'Cinp'         => $Cinp,
		'Cout'         => $Cout,
		'Lout'         => $Lout,
		'SoOUT'        => $SoOUT,
		'FCCOM'        => $FCCOM,
		'GEANT3'       => $GEANT3,
		'GEANT3COM'    => $GEANT3COM,
		'CC'	       => $CC,
		'CFLAGS'       => $CFLAGS,
		'KUIP'         => $KUIP,
		'KUIPCOM'      => '%KUIP %< %<.f && %FC %FFLAGS -c %<.f -o %>',
		'CCCOM'        => '%CC %CFLAGS %DEBUG %CPPFLAGS %_IFLAGS -c %Cinp%< %Cout%>',
		'CXX'          => $CXX,
		'CXXFLAGS'     => $CXXFLAGS,
		'CXXCOM'       => '%CXX %CXXFLAGS %DEBUG %CPPFLAGS %_IFLAGS -c %CXXinp%< %Cout%>',
		'CLIBS'        => $CLIBS,
		'FLIBS'        => $FLIBS,
		'CERNLIBS'     => $CERNLIBS,
		'ROOTLIBS'     => $ROOTLIBS,
		'ROOTGLIBS'    => $ROOTGLIBS,
		'Libraries'    => $Libraries,
		'LIBS'         => $LIBS,
		'LINK'	       => $LD,
		'LDFLAGS'      => $LDFLAGS,
		'EXEFLAGS'     => $EXEFLAGS,
		'LIBPATH'      => $LIBPATH,
		'LINKCOM'      => '%LINK %DEBUG %EXEFLAGS %< %_LDIRS %LIBS %Libraries %Lout%>',
		'SO'           => $SO,
		'SOFLAGS'      => $SOFLAGS, 
		'SoOUT'        => $SoOUT,
		'LINKMODULECOM'=> $LINKMODULECOM,
		'AR'	       => $AR,
		'ARFLAGS'      => $ARFLAGS,
		'ARCOM'        => "%AR %ARFLAGS %> %<;%RANLIB %>",
		'RANLIB'       => 'ranlib',
		'AS'	       => 'as',
		'ASFLAGS'      => '',
		'ASCOM'        => '%AS %%DEBUG ASFLAGS %< -o %>',
		'LD'	       => $LD,
		'LDFLAGS'      => $LDFLAGS,
		'PREFLIB'      => 'lib',
		'SUFLIB'       => $A,
		'SUFLIBS'      => $so . ":" . $A,
		'SUFSOLIB'     => $so,
		'SUFEXE'       => $EXESUF,
		'SUFMAP'       => {
				   '.g'  => 'build::command::geant3',
				   '.f'  => 'build::command::fc',
				   '.F'  => 'build::command::fc',
				   '.C'  => 'build::command::cxx',
				   '.s'  => 'build::command::cc',
				   '.S'  => 'build::command::cc',
				   '.c'  => 'build::command::cc',
				   '.cc' => 'build::command::cxx',
				   '.cxx'=> 'build::command::cxx',
				   '.cpp'=> 'build::command::cxx',
				   '.cdf'=> 'build::command::kuip'
				  },
		'SUFOBJ'	=> "." . $O,
		'ENV'	        => { 'PATH' => $PATH,
				     'INCLUDE' => $INCLUDE_PATH,
				     'ROOTSYS' => $ROOTSYS,
				     'ROOTSRC' => $ROOTSRC,
				     'LD_LIBRARY_PATH' => $LD_LIBRARY_PATH,
				     'LIB'   => $LIB,
				     'PGI' => $PGI,
				     'STAR' => $STAR,
				     'CERN_ROOT' => $CERN_ROOT,
				     'STAF' => $STAF,
				     'STAR_BIN' => $STAR_BIN,
				     'TEMP' => $TEMP,
				     'TMP'  => $TMP,
				     'STAR_SYS' => $STAR_HOST_SYS
				   },
	       );
my @subdirs = ();
my @incT = ();
# make Targets and install includes
foreach my $dir ("StRoot","pams") {
  if (-d $dir) {
    opendir (DIR, $dir) or die "Can't open $dir\n";
    my @subdirS = readdir DIR;
    closedir DIR; #print "subdirS = @subdirS\n";
    foreach my $sub_dir (@subdirS) {
      # skip unwanted directories
      if ($sub_dir =~ /^macros$/     ||
#	  $sub_dir =~ /^StAssociationMaker$/    ||
#	  $sub_dir =~ /^StMcAnalysisMaker$/    ||
#	  $sub_dir =~ /^StHbt/    ||
#	  $sub_dir =~ /^St_baseTest$/    ||
	  $sub_dir =~ /^StEvent/    ||
	  $sub_dir =~ /^StTpcDb$/    ||
#	  $sub_dir =~ /^StDbMaker$/    ||
          $sub_dir =~ /^test$/)  {next;}
      if ($STAR_HOST_SYS =~ /^hp_ux102/ && 
	  ($sub_dir =~ /^StDbLib$/ ||
	   $sub_dir =~ /StHbt/)	  ) {next;}
#      if ($STAR_HOST_SYS =~ /sun4x/ && $sub_dir =~ /^StAssociationMaker$/) {next;}
      my $sub_DIR = $dir . "/" . $sub_dir; #print "sub_DIR = $sub_DIR\n";
      if (-d $sub_DIR) {
	if ($sub_dir =~  /\./ || $sub_dir =~ /\.\./ || $sub_dir =~ /CVS/ || 
	    $sub_dir =~ /^html$/ || $sub_dir =~ /^test$/ || $sub_dir =~ /^doc/) {next;}
	opendir (DIR, $sub_DIR) or die "Can't open $sub_DIR\n";
	my @subsubdirS = readdir DIR;
	closedir DIR; #print "subsubdirS = @subsubdirS\n";
	foreach my $subsub_dir (@subsubdirS) {
	  my $subsub_DIR = $sub_DIR . "/" . $subsub_dir;
	  if (-d $subsub_DIR) {
	    if ($subsub_dir =~  /\./     || $subsub_dir =~ /\.\./  || 
		$subsub_dir =~ /CVS/     || $subsub_dir =~ /^doc/  ||
		$subsub_dir =~ /^local/  || $subsub_dir =~ /^run/  ||
		$subsub_dir =~ /^example/|| $subsub_dir =~ /^kumac/) {next;}
	    if ($subsub_dir =~ /^idl$/) {   
               opendir (DIR, $subsub_DIR) or die "Can't open $sub_DIR\n";   
               my @idls = readdir DIR;   
               closedir DIR; #print "idls = @idls\n";   
               foreach my $idl (@idls) {   
                 if ($idl =~ /\.idl$/ ) {   
                   push @idlT, $subsub_DIR ."/" . $idl; #print "+++ add $idl\n";   
                 }   
               }   
               next;   
             }   
	    if (($sub_dir =~ /^sim$/ || $sub_dir =~ /^gen$/) && 
		 $subsub_dir !~ /^inc$/ &&  $subsub_dir !~ /^g2t$/) {
	      # one more level for gen & sim
	      push @subdirs, $subsub_DIR; #print "================== add $subsub_DIR\n";
	    }
	    if ($subsub_dir =~ /^inc$/ || $subsub_dir =~ /^include$/) {
	      opendir (DIR, $subsub_DIR) or die "Can't open $sub_DIR\n";
	      my @incs = readdir DIR; 
	      closedir DIR; #print "incs = @incs\n";
	      foreach my $inc (@incs) {
		if ($inc =~ /\.h$/ || $inc =~ /\.hh$/ || $inc =~ /\.hpp$/ || $inc =~ /\.inc$/ ) {
		  push @incT, $subsub_DIR ."/" . $inc; #print "+++ add $inc\n";
		}
	      }
	      next;
	    }
	  }
	}
	if ($sub_dir !~ /^sim$/ && $sub_dir !~ /^gen$/) {
	  push @subdirs, $sub_DIR;# print "================== add $sub_DIR\n";
	 }
	if ($sub_dir =~ /^St_base$/ ||
	    $sub_dir =~ /^StChain$/ ||
	    $sub_dir =~ /^StBFChain$/ ||
	    $sub_dir =~ /^StUtilities$/ ||
	    $sub_dir =~ /^StAnalysisUtilities$/ ||
	    $sub_dir =~ /^xdf2root$/ ||
	    $sub_dir =~ /^StarClassLibrary$/ ||
	    $sub_dir =~ /^StEvent$/ ||
	    $sub_dir =~ /^StMcEvent$/ ||
	    $sub_dir =~ /^StMagF$/ ||
	    $sub_dir =~ /^StAnalysisUtilities$/ ||
	    $sub_dir =~ /^StDbBroker$/ ||
	    $sub_dir =~ /^StDbLib$/) {
	  opendir (DIR, $sub_DIR) or die "Can't open $sub_DIR\n";
	  my @incs = readdir DIR; 
	  closedir DIR; #print "incs = @incs\n";
	  foreach my $inc (@incs) {
	    if ($inc =~ /\.h$/ || $inc =~ /\.hh$/ ||$inc =~ /\.inc$/) { 
	      push @incT, $sub_DIR ."/" . $inc; #print "+++ add $inc\n";
	    }
	  }
	}
	else {
#	  if ($sub_dir =~ /Maker$/      || 
#	      $sub_dir =~ /^StDaqLib$/  ||
#	      $sub_dir =~ /LSEvent/     ) {#print "Export Maker includes for $sub_dir\n";
	    #print "sub_dir = $sub_dir sub_DIR = $sub_DIR\n";
	    my @incs = find_inc($sub_DIR); #print "in $sub_DIR : @incs\n";
	    foreach my $inc (@incs) {
	      (my $ldir = dirname ($inc)) =~ s/^StRoot\///g;
	      if ($ldir eq ".") {$ldir = "";}
	      else              {$ldir = "/" . $ldir;}
	      my $local_install = $INCLUDE . $ldir;
	      
	      my @lincT = ("#" . $inc); #print "$inc, @lincT\n";	      
	      Install $env $local_install, @lincT; #print "Install $env $local_install, @lincT\n";
	    }
#	  }
	}
      }
    }
  }
}
my $db_dir  = "StDb/include"; #print "db_dir = $db_dir\n";
if (-d $db_dir) {
  opendir (DIR, $db_dir) or die "Can't open $db_dir\n";
  my @subdirS = readdir DIR; 
  closedir DIR; #print "subdirS = @subdirS\n";
  foreach my $sub_dir (@subdirS) {
    next if ($sub_dir =~  /\./ || $sub_dir =~ /\.\./ || $sub_dir =~ /CVS/); 
    my $sub_DIR = $db_dir . "/" . $sub_dir;
    if (-d $sub_DIR) { 
      opendir (DIR, $sub_DIR) or die "Can't open $sub_DIR\n";
      my @incDb = readdir DIR;
      closedir DIR; #print "incDb = @incDb\n";
      my @incsDb = ();
      foreach my $inc (@incDb) {
	next if $inc !~ /\.h$/ && $inc !~ /\.hh$/;
	push @incsDb, $db_dir . "/" . $sub_dir . "/" . $inc;
      }
      if ($#incsDb > -1) {
	my $inc_sub_dir = $INCLUDE . "/" . $sub_dir; #print "Install in $inc_sub_dir : @incsDb\n";
	Install $env $inc_sub_dir, @incsDb;
      } 
    }
  }
}
#print "subdirs = @subdirs\n";
#print "incT = @incT\n";
my @Targets = ();
#foreach $dir ("asps/Rexe","asps/geant","asps/rexe",@subdirs) {#,"cern/geant321","cern/minicern") {
foreach $dir ("asps/rexe",@subdirs) {
  next if !-d $dir;
  push @Targets, $OBJ . "/" . $dir . "/Conscript";
}
#print "Targets: @Targets\n";
print "BUILD  = $BUILD EXPORT =  $EXPORT OBJ = $OBJ\n" unless ($param::quiet);# Targets = @Targets\n";
Export qw( env INCLUDE LIB BIN EXPORT BUILD OBJ MAIN);
Default qw (   .  );
Build  @Targets;
if ($#incT > -1) {Install $env $INCLUDE, @incT;}
if ($#idlT > -1) {Install $env $INCLUDE, @idlT;} 
#________________________________________________________________________________
# Builder for a C++ module
package build::command::cxx;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::cxx-find- parameters = ", @_, "\n";
    $_[1]->{_cxx} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{CXXCOM});
	$self->{scanner} = $cscanner;
	bless $env->{_cxx} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::cxx-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
# Builder for a kuip module
package build::command::kuip;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::kuip-find- parameters = ", @_, "\n";
    $_[1]->{_kuip} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{KUIPCOM});
	$self->{scanner} = $cscanner;
	bless $env->{_kuip} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::kuip-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
# Builder for a stic module
package build::command::stic;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::stic-find- parameters = ", @_, "\n";
    $_[1]->{_stic} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{STICCOM});
	$self->{scanner} = $cscanner;
	bless $env->{_stic} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::stic-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
# Builder for a F77 module
package build::command::fc;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::fc-find- parameters = ", @_, "\n";
    $_[1]->{_fc} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{FCCOM});
	$self->{scanner} = $cscanner;
	bless $env->{_fc} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::fc-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
# Builder for a geant3 module
package build::command::geant3;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::geant3-find- parameters = ", @_, "\n";
    $_[1]->{_geant3} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{GEANT3COM});
	$self->{scanner} = $cscanner;
	bless $env->{_geant3} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::geant3-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
package script;
sub find_sources {
  @search_files   = ();
  if (-d $_[0]) {
    &File::Find::find(\&wanted, @_);
    for my $dir (@_) {
      if ( -d $dir ) { 
	my $i = 0;
	for ($i=0;$i<=$#search_files;$i++) {
	  #      print "i = ",$i, "src =", $search_files[$i],"\n";
	  my $file = $search_files[$i];
	  $file =~ s/$dir\///g;
	  $search_files[$i] = $file;
	}
      }
    }
  }
#  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub find_inc {
  @search_files   = ();
  &File::Find::find(\&wanted_inc, @_);
  return @search_files;
}
#________________________________________
sub find_obj {
  @search_files   = ();
  &File::Find::find(\&wanted_obj, @_);
  return @search_files;
}
#________________________________________
sub find_idlM {
  @search_files   = ();
  &File::Find::find(\&wanted_idlM, @_);
  for my $dir (@_) {
    if ( -d $dir ) { 
      my $i = 0;
      for ($i=0;$i<=$#search_files;$i++) {
	#      print "i = ",$i, "src =", $search_files[$i],"\n";
	my $file = $search_files[$i];
	$file =~ s/$dir\///g;
	$search_files[$i] = $file;
      }
    }
  }
#  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub script::wanted {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d _ &&
       (/^CVS$/ ||
	/^macros$/ ||
	/^html$/ ||
	/^idl$/ ||
	/^exa$/ ||
	/^inc$/ ||
	/^doc$/ ||
	/^run$/ ||
	/^examples$/ ||
	/^local$/ ||
	/^hold$/ ||
	/^wrk$/)
     ) {$prune = 1; return;}
  if (
      /^.*\.c$/       ||
      /^.*\.cc$/      ||
      /^.*\.cxx$/     ||
      /^.*\.g$/       ||
      /^.*\.cdf$/       ||
      /^.*\.F$/) {# print "$name\n";
    push @search_files, $name; 
  }
}
#________________________________________
sub script::wanted_idlM {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d _ &&
       (/^CVS$/ ||
	/^macros$/ ||
	/^html$/ ||
	/^idl$/ ||
	/^exa$/ ||
	/^inc$/ ||
	/^doc$/ ||
	/^run$/ ||
	/^examples$/ ||
	/^local$/ ||
	/^hold$/ ||
	/^wrk$/)
     ) {$prune = 1; return;}
  if (/^.*\.idl$/) {# print "$name\n";
    push @search_files, $name; 
  }
}
#________________________________________
sub script::wanted_inc {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d _ &&
       (/^CVS$/ ||
	/^macros$/ ||
	/^html$/ ||
	/^idl$/ ||
	/^exa$/ ||
	/^doc$/ ||
	/^run$/ ||
	/^examples$/ ||
	/^local$/ ||
	/^hold$/ ||
	/^wrk$/)
     ) {$prune = 1; return;}
  if ( /^.*\.h$/|| /^.*\.hh$/ || /^.*\.inc$/  || /^.*\.hpp$/) {# print "$name\n"; 
      push @search_files, $name;
  }
}
#________________________________________
sub script::wanted_obj {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d _ &&
       (/^CVS$/ ||
	/^macros$/ ||
	/^html$/ ||
	/^idl$/ ||
	/^exa$/ ||
	/^doc$/ ||
	/^run$/ ||
	/^examples$/ ||
	/^local$/ ||
	/^hold$/ ||
	/^wrk$/)
     ) {$prune = 1; return;}
  if ( /^.*\.o$/|| /^.*\.obj$/) {# print "$name\n"; 
      push @search_files, $name;
  }
}
#____________________________________________________________
sub rmkdir {
  (my $Dir = $_[0]) =~ s/\\/\//g; 
  my @terms = split "/", $Dir;
  my $dir = "";
  foreach my $term (@terms) {
    if ($dir) {$dir .= "/";}
    $dir .= $term;
    if (!-d $dir && ! mkdir($dir,0755)) {die "$0: can't create directory $path ($!).\n";}
  }
}
#________________________________________
sub sortu {
  my $old = "";
  my @sorted_and_uniq = ();
  foreach my $name (sort @_) {
    (my $base_name = $name) =~ s/\.[^\.]*$//g;
    next if "$old" eq "$base_name";
    push @sorted_and_uniq, $name; $old = $base_name;
  }
  return @sorted_and_uniq;
}
#________________________________________
sub find_hfiles {
  @search_files   = ();
  &File::Find::find(\&wanted_Def, @_);
  for my $dir (@_) {
    if ( -d $dir ) { 
      my $i = 0;
      for ($i=0;$i<=$#search_files;$i++) {
	#      print "i = ",$i, "src =", $search_files[$i],"\n";
	my $file = $search_files[$i];
	$file =~ s/$dir\///g;
	$search_files[$i] = $file;
      }
    }
  }
#  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub script::wanted_Def {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);#  print "wanted $_ \n";
  if ( -d _ &&
       (/^CVS$/      ||
	/^macros$/ ||
	/^html$/ ||
	/^idl$/      ||
	/^exa$/      ||
	/^inc$/      ||
	/^doc$/      ||
	/^run$/      ||
	/^examples$/ ||
	/^local$/    ||
	/^hold$/     ||
	/^wrk$/))       {$prune = 1; return;}
  if (/^.*\.h$/      || /^.*\.hh$/ ) { #print "$name\n"; 
					 push @search_files, $name; }
}
#________________________________________
sub script::find_idl {
  if (defined($AFS)) {$File::Find::dont_use_nlink;}
  @search_files   = ();
  &File::Find::find(\&wanted_idl, @_);
  for my $dir (@_) {
    my $i = 0;
    for ($i=0;$i<=$#search_files;$i++) {
      #      print "i = ",$i, "src =", $search_files[$i],"\n";
      my $file = $search_files[$i];
      $file =~ s/$dir\///g;
      $search_files[$i] = $file;
    }
  }
  #  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub script::wanted_idl {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d $_ &&
       (/^CVS$/ ||
	/^exa$/ ||
	/^inc$/ ||
	/^doc$/ ||
	/^run$/ ||
	/^examples$/ ||
	/^local$/ ||
	/^hold$/ ||
	/^wrk$/)
     ) {$prune = 1; return;}
  if (/^.*\.idl$/) {#print "$name\n";
    push @search_files, $name; 
  }
}
__END__;
