#!/usr/bin/env perl
# $Id: Construct,v 1.132 2003/08/29 20:51:22 jeromel Exp $
use Env;
use lib $ENV{ConstructLocation};           # Modify perl include path
use ConsDefs;

my $xx=$ENV{ConstructLocation};
print "Path used for ConsDefs is $xx\n" unless ($param::quiet);

if ( -e "mgr/Conscript-standard"){
    $xx = " local";
    $param::defaultConscript =
	"mgr/Conscript-standard";          # Local construction file.
} else {
    $xx = " default";
    $param::defaultConscript =
	$STAR . "/mgr/Conscript-standard"; # Default construction file.
}   


print "Path used is $STAR\n" unless ($param::quiet);
print "Use$xx Conscript from $param::defaultConscript \n"
  unless ($param::quiet);
print "Install includes\n" unless ($param::quiet);

my $include = "include";
my $build   = "." . $STAR_HOST_SYS;
print "build for $build\n" unless ($param::quiet);

if ( defined( $ARG{LinksCheck} ) ) {
    print "Clean up links. It takes a time.\n";
    &File::Find::find( \&wanted_dead, $include ) if -d $include;
    &File::Find::find( \&wanted_dead, $build ) if -d $build;
}
my $def = {@param::defaults};
{
  foreach my $key( sort keys %$def) {
    if ( defined( $ARG{$key} ) ) {
      print "Reset $key = $def->{$key} to $ARG{$key}\n" unless ($param::quiet);
      my @defs = ($key => $ARG{$key});
      push ( @param::defaults, @defs );
      #       $def->{$key} = $ARG{$key};
    }
  }
}

$BUILD = "#" . $build; print "BUILD is $BUILD CXX = $def->{CXX} DEBUG = $def->{DEBUG}\n";
if ($def->{CXX}  =~ m/-Zoi/ ){
    # Drtup for INSURE tree directory.
    $LIB = $BUILD . "/ILIB";
    $BIN = $BUILD . "/IBIN";
    $OBJ = $BUILD . "/IOBJ";
} elsif ($def->{DEBUG}  eq "-g" ) {
    $LIB = $BUILD . "/lib";
    $BIN = $BUILD . "/bin";
    $OBJ = $BUILD . "/obj";
} else {
    $LIB = $BUILD . "/LIB";
    $BIN = $BUILD . "/BIN";
    $OBJ = $BUILD . "/OBJ";
}
$INCLUDE = "#" . $include;
#$EXPORT  = "#.share";
$EXPORT  = $BUILD . "/share";
$LIBPATH = $LIB;
print "Set LIB = $LIB BIN = $BIN OBJ = $OBJ SHARE = $EXPORT\n";
print "    INCLUDE = $INCLUDE LIBPATH = $LIBPATH\n";
my $ROOTLIBS = "";
my $ROOTGLIBS = "";
my $RINTLIBS  = "-lRint ";

if ( defined( $ARG{ROOTLIBS} ) ) {
    $ROOTLIBS = $ARG{ROOTLIBS};
    print "set ROOTLIBS = $ROOTLIBS\n" unless ($param::quiet);

} else {
  if ( !defined( $ARG{NoNew} ) ) { $ROOTLIBS = " -lNew "; }
  if( $ENV{ROOT_LEVEL} gt "3.02.00"){
      # New root scheme
      $ROOTLIBS .=
	  " -lCore -lCint -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lPostscript -lMatrix -lPhysics";
  } else {
      # Old 'cons' build root scheme.
      $ROOTLIBS .=
	  " -lBase -lClib -lCont -lMeta -lNet -lUnix -lZip -lCint -lPhysics -lMatrix -lHist -lGpad -lGraf -lGraf3d -lTree -lGui -lGpad -lPhysics -lMatrix";
  }
  print "set ROOTLIBS = $ROOTLIBS\n" unless ($param::quiet);
  
}

if( defined( $ARG{CPPPATH} ) ){
    $CPPPATH = $ARG{CPPPATH};
} else {
    $CPPPATH = $INCLUDE . ":#StRoot:" . $ROOTSRC;
    $CPPPATH .= $main::PATH_SEPARATOR . 
	$CERN_ROOT . "/include" . $EXTRA_CPPPATH;
}

$FCPPPATH = "";
( my $DirPath = cwd() ) =~ s/\/$//g;
print "DirPath    = $DirPath\n" unless ($param::quiet);

$repository = `echo $STAR`;
chop($repository);
print "repository = $repository\n" unless ($param::quiet);
Repository($repository);    # unless $param::noRepository;

my @Repo = Repository_List;
if ( defined( $ARG{Salt} ) ) { $Salt = $ARG{Salt}; }

if ( $#Repo > -1 ) {
    print "Repositories:  \"@Repo\";" unless ($param::quiet);
    if ( !$Salt && !defined( $ARG{NoSalt} ) ) { $Salt = "user"; }
    if ($Salt) {
        Salt($Salt);
        print "\tSet Salt to \"$param::salt\"\n" unless ($param::quiet);
    }
}
else { $param::keep = 1; }


if ( $STAR_HOST_SYS !~ /^intel_wnt/ ) {
    my($packl,$cernl,$kernl);

    if ( -e "$CERN/$CERN_LEVEL/bin/cernlib_noshift"      &&
	 -e "$CERN/$CERN_LEVEL/lib/libpacklib_noshift.a" &&
	 -e "$CERN/$CERN_LEVEL/lib/libkernlib_noshift.a" ){
	$cernl = "cernlib_noshift";
	$packl = "packlib_noshift";
	$kernl = "kernlib_noshift";
    } else {
	print "WARNING :: Using default packlib (with possibly shift)\n";
	$cernl = "cernlib";
	$packl = "packlib";
	$kernl = "kernlib";
    }
    $CERNLIBS .= " "
	. `$cernl geant321 pawlib packlib graflib/X11 packlib mathlib kernlib`;

    $CERNLIBS =~ s/packlib\./$packl\./g;
    $CERNLIBS =~ s/kernlib\./$kernl\./g;

    chop($CERNLIBS);
    $Libraries = $CERNLIBS . " ";
    $Libraries .= " " . $FLIBS . " " . $CLIBS . " ";
    chop($Libraries);
}
else {
    $CPPPATH  = "";
    $FCPPPATH = "";

    foreach my $dir( $DirPath, @Repo ) {
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/include";
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/StRoot";
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/pams";
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/include/tables";
    }
    my $ROOTSRC = $AFS_RHIC . "\\star\\ROOT\\" . $ROOT_LEVEL . "\\ROOT\\src";
    $INCLUDE_PATH .= $main::PATH_SEPARATOR . $ROOTSRC;
    $INCLUDE_PATH .= $main::PATH_SEPARATOR . $CERN_ROOT . "/include";
}
Link $OBJ => $DirPath;
print "Link $BUILD => $DirPath\n" unless ($param::quiet);
print "CPPPATH = $CPPPATH\n";

$env = new cons(
  'CPPPATH'        => $CPPPATH,
  'EXTRA_CXXFLAGS' => $EXTRA_CXXFLAGS,
  'EXTRA_CFLAGS'   => $EXTRA_CFLAGS,
  'Libraries'      => $Libraries,
  'LIBPATH'        => $LIBPATH,
  'ROOTLIBS'       => $ROOTLIBS,
  'ROOTGLIBS'      => $ROOTGLIBS,
  'RINTLIBS'       => $RINTLIBS
);
Ignore qw(
  include/geant321/incbeg.inc
  include/geant231/incbeg.inc
  include/geant321/incend.inc
  include/math.h
  include/descrip.h
  include/fortran.h
  include/not_cern
  include/compiledata.h
  include/src/newsos.h
  include/src/sunos.h
  include/src/memtest.h
  include/TWin32HookViaThread.h
);

if ( !$param::quiet ) {
    print "STAR_SYS = \t$env->{ENV}->{STAR_SYS}\n";
    print "ROOTSYS  = \t$env->{ENV}->{ROOTSYS}\n";
    print "DEBUG    = \t$env->{DEBUG}\n";
    print "CPPFLAGS = \t$env->{CPPFLAGS} \tEXTRA_CPPFLAGS = \t$env->{EXTRA_CPPFLAGS}\nCPPPATH  = \t$env->{CPPPATH}\n";
    print
"CC       = \t$env->{CC}    \tCFLAGS   = \t$env->{CFLAGS} \tEXTRA_CFLAGS  = \t$env->{EXTRA_CFLAGS}     \tCLIBS    =\t$env->{CLIBS}\n";
    print
"CXX      = \t$env->{CXX}    \tCXXFLAGS = \t$env->{CXXFLAGS} \tEXTRA_CXXFLAGS = \t$env->{EXTRA_CXXFLAGS}\n";
    print
"FC       = \t$env->{FC}     \tFFLAGS   = \t$env->{FFLAGS}     \tFLIBS    =\t$env->{FLIBS}\n";
    print
"LD       = \t$env->{LD}     \tLDFLAGS  = \t$env->{LDFLAGS} \tEXTRA_LDFLAGS  = \t$env->{EXTRA_LDFLAGS}\n";

    #    \nEXEFLAGS =\t$env->{EXEFLAGS}\n";
    print
"LIBPATH  = \t$env->{LIBPATH}\tLIBS     = \t$env->{LIBS}       \tLibraries=\t$env->{Libraries}\n";
    print "SO       = \t$env->{SO}     \tSOFLAGS  = \t$env->{SOFLAGS}\n";
    if ($param::debug) {
        foreach my $key( sort keys %$env ) {
            print "\$env->{", $key, "}= \t|$env->{$key}|\n";
        }
    }
}
my @subdirs = ();

# make Targets and install includes
my  @items;
if ( defined($SKIP_DIRS) ){ @items = split(" ",$SKIP_DIRS);}

#
# Search for directories (one level down) and make
# list of targets
#
foreach my $dir( "pams", "StRoot" ,"StPiD" ) {
    next if !-d $dir;
    opendir( DIR, $dir ) or die "Can't open $dir\n";
    my @subdirS = readdir DIR;
    closedir DIR;

    foreach my $sub_dir (@subdirS) {
        next if $sub_dir eq '.' || $sub_dir eq '..';
	# The above pattern survived for some time but is 
	# COMPLETELY wrong.
	#
        #if ( $SKIP_DIRS && $SKIP_DIRS =~ $sub_dir ) {
	# Although longer to search, this is the only secure way I
	# could come up with. J.lauret August 2001
        if ( $SKIP_DIRS ) {
	    my $el;
	    my $sts=1;
	    foreach $el (@items){
		if( $sub_dir =~ m/$el/){
		    print "skip dir: $sub_dir \t=> $SKIP_DIRS\n";
		    $sts = 0;
		    last;
		}
	    }
	    next if (! $sts);
        }

        my $sub_DIR = $dir . "/" . $sub_dir;

        if (! -d $sub_DIR ) 		{next;}
        if ( $sub_dir =~ /^\./     ) 	{next;}
        if ( $sub_dir =~ /^macros$/) 	{next;}
        if ( $sub_dir =~ /^test/   )	{next;}
        if ( $sub_dir =~ /CVS/     )	{next;}
        if ( $sub_dir =~ /^html/   )	{next;}
        if ( $sub_dir =~ /^doc/    )	{next;}

        my $ExportInc = $sub_DIR . "/.includes_for_export.flg";
        if ( -f $ExportInc)
        {
            opendir( DIR, $sub_DIR ) or die "Can't open $sub_DIR\n";
            my @incs = readdir DIR;
            closedir DIR;
            my @incT = ();

            foreach my $inc(@incs) {
                if ( $inc =~ /\.h$/ || $inc =~ /\.hh$/ || $inc =~ /\.inc$/ )
                {
                    push @incT, $sub_DIR . "/" . $inc;
                }
            }

            if ( $#incT > -1 && !$param::rflag ) {
                Install $env $INCLUDE, @incT;
            }
        }
        opendir( DIR, $sub_DIR ) or die "Can't open $sub_DIR\n";
        my @subsubdirS = readdir DIR;
        closedir DIR;

        foreach my $subsub_dir(@subsubdirS) {
            my $subsub_DIR = $sub_DIR . "/" . $subsub_dir;
            if ( -d $subsub_DIR ) {
                if ( $subsub_dir =~ m/\./        || 
		     $subsub_dir =~ m/\.\./      ||
		     $subsub_dir =~ m/CVS/       || 
		     $subsub_dir =~ m/^doc/      ||
		     $subsub_dir =~ m/^local/    || 
		     $subsub_dir =~ m/^run/      ||
		     $subsub_dir =~ m/^wrk$/     || 
		     $subsub_dir =~ m/^example/  ||
		     $subsub_dir =~ m/^macros/   ||
		     $subsub_dir =~ m/^kumac/ ){
		    #print "=== Skipping $subsub_dir in $subsub_DIR\n";
                    next;
                }

		#print "---> looking for $sub_DIR $subsub_dir\n";
                if ( $subsub_dir =~ /^inc$/ || $subsub_dir =~ /^idl$/ ) {
                    opendir( DIR, $subsub_DIR )
                      or die "Can't open $sub_DIR\n";
                    my @incs = readdir DIR;
                    closedir DIR;
                    my @incT = ();

                    foreach my $inc(@incs) {
                        if ( $inc =~ /\.h$/ || $inc =~ /\.hh$/
                          || $inc =~ /\.hpp$/ || $inc =~ /\.inc$/
                          || $inc =~ /\.idl$/ )
                        {
                            push @incT, $subsub_DIR . "/"
				. $inc;    
			    print "+++ add $inc from $sub_DIR\n" if ($param::debug);
                        }
                    }

                    if ( $#incT > -1 && !$param::rflag ) {
                        Install $env $INCLUDE, @incT;
		    }
                    next;
                }

                if ( ( $sub_dir =~ /^sim$/ || 
		       $sub_dir =~ /^gen$/ ||
		       $sub_dir =~ /Pool$/ ) ){
                    if ( $SKIP_DIRS && $SKIP_DIRS =~ $subsub_dir ) {
                        print "skip dir: $subsub_dir \t=> $SKIP_DIRS\n";
                        next;
                    }
                    push @subdirs, $subsub_DIR;
                    print "================== add $subsub_DIR\n"
                      if ($param::debug);
                }
            }
        }
        if ( $sub_dir =~ /Pool$/ ) { next; }
        push @subdirs, $sub_DIR;
        print "================== add $sub_DIR\n" if ($param::debug);
    }
}

print "subdirs = @subdirs\n" if $param::debug;
my @Targets = ();

foreach $dir( "asps/rexe", "asps/staf/sdd", "asps/Jprof", "StDb", @subdirs ) {
    if ( -d $dir ) {
        print "Add dir : $dir\n" if $param::debug;
        push @Targets, $OBJ . "/" . $dir . "/Conscript";
    }
}
print "BUILD  = $BUILD EXPORT =  $EXPORT OBJ = $OBJ\n" unless ($param::quiet);
print "Targets = @Targets\n" if $param::debug;
Export qw( env INCLUDE LIB BIN EXPORT BUILD OBJ);
Default qw (   .  );
#print "Debug ".join(" ",@Targets)."\n";
Build @Targets;

#___________________________________________________________________________
sub script::wanted_dead {
    -l and not -e and print "bogus link: $File::Find::name \t--- remove it\n"
      and `rm $_`;
}

#___________________________________________________________________________
__END__;
