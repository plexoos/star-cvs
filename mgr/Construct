#!/usr/local/bin/perl
use Env;
if (defined($AFS)) {$File::Find::dont_use_nlink;}
use File::Basename;
use File::Find ();
#use strict;
use Sys::Hostname;
use Cwd;
my $DEBUG = "-g";
@search_files   = ();
if (defined($NODEBUG)) {$DEBUG = "-O2";}
my $O        = "o";
my $A        = "a";
my $Cxx      = "cxx";
my $so       = "so";
my $So       = $so;
my $SoOUT    = "-o";
my $CPP      = "gcc";
my $CPPFLAGS = "";
my $CXX      = "g++";
my $CXXFLAGS = $DEBUG . "  -fpic -w";
my $CC       = "gcc";
my $CFLAGS   = $DEBUG . "  -fpic -w";
my $FC       = "f77";
my $FFLAGS   = $DEBUG . "  -KPIC -w -DCERNLIB_TYPE";
my $AR       = "ar";
my $ARFLAGS  = "rvu";
my $LD       = $CXX;
my $LDFLAGS  = "";
my $SO       = $CXX;
my $SOFLAGS  = "";
my $EXEFLAGS = "NONE";
my $STIC     = $STAR_BIN . "/" . "stic";
my $STICFLAGS= "";
my $GEANT3   = $STAR_BIN . "/" . "geant3";
my $ROOTCINT = $ROOTSYS . "/bin/rootcint";
my $CLIBS    = "";
my $FLIBS    = "";
my $OSFID    = "";
my $ROOTCINTD= "";
my $CPPPATH  = "";
$_ = $STAR_SYS;
print "System: ", $_,"\n";
if (/^i386_linux2/ || /^i386_redhat50/ || /^i386_redhat51/ ||  /^i386_redhat52/) {
#    case linux but gcc is EGCS
#  ====================
  $OSFID    = "lnx Linux linux LINUX CERNLIB_LINUX CERNLIB_UNIX CERNLIB_LNX CERNLIB_QMLNX NEW_ARRAY_ON GNU_GCC ST_NO_NUMERIC_LIMITS ST_NO_EXCEPTIONS ST_NO_NAMESPACES";
  $FC       = "pgf77";
  $CXXFLAGS = $DEBUG . " -fPIC -Wall";
#  $CPPPATH .= "/usr/local/include/g++:";
#                                             -fpipe
  $CFLAGS   = $DEBUG . " -fPIC -Wall";
  $CPPFLAGS .= " f2cFortran";
  $LDFLAGS  = $DEBUG . " -Wl,-Bstatic";
  $EXEFLAGS = $DEBUG . " -Wl,-Bdynamic";  
  $SOFLAGS  = $DEBUG . " -shared";  
  $CLIBS    = "-L/usr/pgi/linux86/lib -L/usr/X11R6/lib  -lXt -lXpm -lX11  -lpgc -lm -ldl  -rdynamic";
  $FLIBS    = "-L/opt/star/lib -lpgf77S -lpgf77A -L/usr/local/lib/gcc-lib/i686-pc-linux-gnu/egcs-2.91.66 -lg2c";
  if (/^i386_linux2/) {$FLIBS   .= " -lI77 -lF77";}
  $FLIBS   .= " -lcrypt";
  $FFLAGS   = $DEBUG . " -DPGI";  
  $FEXTEND  = "-Mextend";
}
elsif (/^hp_ux102/) {
#    case "hp":
#  ====================
  $OSFID = "HPUX CERNLIB_HPUX CERNLIB_UNIX ST_NO_NAMESPACES ST_NO_EXCEPTIONS";
  if (defined(NODEBUG)) {$DEBUG = "-O";}
  $OSFID   .= " NEW_ARRAY_ON";
  $CXX      = "aCC";
  $CC       = "cc";
  $LD       = $CXX;
  $SO       = $CXX;
  $CXXFLAGS = $DEBUG . " -z +Z  -Dextname";
  $CFLAGS   = $DEBUG . " -Ae -z +Z -Dextname";  
  if (defined($SCL_OPTIMISE)){ # from Brian
    $CXXFLAGS .= " +Olibcalls +Onolimit";
  }
  else {
  $CXXFLAGS .= " +d";}
  $LDFLAGS   = $DEBUG . " -z -Wl,+s -Wl,-E,+vnocompatwarnings";
  $EXEFLAGS  = $LDFLAGS . " -Wl,-N"; 
  $SOFLAGS   = $DEBUG . "  -b -z";  
  $CLIBS     = "-lXm -lXt -lX11 -lm -lPW -ldld";
  $FC        = "fort77";
  $FLIBS     = "/opt/fortran/lib/libU77.a";
  $FFLAGS    = $DEBUG . " +DA1.0 +ppu +Z  +U77 -K";
  $FEXTEND   = "+es";
}
elsif (/^sun4x_55/ ||  /^sun4x_56/) {
  $ROOTCINTD = "-DSOLARIS";
  $CPPFLAGS  =~ s/SunOS//g;
  $OSFID     =  "sun SUN SOLARIS Solaris CERNLIB_UNIX CERNLIB_SOLARIS CERNLIB_SUN ST_NO_MEMBER_TEMPLATES ST_NO_NUMERIC_LIMITS";
  $CC        = "/opt/SUNWspro/bin/cc";
  $CXX       = "/opt/SUNWspro/bin/CC";
  $FC        = "/opt/SUNWspro/bin/f77";
  $CXXFLAGS  =  $DEBUG . "  -KPIC -features=no%castop -features=no%anachronisms +w";
  $CLIBS     = "-L/opt/SUNWspro/lib -L/opt/SUNWspro/SC4.2/lib  -lm -lc -L/usr/ucblib -R/usr/ucblib -lucb -lmapmalloc";
  $FLIBS     = "-lM77 -lF77 -lsunmath";
  $FFLAGS    =  $DEBUG . "  -KPIC -w";
  $FEXTEND   = "-e";
  $CFLAGS    =  $DEBUG . " -KPIC";
  $LD        =  $CXX;
  $LDFLAGS   =  $DEBUG . " -Bstatic"; 
  $SO        =  $CXX;
  $SOFLAGS   =  $DEBUG . " -G";
}
print "CPP =\t",$CPP,";\tCPPFLAGS =\t",$CPPFLAGS,"\n"; 
print "CC  =\t",$CC,";\tCCFLAGS = \t",$CFLAGS,"\tCLIBS =\t",$CLIBS,"\n"; 
print "CXX =\t",$CXX,";\tCXXFLAGS = \t",$CXXFLAGS,"\n";
print "FC  =\t",$FC,";\tFFLAGS = \t",$FFLAGS,"\tFLIBS =\t",$FLIBS,"\n"; 
print "LD  =\t",$LD,";\t$LDFLGAS = \t",$LDFLAGS,"\n";
print "SO  =\t",$SO,";\t$SOFLGAS = \t",$SOFLAGS,"\n";
my $FLAGS = $CPPFLAGS . " " . $OSFID;
$_CPPFLAGS = "";
foreach my $flag (split ' ', $FLAGS) {
#  print $flag,"\n";
  $_CPPFLAGS .= " -D" . $flag;
}
print "CPPFLAGS = ", $_CPPFLAGS, "\n";
print "INCLUDE = ",$INLCUDE,"\n";
my @includes = ("St_base","StChain","StUtilities","xdf2root","StarClassLibrary","StEvent",);
#my $CPPPATH = "-I" . $STAR . " -I" . $STAR . "/inc" . " -I" . $STAR . "/StRoot" . " -I" . $STAR . "/.share" . " -I" . $STAR . "/.share/tables";
#$CPPPATH .= $STAR . :" . $STAR . "/inc:" . $STAR . "/StRoot:" . $STAR . "/.share:" . $STAR . "/.share/tables";
$CPPPATH .= ".:inc:StRoot:.share:.share/tables";
foreach my $inc (@includes) {
  $CPPPATH .= ":StRoot/" . $inc;
}
$CPPPATH .= ":" . $ROOTSYS . "/src";
print "CPPPATH = ",$CPPPATH,"\n";
my $DirPath  = cwd();
print " in DirPath=",$DirPath," FilePath=",$FilePath,"\n";
print " STAR = ",$STAR,"\n";
if ($DirPath eq $STAR) {
  print "Repository = ",$STAR,"\n";
  Repository($STAR); 
}
else {
  print "Repositories = ",$DirPath," + ",$STAR,"\n";
  Repository  ($DirPath, $STAR);
}
$env = new cons(
		'CPPPATH'      => $CPPPATH,
		'CPPFLAGS'     => $_CPPFLAGS,
		'FC'	       => $FC,
		'FFLAGS'       => $FFLAGS,
		'FEXTEND'      => $FEXTEND,
		'FCCOM'        => '%FC %FFLAGS %FEXTEND %_IFLAGS -c %< -o %>',
		'GEANT3'       => $GEANT3,
		'GEANT3COM'    => '%GEANT3 %< -o %<.F; %FC %FFLAGS  %_IFLAGS -c %<.F -o %>',
		'CC'	       => $CC,
		'CFLAGS'       => $CFLAGS,
		'CCCOM'        => '%CC %CFLAGS %CPPFLAGS %_IFLAGS -c %< -o %>',
		'CXX'          => $CXX,
		'CXXFLAGS'     => $CXXFLAGS,
		'CXXCOM'       => '%CXX %CXXFLAGS %CPPFLAGS %_IFLAGS -c %< -o %>',
		'LINK'	       => $LD,
		'LDFLAGS'      => $LDFLAGS,
		'LINKCOM'      => '%LINK %LDFLAGS -o %> %< %_LDIRS %LIBS',
		'SO'           => $SO,
		'SOFLAGS'      => $SOFLAGS, 
		'SoOUT'        => $SoOUT,
		'LINKMODULECOM'=> '%SO %SOFLAGS %SoOUT %> %<',
		'AR'	       => $AR,
		'ARFLAGS'      => $ARFLAGS,
		'ARCOM'        => "%AR %ARFLAGS %> %<\n%RANLIB %>",
		'RANLIB'       => 'ranlib',
		'AS'	       => 'as',
		'ASFLAGS'      => '',
		'ASCOM'        => '%AS %ASFLAGS %< -o %>',
		'LD'	       => 'ld',
		'LDFLAGS'      => '',
		'PREFLIB'      => 'lib',
		'SUFLIB'       => '.a',
		'SUFLIBS'      => '.so:.a',
		'SUFMAP'       => {
				   '.g'  => 'build::command::geant3',
				   '.f'  => 'build::command::fc',
				   '.F'  => 'build::command::fc',
				   '.C'  => 'build::command::cxx',
				   '.s'  => 'build::command::cc',
				   '.S'  => 'build::command::cc',
				   '.c'  => 'build::command::cc',
				   '.cc' => 'build::command::cxx',
				   '.cxx'=> 'build::command::cxx',
				   '.cpp'=> 'build::command::cxx'
				  },
		'SUFOBJ'	=> '.o',
		'ENV'	        => { 'PATH' => $PATH,
				     'ROOTSYS' => $ROOTSYS,
				     'LD_LIBRARY_PATH' => $LD_LIBRARY_PATH,
				     'PGI' => $PGI,
				     'STAR' => $STAR,
				     'STAR_BIN' => $STAR_BIN
				   },
	       );
#Command $env 
$MAIN    = "";
$INCLUDE = ""; 
$LIB     = "";
$EXPORT = "#.share";
my $build  = "#." . $STAR_HOST_SYS;
if (! -d $build) {mkdir $build, 0664;}
$BUILD  = $build;
$LIB    = $BUILD . "/lib";
$BIN    = $BUILD . "/bin"; 
$OBJ    = $BUILD . "/obj";
my $obj = $build . "/obj";
Link $BUILD => $DirPath; print "Link $BUILD => $DirPath\n";
#if (! -d "$obj")   {mkdir $obj, 0664;}
my $Targets = "";
if (-d "./StRoot") {
  my $stroot = $build . "/StRoot";
#  if (! -f "$stroot") {symlink $OBJ, $stroot; print "symlink $OBJ, $stroot\n";}
  $Targets .= $stroot . "/Conscript";
}
if (-d "./pams") {
  my $pams   = $build . "/pams"; 
#  if (! -f "$pams")   {symlink $OBJ, $pams; print "symlink $OBJ, $pams \n";}
  $Targets .= $pams . "/Conscript";
}
print "STAR_SYS  = $BUILD EXPORT =  $EXPORT OBJ = $OBJ Targets = $Targets\n";
#Link $OBJ => 'StRoot'; print "Link $OBJ => StRoot\n";
Export qw( env INCLUDE LIB BIN EXPORT BUILD OBJ MAIN);
Default qw (   .  );
Build  ($Targets);
#Build ( "StRoot/Conscript" );
#________________________________________________________________________________
# Builder for a C++ module
package build::command::cxx;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::cxx-find- parameters = ", @_, "\n";
    $_[1]->{_cxx} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{CXXCOM});
	$self->{scanner} = $cscanner;
	bless $env->{_cxx} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::cxx-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
#________________________________________________________________________________
# Builder for a F77 module
package build::command::fc;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::fc-find- parameters = ", @_, "\n";
    $_[1]->{_fc} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{FCCOM});
	$self->{scanner} = $cscanner;
	bless $env->{_fc} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::fc-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
# Builder for a C++ module
package build::command::geant3;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::geant3-find- parameters = ", @_, "\n";
    $_[1]->{_geant3} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{GEANT3COM});
	$self->{scanner} = $cscanner;
	bless $env->{_geant3} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::geant3-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
#________________________________________________________________________________
package script;
#________________________________________
*name           = *File::Find::name;
*prune          = *File::Find::prune;
*dir            = *File::Find::dir;
*topdir         = *File::Find::topdir;
*topdev         = *File::Find::topdev;
*topino         = *File::Find::topino;
*topmode        = *File::Find::topmode;
*topnlink       = *File::Find::topnlink;
sub find_sources {
  if (defined($AFS)) {$File::Find::dont_use_nlink;}
  @search_files   = ();
  &File::Find::find(\&wanted, @_);
  for my $dir (@_) {
    my $i = 0;
    for ($i=0;$i<=$#search_files;$i++) {
#      print "i = ",$i, "src =", $search_files[$i],"\n";
      my $file = $search_files[$i];
      $file =~ s/$dir\///g;
      $search_files[$i] = $file;
    }
  }
#  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub find_hfiles {
  if (defined($AFS)) {$File::Find::dont_use_nlink;}
  @search_files   = ();
  &File::Find::find(\&wanted_h, @_);
  for my $dir (@_) {
    my $i = 0;
    for ($i=0;$i<=$#search_files;$i++) {
#      print "i = ",$i, "src =", $search_files[$i],"\n";
      my $file = $search_files[$i];
      $file =~ s/$dir\///g;
      $search_files[$i] = $file;
    }
  }
#  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub cppflags {
my @cpp = split /:/, $env->{CPPPATH};
my @repositories = Repository_List;
my $PWD = $cwd;
my $CPPFLAGS = "-I";
$CPPFLAGS .= join " -I$PWD", @cpp;
for my $repository (@repositories) {
  $CPPFLAGS .= " -I";
  $CPPFLAGS .= join " -I$repository/", @cpp;
}
$CPPFLAGS .= env->{CPPFLAGS};
$CPPFLAGS .= " -D__ROOT__";#print "CPPFLAGS = ", $CPPFLAGS, "\n";
return $CPPFLAGS;
}
#________________________________________
sub script::wanted {
#  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d _ &&
        (/^CVS$/ ||
         /^idl$/ ||
         /^exa$/ ||
         /^inc$/ ||
         /^doc$/ ||
         /^run$/ ||
         /^examples$/ ||
         /^local$/ ||
         /^hold$/ ||
         /^wrk$/)
     ) {$prune = 1; return;}
  if (
            /^.*\.c$/
            ||
            /^.*\.cc$/
            ||
            /^.*\.cxx$/
            ||
            /^.*\.g$/
            ||
            /^.*\.F$/
            ||
            /^.*\.f$/
     ) {#print "$name\n"; 
	push @search_files, $name;}
}
#________________________________________
sub script::wanted_h {
#  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d _ &&
        (/^CVS$/ ||
         /^idl$/ ||
         /^exa$/ ||
         /^inc$/ ||
         /^doc$/ ||
         /^run$/ ||
         /^examples$/ ||
         /^local$/ ||
         /^hold$/ ||
         /^wrk$/)
     ) {$prune = 1; return;}
  if (
            /^.*\.h$/
            ||
            /^.*\.hh$/
     ) {#print "$name\n"; 
	push @search_files, $name;}
}
