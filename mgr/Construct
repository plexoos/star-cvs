#!/usr/bin/env perl
# $Id: Construct,v 1.141 2004/01/15 20:44:17 fisyak Exp $
use Env;
use lib $ENV{ConstructLocation};           # Modify perl include path
use ConsDefs;

my $xx=$ENV{ConstructLocation};
print "Path used for ConsDefs is $xx\n" unless ($param::quiet);

if ( -e "mgr/Conscript-standard"){
    $xx = " local";
    $param::defaultConscript =
	"mgr/Conscript-standard";          # Local construction file.
} else {
    $xx = " default";
    $param::defaultConscript =
	$STAR . "/mgr/Conscript-standard"; # Default construction file.
}   
$param::defaultInclude   = $INCLUDE; $param::defaultInclude =~ s|^#||; print "param::defaultInclude = $param::defaultInclude\n";

print "Repository used is $STAR\n" unless ($param::quiet);
print "Use$xx Conscript from $param::defaultConscript \n"  unless ($param::quiet);
print "Install includes\n" unless ($param::quiet);

my $include = $param::defaultInclude; mkdir $include if ! -d $include;

if ( defined( $ARG{LinksCheck} ) ) {
  print "Clean up links. It takes a time.\n";
  my $build   = $BUILD; $build =~ s|^#||;
  &File::Find::find( \&wanted_dead, $build )   if -d $build;
  &File::Find::find( \&wanted_dead, $include ) if -d $include;
}
my $def = {@param::defaults};
{
  foreach my $key( sort keys %$def) {
    if ( defined( $ARG{$key} ) ) {
      print "Reset $key = $def->{$key} to $ARG{$key}\n" unless ($param::quiet);
      my @defs = ($key => $ARG{$key});
      push ( @param::defaults, @defs );
    }
  }
}

if ($def->{CXX}  =~ m/-Zoi/ ){
    # Drtup for INSURE tree directory.
    $LIB = $BUILD . "/ILIB";
    $BIN = $BUILD . "/IBIN";
    $OBJ = $BUILD . "/IOBJ";
} elsif ($def->{DEBUG}  eq "-g" ) {
    $LIB = $BUILD . "/lib";
    $BIN = $BUILD . "/bin";
    $OBJ = $BUILD . "/obj";
} else {
    $LIB = $BUILD . "/LIB";
    $BIN = $BUILD . "/BIN";
    $OBJ = $BUILD . "/OBJ";
}
$LIBPATH = $LIB;
print "Set LIB = $LIB BIN = $BIN OBJ = $OBJ INCLUDE = $INCLUDE LIBPATH = $LIBPATH\n";
my $ROOTLIBS = "";
my $ROOTGLIBS = "";
my $RINTLIBS  = "-lRint ";

if ( defined( $ARG{ROOTLIBS} ) ) {
    $ROOTLIBS = $ARG{ROOTLIBS};
    print "set ROOTLIBS = $ROOTLIBS\n" unless ($param::quiet);

} else {
  if ( defined( $ARG{YesNew} ) ) { $ROOTLIBS = " -lNew "; }
  if( $ENV{ROOT_LEVEL} gt "3.02.00"){
      # New root scheme
      $ROOTLIBS .=
	  " -lCore -lCint -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lPostscript -lMatrix -lPhysics";
  } else {
      # Old 'cons' build root scheme.
      $ROOTLIBS .=
	  " -lBase -lClib -lCont -lMeta -lNet -lUnix -lZip -lCint -lPhysics -lMatrix -lHist -lGpad -lGraf -lGraf3d -lTree -lGui -lGpad -lPhysics -lMatrix";
  }
  print "set ROOTLIBS = $ROOTLIBS\n" unless ($param::quiet);
  
}
if ( defined( $ARG{CPPPATH} ) ){$CPPPATH = $ARG{CPPPATH};}
if ( defined( $ARG{FCPATH}  ) ){$FCPATH = $ARG{FCPATH};}
( my $DirPath = cwd() ) =~ s/\/$//g;
print "DirPath    = $DirPath\n" unless ($param::quiet);

$repository = `echo $STAR`;
chop($repository);
print "repository = $repository\n" unless ($param::quiet);
Repository($repository); 

my @Repo = Repository_List;
if ( defined( $ARG{Salt} ) ) { $Salt = $ARG{Salt}; }
if ( defined( $ARG{NoKeep} ) ) { $NoKeep = $ARG{NoKeep}; }

if ( $#Repo > -1 ) {
    print "Repositories:  \"@Repo\";" unless ($param::quiet);
    if ( !$Salt && !defined( $ARG{NoSalt} ) ) { $Salt = "user"; }
    if ($Salt) {
        Salt($Salt);
        print "\tSet Salt to \"$param::salt\"\n" unless ($param::quiet);
    }
}
else { if (! $NoKeep) {$param::keep = 1; }}


if ( $STAR_HOST_SYS =~ /^intel_wnt/ ) {
    $CPPPATH  = "";
    $FCPPPATH = "";

    foreach my $dir( $DirPath, @Repo ) {
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/" . $include;
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/StRoot";
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/pams";
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/" . $include . "/tables";
    }
    my $ROOTSRC = $AFS_RHIC . "\\star\\ROOT\\" . $ROOT_LEVEL . "\\ROOT\\src";
    $INCLUDE_PATH .= $main::PATH_SEPARATOR . $env->{ENV}->{ROOTSYS} . "/include";
    $INCLUDE_PATH .= $main::PATH_SEPARATOR . $CERN_ROOT . "/include";
}
Link $OBJ => $DirPath;
print "Link $BUILD => $DirPath\n" unless ($param::quiet);

$env = new cons(
  'FCPATH'         => $FCPATH,
  'CPPPATH'        => $CPPPATH,
  'EXTRA_CXXFLAGS' => $EXTRA_CXXFLAGS,
  'EXTRA_CFLAGS'   => $EXTRA_CFLAGS,
  'LIBPATH'        => $LIBPATH,
  'ROOTLIBS'       => $ROOTLIBS,
  'ROOTGLIBS'      => $ROOTGLIBS,
  'RINTLIBS'       => $RINTLIBS
);
Ignore qw(
  include/geant321/incbeg.inc
  include/geant231/incbeg.inc
  include/geant321/incend.inc
  include/math.h
  include/descrip.h
  include/fortran.h
  include/not_cern
  include/compiledata.h
  include/src/newsos.h
  include/src/sunos.h
  include/src/memtest.h
  include/TWin32HookViaThread.h
);

if ( !$param::quiet ) {
  my @list = qw (STAR_SYS ROOTSYS br 
		 CXX DEBUG CXXFLAGS EXTRA_CXXFLAGS 
		 CPPFLAGS EXTRA_CPPFLAGS br 
		 CPPPATH EXTRA_CPPPATH br
		 CC DEBUG CFLAGS EXTRA_CFLAGS br
		 FC FDEBUG FPPFLAGS FEXTEND FFLAGS br 
		 FCPATH EXTRA_FCPATH br
		 F77LD F77LDFLAGS br
		 CERNLIBS  FLIBS br
		 CLIBS SYSLIBS br
		 LD LDFLAGS EXTRA_LDFLAGS LIBPATH LIBS Libraries br
		 SO SOFLAGS br );
  my $tab = "";
  foreach my $p ( @list ) {
    if ($p eq 'br') {print "\n"; $tab = "";}
    else {
      if ($env->{$p})           {print "$tab$p = ", $env->{$p}; $tab = "\t";}
      elsif ($env->{ENV}->{$p}) {print "$tab$p = ", $env->{ENV}->{$p};  $tab = "\t";}
    }
  }
}
PrintHash($env,"\$env->{") if ($param::debug);
my @subdirs = ();
# install includes
my @DirsWithIncludes = glob "asps/*/.includes_for_export.flg asps/*/*/.includes_for_export.flg StDb/*/.includes_for_export.flg StRoot/*/.includes_for_export.flg";
@DirsWithIncludes = map File::Basename::dirname($_), @DirsWithIncludes;
my @DirsIdlInc = glob "pams/*/idl pams/*/inc";
print "DirsWithIncludes = @DirsWithIncludes @DirsIdlInc\n" if ($param::debug);
foreach my $dir (@DirsWithIncludes, @DirsIdlInc) {
  print "---> looking for include in $dir\n" if ($param::debug);
  next if ! -r $dir;
  opendir( DIR, $dir ) or die "Can't open $sub_DIR\n";
  my @incs = readdir DIR; print "incs = @incs\n" if ($param::debug);
  closedir DIR;
  my @incT = ();
  foreach my $inc(@incs) {
    if ( $inc =~ /\.h$/ || $inc =~ /\.hh$/
	 || $inc =~ /\.hpp$/ || $inc =~ /\.inc$/
	 || $inc =~ /\.idl$/ ) {
      push @incT, $dir . "/" . $inc;
      print "+++ add $inc from $sub_DIR\n" if ($param::debug);
    }
  }
  if ( $#incT > -1 && !$param::rflag ) {
    Install $env $INCLUDE, @incT;
  }
}
my  @items;
if ( defined($SKIP_DIRS) ){ @items = split(" ",$SKIP_DIRS);}

#
# Search for directories (one level down) and make
# list of targets
#

foreach my $dir( "pams", "StRoot" ,"StPiD") {
    next if !-d $dir;
    opendir( DIR, $dir ) or die "Can't open $dir\n";
    my @subdirS = readdir DIR;
    closedir DIR;
    foreach my $sub_dir (@subdirS) {
        next if $sub_dir eq '.' || $sub_dir eq '..';
	# The above pattern survived for some time but is 
	# COMPLETELY wrong.
	#
        #if ( $SKIP_DIRS && $SKIP_DIRS =~ $sub_dir ) {
	# Although longer to search, this is the only secure way I
	# could come up with. J.lauret August 2001
        if ( $SKIP_DIRS ) {
	    my $el;
	    my $sts=1;
	    foreach $el (@items){
		if( $sub_dir =~ m/$el/){
		    print "skip dir: $sub_dir \t=> $SKIP_DIRS\n";
		    $sts = 0;
		    last;
		}
	    }
	    next if (! $sts);
        }

        my $sub_DIR = $dir . "/" . $sub_dir;

        if (! -d $sub_DIR ) 		{next;}
        if ( $sub_dir =~ /^\./     ) 	{next;}
        if ( $sub_dir =~ /^macros$/) 	{next;}
        if ( $sub_dir =~ /^test/   )	{next;}
        if ( $sub_dir =~ /CVS/     )	{next;}
        if ( $sub_dir =~ /^html/   )	{next;}
        if ( $sub_dir =~ /^doc/    )	{next;}
        if ( $sub_dir =~ /^inc$/   )	{next;}
        if ( $sub_dir =~ /^idl$/   )	{next;}
	
        opendir( DIR, $sub_DIR ) or die "Can't open $sub_DIR\n";
        my @subsubdirS = readdir DIR;
        closedir DIR;

        foreach my $subsub_dir(@subsubdirS) {
            my $subsub_DIR = $sub_DIR . "/" . $subsub_dir;
            if ( -d $subsub_DIR ) {
                if ( $subsub_dir =~ m/\./        || 
		     $subsub_dir =~ m/\.\./      ||
		     $subsub_dir =~ m/CVS/       || 
		     $subsub_dir =~ m/^doc/      ||
		     $subsub_dir =~ m/^local/    || 
		     $subsub_dir =~ m/^run/      ||
		     $subsub_dir =~ m/^wrk$/     || 
		     $subsub_dir =~ m/^example/  ||
		     $subsub_dir =~ m/^include/  ||
		     $subsub_dir =~ m/^macros/   ||
		     $subsub_dir =~ /^inc$/    ||
		     $subsub_dir =~ /^idl$/    ||
		     $subsub_dir =~ m/^kumac/ ){
		    #print "=== Skipping $subsub_dir in $subsub_DIR\n";
                    next;
		  }
		if ( $sub_dir =~ /Pool$/ && ( ! $param::include or  $subsub_dir !~ /$param::include/o )) {
		  if (! $param::include ) {
		    print  "skip ";
		    printf("%40s","$sub_dir/$subsub_dir");
		    printf("\tto build it you need to add %25s","+$subsub_dir");
		    print  " in cons command line\n";
		  }
		  next;
                }

                if ( ( $sub_dir =~ /^sim$/    || 
		       $sub_dir =~ /^gen$/    ||
		       $sub_dir =~ /Pool$/    ||
		       $sub_dir =~ /Client$/ ) ){
                    if ( $SKIP_DIRS && $SKIP_DIRS =~ $subsub_dir ) {
                        print "skip dir: $subsub_dir \t=> $SKIP_DIRS\n";
                        next;
                    }
                    push @subdirs, $subsub_DIR;
                    print "================== add $subsub_DIR\n"
                      if ($param::debug);
                }
            }
        }
        if ( $sub_dir =~ /Pool$/ )   { next; }
        if ( $sub_dir =~ /Client$/ ) { next; }
        push @subdirs, $sub_DIR;
        print "================== add $sub_DIR\n" if ($param::debug);
    }
}
print "subdirs = @subdirs\n" if $param::debug;
my @Targets = ();
my @sysdirlist = qw(asps/Simulation/agetof 
		    asps/staf/sdd asps/rexe 
		    StDb 
		    asps/Simulation/geant321 asps/Simulation/gcalor asps/Simulation/starsim );
if ( $STAR_HOST_SYS !~ /^alpha_dux/) {push @sysdirlist, "asps/Jprof";}
foreach $dir(@sysdirlist , @subdirs ) {
    if ( -d $dir ) {
        print "Add dir : $dir\n" if $param::debug;
        push @Targets, $OBJ . "/" . $dir . "/Conscript";
    }
}
print "BUILD  = $BUILD OBJ = $OBJ\n" unless ($param::quiet);
print "Targets = @Targets\n" if $param::debug;
Export qw( env INCLUDE LIB BIN BUILD OBJ);
Default qw (   .  );
print "Debug ".join(" ",@Targets)."\n"if ($param::debug);
Depends $env $STAR . "/mgr/RootCint.pl", $env->{ENV}->{ROOTSYS} . "/bin/rootcint";
Build @Targets;

#___________________________________________________________________________
sub script::wanted_dead {
    -l and not -e and print "bogus link: $File::Find::name \t--- remove it\n"
      and `rm $_`;
}
#____________________________________________________________
sub script::PrintHash($$) {
  my $env = shift; # print "Call PrintHash\n";
  my $prefix = shift;
  foreach my $key ( sort keys %$env ) {
    if (ref($env->{$key}) eq "HASH") {
      script::PrintHash($env->{$key}, $prefix . $key . "}->{");
    }
    else {
      if ($env->{$key}) {print $prefix, $key, "}= \t$env->{$key}\n";}
    }
  }
}

#___________________________________________________________________________
__END__;
