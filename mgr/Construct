#!/usr/bin/env perl
# $Id: Construct,v 1.165 2010/01/27 23:13:58 perev Exp $
use Env;
use lib qw(./mgr $STAR/mgr);#$ENV{ConstructLocation};           # Modify perl include path
use ConsDefs;

#my $xx=$ENV{ConstructLocation};
#print "Path used for ConsDefs is $xx\n" unless ($param::quiet);

if ( -e "mgr/Conscript-standard"){
    $xx = " local";
#    $param::defaultConscript =
#	"mgr/Conscript-standard";          # Local construction file.
} else {
    $xx = " default";
#    $param::defaultConscript =
#	$STAR . "/mgr/Conscript-standard"; # Default construction file.
}   
$param::defaultInclude = $INCLUDE; 
$param::defaultInclude =~ s|^#||; print "param::defaultInclude = $param::defaultInclude\n";

print "Repository used is $STAR\n"                         unless ($param::quiet);
print "Use$xx Conscript from $param::defaultConscript \n"  unless ($param::quiet);
print "Install includes\n"                                 unless ($param::quiet);

my $include = $param::defaultInclude; mkdir $include if ! -d $include;

if ( defined( $ARG{LinksCheck} ) ) {
  print "Clean up links. It takes a time.\n";
  my $build   = $BUILD; $build =~ s|^#||;
  &File::Find::find( \&wanted_dead, $build )   if -d $build;
  &File::Find::find( \&wanted_dead, $include ) if -d $include;
}
my $def = {@param::defaults};
{
  foreach my $key( sort keys %$def) {
    if ( defined( $ARG{$key} ) ) {
      print "Reset $key = $def->{$key} to $ARG{$key}\n" unless ($param::quiet);
      my @defs = ($key => $ARG{$key});
      push ( @param::defaults, @defs );
    }
  }
}

#
# Change directory structure depending on options
#
if ($def->{CXX}  =~ m/-Zoi/ ){
    # Drtup for INSURE tree directory.
    $LIB = $BUILD . "/ILIB";
    $BIN = $BUILD . "/IBIN";
    $OBJ = $BUILD . "/IOBJ";

} elsif ( defined($def->{GPROF}) ) {
    $LIB = $BUILD . "/GLIB";
    $BIN = $BUILD . "/GBIN";
    $OBJ = $BUILD . "/GOBJ";

} elsif ($def->{DEBUG}  eq "-g" ) {
    $LIB = $BUILD . "/lib";
    $BIN = $BUILD . "/bin";
    $OBJ = $BUILD . "/obj";

} else {
    $LIB = $BUILD . "/LIB";
    $BIN = $BUILD . "/BIN";
    $OBJ = $BUILD . "/OBJ";
}


$LIBPATH = $LIB;
$LIBPATH .= $main::PATH_SEPARATOR . $def->{Packages}->{ROOT}->{LIBDIR};
$LIBPATH .= $main::PATH_SEPARATOR . $def->{Packages}->{MYSQL}->{LIBDIR};
$LIBPATH .= $main::PATH_SEPARATOR . $def->{Packages}->{QT}->{LIBDIR};
$LIBPATH .= $main::PATH_SEPARATOR . $def->{ENV}->{OPTSTAR} . "/lib";
print "Set LIB = $LIB BIN = $BIN OBJ = $OBJ INCLUDE = $INCLUDE LIBPATH = $LIBPATH\n";

#if ( defined( $ARG{CPPPATH} ) ){$CPPPATH = $ARG{CPPPATH};}
#if ( defined( $ARG{FCPATH}  ) ){$FCPATH = $ARG{FCPATH};}
( my $DirPath = cwd() ) =~ s/\/$//g;
print "DirPath    = $DirPath\n" unless ($param::quiet);
$CWD = $DirPath;

$repository = `echo $STAR`;
chop($repository);
print "repository = $repository\n" unless ($param::quiet);
Repository($repository); 

my @Repo = Repository_List;
if ( defined( $ARG{Salt} ) ) { $Salt = $ARG{Salt}; }
if ( defined( $ARG{NoKeep} ) ) { $NoKeep = $ARG{NoKeep}; }

if ( $#Repo > -1 ) {
    print "Repositories:  \"@Repo\";" unless ($param::quiet);
    if ( !$Salt && !defined( $ARG{NoSalt} ) ) { $Salt = "user"; }
    if ($Salt) {
        Salt($Salt);
        print "\tSet Salt to \"$param::salt\"\n" unless ($param::quiet);
    }
}
else { if (! $NoKeep) {$param::keep = 1; }}


if ( $STAR_HOST_SYS =~ /^intel_wnt/ ) {
    $CPPPATH  = "";
    $FCPPPATH = "";

    foreach my $dir( $DirPath, @Repo ) {
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/" . $include;
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/StRoot";
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/pams";
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/StarVMC";
        $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/" . $include . "/tables";
    }
#   my $ROOTSRC = $AFS_RHIC . "\\star\\ROOT\\" . $ROOT_LEVEL . "\\ROOT\\src";
    $INCLUDE_PATH .= $main::PATH_SEPARATOR . $env->{ENV}->{ROOTSYS} . "/include";
    if (! $ENV{MINICERN}) {
      $INCLUDE_PATH .= $main::PATH_SEPARATOR . $STAR . $CERN_ROOT . "/include";
    print "****************************CERN*************************\n";
    } else {
      $INCLUDE_PATH .= $main::PATH_SEPARATOR . "StarVMC/minicern" ;
      $INCLUDE_PATH .= $main::PATH_SEPARATOR . $STAR . "/StarVMC/minicern";
    print "****************************MINICERN*********************\n";
    }
}
Link $OBJ => $DirPath;
print "Link $BUILD => $DirPath\n" unless ($param::quiet);
#  'FCPATH'         => $FCPATH,
#  'CPPPATH'        => $CPPPATH,
#  'EXTRA_CXXFLAGS' => $EXTRA_CXXFLAGS,
#  'EXTRA_CFLAGS'   => $EXTRA_CFLAGS,
$env = new cons(
  'LIBPATH'        => $LIBPATH,
);
Ignore qw(
  include/geant321/incbeg.inc
  include/geant231/incbeg.inc
  include/geant321/incend.inc
  include/math.h
  include/descrip.h
  include/fortran.h
  include/not_cern
  include/compiledata.h
  include/src/newsos.h
  include/src/sunos.h
  include/src/memtest.h
  include/TWin32HookViaThread.h
);

if ( !$param::quiet ) {
  my @list = qw (STAR_SYS ROOTSYS br 
		 CXX DEBUG CXXFLAGS EXTRA_CXXFLAGS 
		 CPPFLAGS EXTRA_CPPFLAGS br 
		 CPPPATH EXTRA_CPPPATH br
		 CC DEBUG CFLAGS EXTRA_CFLAGS br
		 FC FDEBUG FPPFLAGS FEXTEND FFLAGS br 
		 FCPATH EXTRA_FCPATH br
		 F77LD F77LDFLAGS br
		 CERNLIBS br 
		 FLIBS CLIBS SYSLIBS br
		 LD LDFLAGS EXTRA_LDFLAGS LIBPATH LIBS Libraries br
		 SO SOFLAGS br 
		 LIBG2C LIBSTDC br
		 ROOTLIBS br
		);
  my $tab = "";
  foreach my $p ( @list ) {
    if ($p eq 'br') {print "\n"; $tab = "";}
    else {
      if ($env->{$p})           {print "$tab$p = ", $env->{$p}; $tab = "\t";}
      elsif ($env->{ENV}->{$p}) {print "$tab$p = ", $env->{ENV}->{$p};  $tab = "\t";}
    }
  }
}
PrintHash($env,"\$env->{") if ($param::debug);
my @packages = ();
#find_PACKAGE(\&find_PACKAGE,"."); #print "Packages found: @packages\n";
my @subdirs = ();

# install includes
my @DirsWithIncludes = glob "asps/*/.includes_for_export.flg asps/*/*/.includes_for_export.flg StDb/*/.includes_for_export.flg StarVMC/*/.includes_for_export.flg StarVMC/*/*/.includes_for_export.flg OnlTools/*/.includes_for_export.flg OnlTools/*/*/.includes_for_export.flg StRoot/*/.includes_for_export.flg StRoot/*/*/.includes_for_export.flg StRoot/StRTSClient/include/.includes_for_export.flg  StRoot/RTS/src/RTS_READER/.includes_for_export.flg";
@DirsWithIncludes = map File::Basename::dirname($_), @DirsWithIncludes;

my @DirsIdlInc = glob "pams/*/idl pams/*/inc";
print "DirsWithIncludes = @DirsWithIncludes @DirsIdlInc\n" if ($param::debug);
foreach my $dir (@DirsWithIncludes, @DirsIdlInc) {
  print "---> looking for include in $dir\n" if ($param::debug);
  next if ! -r $dir;
  opendir( DIR, $dir ) or die "Can't open $sub_DIR\n";
  my @incs = readdir DIR; print "incs = @incs\n" if ($param::debug);
  closedir DIR;
  my @incT = ();
  foreach my $inc(@incs) {
    next if $inc =~ /^\.\#/;
    if ( $inc =~ /\.h$/ || $inc =~ /\.hh$/
	 || $inc =~ /\.hpp$/ || $inc =~ /\.inc$/
	 || $inc =~ /\.idl$/ ) {
      push @incT, $dir . "/" . $inc;
      print "+++ add $inc from $sub_DIR\n" if ($param::debug);
    }
  }
  if ( $#incT > -1 && !$param::rflag ) {
    Install $env $INCLUDE, @incT;
  }
}
my @excludeDirList = qw(\. \.\. macros CVS html doc inc idl local run wrk example include kumac.*);
#my  $excludeDirList = "^(\.|\.\.|macros|CVS|html|doc|inc|idl|local|run|wrk|example|include|kumac.*)\$";
my  $excludeDirList = "^(" . join ("|", @excludeDirList) . ")\$";

#print "$excludeDirList\n";
my  $items = "(";

if ( defined($SKIP_DIRS) ){ $items .= join("|",split(" ",$SKIP_DIRS));}

#if ($STAR_LEVEL =~ /\.dev/ or $STAR_LEVEL =~ /\.DEV/) {
#    if ($items ne "(") { $items .= "|";}
#  $items .= "SpinPool|StEStructPool|StEmcPool|StL2Emulator|StEEmcMixerMaker|StJetMaker|^Tpc|^ecal\$|^star\$|^interfaces\$|^vmcApp";
#    $items .= "SpinPool|StEStructPool|StEmcPool|StEEmcMixerMaker|StJetMaker|^Tpc|^ecal\$|^star\$|^interfaces\$|^vmcApp|QM2006";#|StTriggerUtilities";
#}

if ($items ne '(') {$items .= ')';}
else               {$items  = "";}
# print "$items\n"; die; 
#my $exlc = "StJetMaker"; 
#if (! $param::include or $exlc !~ /$param::include/o) {if (! $items) {$items = $exlc;} else {$items .= "|" . $exlc;}}
#
# Search for directories (one level down) and make
# list of targets
#

foreach my $dir( "pams", "OnlTools", "StRoot", "StDb" ,"StPiD", "StarVMC" ) {
  next if !-d $dir;
  opendir( DIR, $dir ) or die "Can't open $dir\n";
  my @subdirS = readdir DIR;
  closedir DIR;
  foreach my $sub_dir (@subdirS) {# print "sub_dir = $sub_dir\n";
      next if $sub_dir eq '.' || $sub_dir eq '..';
      #  if ($items and $sub_dir =~ /$items/) {print "skip dir: $sub_dir \t=> $SKIP_DIRS\n"; next;}
      if ($sub_dir =~ $items and ( ! $param::include or  $sub_dir !~ /$param::include/o )    ) {
	  #   print "param::include = $param::include $subsub_dir \n";
	  if ($STAR_LEVEL !~ /\.dev/ and $STAR_LEVEL !~ /\.DEV/) {
	      print  "skip ";
	      printf("%40s","$sub_dir");
	      printf("\tto build it you need to add %25s","+$sub_dir");
	      print  " in cons command line\n";
	  }
	  next;
      }

#	# The above pattern survived for some time but is 
#	# COMPLETELY wrong.
#	#
#        #if ( $SKIP_DIRS && $SKIP_DIRS =~ $sub_dir ) {
#	# Although longer to search, this is the only secure way I
#	# could come up with. J.lauret August 2001
#        if ( $SKIP_DIRS ) {
#	    my $el;
#	    my $sts=1;
#	    foreach $el (@items){
#		if( $sub_dir =~ m/$el/){
#		    print "skip dir: $sub_dir \t=> $SKIP_DIRS\n";
#		    $sts = 0;
#		    last;
#		}
#	    }
#	    next if (! $sts);
#        }

my $sub_DIR = $dir . "/" . $sub_dir;

				   if (! -d $sub_DIR ) 		{
  print "$sub_DIR does exist"  if ($param::debug);
  next;
}
 if (#$sub_dir != 'l3' and 
     $sub_dir =~ $excludeDirList){
#   print "-0- $sub_dir is in excludeDirList = $excludeDirList =>$1|\n";# if ($param::debug);
#   die if $sub_dir eq 'l3';
   next;
 }
	
        opendir( DIR, $sub_DIR ) or die "Can't open $sub_DIR\n";
        my @subsubdirS = readdir DIR;
        closedir DIR;

        foreach my $subsub_dir(@subsubdirS) {
            my $subsub_DIR = $sub_DIR . "/" . $subsub_dir;
            if ( -d $subsub_DIR ) {
		if ( $subsub_dir =~ $excludeDirList) {
		    #print "=== Skipping $subsub_dir in $subsub_DIR\n";
		    print "-1- $subsub_dir is in excludeDirList\n"  if ($param::debug);
		    next;
		}
		if (($STAR =~ /\.dev/ or $STAR =~ /\.DEV/) and
		    $items and $subsub_dir =~ /$items/ and
		    ( ! $param::include or  $sub_dir !~ /$param::include/o )    ) {
		    if ($STAR_LEVEL !~ /\.dev/ and $STAR_LEVEL !~ /\.DEV/) {
			print  "skip ";
			printf("%40s","$sub_dir/$subsub_dir");
			printf("\tto build it you need to add %25s","+$sub_dir/$subsub_dir");
			print  " in cons command line\n";
		    }
		    next;
                }
		
                if ( ( $sub_dir =~ /^sim$/    ||
		       $sub_dir =~ /^gen$/    ||
		       $sub_dir =~ /Pool$/    ||
#		       $sub_dir =~ /StJetMaker/ ||
		       $sub_dir =~ /StRTSClient$/) ){
#                    if ( $SKIP_DIRS && $SKIP_DIRS =~ $subsub_dir ) {
                    if ( $items && $sub_dir =~ /$items/ ) {
                        print "skip dir: $subsub_dir \t=> $items\n";
                        next;
                    }
                    push @subdirs, $subsub_DIR;
                    print "================== add $subsub_DIR\n"
                      if ($param::debug);
                }
            }
        }
        if ( $sub_dir =~ /Pool$/ )   { next; }
        if ( $sub_dir =~ /Client$/ ) { next; }
        push @subdirs, $sub_DIR;
        print "================== add $sub_DIR\n" if ($param::debug);
    }
}




print "subdirs = @subdirs\n" if $param::debug;
my @Targets = ();

# List of targets
my @sysdirlist = qw(asps/Simulation/agetof 
		    asps/staf/sdd 
		    asps/rexe 
		    asps/DAQBrowser
		    StDb 
		    asps/Simulation/geant321 
		    asps/Simulation/gcalor 
		    asps/Simulation/starsim
		   );
#		    minicern

# Platform specific target inclusion/exclusion
if ( $STAR_HOST_SYS !~ /^alpha_dux/) {
    push @sysdirlist, "asps/Jprof";
}



foreach $dir(@sysdirlist , @subdirs ) {
    if ( -d $dir ) {
#	next if $param::include && $dir !~ /$param::include/o;
#	next if $param::exclude && $dir =~ /$param::exclude/o;
        print "Add dir : $dir\n" if $param::debug;
        #push @Targets, $OBJ . "/" . $dir . "/Conscript";
        push @packages, $dir;
    }
}
#print "Packages $#packages : @packages\n";
@packages = sortu(@packages);
my $qtRoot = "QtRoot";
#if ($param::include and $qtRoot =~ /$param::include/) {
push @packages, $qtRoot if ( -d $qtRoot );
#}
#print "packages after $#packages : @packages\n";
print "BUILD  = $BUILD OBJ = $OBJ\n" unless ($param::quiet);
@Targets = map($OBJ . "/" . $_ . "/Conscript", @packages);
#@Targets = map('#' . $_ . "/Conscript", @packages);

if ($param::debug){
    print "Packages $#packages : @packages\n";
    print "Targets $#Targets   : @Targets\n" ;
}
Export qw( env CWD INCLUDE LIB BIN BUILD OBJ);
Default qw (   .  );

Depends $env $STAR . "/mgr/RootCint.pl", $env->{ENV}->{ROOTSYS} . "/bin/rootcint";



Build @Targets;
#if ($env->{Packages}->{ROOT}->{RLIBMAP}) {
#  # Create libraries map
  
#  my @L = Repository_List;
#  push @L, "."; 
  
#  my $glob = join (' ', map($_ . "/." . $STAR_HOST_SYS . "/lib/lib*.so",@L));# print "glob = $glob\n";
#  my @Libs = glob $glob; 
#  my @rootlibs = split ' ', $ROOTLIBS;
#  foreach my $l (@rootlibs) {$l = s/-l//; if ($l) {$l = $ROOTSYS . "/lib/lib" . $l . ".so"; push @Libs, $l;}}
#  push @Libs, $env->{ENV}->{OPTSTAR} . "/lib/liblog4cxx.so";
#  push @Libs, "/usr/lib/libmysqlclient.so"; #print "Libs = @Libs\n";
#  my $map = $BUILD . "/etc/STAR_LIB.map";
#  $map =~ s/^#//;
#  if (! -r $map)  {
#    print "$map does not exist. Try to create.\n";
#    Command $env [("#" . $map)], @Libs, qq(LibsDeps.pl %< > %>);
#  }
#  if ( -r $map) {
#    print "$map does exist. Try to use.\n";
#    open(IN,"$map") or die "Can't open $map";
#    my $line;
#    while ($line = <IN>) {
#      next if ! $line;
#      next if $line !~ /:/;
#      my @words = split ':', $line;# print "words |$words[0]| |$words[1]\n";
#      chomp($words[1]);
#      my $lib = File::Basename::basename($words[0]);
#      $env->{MAP}->{$lib} = $words[1];# print "lib =  $lib Deps = $env->{MAP}->{$lib} = $words[1]\n";
#    }
#    close (IN);
#  }
  
## rm ~/.rootmap; cat $STAR_LIB/*.map > ~/.rootmap
#}
#___________________________________________________________________________
sub script::wanted_dead {
    -l and not -e and print "bogus link: $File::Find::name \t--- remove it\n"
      and unlink($_);
}
#____________________________________________________________
sub script::PrintHash($$) {
  my $env = shift; # print "Call PrintHash\n";
  my $prefix = shift;
  foreach my $key ( sort keys %$env ) {
    if (ref($env->{$key}) eq "HASH") {
      script::PrintHash($env->{$key}, $prefix . $key . "}->{");
    }
    else {
      if ($env->{$key}) {print $prefix, $key, "}= \t$env->{$key}\n";}
    }
  }
}
#________________________________________________________________________________
sub find_PACKAGE {
  @packages   = ();
  &File::Find::find(\&wanted_PACKAGE, @_);
  return @packages;
}
#________________________________________________________________________________
sub wanted_PACKAGE {
#    print "wanted ",$_,"\n";
  my ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if (! -d _ ) {return;}
  if ( -d _ &&
       (/^\./ || 
	/^CVS$/ ||
	/^macros$/ ||
	/^html$/ ||
	/^idl$/ ||
	/^exa$/ ||
	/^doc$/ ||
	/^run$/ ||
	/^examples$/ ||
	/^images$/ ||
	/^local$/ ||
	/^hold$/ ||
	/^wrk$/)
     ) {$File::Find::prune = 1; return;}
  if ( /^\.\#/) {return;}
  if ( -r _ . "/PACKAGE") {
    $File::Find::prune = 1;
    my $dir = File::Basename::dirname($File::Find::name);
    $dir =~ s|\.\/||;  print "found $dir\n";
    push @packages, $dir; 
    return;
  }
}
#___________________________________________________________________________
__END__;
