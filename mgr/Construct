#!/opt/star/bin/perl
use Env;
if (defined($AFS)) {$File::Find::dont_use_nlink;}
use File::Basename;
use File::Find ();
#use strict;
use Sys::Hostname;
use Cwd;
my $DEBUG = "-g";
@search_files   = ();
if (defined($NODEBUG)) {$DEBUG = "-O2";}
my $O        = "o";
my $A        = "a";
my $Cxx      = "cxx";
my $so       = "so";

my $SoOUT    = "-o";
my $Cout     = "-o ";
my $Fout     = "-o ";
my $Lout     = "-o ";
my $Cinp     = "";
my $CXXinp   = "";

my $CPP      = "gcc";
my $CPPFLAGS = "";
my $CXX      = "g++";
my $CXXFLAGS = "-fpic -w";
my $CC       = "gcc";
my $CFLAGS   = "  -fpic -w";
my $FC       = "f77";
my $FFLAGS   = "  -KPIC -w -DCERNLIB_TYPE";
my $AR       = "ar";
my $ARFLAGS  = "rvu";
my $LD       = $CXX;
my $LDFLAGS  = "";
my $SO       = $CXX;
my $SOFLAGS  = "";
my $EXEFLAGS = "NONE";
my $STIC     = $STAF_BIN . "/" . "stic";
my $STICFLAGS= "";
my $GEANT3   = $STAF_BIN . "/" . "geant3";
my $ROOTCINT = $ROOTSYS . "/bin/rootcint";
my $CLIBS    = "";
my $FLIBS    = "";
my $OSFID    = "";
my $ROOTCINTD= "";
my $CPPPATH  = "";
my $INCLUDE_PATH = $INCLUDE;
$_ = $STAR_SYS;
print "System: ", $_,"\n";
if (/^i386_linux2/ || /^i386_redhat50/ || /^i386_redhat51/ ||  /^i386_redhat52/) {
#    case linux but gcc is EGCS
#  ====================
  $OSFID    = "lnx Linux linux LINUX CERNLIB_LINUX CERNLIB_UNIX CERNLIB_LNX CERNLIB_QMLNX NEW_ARRAY_ON GNU_GCC ST_NO_NUMERIC_LIMITS ST_NO_EXCEPTIONS ST_NO_NAMESPACES";
  $FC       = "pgf77";
  $CXXFLAGS = " -fPIC -Wall";
#  $CPPPATH .= "/usr/local/include/g++:";
#                                             -fpipe
  $CFLAGS   = " -fPIC -Wall";
  $CPPFLAGS .= " f2cFortran";
  $LDFLAGS  = " -Wl,-Bstatic";
  $EXEFLAGS = " -Wl,-Bdynamic";  
  $SOFLAGS  = " -shared";  
  $CLIBS    = "-L/usr/pgi/linux86/lib -L/usr/X11R6/lib  -lXt -lXpm -lX11  -lpgc -lm -ldl  -rdynamic";
  $FLIBS    = "-L/opt/star/lib -lpgf77S -lpgf77A -L/usr/local/lib/gcc-lib/i686-pc-linux-gnu/egcs-2.91.66 -lg2c";
  if (/^i386_linux2/) {$FLIBS   .= " -lI77 -lF77";}
  $FLIBS   .= " -lcrypt";
  $FFLAGS   = " -DPGI";  
  $FEXTEND  = "-Mextend";
}
elsif (/^hp_ux102/) {
#    case "hp":
#  ====================
  $OSFID = "HPUX CERNLIB_HPUX CERNLIB_UNIX ST_NO_NAMESPACES ST_NO_EXCEPTIONS";
  if (defined(NODEBUG)) {$DEBUG = "-O";}
  $OSFID   .= " NEW_ARRAY_ON";
  $CXX      = "aCC";
  $CC       = "cc";
  $LD       = $CXX;
  $SO       = $CXX;
  $CXXFLAGS = " -z +Z  -Dextname";
  $CFLAGS   = " -Ae -z +Z -Dextname";  
  if (defined($SCL_OPTIMISE)){ # from Brian
    $CXXFLAGS .= " +Olibcalls +Onolimit";
  }
  else {
  $CXXFLAGS .= " +d";}
  $LDFLAGS   = " -z -Wl,+s -Wl,-E,+vnocompatwarnings";
  $EXEFLAGS  = $LDFLAGS . " -Wl,-N"; 
  $SOFLAGS   = "  -b -z";  
  $CLIBS     = "-lXm -lXt -lX11 -lm -lPW -ldld";
  $FC        = "fort77";
  $FLIBS     = "/opt/fortran/lib/libU77.a";
  $FFLAGS    = " +DA1.0 +ppu +Z  +U77 -K";
  $FEXTEND   = "+es";
}
elsif (/^sun4x_55/ ||  /^sun4x_56/) {
  $ROOTCINTD = "-DSOLARIS";
  $CPPFLAGS  =~ s/SunOS//g;
  $OSFID     =  "sun SUN SOLARIS Solaris CERNLIB_UNIX CERNLIB_SOLARIS CERNLIB_SUN ST_NO_MEMBER_TEMPLATES ST_NO_NUMERIC_LIMITS";
  $CC        = "/opt/SUNWspro/bin/cc";
  $CXX       = "/opt/SUNWspro/bin/CC -features=no%castop -features=no%anachronisms";
  $FC        = "/opt/SUNWspro/bin/f77";
  $CXXFLAGS  =  "-KPIC +w";
  $CLIBS     = "-L/opt/SUNWspro/lib -L/opt/SUNWspro/SC4.2/lib  -lm -lc -L/usr/ucblib -R/usr/ucblib -lucb -lmapmalloc";
  $FLIBS     = "-lM77 -lF77 -lsunmath";
  $FFLAGS    =  "  -KPIC -w";
  $FEXTEND   = "-e";
  $CFLAGS    =  " -KPIC";
  $LD        =  $CXX;
  $LDFLAGS   =  " -Bstatic"; 
  $SO        =  $CXX;
  $SOFLAGS   =  " -G";
}
elsif (/^intel_wnt/) {
  $DEBUG    = "-Zi";
  $EXESUF   = ".exe";
  $O        = "obj";
  $A        = "lib";
  $Cxx      = "cxx";
  $so       = "DLL";

  $Cout     = "-Fo";
  $Fout     = "-Fo";
  $Lout     = "-out:";
  $SoOUT    = "-out:";
  $Cinp     = "-Tc";
  $CXXinp   = "-Tp";
  $Copt     = "-O2";
  $CXXOpt   = "-O2";

  $GEANT3   += $EXESUF;
  $ROOTCINT += $EXESUF;

  $ROOTCINTD = "-DWIN32";
  $OSFID     =  "VISUAL_CPLUSPLUS CERNLIB_WINNT CERNLIB_MSSTDCALL WIN32";
  $CPP       = "cl";
  $CC        = "cl";
  $CXX       = "cl";
  $FC        = "fl32";
  $CLIBS     = "ws2_32.lib mswsock.lib user32.lib kernel32.lib msvcrt.lib oldnames.lib MSVCIRT.LIB";
  $FLIBS     = "DFORDLL.LIB";
  $FFLAGS    =  $DEBUG . " -MD -G5 -fpp -Oxp -nokeep -nologo";
  $FEXTEND   = "-extend_source";
  $CFLAGS    =  $DEBUG . " -MD -G5 -nologo -DASU_MALLOC_OFF";
  $CXXFLAGS  =  $CFLAGS;
  $LD        =  $CXX;
#  $LDFLAGS   =  $DEBUG . $(conlflags); 
  $SO        =  "link";
  $SOFLAGS   =  $DEBUG . " -DEBUG -NODEFAULTLIB -INCREMENTAL:NO -NOLOGO -DLL ";
}

$MAIN    = cwd();
$INCLUDE = "#inc";
$LIB     = "";
$EXPORT = "#.share";
my $FLAGS = $CPPFLAGS . " " . $OSFID . " __ROOT__";
$CPPFLAGS = "-D" . join (" -D", split (" ",$FLAGS));
print "CPPFLAGS = ", $CPPFLAGS, "\n";
print "CPP =\t",$CPP,";\tCPPFLAGS =\t",$CPPFLAGS,"\n"; 
print "CC  =\t",$CC,";\tCCFLAGS = \t",$CFLAGS,"\tCLIBS =\t",$CLIBS,"\n"; 
print "CXX =\t",$CXX,";\tCXXFLAGS = \t",$CXXFLAGS,"\n";
print "FC  =\t",$FC,";\tFFLAGS = \t",$FFLAGS,"\tFLIBS =\t",$FLIBS,"\n"; 
print "LD  =\t",$LD,";\t$LDFLGAS = \t",$LDFLAGS,"\n";
print "SO  =\t",$SO,";\t$SOFLGAS = \t",$SOFLAGS,"\n";
print "INCLUDE = ",$INCLUDE,"\n";
(my $inc = $INCLUDE) =~ s/\#//g;
$CPPPATH .= ".:" . $inc .":StRoot:pams:.share:.share/tables:StRoot/StDbLib:StRoot/StDbLib/Calibrations:StRoot/StDbLib/Conditions:StRoot/StDbLib/Geometry";
my @includes = ("St_base","StChain","StUtilities","xdf2root","StarClassLibrary","StEvent");
foreach my $inc (@includes) {
  $CPPPATH .= ":StRoot/" . $inc;
}
$CPPPATH .= ":" . $ROOTSYS . "/src:" . $STAF . "/inc:/opt/star/include";
#$CPPPATH =~ s/:/$PATH_SEPARATOR/g;
$FCPPPATH = "-I.. -I../.. -I" . $CERN_ROOT ."/include -I" . $CERN_ROOT . "/include/geant321";
print "CPPPATH = ",$CPPPATH,"\n";
print " STAR = ",$STAR,"\n";
push @Reps, $STAR;
Repository ($STAR);
(my $DirPath  = cwd()) =~ s/\/$//g;
print " in DirPath=$DirPath\n";
if ($STAR_SYS !~ /^intel_wnt/) {
  $INCLUDE_PATH = "";
}
else {
  $CPPPATH = "";
  $FCPPPATH = "";
  foreach my $dir ($DirPath, @Reps) {
    $INCLUDE_PATH .= ";" . $dir;
    $INCLUDE_PATH .= ";" . $dir . "/inc";
    $INCLUDE_PATH .= ";" . $dir . "/StRoot";
    $INCLUDE_PATH .= ";" . $dir . "/pams";
    $INCLUDE_PATH .= ";" . $dir . "/.share/tables";
    foreach my $inc (@includes) {
      $INCLUDE_PATH .= ";" . $dir . "/StRoot/" . $inc;
    }
  }
  $INCLUDE_PATH .= ";" . $ROOTSYS . "/src";
  $INCLUDE_PATH .= ";" . $STAF . "/inc";
  $INCLUDE_PATH .= ";" . $CERN_ROOT . "/include";
}
my @Repo = Repository_List; print "Repositories = @Repo\n";
my $STICFLAGS = "-H -q";
$env = new cons(
		'STIC'         => $STIC,
		'STICFLAGS'    => $STICFLAGS,
		'STICCOM'      => 'cd %<:d &&  %STIC %STICFLAGS %_IFLAGS %<', 
		'CPPPATH'      => $CPPPATH,
		'CPPFLAGS'     => $CPPFLAGS,
		'DEBUG'        => $DEBUG,
		'FC'	       => $FC,
		'FFLAGS'       => $FFLAGS,
		'FEXTEND'      => $FEXTEND,
		'FCPPPATH'     => $FCPPPATH,
		'Fout'         => $Fout,
		'CXXinp'       => $CXXinp,
		'Cinp'         => $Cinp,
		'Cout'         => $Cout,
		'Lout'         => $Lout,
		'SoOUT'        => $SoOUT,
		'FCCOM'        => 'cd %<:d && %FC %FFLAGS %DEBUG %FEXTEND %_IFLAGS %FCPPPATH -c %<:f %Fout%>:f',
		'GEANT3'       => $GEANT3,
		'GEANT3COM'    => 'cd %<:d && %GEANT3 %<:f -o %<:f.F; %FC %FFLAGS %DEBUG %_IFLAGS %FCPPPATH -c %<:f.F -o %>:f',
		'CC'	       => $CC,
		'CFLAGS'       => $CFLAGS,
		'CCCOM'        => 'cd %<:d && %CC %CFLAGS %DEBUG %CPPFLAGS %_IFLAGS -c %Cinp%<:f %Cout%>:f',
		'CXX'          => $CXX,
		'CXXFLAGS'     => $CXXFLAGS,
		'CXXCOM'       => 'cd %<:d && %CXX %CXXFLAGS %DEBUG %CPPFLAGS %_IFLAGS -c %CXXinp%<:f %Cout%>:f',
		'LINK'	       => $LD,
		'LDFLAGS'      => $LDFLAGS,
		'LINKCOM'      => '%LINK %DEBUG %LDFLAGS %Lout%> %<:f %_LDIRS %LIBS',
		'SO'           => $SO,
		'SOFLAGS'      => $SOFLAGS, 
		'SoOUT'        => $SoOUT,
		'LINKMODULECOM'=> '%SO %DEBUG %SOFLAGS %SoOUT%> %<',
		'AR'	       => $AR,
		'ARFLAGS'      => $ARFLAGS,
		'ARCOM'        => "%AR %ARFLAGS %> %<;%RANLIB %>",
		'RANLIB'       => 'ranlib',
		'AS'	       => 'as',
		'ASFLAGS'      => '',
		'ASCOM'        => '%AS %%DEBUG ASFLAGS %< -o %>',
		'LD'	       => 'ld',
		'LDFLAGS'      => '',
		'PREFLIB'      => 'lib',
		'SUFLIB'       => $A,
		'SUFLIBS'      => $so . ":" . $A,
		'SUFSOLIB'     => $so,
		'SUFMAP'       => {
				   '.g'  => 'build::command::geant3',
				   '.f'  => 'build::command::fc',
				   '.F'  => 'build::command::fc',
				   '.C'  => 'build::command::cxx',
				   '.s'  => 'build::command::cc',
				   '.S'  => 'build::command::cc',
				   '.c'  => 'build::command::cc',
				   '.cc' => 'build::command::cxx',
				   '.cxx'=> 'build::command::cxx',
				   '.cpp'=> 'build::command::cxx',
				   '.idl'=> 'build::command::stic'
				  },
		'SUFOBJ'	=> "." . $O,
		'ENV'	        => { 'PATH' => $PATH,
				     'ROOTSYS' => $ROOTSYS,
				     'LD_LIBRARY_PATH' => $LD_LIBRARY_PATH,
				     'PGI' => $PGI,
				     'STAR' => $STAR,
				     'STAF' => $STAF,
				     'STAR_BIN' => $STAR_BIN,
				     'INCLUDE' => $INCLUDE_PATH
				   },
	       );
#Command $env 
my $build  = "." . $STAR_HOST_SYS; print "build = $build\n";
#if (! -d $build) {mkdir $build, 0664;}
$BUILD  = "#" . $build;
$LIB    = $BUILD . "/lib";
$BIN    = $BUILD . "/bin"; 
$OBJ    = $BUILD . "/obj";
my $obj = $build . "/obj";
Link $OBJ => $DirPath; print "Link $BUILD => $DirPath\n";
#if (! -d "$obj")   {mkdir $obj, 0664;}
my @Targets = ();
my @dirs = ("StRoot","pams","pams/tables");
for my $dir (@dirs) {
  if (-d $dir) {
    my $target = $OBJ . "/" . $dir . "/Conscript";
    push @Targets, $target; print "new taret = $target\n";
  }
}
print "BUILD  = $BUILD EXPORT =  $EXPORT OBJ = $OBJ Targets = @Targets\n";
Export qw( env INCLUDE LIB BIN EXPORT BUILD OBJ MAIN);
Default qw (   .  );
Build  @Targets;
#________________________________________________________________________________
# Builder for a C++ module
package build::command::cxx;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::cxx-find- parameters = ", @_, "\n";
    $_[1]->{_cxx} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{CXXCOM});
	$self->{scanner} = $cscanner;
	bless $env->{_cxx} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::cxx-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
# Builder for a stic module
package build::command::stic;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::stic-find- parameters = ", @_, "\n";
    $_[1]->{_stic} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{STICCOM});
	$self->{scanner} = $cscanner;
	bless $env->{_stic} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::stic-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
# Builder for a F77 module
package build::command::fc;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::fc-find- parameters = ", @_, "\n";
    $_[1]->{_fc} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{FCCOM});
	$self->{scanner} = $cscanner;
	bless $env->{_fc} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::fc-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
# Builder for a geant3 module
package build::command::geant3;

BEGIN { @ISA = qw(build::command) }

#________________________________________
sub find {
# print "==========\tDebug:","In build::command::geant3-find- parameters = ", @_, "\n";
    $_[1]->{_geant3} || do {
	my($class, $env) = @_;
	my($cscanner) = find scan::cpp($env->{_cwd}, $env->{CPPPATH});
	$env->{_IFLAGS} = "%(" . $cscanner->iflags . "%)";
	my($self) = find build::command($env, $env->{GEANT3COM});
	$self->{scanner} = $cscanner;
	bless $env->{_geant3} = $self;
    }
}
#________________________________________
# Invoke the associated	 C scanner to get signature of included files.
sub includes {
# print "==========\tDebug:","In build::command::geant3-includes- parameters = ", @_, "\n";
    my($self, $tgt) = @_;
    $self->{scanner}->includes($tgt, $tgt->{sources}[0]);
}
#________________________________________________________________________________
#________________________________________________________________________________
package script;
#________________________________________
*name           = *File::Find::name;
*prune          = *File::Find::prune;
*dir            = *File::Find::dir;
*topdir         = *File::Find::topdir;
*topdev         = *File::Find::topdev;
*topino         = *File::Find::topino;
*topmode        = *File::Find::topmode;
*topnlink       = *File::Find::topnlink;
sub find_sources {
  my $pwd = cwd();
  if ($pwd =~ '^/afs/') {$File::Find::dont_use_nlink;}
  @search_files   = ();
  if (-d $_[0]) {
    &File::Find::find(\&wanted, @_);
    for my $dir (@_) {
      if ( -d $dir ) { 
	my $i = 0;
	for ($i=0;$i<=$#search_files;$i++) {
	  #      print "i = ",$i, "src =", $search_files[$i],"\n";
	  my $file = $search_files[$i];
	  $file =~ s/$dir\///g;
	  $search_files[$i] = $file;
	}
      }
    }
  }
#  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub find_hfiles {
  if (defined($AFS)) {$File::Find::dont_use_nlink;}
  @search_files   = ();
  &File::Find::find(\&wanted_Def, @_);
  for my $dir (@_) {
    if ( -d $dir ) { 
      my $i = 0;
      for ($i=0;$i<=$#search_files;$i++) {
	#      print "i = ",$i, "src =", $search_files[$i],"\n";
	my $file = $search_files[$i];
	$file =~ s/$dir\///g;
	$search_files[$i] = $file;
      }
    }
  }
#  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub find_inc {
  if (defined($AFS)) {$File::Find::dont_use_nlink;}
  @search_files   = ();
  &File::Find::find(\&wanted_inc, @_);
  for my $dir (@_) {
    if ( -d $dir ) { 
      my $i = 0;
      for ($i=0;$i<=$#search_files;$i++) {
	#      print "i = ",$i, "src =", $search_files[$i],"\n";
	my $file = $search_files[$i];
	$file =~ s/$dir\///g;
	$search_files[$i] = $file;
      }
    }
  }
#  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub find_idlM {
  if (defined($AFS)) {$File::Find::dont_use_nlink;}
  @search_files   = ();
  &File::Find::find(\&wanted_idlM, @_);
  for my $dir (@_) {
    if ( -d $dir ) { 
      my $i = 0;
      for ($i=0;$i<=$#search_files;$i++) {
	#      print "i = ",$i, "src =", $search_files[$i],"\n";
	my $file = $search_files[$i];
	$file =~ s/$dir\///g;
	$search_files[$i] = $file;
      }
    }
  }
#  print "find_source found $#search_files + 1 files\n";
  return @search_files;
}
#________________________________________
sub script::wanted {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d _ &&
       (/^CVS$/ ||
	/^macros$/ ||
	/^html$/ ||
	/^idl$/ ||
	/^exa$/ ||
	/^inc$/ ||
	/^doc$/ ||
	/^run$/ ||
	/^examples$/ ||
	/^local$/ ||
	/^hold$/ ||
	/^wrk$/)
     ) {$prune = 1; return;}
  if (
      /^.*\.c$/       ||
      /^.*\.cc$/      ||
      /^.*\.cxx$/     ||
      /^.*\.g$/       ||
#     /^.*\.f$/       ||
      /^.*\.F$/) {# print "$name\n";
    push @search_files, $name; 
  }
}
#________________________________________
sub script::wanted_idlM {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);
  if ( -d _ &&
       (/^CVS$/ ||
	/^macros$/ ||
	/^html$/ ||
	/^idl$/ ||
	/^exa$/ ||
	/^inc$/ ||
	/^doc$/ ||
	/^run$/ ||
	/^examples$/ ||
	/^local$/ ||
	/^hold$/ ||
	/^wrk$/)
     ) {$prune = 1; return;}
  if (/^.*\.idl$/) {# print "$name\n";
    push @search_files, $name; 
  }
}
#________________________________________
sub script::wanted_Def {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);#  print "wanted $_ \n";
  if ( -d _ &&
       (/^CVS$/      ||
	/^macros$/ ||
	/^html$/ ||
	/^idl$/      ||
	/^exa$/      ||
	/^inc$/      ||
	/^doc$/      ||
	/^run$/      ||
	/^examples$/ ||
	/^local$/    ||
	/^hold$/     ||
	/^wrk$/))       {$prune = 1; return;}
  if (/^.*\.h$/      || /^.*\.hh$/ ) {# print "$name\n"; 
					 push @search_files, $name; }
}
#________________________________________
sub script::wanted_inc {
  #  print "wanted ",$_,"\n";
  ($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_);#  print "wanted $_ \n";
  if ( -d $_ &&
       (/^CVS$/ ||
	/^macros$/ ||
	/^html$/ ||
	/^idl$/ ||
	/^exa$/ ||
	/^doc$/ ||
	/^run$/ ||
	/^examples$/ ||
	/^local$/ ||
	/^hold$/ ||
	/^wrk$/)
     ) {$prune = 1; return;}
  if ( /^.*\.h$/|| /^.*\.hh$/ || /^.*\.inc$/  || /^.*\.hpp$/) { 
#    if ($name =~ '/inc/' || $name =~ '/\w*cdes/') { print "$name\n"; 
    if ($name =~ '/inc/' ) {# print "$name\n"; 
      push @search_files, $name; }
  }
}
