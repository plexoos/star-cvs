#!/usr/bin/env perl
# $Id: Construct,v 1.109 2001/02/19 17:32:27 fisyak Exp $
use Env;
use lib $STAR . "/mgr"; # Modify perl include path
use ConsDefs;
$param::defaultConscript = $STAR . "/mgr/Conscript-standard";	# Default construction file.
print "Use default Conscript from $param::defaultConscript \n" unless ($param::quiet);
print "Install includes\n" unless ($param::quiet);  
my $include = "include";
my $build  = "." . $STAR_HOST_SYS; print "build for $build\n" unless ($param::quiet);
if (defined($ARG{LinksCheck})) {
  print "Clean up links. It takes a time.\n";
  &File::Find::find (\&wanted_dead,$include) if -d $include;
  &File::Find::find (\&wanted_dead,$build)   if -d $build;
}
$INCLUDE = "#" . $include;
$EXPORT = "#.share";
$FFLAGS .= " -DCERNLIB_TYPE";
$OSFID .= " " . $STAR_SYS;
my $ROOTLIBS    = " -lNew  -lBase -lClib -lCont -lMeta -lNet -lUnix -lZip -lCint -lHist -lGraf -lGraf3d -lTree -lGpad -lPhysics"; print "ROOTLIBS = $ROOTLIBS\n";
my $ROOTGLIBS = "";
my $RINTLIBS    = "-lRint ";

if (!defined($ARG{NoNew}))    {$ROOTLIBS    = " -lNew";}
$ROOTLIBS .=  " -lBase -lClib -lCont -lMeta -lNet -lUnix -lZip -lCint -lPhysics -lMatrix -lHist -lGpad -lGraf -lGraf3d -lTree -lGui -lGpad -lPhysics -lMatrix";      
print "set ROOTLIBS = $ROOTLIBS\n" unless ($param::quiet);
if (defined($ARG{ROOTLIBS}))    {$ROOTLIBS = $ARG{ROOTLIBS}        ; print "set ROOTLIBS = $ROOTLIBS\n" unless ($param::quiet);}
$CPPPATH  = $INCLUDE . ":#StRoot:" .  $ROOTSRC;
$CPPPATH .= $main::PATH_SEPARATOR . $CERN_ROOT . "/include" . $EXTRA_CPPPATH;
$FCPPPATH ="";
(my $DirPath  = cwd()) =~ s/\/$//g; print "DirPath    = $DirPath\n" unless ($param::quiet);
$repository = `echo $STAR`; chop ($repository);  
print "repository = $repository\n" unless ($param::quiet); 
Repository ($repository);# unless $param::noRepository;
my @Repo = Repository_List; 
if (defined($ARG{Salt}))       {$Salt = $ARG{Salt};}
if ($#Repo > -1) {
  print "Repositories:  \"@Repo\";" unless ($param::quiet);
  if (!$Salt && !defined($ARG{NoSalt}))  {$Salt = "user";}
  if ($Salt) {Salt($Salt); print "\tSet Salt to \"$param::salt\"\n" unless ($param::quiet);}
}
else {$param::keep = 1;}

$BUILD  = "#" . $build;
if ($DEBUG eq "-g") {
  $LIB    = $BUILD . "/lib";
  $BIN    = $BUILD . "/bin"; 
  $OBJ    = $BUILD . "/obj";
}
else {
  $LIB    = $BUILD . "/LIB";
  $BIN    = $BUILD . "/BIN"; 
  $OBJ    = $BUILD . "/OBJ";
}
$LIBPATH = $LIB;
if ($STAR_HOST_SYS !~ /^intel_wnt/) {
  $CERNLIBS .= " " . `cernlib geant321 pawlib packlib graflib/X11 packlib mathlib kernlib `;
  chop ($CERNLIBS);
  $Libraries = $CERNLIBS ." ";
  $Libraries .=  " ". $FLIBS . " " . $CLIBS . " ";
  chop ($Libraries);
}
else {
  $CPPPATH  = "";
  $FCPPPATH = "";
  foreach my $dir ($DirPath, @Repo) {
    $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/include";
    $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/StRoot";
    $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/pams";
    $INCLUDE_PATH .= $main::PATH_SEPARATOR . $dir . "/include/tables";
  }
  my $ROOTSRC = $AFS_RHIC . "\\star\\ROOT\\" . $ROOT_LEVEL . "\\ROOT\\src";
  $INCLUDE_PATH .= $main::PATH_SEPARATOR . $ROOTSRC;
  $INCLUDE_PATH .= $main::PATH_SEPARATOR . $CERN_ROOT . "/include";
}
Link $OBJ => $DirPath; print "Link $BUILD => $DirPath\n" unless ($param::quiet);
print "CPPPATH = $CPPPATH\n";

$env = new cons(	
		'CPPPATH'      => $CPPPATH,
		'EXTRA_CXXFLAGS'     => $EXTRA_CXXFLAGS,
		'EXTRA_CFLAGS'     => $EXTRA_CFLAGS,
		'Libraries'    => $Libraries,
		'LIBPATH'      => $LIBPATH,
		'ROOTLIBS'     => $ROOTLIBS,
		'ROOTGLIBS'    => $ROOTGLIBS,
		'RINTLIBS'     => $RINTLIBS
	       );
Ignore qw(
	  include/geant321/incbeg.inc
	  include/geant231/incbeg.inc
	  include/geant321/incend.inc
	  include/math.h
	  include/descrip.h
	  include/fortran.h
	  include/not_cern
	  include/compiledata.h
	  include/src/newsos.h
	  include/src/sunos.h
	  include/src/memtest.h
	  include/TWin32HookViaThread.h
	 );
if (! $param::quiet) {
  print "STAR_SYS = \t$env->{ENV}->{STAR_SYS}\n";
  print "ROOTSYS  = \t$env->{ENV}->{ROOTSYS}\n";
  print "DEBUG    = \t$env->{DEBUG}\n";
  print "CPPFLAGS = \t$env->{CPPFLAGS}\nCPPPATH  = \t$env->{CPPPATH}\n";
  print "CC       = \t$env->{CC}    \tCFLAGS   = \t$env->{CFLAGS} \tEXTRA_CFLAGS  = \t$env->{EXTRA_CFLAGS}     \tCLIBS    =\t$env->{CLIBS}\n"; 
  print "CXX      = \t$env->{CXX}    \tCXXFLAGS = \t$env->{CXXFLAGS} \tEXTRA_CXXFLAGS = \t$env->{EXTRA_CXXFLAGS}\n";
  print "FC       = \t$env->{FC}     \tFFLAGS   = \t$env->{FFLAGS}     \tFLIBS    =\t$env->{FLIBS}\n"; 
  print "LD       = \t$env->{LD}     \tLDFLAGS  = \t$env->{LDFLAGS} \tEXTRA_LDFLAGS  = \t$env->{EXTRA_LDFLAGS}\n";
  #    \nEXEFLAGS =\t$env->{EXEFLAGS}\n";
  print "LIBPATH  = \t$env->{LIBPATH}\tLIBS     = \t$env->{LIBS}       \tLibraries=\t$env->{Libraries}\n";
  print "SO       = \t$env->{SO}     \tSOFLAGS  = \t$env->{SOFLAGS}\n";
  if ($param::debug) {foreach  my $key (sort keys %$env) {print "\$env->{",$key,"}= \t$env->{$key}\n";}}
}
my @subdirs = ();
# make Targets and install includes
foreach my $dir ("pams","StRoot","StPiD"){
  next if ! -d $dir;
  opendir (DIR, $dir) or die "Can't open $dir\n";
  my @subdirS = readdir DIR;
  closedir DIR; 
  foreach my $sub_dir (@subdirS) {
    next  if $sub_dir eq '.' || $sub_dir eq '..';
    if ($SKIP_DIRS && $SKIP_DIRS =~ $sub_dir) {
      print "skip dir: $sub_dir \t=> $SKIP_DIRS\n";
      next;
    }
    if ($#Repo == -1) {
      if ($STAR_HOST_SYS =~ /^sun4x_56/ && 
	  ($sub_dir =~ /StHbtMaker/ || $sub_dir =~ /StMiniDstMaker/
	)#   || $sub_dir =~ /StppSpin/) 
	  ) {
	 print "skip dir: $sub_dir\n";
	next;
      }
    }
    my $sub_DIR = $dir . "/" . $sub_dir; 
    if (-d $sub_DIR) {
      if ($sub_dir =~ /^macros$/     ||
	  $sub_dir =~ /^test$/)  {next;}
      if ($sub_dir =~  /\./ || $sub_dir =~ /\.\./ || $sub_dir =~ /CVS/ || 
	  $sub_dir =~ /^html$/ || $sub_dir =~ /^test$/ || $sub_dir =~ /^doc/) {next;}
      if ($sub_dir =~ /^St_base$/ ||
	  $sub_dir =~ /^Star2Root$/ ||
	  $sub_dir =~ /^StChain$/ ||
	  $sub_dir =~ /^StBFChain$/ ||
	  $sub_dir =~ /^StTableUtilities$/ ||
	  $sub_dir =~ /^StUtilities$/ ||
	  $sub_dir =~ /^StAnalysisUtilities$/ ||
	  $sub_dir =~ /^xdf2root$/ ||
	  $sub_dir =~ /^StarClassLibrary$/ ||
	  $sub_dir =~ /^StEvent$/ ||
	  $sub_dir =~ /^StEventUtilities$/ ||
	  $sub_dir =~ /^StMcEvent$/ ||
	  $sub_dir =~ /^erdeck$/
	 ) {
	opendir (DIR, $sub_DIR) or die "Can't open $sub_DIR\n";
	my @incs = readdir DIR; 
	closedir DIR; 
	my @incT = ();
	foreach my $inc (@incs) {
	  if ($inc =~ /\.h$/ || $inc =~ /\.hh$/ ||$inc =~ /\.inc$/) { 
	    push @incT, $sub_DIR ."/" . $inc;
	  }
	}
	if ($#incT > -1 && ! $param::rflag) {Install $env $INCLUDE, @incT;}
      }
      opendir (DIR, $sub_DIR) or die "Can't open $sub_DIR\n";
      my @subsubdirS = readdir DIR;
      closedir DIR;
      foreach my $subsub_dir (@subsubdirS) {
	my $subsub_DIR = $sub_DIR . "/" . $subsub_dir;
	if (-d $subsub_DIR) {
	  if ($subsub_dir =~  /\./     || $subsub_dir =~ /\.\./  || 
	      $subsub_dir =~ /CVS/     || $subsub_dir =~ /^doc/  ||
	      $subsub_dir =~ /^local/  || $subsub_dir =~ /^run/  ||
	      $subsub_dir =~ /^wrk$/   || 
	      $subsub_dir =~ /^example/|| $subsub_dir =~ /^kumac/) {next;}
	  if ($subsub_dir =~ /^inc$/ || $subsub_dir =~ /^idl$/ ) {
	    opendir (DIR, $subsub_DIR) or die "Can't open $sub_DIR\n";
	    my @incs = readdir DIR; 
	    closedir DIR; 
	    my @incT = ();
	    foreach my $inc (@incs) {
	      if ($inc =~ /\.h$/ || $inc =~ /\.hh$/ || 
		  $inc =~ /\.hpp$/ || $inc =~ /\.inc$/ ||
		  $inc =~ /\.idl$/) {
		push @incT, $subsub_DIR ."/" . $inc; #print "+++ add $inc\n";
	      }
	    }
	    if ($#incT > -1 && ! $param::rflag) {Install $env $INCLUDE, @incT;}
	    next;
	  }
	  if (($sub_dir =~ /^sim$/ || $sub_dir =~ /^gen$/ || $sub_dir =~ /Pool$/)){
	    if ($SKIP_DIRS && $SKIP_DIRS =~ $subsub_dir) {
	      print "skip dir: $subsub_dir \t=> $SKIP_DIRS\n";
	      next;
	    }
	    push @subdirs, $subsub_DIR; print "================== add $subsub_DIR\n" if ($param::debug);
	  }
	}
      }
      if ($sub_dir =~ /Pool$/) {next;} 
      push @subdirs, $sub_DIR; print "================== add $sub_DIR\n" if ($param::debug);
    }
  }
}
print "subdirs = @subdirs\n"  if $param::debug;
my @Targets = ();
foreach $dir ("asps/rexe","StDb",@subdirs) {
  if (-d $dir) {
    print "Add dir : $dir\n" if $param::debug;
    push @Targets, $OBJ . "/" . $dir . "/Conscript";
  }
}
print "BUILD  = $BUILD EXPORT =  $EXPORT OBJ = $OBJ\n" unless ($param::quiet);  
print "Targets = @Targets\n" if $param::debug;
Export qw( env INCLUDE LIB BIN EXPORT BUILD OBJ);
Default qw (   .  );
Build  @Targets;
#________________________________________________________________________________
sub script::wanted_dead {
  -l and not -e and print "bigus link: $File::Find::name \t--- remove it\n" and `rm $_`;
}
#________________________________________________________________________________
__END__;
