.rn '' }`
''' $RCSfile: cons.1,v $$Revision: 1.13 $$Date: 2001/03/08 16:29:43 $
'''
''' $Log: cons.1,v $
''' Revision 1.13  2001/03/08 16:29:43  fisyak
''' Clean up comments
'''
''' Revision 1.1.1.14  2001/03/08 16:15:05  fisyak
''' *** empty log message ***
'''
''' Revision 1.1.1.13  2001/01/24 14:38:25  fisyak
''' *** empty log message ***
'''
''' Revision 1.1.1.4  2000/06/14 22:44:42  fisyak
''' 2.0.1
'''
''' Revision 1.1.1.2  2000/03/12 18:58:48  fisyak
''' cons release 1.8-dev
'''
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH CONS 1 "2.3.0" "8/Mar/2001" "Cons - Software Construction System"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Cons \- A Software Construction System
.SH "DESCRIPTION"
A guide and reference for version 2.3.0
.PP
Copyright (c) 1996-2000 Free Software Foundation, Inc.
.PP
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
.PP
You should have received a copy of the GNU General Public License
along with this program; see the file COPYING.  If not, write to
the Free Software Foundation, Inc., 59 Temple Place \- Suite 330,
Boston, MA 02111-1307, USA.
.SH "Introduction"
\fBCons\fR is a system for constructing, primarily, software, but is quite
different from previous software construction systems. Cons was designed
from the ground up to deal easily with the construction of software spread
over multiple source directories. Cons makes it easy to create build scripts
that are simple, understandable and maintainable. Cons ensures that complex
software is easily and accurately reproducible.
.PP
Cons uses a number of techniques to accomplish all of this. Construction
scripts are just Perl scripts, making them both easy to comprehend and very
flexible. Global scoping of variables is replaced with an import/export
mechanism for sharing information between scripts, significantly improving
the readability and maintainability of each script. \fBConstruction
environments\fR are introduced: these are Perl objects that capture the
information required for controlling the build process. Multiple
environments are used when different semantics are required for generating
products in the build tree. Cons implements automatic dependency analysis
and uses this to globally sequence the entire build. Variant builds are
easily produced from a single source tree. Intelligent build subsetting is
possible, when working on localized changes. Overrides can be setup to
easily override build instructions without modifying any scripts. MD5
cryptographic \fBsignatures\fR are associated with derived files, and are used
to accurately determine whether a given file needs to be rebuilt.
.PP
While offering all of the above, and more, Cons remains simple and easy to
use. This will, hopefully, become clear as you read the remainder of this
document.
.SH "\fBWhy Cons? Why not Make?\fR"
Cons is a \fBmake\fR replacement. In the following paragraphs, we look at a few
of the undesirable characteristics of make\*(--and typical build environments
based on make\*(--that motivated the development of Cons.
.Ip "\fBBuild complexity\fR" 0
Traditional make-based systems of any size tend to become quite complex. The
original make utility and its derivatives have contributed to this tendency
in a number of ways. Make is not good at dealing with systems that are
spread over multiple directories. Various work-arounds are used to overcome
this difficulty; the usual choice is for make to invoke itself recursively
for each sub-directory of a build. This leads to complicated code, in which
it is often unclear how a variable is set, or what effect the setting of a
variable will have on the build as a whole. The make scripting language has
gradually been extended to provide more possibilities, but these have
largely served to clutter an already overextended language. Often, builds
are done in multiple passes in order to provide appropriate products from
one directory to another directory. This represents a further increase in
build complexity.
.Ip "\fBBuild reproducibility \fR" 0
The bane of all makes has always been the correct handling of
dependencies. Most often, an attempt is made to do a reasonable job of
dependencies within a single directory, but no serious attempt is made to do
the job between directories. Even when dependencies are working correctly,
make's reliance on a simple time stamp comparison to determine whether a
file is out of date with respect to its dependents is not, in general,
adequate for determining when a file should be rederived. If an external
library, for example, is rebuilt and then ``snapped'\*(R' into place, the
timestamps on its newly created files may well be earlier than the last
local build, since it was built before it became visible.
.Ip "\fBVariant builds\fR" 0
Make provides only limited facilities for handling variant builds. With the
proliferation of hardware platforms and the need for debuggable
vs. optimized code, the ability to easily create these variants is
essential. More importantly, if variants are created, it is important to
either be able to separate the variants or to be able to reproduce the
original or variant at will. With make it is very difficult to separate the
builds into multiple build directories, separate from the source. And if
this technique isn't used, it's also virtually impossible to guarantee at
any given time which variant is present in the tree, without resorting to a
complete rebuild.
.Ip "\fBRepositories\fR" 0
Make provides only limited support for building software from code that
exists in a central repository directory structure.  The \s-1VPATH\s0 feature of
\s-1GNU\s0 make (and some other make implementations) is intended to provide this,
but doesn't work as expected: it changes the path of target file to the
\s-1VPATH\s0 name too early in its analysis, and therefore searches for all
dependencies in the \s-1VPATH\s0 directory.  To ensure correct development builds,
it is important to be able to create a file in a local build directory and
have any files in a code repository (a \s-1VPATH\s0 directory, in make terms) that
depend on the local file get rebuilt properly.  This isn't possible with
\s-1VPATH\s0, without coding a lot of complex repository knowledge directly into
the makefiles.
.SH "\fBKeeping it simple\fR"
A few of the difficulties with make have been cited above. In this and
subsequent sections, we shall introduce Cons and show how these issues are
addressed.
.Sh "Perl scripts"
Cons is Perl-based. That is, Cons scripts--\fIConscript\fR and \fIConstruct\fR
files, the equivalent to \fIMakefile\fR or \fImakefile\fR--are all written in
Perl. This provides an immediate benefit: the language for writing scripts
is a familiar one. Even if you don't happen to be a Perl programmer, it
helps to know that Perl is basically just a simple declarative language,
with a well-defined flow of control, and familiar semantics. It has
variables that behave basically the way you would expect them to,
subroutines, flow of control, and so on. There is no special syntax
introduced for Cons. The use of Perl as a scripting language simplifies
the task of expressing the appropriate solution to the often complex
requirements of a build.
.Sh "Hello, World!"
To ground the following discussion, here's how you could build the \fBHello,
World!\fR C application with Cons:
.PP
.Vb 2
\&  $env = new cons();
\&  Program $env 'hello', 'hello.c';
.Ve
If you install this script in a directory, naming the script \f(CWConstruct,\fR
and create the \f(CWhello.c\fR source file in the same directory, then you can
type \f(CWcons hello\fR to build the application:
.PP
.Vb 3
\&  % cons hello
\&  cc -c hello.c -o hello.o
\&  cc -o hello hello.o
.Ve
.Ip "\fBConstruction environments\fR" 0
A key simplification of Cons is the idea of a \fBconstruction environment\fR. A
construction environment is an \fBobject\fR characterized by a set of key/value
pairs and a set of \fBmethods. \fRIn order to tell Cons how to build something,
you invoke the appropriate method via an appropriate construction
environment. Consider the following example:
.PP
.Vb 4
\&  $env = new cons(
\&        CC      =>      'gcc',
\&        LIBS    =>      'libworld.a'
\&  );
.Ve
.Vb 1
\&  Program $env 'hello', 'hello.c';
.Ve
In this case, rather than using the default construction environment, as is,
we have overridden the value of \f(CWCC\fR so that the \s-1GNU\s0 C Compiler equivalent
is used, instead. Since this version of \fBHello, World!\fR requires a library,
\f(CWlibworld.a\fR, we have specified that any program linked in this environment
should be linked with that library. If the library exists already, well and
good, but if not, then we'll also have to include the statement:
.PP
.Vb 1
\&  Library $env 'libworld', 'world.c';
.Ve
Now if you type \f(CWcons hello\fR, the library will be built before the program
is linked, and, of course, \f(CWgcc\fR will be used to compile both modules:
.PP
.Vb 7
\&  % cons hello
\&  gcc -c hello.c -o hello.o
\&  gcc -c world.c -o world.o
\&  ar r libworld.a world.o
\&  ar: creating libworld.a
\&  ranlib libworld.a
\&  gcc -o hello hello.o libworld.a
.Ve
.Ip "\fBAutomatic and complete dependency analysis\fR" 0
With Cons, dependencies are handled automatically. Continuing the previous
example, note that when we modify \f(CWworld.c\fR, \f(CWworld.o\fR is recompiled,
\f(CWlibworld.a\fR recreated, and \f(CWhello\fR relinked:
.PP
.Vb 7
\&  % touch world.c
\&  % cons hello
\&  gcc -c world.c -o world.o
\&  ar r libworld.a world.o
\&  ar: creating libworld.a
\&  ranlib libworld.a
\&  gcc -o hello hello.o libworld.a
.Ve
This is a relatively simple example: Cons ``knows'\*(R' world.o depends upon
\f(CWworld.c\fR, because the dependency is explicitly set up by the \f(CWLibrary\fR
method. It also knows that \f(CWlibworld.a\fR depends upon \f(CWworld.o\fR and that
\f(CWhello\fR depends upon \f(CWlibworld.a\fR, all for similar reasons.
.PP
Now it turns out that \f(CWhello.c\fR also includes the interface definition
file, \f(CWworld.h\fR:
.PP
.Vb 4
\&  % touch world.h
\&  % cons hello
\&  gcc -c hello.c -o hello.o
\&  gcc -o hello hello.o libworld.a
.Ve
How does Cons know that \f(CWhello.c\fR includes \f(CWworld.h\fR, and that \f(CWhello.o\fR
must therefore be recompiled? For now, suffice it to say that when
considering whether or not \f(CWhello.o\fR is up-to-date, Cons invokes a scanner
for its dependency, \f(CWhello.c\fR. This scanner enumerates the files included
by \f(CWhello.c\fR to come up with a list of further dependencies, beyond those
made explicit by the Cons script. This process is recursive: any files
included by included files will also be scanned.
.PP
Isn't this expensive? The answer is\*(--it depends. If you do a full build of a
large system, the scanning time is insignificant. If you do a rebuild of a
large system, then Cons will spend a fair amount of time thinking about it
before it decides that nothing has to be done (although not necessarily more
time than make!). The good news is that Cons makes it very easy to
intelligently subset your build, when you are working on localized changes.
.Ip "\fBAutomatic global build sequencing\fR" 0
Because Cons does full and accurate dependency analysis, and does this
globally, for the entire build, Cons is able to use this information to take
full control of the \fBsequencing\fR of the build. This sequencing is evident
in the above examples, and is equivalent to what you would expect for make,
given a full set of dependencies. With Cons, this extends trivially to
larger, multi-directory builds. As a result, all of the complexity involved
in making sure that a build is organized correctly\*(--including multi-pass
hierarchical builds\*(--is eliminated. We'll discuss this further in the next
sections.
.SH "\fBBuilding large trees\*(--still just as simple\fR"
.Ip "\fBA hierarchy of build scripts\fR" 0
A larger build, in Cons, is organized by creating a hierarchy of \fBbuild
scripts\fR. At the top of the tree is a script called \f(CWConstruct\fR. The rest
of the scripts, by convention, are each called \f(CWConscript\fR. These scripts
are connected together, very simply, by the \f(CWBuild\fR, \f(CWExport\fR, and
\f(CWImport\fR commands.
.Ip "\fBThe \fR\fBBuild\fR\fB command\fR" 0
The \f(CWBuild\fR command takes a list of \f(CWConscript\fR file names, and arranges
for them to be included in the build. For example:
.PP
.Vb 6
\&  Build qw(
\&        drivers/display/Conscript
\&        drivers/mouse/Conscript
\&        parser/Conscript
\&        utilities/Conscript
\&  );
.Ve
This is a simple two-level hierarchy of build scripts: all the subsidiary
\f(CWConscript\fR files are mentioned in the top-level \f(CWConstruct\fR file. Notice
that not all directories in the tree necessarily have build scripts
associated with them.
.PP
This could also be written as a multi-level script. For example, the
\f(CWConstruct\fR file might contain this command:
.PP
.Vb 5
\&  Build qw(
\&        parser/Conscript
\&        drivers/Conscript
\&        utilities/Conscript
\&  );
.Ve
and the \f(CWConscript\fR file in the \f(CWdrivers\fR directory might contain this:
.PP
.Vb 4
\&  Build qw(
\&        display/Conscript
\&        mouse/Conscript
\&  );
.Ve
Experience has shown that the former model is a little easier to understand,
since the whole construction tree is laid out in front of you, at the
top-level. Hybrid schemes are also possible. A separately maintained
component that needs to be incorporated into a build tree, for example,
might hook into the build tree in one place, but define its own construction
hierarchy.
.PP
By default, Cons does not change its working directory to the directory
containing a subsidiary \fIConscript\fR file it is including.  This behavior
can be enabled for a build by specifying, in the top-level \fIConstruct\fR
file:
.PP
.Vb 1
\&  Conscript_chdir 1;
.Ve
When enabled, Cons will change to the subsidiary \fIConscript\fR file's
containing directory while reading in that file, and then change back
to the top-level directory once the file has been processed.
.PP
It is expected that this behavior will become the default in some future
version of Cons.  To prepare for this transition, builds that expect
Cons to remain at the top of the build while it reads in a subsidiary
\fIConscript\fR file should explicitly disable this feature as follows:
.PP
.Vb 1
\&  Conscript_chdir 0;
.Ve
.Sh "Relative, top-relative, and absolute file names"
You may have noticed that the file names specified to the Build command are
relative to the location of the script it is invoked from. This is generally
true for other filename arguments to other commands, too, although we might
as well mention here that if you begin a file name with a hash mark, ``#'\*(R',
then that file is interpreted relative to the top-level directory (where the
Construct file resides). And, not surprisingly, if you begin it with ``/'\*(R',
then it is considered to be an absolute pathname. This is true even on
systems which use a back slash rather than a forward slash to name absolute
paths.
.Sh "Using modules in build scripts"
You may pull modules into each \fIConscript\fR file using the normal Perl
\f(CWuse\fR or \f(CWrequire\fR statements:
.PP
.Vb 2
\&  use English;
\&  require My::Module;
.Ve
Each \f(CWuse\fR or \f(CWrequire\fR only affects the one \fIConscript\fR file in which
it appears.  To use a module in multiple \fIConscript\fR files, you must
put a \f(CWuse\fR or \f(CWrequire\fR statement in each one that needs the module.
.Sh "Scope of variables"
The top-level \fIConstruct\fR file and all \fIConscript\fR files begin life in
a common, separate Perl package.  \fBCons\fR controls the symbol table for
the package so that, the symbol table for each script is empty, except
for the \fIConstruct\fR file, which gets some of the command line arguments.
All of the variables that are set or used, therefore, are set by the
script itself\*(--not by some external script.
.PP
Variables can be explicitly \fBimported\fR by a script from its parent
script. To import a variable, it must have been \fBexported\fR by the parent
and initialized (otherwise an error will occur).
.Sh "The Export command"
The \f(CWExport\fR command is used as in the following example:
.PP
.Vb 5
\&  $env = new cons();
\&  $INCLUDE = "#export/include";
\&  $LIB = "#export/lib";
\&  Export qw( env INCLUDE LIB );
\&  Build qw( util/Conscript );
.Ve
The values of the simple variables mentioned in the \f(CWExport\fR list will be
squirreled away by any subsequent \f(CWBuild\fR commands. The \f(CWExport\fR command
will only export Perl\fB scalar\fR variables, that is, variables whose name
begins with \f(CW$\fR. Other variables, objects, etc. can be exported by
reference\*(--but all scripts will refer to the same object, and this object
should be considered to be read-only by the subsidiary scripts and by the
original exporting script. It's acceptable, however, to assign a new value
to the exported scalar variable\*(--that won't change the underlying variable
referenced. This sequence, for example, is \s-1OK\s0:
.PP
.Vb 5
\&  $env = new cons();
\&  Export qw( env INCLUDE LIB );
\&  Build qw( util/Conscript );
\&  $env = new cons(CFLAGS => '-O');
\&  Build qw( other/Conscript );
.Ve
It doesn't matter whether the variable is set before or after the \f(CWExport\fR
command. The important thing is the value of the variable at the time the
\f(CWBuild\fR command is executed. This is what gets squirreled away. Any
subsequent \f(CWExport\fR commands, by the way, invalidate the first: you must
mention all the variables you wish to export on each \f(CWExport\fR command.
.Ip "\fBThe \fR\fBImport\fR\fB command\fR" 0
Variables exported by the \f(CWExport\fR command can be imported into subsidiary
scripts by the \f(CWImport\fR command. The subsidiary script always imports
variables directly from the superior script. Consider this example:
.PP
.Vb 1
\&  Import qw( env INCLUDE );
.Ve
This is only legal if the parent script exported both \f(CW$env\fR and
\f(CW$INCLUDE\fR. It also must have given each of these variables values. It is
\s-1OK\s0 for the subsidiary script to only import a subset of the exported
variables (in this example, \f(CW$LIB\fR, which was exported by the previous
example, is not imported).
.PP
All the imported variables are automatically re-exported, so the sequence:
.PP
.Vb 2
\&  Import qw ( env INCLUDE );
\&  Build qw ( beneath-me/Conscript );
.Ve
will supply both \f(CW$env\fR and \f(CW$INCLUDE\fR to the subsidiary file. If only
\f(CW$env\fR is to be exported, then the following will suffice:
.PP
.Vb 3
\&  Import qw ( env INCLUDE );
\&  Export qw ( env );
\&  Build qw ( beneath-me/Conscript );
.Ve
Needless to say, the variables may be modified locally before invoking
\f(CWBuild\fR on the subsidiary script.
.Ip "\fBBuild script evaluation order\fR" 0
The only constraint on the ordering of build scripts is that superior
scripts are evaluated before their inferior scripts. The top-level
\f(CWConstruct\fR file, for instance, is evaluated first, followed by any
inferior scripts. This is all you really need to know about the evaluation
order, since order is generally irrelevant. Consider the following \f(CWBuild\fR
command:
.PP
.Vb 6
\&  Build qw(
\&        drivers/display/Conscript
\&        drivers/mouse/Conscript
\&        parser/Conscript
\&        utilities/Conscript
\&  );
.Ve
We've chosen to put the script names in alphabetical order, simply because
that's the most convenient for maintenance purposes. Changing the order will
make no difference to the build.
.SH "\fBA Model for sharing files\fR"
.Ip "\fBSome simple conventions\fR" 0
In any complex software system, a method for sharing build products needs to
be established. We propose a simple set of conventions which are trivial to
implement with Cons, but very effective.
.PP
The basic rule is to require that all build products which need to be shared
between directories are shared via an intermediate directory. We have
typically called this \f(CWexport\fR, and, in a C environment, provided
conventional sub-directories of this directory, such as \f(CWinclude\fR, \f(CWlib\fR,
\f(CWbin\fR, etc.
.PP
These directories are defined by the top-level \f(CWConstruct\fR file. A simple
\f(CWConstruct\fR file for a \fBHello, World!\fR application, organized using
multiple directories, might look like this:
.PP
.Vb 1
\&  # Construct file for Hello, World!
.Ve
.Vb 2
\&  # Where to put all our shared products.
\&  $EXPORT = '#export';
.Ve
.Vb 1
\&  Export qw( CONS INCLUDE LIB BIN );
.Ve
.Vb 4
\&  # Standard directories for sharing products.
\&  $INCLUDE = "$EXPORT/include";
\&  $LIB = "$EXPORT/lib";
\&  $BIN = "$EXPORT/bin";
.Ve
.Vb 6
\&  # A standard construction environment.
\&  $CONS = new cons (
\&        CPPPATH => $INCLUDE,    # Include path for C Compilations
\&        LIBPATH => $LIB,        # Library path for linking programs
\&        LIBS => '-lworld',      # List of standard libraries
\&  );
.Ve
.Vb 4
\&  Build qw(
\&        hello/Conscript
\&        world/Conscript
\&  );
.Ve
The \f(CWworld\fR directory's \f(CWConscript\fR file looks like this:
.PP
.Vb 2
\&  # Conscript file for directory world
\&  Import qw( CONS INCLUDE LIB );
.Ve
.Vb 3
\&  # Install the products of this directory
\&  Install $CONS $LIB, 'libworld.a';
\&  Install $CONS $INCLUDE, 'world.h';
.Ve
.Vb 2
\&  # Internal products
\&  Library $CONS 'libworld.a', 'world.c';
.Ve
and the \f(CWhello\fR directory's \f(CWConscript\fR file looks like this:
.PP
.Vb 2
\&  # Conscript file for directory hello
\&  Import qw( CONS BIN );
.Ve
.Vb 2
\&  # Exported products
\&  Install $CONS $BIN, 'hello';
.Ve
.Vb 2
\&  # Internal products
\&  Program $CONS 'hello', 'hello.c';
.Ve
To construct a \fBHello, World!\fR program with this directory structure, go to
the top-level directory, and invoke \f(CWcons\fR with the appropriate
arguments. In the following example, we tell Cons to build the directory
\f(CWexport\fR. To build a directory, Cons recursively builds all known products
within that directory (only if they need rebuilding, of course). If any of
those products depend upon other products in other directories, then those
will be built, too.
.PP
.Vb 10
\&  % cons export
\&  Install world/world.h as export/include/world.h
\&  cc -Iexport/include -c hello/hello.c -o hello/hello.o
\&  cc -Iexport/include -c world/world.c -o world/world.o
\&  ar r world/libworld.a world/world.o
\&  ar: creating world/libworld.a
\&  ranlib world/libworld.a
\&  Install world/libworld.a as export/lib/libworld.a
\&  cc -o hello/hello hello/hello.o -Lexport/lib -lworld
\&  Install hello/hello as export/bin/hello
.Ve
.Ip "\fBClean, understandable, location-independent scripts\fR" 0
You'll note that the two \f(CWConscript\fR files are very clean and
to-the-point. They simply specify products of the directory and how to build
those products. The build instructions are minimal: they specify which
construction environment to use, the name of the product, and the name of
the inputs. Note also that the scripts are location-independent: if you wish
to reorganize your source tree, you are free to do so: you only have to
change the \f(CWConstruct\fR file (in this example), to specify the new locations
of the \f(CWConscript\fR files. The use of an export tree makes this goal easy.
.PP
Note, too, how Cons takes care of little details for you. All the \f(CWexport\fR
directories, for example, were made automatically. And the installed files
were really hard-linked into the respective export directories, to save
space and time. This attention to detail saves considerable work, and makes
it even easier to produce simple, maintainable scripts.
.SH "\fBSeparating source and build trees\fR"
It's often desirable to keep any derived files from the build completely
separate from the source files. This makes it much easier to keep track of
just what is a source file, and also makes it simpler to handle \fBvariant\fR
builds, especially if you want the variant builds to co-exist.
.Ip "\fBSeparating build and source directories using the \fR\fBLink\fR\fB command\fR" 0
Cons provides a simple mechanism that handles all of these requirements. The
\f(CWLink\fR command is invoked as in this example:
.PP
.Vb 1
\&  Link 'build' => 'src';
.Ve
The specified directories are ``linked'\*(R' to the specified source
directory. Let's suppose that you setup a source directory, \f(CWsrc\fR, with the
sub-directories \f(CWworld\fR and \f(CWhello\fR below it, as in the previous
example. You could then substitute for the original build lines the
following:
.PP
.Vb 4
\&  Build qw(
\&        build/world/Conscript
\&        build/hello/Conscript
\&  );
.Ve
Notice that you treat the \f(CWConscript\fR file as if it existed in the build
directory. Now if you type the same command as before, you will get the
following results:
.PP
.Vb 10
\&  % cons export
\&  Install build/world/world.h as export/include/world.h
\&  cc -Iexport/include -c build/hello/hello.c -o build/hello/hello.o
\&  cc -Iexport/include -c build/world/world.c -o build/world/world.o
\&  ar r build/world/libworld.a build/world/world.o
\&  ar: creating build/world/libworld.a
\&  ranlib build/world/libworld.a
\&  Install build/world/libworld.a as export/lib/libworld.a
\&  cc -o build/hello/hello build/hello/hello.o -Lexport/lib -lworld
\&  Install build/hello/hello as export/bin/hello
.Ve
Again, Cons has taken care of the details for you. In particular, you will
notice that all the builds are done using source files and object files from
the build directory. For example, \f(CWbuild/world/world.o\fR is compiled from
\f(CWbuild/world/world.c\fR, and \f(CWexport/include/world.h\fR is installed from
\f(CWbuild/world/world.h\fR. This is accomplished on most systems by the simple
expedient of ``hard'\*(R' linking the required files from each source directory
into the appropriate build directory.
.PP
The links are maintained correctly by Cons, no matter what you do to the
source directory. If you modify a source file, your editor may do this ``in
place'\*(R' or it may rename it first and create a new file. In the latter case,
any hard link will be lost. Cons will detect this condition the next time
the source file is needed, and will relink it appropriately.
.PP
You'll also notice, by the way, that \fBno\fR changes were required to the
underlying \f(CWConscript\fR files. And we can go further, as we shall see in the
next section.
.SH "\fBVariant builds\fR"
.Ip "\fBHello, World!\fR\fB for baNaNa and peAcH \s-1OS\s0's\fR" 0
Variant builds require just another simple extension. Let's take as an
example a requirement to allow builds for both the baNaNa and peAcH
operating systems. In this case, we are using a distributed file system,
such as \s-1NFS\s0 to access the particular system, and only one or the other of
the systems has to be compiled for any given invocation of \f(CWcons\fR. Here's
one way we could set up the \f(CWConstruct\fR file for our \fBHello, World!\fR
application:
.PP
.Vb 1
\&  # Construct file for Hello, World!
.Ve
.Vb 3
\&  die qq(OS must be specified) unless $OS = $ARG{OS};
\&  die qq(OS must be "peach" or "banana")
\&        if $OS ne "peach" && $OS ne "banana";
.Ve
.Vb 2
\&  # Where to put all our shared products.
\&  $EXPORT = "#export/$OS";
.Ve
.Vb 1
\&  Export qw( CONS INCLUDE LIB BIN );
.Ve
.Vb 4
\&  # Standard directories for sharing products.
\&  $INCLUDE = "$EXPORT/include";
\&  $LIB = "$EXPORT/lib";
\&  $BIN = "$EXPORT/bin";
.Ve
.Vb 6
\&  # A standard construction environment.
\&  $CONS = new cons (
\&        CPPPATH => $INCLUDE,    # Include path for C Compilations
\&        LIBPATH => $LIB,        # Library path for linking programs
\&        LIBS => '-lworld',      # List of standard libraries
\&  );
.Ve
.Vb 2
\&  # $BUILD is where we will derive everything.
\&  $BUILD = "#build/$OS";
.Ve
.Vb 2
\&  # Tell cons where the source files for $BUILD are.
\&  Link $BUILD => 'src';
.Ve
.Vb 4
\&  Build (
\&        "$BUILD/hello/Conscript",
\&        "$BUILD/world/Conscript",
\&  );
.Ve
Now if we login to a peAcH system, we can build our \fBHello, World!\fR
application for that platform:
.PP
.Vb 10
\&  % cons export OS=peach
\&  Install build/peach/world/world.h as export/peach/include/world.h
\&  cc -Iexport/peach/include -c build/peach/hello/hello.c -o build/peach/hello/hello.o
\&  cc -Iexport/peach/include -c build/peach/world/world.c -o build/peach/world/world.o
\&  ar r build/peach/world/libworld.a build/peach/world/world.o
\&  ar: creating build/peach/world/libworld.a
\&  ranlib build/peach/world/libworld.a
\&  Install build/peach/world/libworld.a as export/peach/lib/libworld.a
\&  cc -o build/peach/hello/hello build/peach/hello/hello.o -Lexport/peach/lib -lworld
\&  Install build/peach/hello/hello as export/peach/bin/hello
.Ve
.Ip "\fBVariations on a theme\fR" 0
Other variations of this model are possible. For example, you might decide
that you want to separate out your include files into platform dependent and
platform independent files. In this case, you'd have to define an
alternative to \f(CW$INCLUDE\fR for platform-dependent files. Most \f(CWConscript\fR
files, generating purely platform-independent include files, would not have
to change.
.PP
You might also want to be able to compile your whole system with debugging
or profiling, for example, enabled. You could do this with appropriate
command line options, such as \f(CWDEBUG=on\fR. This would then be translated
into the appropriate platform-specific requirements to enable debugging
(this might include turning off optimization, for example). You could
optionally vary the name space for these different types of systems, but, as
we'll see in the next section, it's not \fBessential\fR to do this, since Cons
is pretty smart about rebuilding things when you change options.
.SH "\fBSignatures\fR"
.Ip "\fB\s-1MD5\s0 cryptographic signatures\fR" 0
Whenever Cons creates a derived file, it stores a \fBsignature\fR for that
file. The signature is stored in a separate file, one per directory. After
the previous example was compiled, the \f(CW.consign\fR file in the
\f(CWbuild/peach/world\fR directory looked like this:
.PP
.Vb 2
\&  world.o:834179303 23844c0b102ecdc0b4548d1cd1cbd8c6
\&  libworld.a:834179304 9bf6587fa06ec49d864811a105222c00
.Ve
The first number is a timestamp\*(--for a \s-1UNIX\s0 systems, this is typically the
number of seconds since January 1st, 1970. The second value is an \s-1MD5\s0
checksum. The \fBMessage Digest Algorithm\fR is an algorithm that, given an
input string, computes a strong cryptographic signature for that string. The
\s-1MD5\s0 checksum stored in the \f(CW.consign\fR file is, in effect, a digest of all
the dependency information for the specified file. So, for example, for the
file \f(CWworld.o\fR, this includes at least the file \f(CWworld.c\fR, and also any
header files that Cons knows about that are included, directly or indirectly
by \f(CWworld.c\fR. Not only that, but the actual command line that was used to
generate \f(CWworld.o\fR is also fed into the computation of the
signature. Similarly, \f(CWlibworld.a\fR gets a signature which ``includes'\*(R' all
the signatures of its constituents (and hence, transitively, the signatures
of \fBtheir\fR constituents), as well as the command line that created the
file.
.PP
The signature of a non-derived file is computed, by default, by taking the
current modification time of the file and the file's entry name (unless
there happens to be a current \f(CW.consign\fR entry for that file, in which case
that signature is used).
.PP
Notice that there is no need for a derived file to depend upon any
particular \f(CWConstruct\fR or \f(CWConscript\fR file\*(--if changes to these files
affect the file in question, then this will be automatically reflected in
its signature, since relevant parts of the command line are included in the
signature. Unrelated changes will have no effect.
.PP
When Cons considers whether to derive a particular file, then, it first
computes the expected signature of the file. It then compares the file's
last modification time with the time recorded in the \f(CW.consign\fR entry, if
one exists. If these times match, then the signature stored in the
\&\f(CW.consign\fR file is considered to be accurate. If the file's previous
signature does not match the new, expected signature, then the file must be
rederived.
.PP
Notice that a file will be rederived whenever anything about a dependent
file changes. In particular, notice that \fBany\fR change to the modification
time of a dependent (forward or backwards in time) will force recompilation
of the derived file.
.PP
The use of these signatures is an extremely simple, efficient, and effective
method of improving\*(--dramatically\*(--the reproducibility of a system.
.PP
We'll demonstrate this with a simple example:
.PP
.Vb 4
\&  # Simple "Hello, World!" Construct file
\&  $CFLAGS = '-g' if $ARG{DEBUG} eq 'on';
\&  $CONS = new cons(CFLAGS => $CFLAGS);
\&  Program $CONS 'hello', 'hello.c';
.Ve
Notice how Cons recompiles at the appropriate times:
.PP
.Vb 13
\&  % cons hello
\&  cc -c hello.c -o hello.o
\&  cc -o hello hello.o
\&  % cons hello
\&  cons: "hello" is up-to-date.
\&  % cons DEBUG=on hello
\&  cc -g -c hello.c -o hello.o
\&  cc -o hello hello.o
\&  % cons DEBUG=on hello
\&  cons: "hello" is up-to-date.
\&  % cons hello
\&  cc -c hello.c -o hello.o
\&  cc -o hello hello.o
.Ve
.SH "\fBCode Repositories\fR"
Many software development organizations will have one or more central
repository directory trees containing the current source code for one or
more projects, as well as the derived object files, libraries, and
executables.  In order to reduce unnecessary recompilation, it is useful to
use files from the repository to build development software\*(--assuming, of
course, that no newer dependency file exists in the local build tree.
.Ip "\fBRepository\fR" 0
Cons provides a mechanism to specify a list of code repositories that will
be searched, in-order, for source files and derived files not found in the
local build directory tree.
.PP
The following lines in a \f(CWConstruct\fR file will instruct Cons to look first
under the \f(CW/usr/experiment/repository\fR directory and then under the
\f(CW/usr/product/repository\fR directory:
.PP
.Vb 4
\&  Repository qw (
\&        /usr/experiment/repository
\&        /usr/product/repository
\&  );
.Ve
The repository directories specified may contain source files, derived files
(objects, libraries and executables), or both.  If there is no local file
(source or derived) under the directory in which Cons is executed, then the
first copy of a same-named file found under a repository directory will be
used to build any local derived files.
.PP
Cons maintains one global list of repositories directories.  Cons will
eliminate the current directory, and any non-existent directories, from the
list.
.Ip "\fBFinding the Construct file in a Repository\fR" 0
Cons will also search for \f(CWConstruct\fR and \f(CWConscript\fR files in the
repository tree or trees.  This leads to a chicken-and-egg situation,
though: how do you look in a repository tree for a \f(CWConstruct\fR file if the
\f(CWConstruct\fR file tells you where the repository is?  To get around this,
repositories may be specified via \f(CW-R\fR options on the command line:
.PP
.Vb 1
\&  % cons -R /usr/experiment/repository -R /usr/product/repository .
.Ve
Any repository directories specified in the \f(CWConstruct\fR or \f(CWConscript\fR
files will be appended to the repository directories specified by
command-line \f(CW-R\fR options.
.Ip "\fBRepository source files\fR" 0
If the source code (include the \f(CWConscript\fR file) for the library version
of the \fIHello, World!\fR C application is in a repository (with no derived
files), Cons will use the repository source files to create the local object
files and executable file:
.PP
.Vb 7
\&  % cons -R /usr/src_only/repository hello
\&  gcc -c /usr/src_only/repository/hello.c -o hello.o
\&  gcc -c /usr/src_only/repository/world.c -o world.o
\&  ar r libworld.a world.o
\&  ar: creating libworld.a
\&  ranlib libworld.a
\&  gcc -o hello hello.o libworld.a
.Ve
Creating a local source file will cause Cons to rebuild the appropriate
derived file or files:
.PP
.Vb 7
\&  % touch world.c
\&  % cons -R /usr/src_only/repository hello
\&  gcc -c world.c -o world.o
\&  ar r libworld.a world.o
\&  ar: creating libworld.a
\&  ranlib libworld.a
\&  gcc -o hello hello.o libworld.a
.Ve
And removing the local source file will cause Cons to revert back to
building the derived files from the repository source:
.PP
.Vb 7
\&  % rm world.c
\&  % cons -R /usr/src_only/repository hello
\&  gcc -c /usr/src_only/repository/world.c -o world.o
\&  ar r libworld.a world.o
\&  ar: creating libworld.a
\&  ranlib libworld.a
\&  gcc -o hello hello.o libworld.a
.Ve
.Ip "\fBRepository derived files\fR" 0
If a repository tree contains derived files (usually object files,
libraries, or executables), Cons will perform its normal signature
calculation to decide whether the repository file is up-to-date or a derived
file must be built locally.  This means that, in order to ensure correct
signature calculation, a repository tree must also contain the \f(CW.consign\fR
files that were created by Cons when generating the derived files.
.PP
This would usually be accomplished by building the software in the
repository (or, alternatively, in a build directory, and then copying the
result to the repository):
.PP
.Vb 8
\&  % cd /usr/all/repository
\&  % cons hello
\&  gcc -c hello.c -o hello.o
\&  gcc -c world.c -o world.o
\&  ar r libworld.a world.o
\&  ar: creating libworld.a
\&  ranlib libworld.a
\&  gcc -o hello hello.o libworld.a
.Ve
(This is safe even if the \f(CWConstruct\fR file lists the \f(CW/usr/all/repository\fR
directory in a \f(CWRepository\fR command because Cons will remove the current
directory from the repository list.)
.PP
Now if we want to build a copy of the application with our own \f(CWhello.c\fR
file, we only need to create the one necessary source file, and use the
\f(CW-R\fR option to have Cons use other files from the repository:
.PP
.Vb 6
\&  % mkdir $HOME/build1
\&  % cd $HOME/build1
\&  % touch hello.c
\&  % cons -R /usr/all/repository hello
\&  gcc -c hello.c -o hello.o
\&  gcc -o hello hello.o /usr/all/repository/libworld.a
.Ve
Notice that Cons has not bothered to recreate a local \f(CWlibworld.a\fR library
(or recompile the \f(CWworld.o\fR module), but instead uses the already-compiled
version from the repository.
.PP
Because the \s-1MD5\s0 signatures that Cons puts in the \f(CW.consign\fR file contain
timestamps for the derived files, the signature timestamps must match the
file timestamps for a signature to be considered valid.
.PP
Some software systems may alter the timestamps on repository files (by
copying them, e.g.), in which case Cons will, by default, assume the
repository signatures are invalid and rebuild files unnecessarily.  This
behavior may be altered by specifying:
.PP
.Vb 1
\&  Repository_Sig_Times_OK 0;
.Ve
This tells Cons to ignore timestamps when deciding whether a signature is
valid.  (Note that avoiding this sanity check means there must be proper
control over the repository tree to ensure that the derived files cannot be
modified without updating the \f(CW.consign\fR signature.)
.Ip "\fBLocal copies of files\fR" 0
If the repository tree contains the complete results of a build, and we try
to build from the repository without any files in our local tree, something
moderately surprising happens:
.PP
.Vb 4
\&  % mkdir $HOME/build2
\&  % cd $HOME/build2
\&  % cons -R /usr/all/repository hello
\&  cons: "hello" is up-to-date.
.Ve
Why does Cons say that the \f(CWhello\fR program is up-to-date when there is no
\f(CWhello\fR program in the local build directory?  Because the repository (not
the local directory) contains the up-to-date \f(CWhello\fR program, and Cons
correctly determines that nothing needs to be done to rebuild this
up-to-date copy of the file.
.PP
There are, however, many times in which it is appropriate to ensure that a
local copy of a file always exists.  A packaging or testing script, for
example, may assume that certain generated files exist locally Instead of
making these subsidiary scripts aware of the repository directory, the
\f(CWLocal\fR command may be added to a \f(CWConstruct\fR or \f(CWConscript\fR file to
specify that a certain file or files must appear in the local build
directory:
.PP
.Vb 3
\&  Local qw(
\&        hello
\&  );
.Ve
Then, if we re-run the same command, Cons will make a local copy of the
program from the repository copy (telling you that it is doing so):
.PP
.Vb 3
\&  % cons -R /usr/all/repository hello
\&  Local copy of hello from /usr/all/repository/hello
\&  cons: "hello" is up-to-date.
.Ve
Notice that, because the act of making the local copy is not considered a
\*(L"build\*(R" of the \f(CWhello\fR file, Cons still reports that it is up-to-date.
.PP
Creating local copies is most useful for files that are being installed into
an intermediate directory (for sharing with other directories) via the
\f(CWInstall\fR command.  Accompanying the \f(CWInstall\fR command for a file with a
companion \f(CWLocal\fR command is so common that Cons provides a
\f(CWInstall_Local\fR command as a convenient way to do both:
.PP
.Vb 1
\&  Install_Local $env, '#export', 'hello';
.Ve
is exactly equivalent to:
.PP
.Vb 2
\&  Install $env '#export', 'hello';
\&  Local '#export/hello';
.Ve
Both the \f(CWLocal\fR and \f(CWInstall_Local\fR commands update the local \f(CW.consign\fR
file with the appropriate file signatures, so that future builds are
performed correctly.
.Ip "\fBRepository dependency analysis\fR" 0
Due to its built-in scanning, Cons will search the specified repository
trees for included \f(CW.h\fR files.  Unless the compiler also knows about the
repository trees, though, it will be unable to find \f(CW.h\fR files that only
exist in a repository.  If, for example, the \f(CWhello.c\fR file includes the
\f(CWhello.h\fR file in its current directory:
.PP
.Vb 3
\&  % cons -R /usr/all/repository hello
\&  gcc -c /usr/all/repository/hello.c -o hello.o
\&  /usr/all/repository/hello.c:1: hello.h: No such file or directory
.Ve
Solving this problem forces some requirements onto the way construction
environments are defined and onto the way the C \f(CW#include\fR preprocessor
directive is used to include files.
.PP
In order to inform the compiler about the repository trees, Cons will add
appropriate \f(CW-I\fR flags to the compilation commands.  This means that the
\f(CWCPPPATH\fR variable in the construct environment must explicitly specify all
subdirectories which are to be searched for included files, including the
current directory.  Consequently, we can fix the above example by changing
the environment creation in the \f(CWConstruct\fR file as follows:
.PP
.Vb 5
\&  $env = new cons(
\&        CC      => 'gcc',
\&        CPPPATH => '.',
\&        LIBS    => 'libworld.a',
\&  );
.Ve
Due to the definition of the \f(CWCPPPATH\fR variable, this yields, when we
re-execute the command:
.PP
.Vb 3
\&  % cons -R /usr/all/repository hello
\&  gcc -c -I. -I/usr/all/repository /usr/all/repository/hello.c -o hello.o
\&  gcc -o hello hello.o /usr/all/repository/libworld.a
.Ve
The order of the \f(CW-I\fR flags replicates, for the C preprocessor, the same
repository-directory search path that Cons uses for its own dependency
analysis.  If there are multiple repositories and multiple \f(CWCPPPATH\fR
directories, Cons will append the repository directories to the beginning of
each \f(CWCPPPATH\fR directory, rapidly multiplying the number of \f(CW-I\fR flags.
As an extreme example, a \f(CWConstruct\fR file containing:
.PP
.Vb 4
\&  Repository qw(
\&        /u1
\&        /u2
\&  );
.Ve
.Vb 3
\&  $env = new cons(
\&        CPPPATH => 'a:b:c',
\&  );
.Ve
Would yield a compilation command of:
.PP
.Vb 1
\&        cc -Ia -I/u1/a -I/u2/a -Ib -I/u1/b -I/u2/b -Ic -I/u1/c -I/u2/c -c hello.c -o hello.o
.Ve
In order to shorten the command lines as much as possible, Cons will
remove \f(CW-I\fR flags for any directories, locally or in the repositories,
which do not actually exist.  (Note that the \f(CW-I\fR flags are not included
in the \s-1MD5\s0 signature calculation for the target file, so the target will
not be recompiled if the compilation command changes due to a directory
coming into existence.)
.PP
Because Cons relies on the compiler's \f(CW-I\fR flags to communicate the
order in which repository directories must be searched, Cons\*(R' handling
of repository directories is fundamentally incompatible with using
double-quotes on the \f(CW#include\fR directives in any C source code that
you plan to modify:
.PP
.Vb 1
\&  #include "file.h"     /* DON'T USE DOUBLE-QUOTES LIKE THIS */
.Ve
This is because most C preprocessors, when faced with such a directive, will
always first search the directory containing the source file.  This
undermines the elaborate \f(CW-I\fR options that Cons constructs to make the
preprocessor conform to its preferred search path.
.PP
Consequently, when using repository trees in Cons, \fBalways\fR use
angle-brackets for included files in any C source (.c or .h) files that
you plan to modify locally:
.PP
.Vb 1
\&  #include <file.h>     /* USE ANGLE-BRACKETS INSTEAD */
.Ve
Code that will not change can still safely use double quotes on #include
lines.
.Sh "Repository_List"
Cons provides a \f(CWRepository_List\fR command to return a list of all
repository directories in their current search order.  This can be used for
debugging, or to do more complex Perl stuff:
.PP
.Vb 2
\&  @list = Repository_List;
\&  print join(' ', @list), "\en";
.Ve
.Ip "\fBRepository interaction with other Cons features\fR" 0
Cons\*(R' handling of repository trees interacts correctly with other Cons
features\*(--which is to say, it generally does what you would expect.
.PP
Most notably, repository trees interact correctly, and rather powerfully,
with the \*(L'Link\*(R' command.  A repository tree may contain one or more
subdirectories for version builds established via \f(CWLink\fR to a source
subdirectory.  Cons will search for derived files in the appropriate build
subdirectories under the repository tree.
.SH "\fBDefault targets\fR"
Until now, we've demonstrated invoking Cons with an explicit target
to build:
.PP
.Vb 1
\&  % cons hello
.Ve
Normally, Cons does not build anything unless a target is specified,
but specifying \*(L'.\*(R' (the current directory) will build everything:
.PP
.Vb 1
\&  % cons                # does not build anything
.Ve
.Vb 1
\&  % cons .              # builds everything under the top-level directory
.Ve
Adding the \f(CWDefault\fR method to any Construct or Conscript file will add
the specified targets to a list of default targets.  Cons will build
these defaults if there are no targets specified on the command line.
So adding the following line to the top-level Construct file will mimic
Make's typical behavior of building everything by default:
.PP
.Vb 1
\&  Default '.';
.Ve
The following would add the \f(CWhello\fR and \f(CWgoodbye\fR commands (in the
same directory as the Construct or Conscript file) to the default list:
.PP
.Vb 4
\&  Default qw(
\&        hello
\&        goodbye
\&  );
.Ve
The \f(CWdefault\fR method may be used more than once to add targets to the
default list.
.SH "\fBSelective builds\fR"
Cons provides two methods for reducing the size of given build. The first is
by specifying targets on the command line, and the second is a method for
pruning the build tree. We'll consider target specification first.
.Ip "\fBSelective targeting\fR" 0
Like make, Cons allows the specification of ``targets'\*(R' on the command
line. Cons targets may be either files or directories. When a directory is
specified, this is simply a short-hand notation for every derivable
product\*(--that Cons knows about\*(--in the specified directory and below. For
example:
.PP
.Vb 1
\&  cons build/hello/hello.o
.Ve
means build\f(CWhello.o\fR and everything that \f(CWhello.o\fR might need. This is
from a previous version of the \fBHello, World!\fR program in which \f(CWhello.o\fR
depended upon \f(CWexport/include/world.h\fR. If that file is not up-to-date
(because someone modified \f(CWsrc/world/world.h)\fR, then it will be rebuilt,
even though it is in a directory remote from \f(CWbuild/hello\fR.
.PP
In this example:
.PP
.Vb 1
\&  cons build
.Ve
Everything in the \f(CWbuild\fR directory is built, if necessary. Again, this may
cause more files to be built. In particular, both \f(CWexport/include/world.h\fR
and \f(CWexport/lib/libworld.a\fR are required by the \f(CWbuild/hello\fR directory,
and so they will be built if they are out-of-date.
.PP
If we do, instead:
.PP
.Vb 1
\&  cons export
.Ve
then only the files that should be installed in the export directory will be
rebuilt, if necessary, and then installed there. Note that \f(CWcons build\fR
might build files that \f(CWcons export\fR doesn't build, and \fBvice-versa\fR.
.Ip "\fBNo ``special'\*(T' targets\fR" 0
With Cons, make-style ``special'\*(R' targets are not required. The simplest
analog with Cons is to use special \f(CWexport\fR directories, instead. Let's
suppose, for example, that you have a whole series of unit tests that are
associated with your code. The tests live in the source directory near the
code. Normally, however, you don't want to build these tests. One solution
is to provide all the build instructions for creating the tests, and then to
install the tests into a separate part of the tree. If we install the tests
in a top-level directory called \f(CWtests\fR, then:
.PP
.Vb 1
\&  cons tests
.Ve
will build all the tests.
.PP
.Vb 1
\&  cons export
.Ve
will build the production version of the system (but not the tests), and:
.PP
.Vb 1
\&  cons build
.Ve
should probably be avoided (since it will compile tests unecessarily).
.PP
If you want to build just a single test, then you could explicitly name the
test (in either the \f(CWtests\fR directory or the \f(CWbuild\fR directory). You could
also aggregate the tests into a convenient hierarchy within the tests
directory. This hierarchy need not necessarily match the source hierarchy,
in much the same manner that the include hierarchy probably doesn't match
the source hierarchy (the include hierarchy is unlikely to be more than two
levels deep, for C programs).
.PP
If you want to build absolutely everything in the tree (subject to whatever
options you select), you can use:
.PP
.Vb 1
\&  cons .
.Ve
This is not particularly efficient, since it will redundantly walk all the
trees, including the source tree. The source tree, of course, may have
buildable objects in it\*(--nothing stops you from doing this, even if you
normally build in a separate build tree.
.SH "\fBBuild Pruning\fR"
In conjunction with target selection, \fBbuild pruning\fR can be used to reduce
the scope of the build. In the previous peAcH and baNaNa example, we have
already seen how script-driven build pruning can be used to make only half
of the potential build available for any given invocation of \f(CWcons\fR. Cons
also provides, as a convenience, a command line convention that allows you
to specify which \f(CWConscript\fR files actually get ``built'\*(R'--that is,
incorporated into the build tree. For example:
.PP
.Vb 1
\&  cons build +world
.Ve
The \f(CW+\fR argument introduces a Perl regular expression. This must, of
course, be quoted at the shell level if there are any shell meta-characters
within the expression. The expression is matched against each \f(CWConscript\fR
file which has been mentioned in a \f(CWBuild\fR statement, and only those
scripts with matching names are actually incorporated into the build
tree. Multiple such arguments are allowed, in which case a match against any
of them is sufficient to cause a script to be included.
.PP
In the example, above, the \f(CWhello\fR program will not be built, since Cons
will have no knowledge of the script \f(CWhello/Conscript\fR. The \f(CWlibworld.a\fR
archive will be built, however, if need be.
.PP
There are a couple of uses for build pruning via the command line. Perhaps
the most useful is the ability to make local changes, and then, with
sufficient knowledge of the consequences of those changes, restrict the size
of the build tree in order to speed up the rebuild time. A second use for
build pruning is to actively prevent the recompilation of certain files that
you know will recompile due to, for example, a modified header file. You may
know that either the changes to the header file are immaterial, or that the
changes may be safely ignored for most of the tree, for testing
purposes.With Cons, the view is that it is pragmatic to admit this type of
behavior, with the understanding that on the next full build everything that
needs to be rebuilt will be. There is no equivalent to a ``make touch'\*(R'
command, to mark files as permanently up-to-date. So any risk that is
incurred by build pruning is mitigated. For release quality work, obviously,
we recommend that you do not use build pruning (it's perfectly OK to use
during integration, however, for checking compilation, etc. Just be sure to
do an unconstrained build before committing the integration).
.SH "\fBBacking builds\fR"
T.B.S.
.SH "\fBTemporary overrides\fR"
Cons provides a very simple mechanism for overriding aspects of a build. The
essence is that you write an override file containing one or more
\f(CWOverride\fR commands, and you specify this on the command line, when you run
\f(CWcons\fR:
.PP
.Vb 1
\&  cons -o over export
.Ve
will build the \f(CWexport\fR directory, with all derived files subject to the
overrides present in the file \f(CWover\fR. If you leave out the \f(CW-o\fR option,
then everything necessary to remove all overrides will be rebuilt.
.Ip "\fBOverriding environment variables\fR" 0
The override file can contain two types of overrides. The first is incoming
environment variables. These are normally accessible by the \f(CWConstruct\fR
file from the \f(CW%ENV\fR hash variable. These can trivially be overridden in
the override file by setting the appropriate elements of \f(CW%ENV\fR (these
could also be overridden in the user's environment, of course).
.Ip "\fBThe\fR\fB Override\fR\fB command\fR" 0
The second type of override is accomplished with the \f(CWOverride\fR command,
which looks like this:
.PP
.Vb 1
\&  Override <regexp>, <var1> => <value1>, <var2> => <value2>, ...;
.Ve
The regular expression \fIregexp\fR is matched against every derived file that
is a candidate for the build. If the derived file matches, then the
variable/value pairs are used to override the values in the construction
environment associated with the derived file.
.PP
Let's suppose that we have a construction environment like this:
.PP
.Vb 5
\&  $CONS = new cons(
\&        COPT => '',
\&        CDBG => '-g',
\&        CFLAGS => '%COPT %CDBG',
\&  );
.Ve
Then if we have an override file \f(CWover\fR containing this command:
.PP
.Vb 1
\&  Override '\e.o$', COPT => '-O', CDBG => '';
.Ve
then any \f(CWcons\fR invocation with \f(CW-o over\fR that creates \f(CW.o\fR files via
this environment will cause them to be compiled with \f(CW-O \fRand no \f(CW-g\fR. The
override could, of course, be restricted to a single directory by the
appropriate selection of a regular expression.
.PP
Here's the original version of the Hello, World! program, built with this
environment. Note that Cons rebuilds the appropriate pieces when the
override is applied or removed:
.PP
.Vb 11
\&  % cons hello
\&  cc -g -c hello.c -o hello.o
\&  cc -o hello hello.o
\&  % cons -o over hello
\&  cc -O -c hello.c -o hello.o
\&  cc -o hello hello.o
\&  % cons -o over hello
\&  cons: "hello" is up-to-date.
\&  % cons hello
\&  cc -g -c hello.c -o hello.o
\&  cc -o hello hello.o
.Ve
It's important that the \f(CWOverride\fR command only be used for temporary,
on-the-fly overrides necessary for development because the overrides are not
platform independent and because they rely too much on intimate knowledge of
the workings of the scripts. For temporary use, however, they are exactly
what you want.
.PP
Note that it is still useful to provide, say, the ability to create a fully
optimized version of a system for production use\*(--from the \f(CWConstruct\fR and
\f(CWConscript\fR files. This way you can tailor the optimized system to the
platform. Where optimizer trade-offs need to be made (particular files may
not be compiled with full optimization, for example), then these can be
recorded for posterity (and reproducibility) directly in the scripts.
.SH "\fBMore on construction environments:Default construction variables\fR"
We have mentioned, and used, the concept of a \fBconstruction environment\fR,
many times in the preceding pages. Now it's time to make this a little more
concrete. With the following statement:
.PP
.Vb 1
\&  $env = new cons();
.Ve
.Ip "\fBDefault construction variables\fR" 0
a reference to a new, default construction environment is created. This
contains a number of construction variables and some methods. At the present
writing, the default list of construction variables is defined as follows:
.PP
.Vb 23
\&  CC            => 'cc',
\&  CFLAGS        => '',
\&  CCCOM         => '%CC %CFLAGS %_IFLAGS -c %< -o %>',
\&  CXX           => '%CC',
\&  CXXFLAGS      => '%CFLAGS',
\&  CXXCOM        => '%CXX %CXXFLAGS %_IFLAGS -c %< -o %>',
\&  LINK          => '%CXX',
\&  LINKCOM       => '%LINK %LDFLAGS -o %> %< %_LDIRS %LIBS',
\&  LINKMODULECOM => '%LD -r -o %> %<',
\&  AR            => 'ar',
\&  ARFLAGS       => 'r',
\&  ARCOM         => "%AR %ARFLAGS %> %<\en%RANLIB %>",
\&  RANLIB        => 'ranlib',
\&  AS            => 'as',
\&  ASFLAGS       => '',
\&  ASCOM         => '%AS %ASFLAGS %< -o %>',
\&  LD            => 'ld',
\&  LDFLAGS       => '',
\&  PREFLIB       => 'lib',
\&  SUFLIB        => '.a',
\&  SUFLIBS       => '.so:.a',
\&  SUFOBJ        => '.o',
\&  ENV           => { 'PATH' => '/bin:/usr/bin' },
.Ve
On Win32 systems (Windows \s-1NT\s0), the following construction variables
are overridden in the default:
.PP
.Vb 20
\&  CC            => 'cl',
\&  CFLAGS        => '/nologo',
\&  CCCOM         => '%CC %CFLAGS %_IFLAGS /c %< /Fo%>',
\&  CXXCOM        => '%CXX %CXXFLAGS %_IFLAGS /c %< /Fo%>',
\&  INCDIRPREFIX  => '/I',
\&  LINK          => 'link',
\&  LINKCOM       => '%LINK %LDFLAGS /out:%> %< %_LDIRS %LIBS',
\&  LINKMODULECOM => '%LD /r /o %> %<',
\&  AR            => 'lib',
\&  ARFLAGS       => '/nologo ',
\&  ARCOM         => "%AR %ARFLAGS /out:%> %<",
\&  RANLIB        => '',
\&  LD            => 'link',
\&  LDFLAGS       => '/nologo ',
\&  PREFLIB       => '',
\&  SUFEXE        => '.exe',
\&  SUFLIB        => '.lib',
\&  SUFLIBS       => '.dll:.lib',
\&  SUFOBJ        => '.obj',
.Ve
These variables are used by the various methods associated with the
environment, in particular any method that ultimately invokes an external
command will substitute these variables into the final command, as
appropriate. For example, the \f(CWObjects\fR method takes a number of source
files and arranges to derive, if necessary, the corresponding object
files. For example:
.PP
.Vb 1
\&  Objects $env 'foo.c', 'bar.c';
.Ve
This will arrange to produce, if necessary, \fIfoo.o\fR and \fIbar.o\fR. The
command invoked is simply \f(CW%CCCOM\fR, which expands through substitution, to
the appropriate external command required to build each object. We will
explore the substitution rules further under the \f(CWCommand\fR method, below.
.PP
The construction variables are also used for other purposes. For example,
\f(CWCPPPATH\fR is used to specify a colon-separated path of include
directories. These are intended to be passed to the C preprocessor and are
also used by the C\-file scanning machinery to determine the dependencies
involved in a C Compilation. Variables beginning with underscore, are
created by various methods, and should normally be considered ``internal'\*(R'
variables. For example, when a method is called which calls for the creation
of an object from a C source, the variable \f(CW_IFLAGS\fR is created: this
corresponds to the \f(CW-I\fR switches required by the C compiler to represent
the directories specified by \f(CWCPPPATH\fR.
.PP
Note that, for any particular environment, the value of a variable is set
once, and then never reset (to change a variable, you must create a new
environment. Methods are provided for copying existing environments for this
purpose). Some internal variables, such as \f(CW_IFLAGS\fR are created on demand,
but once set, they remain fixed for the life of the environment.
.PP
Another variable, \f(CWENV\fR, is used to determine the system environment during
the execution of an external command. By default, the only environment
variable that is set is \f(CWPATH\fR, which is the execution path for a \s-1UNIX\s0
command. For the utmost reproducibility, you should really arrange to set
your own execution path, in your top-level \f(CWConstruct\fR file (or perhaps by
importing an appropriate construction package with the Perl \f(CWuse\fR
command). The default variables are intended to get you off the ground.
.Sh "Interpolating construction variables"
Construction environment variables may be interpolated in the source and
target file names by prefixing the construction variable name with \f(CW%\fR.
.PP
.Vb 5
\&  $env = new cons(
\&        DESTDIR =>      'programs',
\&        SRCDIR  =>      'src',
\&  );
\&  Program $env '%DESTDIR/hello', '%SRCDIR/hello.c';
.Ve
Expansion of construction variables is recursive\*(--that is, the file
\fIname\fR\|(s) will be re-expanded until no more substitutions can be made. If
a construction variable is not defined in the environment, then the null
string will be substituted.
.SH "Default construction methods"
The list of default construction methods includes the following:
.Ip "\fBThe \fR\fBnew\fR\fB constructor\fR" 0
The \f(CWnew\fR method is a Perl object constructor. That is, it is not invoked
via a reference to an existing construction environment \fBreference\fR, but,
rather statically, using the name of the Perl \fBpackage\fR where the
constructor is defined. The method is invoked like this:
.PP
.Vb 1
\&  $env = new cons(<overrides>);
.Ve
The environment you get back is blessed into the package \f(CWcons\fR, which
means that it will have associated with it the default methods described
below. Individual construction variables can be overridden by providing
name/value pairs in an override list. Note that to override any command
environment variable (i.e. anything under \f(CWENV\fR), you will have to override
all of them. You can get around this difficulty by using the \f(CWcopy\fR method
on an existing construction environment.
.Ip "\fBThe \fR\fBclone\fR\fB method\fR" 0
The \f(CWclone\fR method creates a clone of an existing construction environment,
and can be called as in the following example:
.PP
.Vb 1
\&  $env2 = $env1->clone(<overrides>);
.Ve
You can provide overrides in the usual manner to create a different
environment from the original. If you just want a new name for the same
environment (which may be helpful when exporting environments to existing
components), you can just use simple assignment.
.Ip "\fBThe \fR\fBcopy\fR\fB method\fR" 0
The \f(CWcopy\fR method extracts the externally defined construction variables
from an environment and returns them as a list of name/value
pairs. Overrides can also be provided, in which case, the overridden values
will be returned, as appropriate. The returned list can be assigned to a
hash, as shown in the prototype, below, but it can also be manipulated in
other ways:
.PP
.Vb 1
\&  %env = $env1->copy(<overrides>);
.Ve
The value of \f(CWENV\fR, which is itself a hash, is also copied to a new hash,
so this may be changed without fear of affecting the original
environment. So, for example, if you really want to override just the
\f(CWPATH\fR variable in the default environment, you could do the following:
.PP
.Vb 3
\&  %cons = new cons()->copy();
\&  $cons{ENV}{PATH} = "<your path here>";
\&  $cons = new cons(%cons);
.Ve
This will leave anything else that might be in the default execution
environment undisturbed.
.Ip "\fBThe \fR\fBInstall\fR\fB method\fR" 0
The \f(CWInstall\fR method arranges for the specified files to be installed in
the specified directory. The installation is optimized: the file is not
copied if it can be linked. If this is not the desired behavior, you will
need to use a different method to install the file. It is called as follows:
.PP
.Vb 1
\&  Install $env <directory>, <names>;
.Ve
Note that, while the files to be installed may be arbitrarily named, only
the last component of each name is used for the installed target name. So,
for example, if you arrange to install \f(CWfoo/bar\fR in \f(CWbaz\fR, this will
create a file \f(CWbar\fR in directory \f(CWbaz\fR (not \f(CWfoo/bar\fR).
.Ip "\fBThe \fR\fBInstallAs\fR\fB method\fR" 0
The \f(CWInstallAs\fR method arranges for the specified source \fIfile\fR\|(s) to be
installed as the specified target \fIfile\fR\|(s). Multiple files should be
specified as a file list. The installation is optimized: the file is not
copied if it can be linked. If this is not the desired behavior, you will
need to use a different method to install the file. It is called as follows:
.PP
\f(CWInstallAs\fR works in two ways:
.PP
Single File Install:
.PP
.Vb 1
\&  InstallAs $env TgtFile, SrcFile;
.Ve
Multiple File Install:
.PP
.Vb 1
\&  InstallAs $env ['tgt1', 'tgt2'], ['src1', 'src2'];
.Ve
.Vb 1
\&  Or, even as:
.Ve
.Vb 3
\&  @srcs = qw(src1 src2 src3);
\&  @tgts = qw(tgt1 tgt2 tgt3);
\&  InstallAs $env [@tgts], [@srcs];
.Ve
Both the target and the sources lists should be of the same length.
.Sh "The \f(CWPrecious\fR method"
The \f(CWPrecious\fR method asks cons not to delete the specified file or
list of files before building them again.  It is invoked as:
.PP
.Vb 1
\&  Precious <files>;
.Ve
This is especially useful for allowing incremental updates to libraries
or debug information files which are updated rather than rebuilt anew each
time.  Cons will still delete the files when the \f(CW-r\fR flag is specified.
.Sh "The \f(CWAfterBuild\fR method"
The \f(CWAfterBuild\fR method evaluates the specified perl string after
building the given file or files (or finding that they are up to date).
The eval will happen once per specified file.  \f(CWAfterBuild\fR is called
as follows:
.PP
.Vb 1
\&  AfterBuild $env 'foo.o', qq(print "foo.o is up to date!\en");
.Ve
The perl string is evaluated in the \f(CWscript\fR package, and has access
to all variables and subroutines defined in the \fIConscript\fR file in
which the \f(CWAfterBuild\fR method is called.
.Sh "The \f(CWCommand\fR method"
The \f(CWCommand\fR method is a catchall method which can be used to arrange for
any external command to be called to update the target. For this command, a
target file and list of inputs is provided. In addition a construction
command line, or lines, is provided as a string (this string may have
multiple commands embedded within it, separated by new lines). \f(CWCommand\fR is
called as follows:
.PP
.Vb 1
\&  Command $env <target>, <inputs>, <construction command>;
.Ve
The target is made dependent upon the list of input files specified, and the
inputs must be built successfully or Cons will not attempt to build the
target.
.PP
Within the construction command, any variable from the construction
environment may be introduced by prefixing the name of the construction
variable with \f(CW%\fR. This is recursive: the command is expanded until no more
substitutions can be made. If a construction variable is not defined in the
environment, then the null string will be substituted.  A doubled \f(CW%%\fR
will be replaced by a single \f(CW%\fR in the construction command.
.PP
There are several pseudo variables which will also be expanded:
.Ip "\f(CW%\fR>" 10
The target file name (in a multi-target command, this is always the first
target mentioned).
.Ip "\f(CW%0\fR" 10
Same as \f(CW%\fR>.
.Ip "\f(CW%1,\fR" 10
%2, ..., \f(CW%9\fR These refer to the first through ninth input file, respectively.
.Ip "C<%<>" 10
The full set of inputs. If any of these have been used anywhere else in the
current command line (via \f(CW%1\fR, \f(CW%2\fR, etc.), then those will be deleted
from the list provided by C<%<>. Consider the following command found in a
\f(CWConscript\fR file in the directory \f(CWtest\fR:
.Sp
.Vb 5
\&  Command $env 'tgt', qw(foo bar baz), qq(
\&        echo %< -i %1 > %>
\&        echo %< -i %2 >> %>
\&        echo %< -i %3 >> %>
\&  );
.Ve
.Ip "" 10
If \f(CWtgt\fR needed to be updated, then this would result in the execution of
the following commands, assuming that no remapping has been established for
directory \f(CWtest\fR:
.Sp
.Vb 3
\&  echo test/bar test/baz -i test/foo > test/tgt
\&  echo test/foo test/baz -i test/bar >> test/tgt
\&  echo test/foo test/bar -i test/baz >> test/tgt
.Ve
.PP
Any of the above pseudo variables may be followed immediately by one of
the following suffixes to select a portion of the expanded path name:
.PP
.Vb 6
\&  :a    the absolute path to the file name
\&  :b    the directory plus the file name stripped of any suffix
\&  :d    the directory
\&  :f    the file name
\&  :s    the file name suffix
\&  :F    the file name stripped of any suffix
.Ve
Continuing with the above example, \f(CW%<:f\fR would expand to \f(CWfoo bar baz\fR,
and \f(CW%\fR:d> would expand to \f(CWtest\fR.
.PP
There are additional \f(CW%\fR elements which affect the command \fIline\fR\|(s):
.Ip "%[ %]" 10
It is possible to programmatically rewrite part of the command by
enclosing part of it between \f(CW%[\fR and \f(CW%]\fR.  This will call the
construction variable named as the first word enclosed in the brackets
as a Perl code reference; the results of this call will be used to
replace the contents of the brackets in the command line.  For example,
given an existing input file named \fItgt.in\fR:
.Sp
.Vb 6
\&  @keywords = qw(foo bar baz);
\&  $env = new cons(X_COMMA => sub { join(",", @_) });
\&  Command $env 'tgt', 'tgt.in', qq(
\&        echo '# Keywords: %[X_COMMA @keywords %]' > %>
\&        cat %< >> %>
\&  );
.Ve
This will execute:
.Sp
.Vb 2
\&  echo '# Keywords: foo,bar,baz' > tgt
\&  cat tgt.in >> tgt
.Ve
.Ip "%( %)" 10
Cons includes the text of the command line in the \s-1MD5\s0 signature for
a build, so that targets get rebuilt if you change the command line,
(to add or remove an option, for example).  Command-line text in between
\f(CW%(\fR and \f(CW%)\fR, however, will be ignored for \s-1MD5\s0 signature calculation.
.Sp
Cons uses \f(CW%(\fR and \f(CW%)\fR around include and library directory options
(\f(CW-I\fR and \f(CW-L\fR on \s-1UNIX\s0 systems, \f(CW/I\fR and \f(CW/LIBPATH\fR on Windows \s-1NT\s0)
to avoid rebuilds just because the directory list changes.  Rebuilds occur
only if the changed directory list causes any included \fIfiles\fR to change,
and a changed include file is detected by the \s-1MD5\s0 signature calculation
on the actual file contents.
.PP
After substitution occurs, strings of white space are converted into single
blanks, and leading and trailing white space is eliminated. It is therefore
not possible to introduce variable length white space in strings passed into
a command, without resorting to some sort of shell quoting.
.PP
If a multi-line command string is provided, the commands are executed
sequentially. If any of the commands fails, then none of the rest are
executed, and the target is not marked as updated, i.e. a new signature is
not stored for the target.
.PP
Normally, if all the commands succeed, and return a zero status (or whatever
platform-specific indication of success is required), then a new signature
is stored for the target. If a command erroneously reports success even
after a failure, then Cons will assume that the target file created by that
command is accurate and up-to-date.
.PP
The first word of each command string, after expansion, is assumed to be an
executable command looked up on the \f(CWPATH\fR environment variable (which is,
in turn, specified by the \f(CWENV\fR construction variable). If this command is
found on the path, then the target will depend upon it: the command will
therefore be automatically built, as necessary. It's possible to write
multi-part commands to some shells, separated by semi-colons. Only the first
command word will be depended upon, however, so if you write your command
strings this way, you must either explicitly set up a dependency (with the
\f(CWDepends\fR method), or be sure that the command you are using is a system
command which is expected to be available. If it isn't available, you will,
of course, get an error.
.PP
If any command (even one within a multi-line command) begins with
\f(CW[perl]\fR, the remainder of that command line will be evaluated by the
running Perl instead of being forked by the shell.  If an error occurs
in parsing the Perl or if the Perl expression returns 0 or undef, the
command will be considered to have failed.  For example, here is a simple
command which creates a file \f(CWfoo\fR directly from Perl:
.PP
.Vb 3
\&  $env = new cons();
\&  Command $env 'foo',
\&    qq([perl] open(FOO,'>foo');print FOO "hi\e\en"; close(FOO); 1);
.Ve
Note that when the command is executed, you are in the same package as
when the \fIConstruct\fR or \fIConscript\fR file was read, so you can call
Perl functions you've defined in the same \fIConstruct\fR or \fIConscript\fR
file in which the \f(CWCommand\fR appears:
.PP
.Vb 9
\&  $env = new cons();
\&  sub create_file {
\&        my $file = shift;
\&        open(FILE, ">$file");
\&        print FILE "hi\en";
\&        close(FILE);
\&        return 1;
\&  }
\&  Command $env 'foo', "[perl] &create_file('%>')";
.Ve
The Perl string will be used to generate the signature for the derived
file, so if you change the string, the file will be rebuilt.  The contents
of any subroutines you call, however, are not part of the signature,
so if you modify a called subroutine such as \f(CWcreate_file\fR above,
the target will \fInot\fR be rebuilt.  Caveat user.
.PP
Cons normally prints a command before executing it.  This behavior is
suppressed if the first character of the command is \f(CW@\fR.  Note that
you may need to separate the \f(CW@\fR from the command name or escape it to
prevent \f(CW@cmd\fR from looking like an array to Perl quote operators that
perform interpolation:
.PP
.Vb 8
\&  # The first command line is incorrect,
\&  # because "@cp" looks like an array
\&  # to the Perl qq// function.
\&  # Use the second form instead.
\&  Command $env 'foo', 'foo.in', qq(
\&        @cp %< tempfile
\&        @ cp tempfile %>
\&  );
.Ve
If there are shell meta characters anywhere in the expanded command line,
such as C<<>, \f(CW\fR>, quotes, or semi-colon, then the command will actually be
executed by invoking a shell. This means that a command such as:
.PP
.Vb 1
\&  cd foo
.Ve
alone will typically fail, since there is no command \f(CWcd\fR on the path. But
the command string:
.PP
.Vb 1
\&  cd $<:d; tar cf $>:f $<:f
.Ve
when expanded will still contain the shell meta character semi-colon, and a
shell will be invoked to interpret the command. Since \f(CWcd\fR is interpreted
by this sub-shell, the command will execute as expected.
.PP
To specify a command with multiple targets, you can specify a reference to a
list of targets. In Perl, a list reference can be created by enclosing a
list in square brackets. Hence the following command:
.PP
.Vb 3
\&  Command $env ['foo.h', 'foo.c'], 'foo.template', q(
\&        gen %1
\&  );
.Ve
could be used in a case where the command \f(CWgen\fR creates two files, both
\f(CWfoo.h\fR and \f(CWfoo.c\fR.
.Ip "\fBThe \fR\fBObjects\fR\fB method\fR" 0
The \f(CWObjects\fR method arranges to create the object files that correspond to
the specified source files. It is invoked as shown below:
.PP
.Vb 1
\&  @files = Objects $env <source or object files>;
.Ve
Under Unix, source files ending in \fI.s\fR and \fI.c\fR are currently
supported, and will be compiled into a name of the same file ending
in \fI.o\fR. By default, all files are created by invoking the external
command which results from expanding the \f(CWCCCOM\fR construction
variable, with \f(CW%<\fR and \f(CW%>\fR set to the source and object
files, respectively (see the \f(CWCommand\fR method for expansion details).
The variable \f(CWCPPPATH\fR is also used when scanning source files for
dependencies. This is a colon separated list of pathnames, and is also
used to create the construction variable \f(CW_IFLAGS,\fR which will contain
the appropriate list of \-\f(CWI\fR options for the compilation. Any relative
pathnames in \f(CWCPPPATH\fR is interpreted relative to the directory in
which the associated construction environment was created (absolute
and top-relative names may also be used). This variable is used by
\f(CWCCCOM\fR. The behavior of this command can be modified by changing any
of the variables which are interpolated into \f(CWCCCOM\fR, such as \f(CWCC\fR,
\f(CWCFLAGS\fR, and, indirectly, \f(CWCPPPATH\fR. It's also possible to replace
the value of \f(CWCCCOM\fR, itself. As a convenience, this file returns the
list of object filenames.
.Sh "The \f(CWProgram\fR method"
The \f(CWProgram\fR method arranges to link the specified program with the
specified object files. It is invoked in the following manner:
.PP
.Vb 1
\&  Program $env <program name>, <source or object files>;
.Ve
The program name will have the value of the \f(CWSUFEXE\fR construction
variable appended (by default, \f(CW.exe\fR on Win32 systems, nothing on Unix
systems) if the suffix is not already present.
.PP
Source files may be specified in place of objects files\*(--the \f(CWObjects\fR
method will be invoked to arrange the conversion of all the files into
object files, and hence all the observations about the \f(CWObjects\fR method,
above, apply to this method also.
.PP
The actual linking of the program will be handled by an external command
which results from expanding the \f(CWLINKCOM\fR construction variable, with
\f(CW%<\fR set to the object files to be linked (in the order presented),
and \f(CW%>\fR set to the target (see the \f(CWCommand\fR method for expansion
details). The user may set additional variables in the construction
environment, including \f(CWLINK\fR, to define which program to use for
linking, \f(CWLIBPATH\fR, a colon-separated list of library search paths,
for use with library specifications of the form \fI\-llib\fR, and \f(CWLIBS\fR,
specifying the list of libraries to link against (in either \fI\-llib\fR
form or just as pathnames. Relative pathnames in both \f(CWLIBPATH\fR and
\f(CWLIBS\fR are interpreted relative to the directory in which the associated
construction environment is created (absolute and top-relative names may
also be used). Cons automatically sets up dependencies on any libraries
mentioned in \f(CWLIBS\fR: those libraries will be built before the command
is linked.
.Sh "The \f(CWLibrary\fR method"
The \f(CWLibrary\fR method arranges to create the specified library from the
specified object files. It is invoked as follows:
.PP
.Vb 1
\&  Library $env <library name>, <source or object files>;
.Ve
The library name will have the value of the \f(CWSUFLIB\fR construction
variable appended (by default, \f(CW.lib\fR on Win32 systems, \f(CW.a\fR on Unix
systems) if the suffix is not already present.
.PP
Source files may be specified in place of objects files\*(--the \f(CWObjects\fR
method will be invoked to arrange the conversion of all the files into
object files, and hence all the observations about the \f(CWObjects\fR method,
above, apply to this method also.
.PP
The actual creation of the library will be handled by an external
command which results from expanding the \f(CWARCOM\fR construction variable,
with \f(CW%<\fR set to the library members (in the order presented),
and \f(CW%>\fR to the library to be created (see the \f(CWCommand\fR method
for expansion details). The user may set variables in the construction
environment which will affect the operation of the command. These
include \f(CWAR\fR, the archive program to use, \f(CWARFLAGS\fR, which can be
used to modify the flags given to the program specified by \f(CWAR\fR, and
\f(CWRANLIB\fR, the name of a archive index generation program, if needed
(if the particular need does not require the latter functionality,
then \f(CWARCOM\fR must be redefined to not reference \f(CWRANLIB\fR).
.PP
The \f(CWLibrary\fR method allows the same library to be specified in multiple
method invocations. All of the contributing objects from all the invocations
(which may be from different directories) are combined and generated by a
single archive command. Note, however, that if you prune a build so that
only part of a library is specified, then only that part of the library will
be generated (the rest will disappear!).
.Ip "\fBThe \fR\fBModule\fR\fB method\fR" 0
The \f(CWModule\fR method is a combination of the \f(CWProgram\fR and \f(CWCommand\fR
methods. Rather than generating an executable program directly, this command
allows you to specify your own command to actually generate a module. The
method is invoked as follows:
.PP
.Vb 1
\&  Module $env <module name>, <source or object files>, <construction command>;
.Ve
This command is useful in instances where you wish to create, for example,
dynamically loaded modules, or statically linked code libraries.
.Ip "\fBThe \fR\fBDepends\fR\fB method\fR" 0
The \f(CWDepends\fR method allows you to specify additional dependencies for a
target. It is invoked as follows:
.PP
.Vb 1
\&  Depends $env <target>, <dependencies>;
.Ve
This may be occasionally useful, especially in cases where no scanner exists
(or is writable) for particular types of files. Normally, dependencies are
calculated automatically from a combination of the explicit dependencies set
up by the method invocation or by scanning source files.
.PP
A set of identical dependencies for multiple targets may be specified
using a reference to a list of targets. In Perl, a list reference can
be created by enclosing a list in square brackets. Hence the following
command:
.PP
.Vb 1
\&  Depends $env ['foo', 'bar'], 'input_file_1', 'input_file_2';
.Ve
specifies that both the \fIfoo\fR and \fIbar\fR files depend on the listed
input files.
.Sh "The \f(CWIgnore\fR method"
The \f(CWIgnore\fR method allows you to ignore explicitly dependencies that
Cons infers on its own.  It is invoked as follows:
.PP
.Vb 1
\&  Ignore <patterns>;
.Ve
This can be used to avoid recompilations due to changes in system header
files or utilities that are known to not affect the generated targets.
.PP
If, for example, a program is built in an \s-1NFS\s0\-mounted directory on
multiple systems that have different copies of \fIstdio.h\fR, the differences
will affect the signatures of all derived targets built from source files
that \f(CW#include <stdio.h>\fR.  This will cause all those targets to
be rebuilt when changing systems.  If this is not desirable behavior, then
the following line will remove the dependencies on the \fIstdio.h\fR file:
.PP
.Vb 1
\&  Ignore '^/usr/include/stdio\e.h$';
.Ve
Note that the arguments to the \f(CWIgnore\fR method are regular expressions,
so special characters must be escaped and you may wish to anchor the
beginning or end of the expression with \f(CW^\fR or \f(CW$\fR characters.
.Sh "The \f(CWSalt\fR method"
The \f(CWSalt\fR method adds a constant value to the signature calculation
for every derived file.  It is invoked as follows:
.PP
.Vb 1
\&  Salt $string;
.Ve
Changing the Salt value will force a complete rebuild of every derived
file.  This can be used to force rebuilds in certain desired
circumstances.  For example,
.PP
.Vb 1
\&  Salt `uname -s`;
.Ve
Would force a complete rebuild of every derived file whenever the
operating system on which the build is performed (as reported by \f(CWuname
-s\fR) changes.
.Sh "The \f(CWUseCache\fR method"
The \f(CWUseCache\fR method instructs Cons to maintain a cache of derived
files, to be shared among separate build trees of the same project.
.PP
.Vb 1
\&  UseCache("cache/<buildname>") || warn("cache directory not found");
.Ve
.Sh "The \f(CWSourcePath\fR method"
The \f(CWSourcePath\fR mathod returns the real source path name of a file,
as opposted to the path name within a build directory.  It is invoked
as follows:
.PP
.Vb 1
\&  $path = SourcePath <buildpath>;
.Ve
.Sh "The \f(CWConsPath\fR method"
The \f(CWConsPath\fR method returns true if the supplied path is a derivable
file, and returns undef (false) otherwise.
It is invoked as follows:
.PP
.Vb 1
\&  $result = ConsPath <path>;
.Ve
.Sh "The \f(CWSplitPath\fR method"
The \f(CWSplitPath\fR method looks up multiple path names in a string separated
by the default path separator for the operating system (':\*(R' on \s-1UNIX\s0
systems, \*(L';\*(R' on Windows \s-1NT\s0), and returns the fully-qualified names.
It is invoked as follows:
.PP
.Vb 1
\&  @paths = SplitPath <pathlist>;
.Ve
The \f(CWSplitPath\fR method will convert  names prefixed \*(L'#\*(R' to the
appropriate top-level build name (without the \*(L'#') and will convert
relative names to top-level names.
.Sh "The \f(CWDirPath\fR method"
The \f(CWDirPath\fR method returns the build path \fIname\fR\|(s) of a directory or
list of directories.  It is invoked as follows:
.PP
.Vb 1
\&  $cwd = DirPath <paths>;
.Ve
The most common use for the \f(CWDirPath\fR method is:
.PP
.Vb 1
\&  $cwd = DirPath '.';
.Ve
to fetch the path to the current directory of a subsidiary \fIConscript\fR
file.
.Sh "The \f(CWFilePath\fR method"
The \f(CWFilePath\fR method returns the build path \fIname\fR\|(s) of a file or
list of files.  It is invoked as follows:
.PP
.Vb 1
\&  $file = FilePath <path>;
.Ve
.Sh "The \f(CWHelp\fR method"
The \f(CWHelp\fR method specifies help text that will be displayed when the
user invokes \f(CWcons -h\fR.  This can be used to provide documentation
of specific targets, values, build options, etc. for the build tree.
It is invoked as follows:
.PP
.Vb 1
\&  Help <helptext>;
.Ve
The \f(CWHelp\fR method may only be called once, and should typically be
specified in the top-level \fIConstruct\fR file.
.SH "Extending Cons"
.Sh "Overriding construction variables"
There are several ways of extending Cons, which vary in degree of
difficulty. The simplest method is to define your own construction
environment, based on the default environment, but modified to reflect your
particular needs. This will often suffice for C\-based applications. You can
use the \f(CWnew\fR constructor, and the \f(CWclone\fR and \f(CWcopy\fR methods to create
hybrid environments. These changes can be entirely transparent to the
underlying \f(CWConscript\fR files.
.Ip "\fBAdding new methods\fR" 0
For slightly more demanding changes, you may wish to add new methods to the
\f(CWcons\fR package. Here's an example of a very simple extension,
\f(CWInstallScript\fR, which installs a tcl script in a requested location, but
edits the script first to reflect a platform-dependent path that needs to be
installed in the script:
.PP
.Vb 3
\&  # cons::InstallScript - Create a platform dependent version of a shell
\&  # script by replacing string ``#!your-path-here'' with platform specific
\&  # path $BIN_DIR.
.Ve
.Vb 7
\&  sub cons::InstallScript {
\&        my ($env, $dst, $src) = @_;
\&        Command $env $dst, $src, qq(
\&                sed s+your-path-here+$BIN_DIR+ %< > %>
\&                chmod oug+x %>
\&        );
\&  }
.Ve
Notice that this method is defined directly in the \f(CWcons\fR package (by
prefixing the name with \f(CWcons::\fR). A change made in this manner will be
globally visible to all environments, and could be called as in the
following example:
.PP
.Vb 1
\&  InstallScript $env "$BIN/foo", "foo.tcl";
.Ve
For a small improvement in generality, the \f(CWBINDIR\fR variable could be
passed in as an argument or taken from the construction environment\*(--as
\f(CW%BINDIR\fR.
.Ip "\fBOverriding methods\fR" 0
Instead of adding the method to the \f(CWcons\fR name space, you could define a
new package which inherits existing methods from the \f(CWcons\fR package and
overrides or adds others. This can be done using Perl's inheritance
mechanisms.
.PP
The following example defines a new package cons::switch which overrides the
standard \f(CWLibrary\fR method. The overridden method builds linked library
modules, rather than library archives. A new constructor is
provided. Environments created with this Constructor will have the new
library method; others won't.
.PP
.Vb 2
\&  package cons::switch;
\&  BEGIN {@ISA = `cons'}
.Ve
.Vb 4
\&  sub new {
\&        shift;
\&        bless new cons(@_);
\&  }
.Ve
.Vb 8
\&  sub Library {
\&        my($env) = shift;
\&        my($lib) = shift;
\&        my(@objs) = Objects $env @_;
\&        Command $env $lib, @objs, q(
\&                %LD -r %LDFLAGS %< -o %>
\&        );
\&  }
.Ve
This functionality could be invoked as in the following example:
.PP
.Vb 3
\&  $env = new cons::switch(@overrides);
\&  ...
\&  Library $env 'lib.o', 'foo.c', 'bar.c';
.Ve
.SH "\fBInvoking Cons\fR"
The \f(CWcons\fR command is usually invoked from the root of the build tree. A
\f(CWConstruct\fR file must exist in that directory. If the \f(CW-f\fR argument is
used, then an alternate \f(CWConstruct\fR file may be used (and, possibly, an
alternate root, since \f(CWcons\fR will cd to \f(CWConstruct\fR file's containing
directory).
.PP
If \f(CWcons\fR is invoked from a child of the root of the build tree with
the \f(CW-t\fR argument, it will walk up the directory hierarchy looking for a
\f(CWConstruct\fR file.  (An alternate name may still be specified with \f(CW-f\fR.)
The targets supplied on the command line will be modified to be relative
to the discovered \f(CWConstruct\fR file.  For example, invoking \f(CWcons\fR in
\*(L"root/libfoo/sub\*(R" with \f(CWcons -t target\fR is identical to invoking it in
\*(L"root\*(R" with \f(CWcons libfoo/sub/target\fR.  (Assuming there is a \f(CWConstruct\fR
file in \*(L"root\*(R".  If there are any \f(CWDefault\fR targets specified in
the directory hierarchy's \f(CWConstruct\fR or \f(CWConscript\fR files, only
the default targets at or below the directory from which \f(CWcons -t\fR
was invoked will be built.
.PP
The command is invoked as follows:
.PP
.Vb 1
\&  cons <arguments>
.Ve
where \fIarguments\fR can be any of the following, in any order:
.Ip "\fItarget\fR" 10
Build the specified target. If \fItarget\fR is a directory, then recursively
build everything within that directory.
.Ip "\fI+pattern\fR" 10
Limit the \f(CWConscript\fR files considered to just those that match \fIpattern\fR,
which is a Perl regular expression. Multiple \f(CW+\fR arguments are accepted.
.Ip "\fIname\fR=<val>" 10
Sets \fIname\fR to value \fIval\fR in the \f(CWARG\fR hash passed to the top-level
\f(CWConstruct\fR file.
.Ip "\f(CW-cc\fR" 10
Show command that would have been executed, when retrieving from cache. No
indication that the file has been retrieved is given; this is useful for
generating build logs that can be compared with real build logs.
.Ip "\f(CW-cd\fR" 10
Disable all caching. Do not retrieve from cache nor flush to cache.
.Ip "\f(CW-cr\fR" 10
Build dependencies in random order. This is useful when building multiple
similar trees with caching enabled.
.Ip "\f(CW-cs\fR" 10
Synchronize existing build targets that are found to be up-to-date with
cache. This is useful if caching has been disabled with \-cc or just recently
enabled with UseCache.
.Ip "\f(CW-d\fR" 10
Enable dependency debugging.
.Ip "\f(CW-f\fR <file>" 10
Use the specified file instead of \f(CWConstruct\fR (but first change to
containing directory of \fIfile\fR).
.Ip "\f(CW-h\fR" 10
Show a help message local to the current build if one such is defined, and
exit.
.Ip "\f(CW-o\fR <file>" 10
Read override file \fIfile\fR.
.Ip "\f(CW-k\fR" 10
Keep going as far as possible after errors.
.Ip "\f(CW-m\fR" 10
Show cons modification history and exit.
.Ip "\f(CW-p\fR" 10
Show construction products in specified trees. No build is attempted.
.Ip "\f(CW-pa\fR" 10
Show construction products and associated actions. No build is attempted.
.Ip "\f(CW-pw\fR" 10
Show products and where they are defined. No build is attempted.
.Ip "\f(CW-q\fR" 10
Make the build quiet.  Multiple \f(CW-q\fR options may be specified.
.Sp
A single \f(CW-q\fR options suppress messages about Installing and Removing
targets.
.Sp
Two \f(CW-q\fR options suppress build command lines and target up-to-date
messages.
.Ip "\f(CW-r\fR" 10
Remove construction products associated with <targets>. No build is
attempted.
.Ip "\f(CW-R\fR <repos>" 10
Search for files in \fIrepos\fR.  Multiple \fB\-R\fR \fIrepos\fR directories are
searched in the order specified.
.Ip "\f(CW-t\fR" 10
Traverse up the directory hierarchy looking for a \fIConstruct\fR file,
if none exists in the current directory.  Targets will be modified to
be relative to the \fIConstruct\fR file.
.Sp
Internally, \f(CWcons\fR will change its working directory to the directory
which contains the top-level \fIConstruct\fR file and report:
.Sp
.Vb 1
\&  cons: Entering directory `top-level-directory'
.Ve
This message indicates to an invoking editor (such as emacs) or build
environment that Cons will now report all file names relative to the
top-level directory.  This message can not be suppressed with the \f(CW-q\fR
option.
.Ip "\f(CW-v\fR" 10
Show \f(CWcons\fR version and continue processing.
.Ip "\f(CW-V\fR" 10
Show \f(CWcons\fR version and exit.
.Ip "\f(CW-x\fR" 10
Show a help message similar to this one, and exit.
.PP
Note that \f(CWcons -r .\fR is equivalent to a full recursive \f(CWmake clean\fR, but
requires no support in the \f(CWConstruct\fR file or any \f(CWConscript\fR files. This
is most useful if you are compiling files into source directories (if you
separate the \f(CWbuild\fR/\f(CWexport\fR directories, then you can just remove the
directories).
.PP
The options \f(CW-p\fR, \f(CW-pa\fR, and \f(CW-pw\fR are extremely useful for use as an aid
in reading scripts or debugging them. If you want to know what script
installs \f(CWexport/include/foo.h\fR, for example, just type:
.PP
.Vb 1
\&  cons -pw export/include/foo.h
.Ve
.SH "Using and writing dependency scanners"
QuickScan allows simple target-independent scanners to be set up for
source files. Only one QuickScan scanner may be associated with any given
source file and environment, although the same scanner may (and should)
be used for multiple files of a given type.
.PP
A QuickScan scanner is only ever invoked once for a given source file,
and it is only invoked if the file is used by some target in the tree
(i.e., there is a dependency on the source file).
.PP
QuickScan is invoked as follows:
.PP
.Vb 1
\&  QuickScan CONSENV CODEREF, FILENAME [, PATH]
.Ve
The subroutine referenced by CODEREF is expected to return a list of
filenames included directly by FILE. These filenames will, in turn, be
scanned. The optional PATH argument supplies a lookup path for finding
FILENAME and/or files returned by the user-supplied subroutine.  The PATH
may be a reference to an array of lookup-directory names, or a string of
names separated by the system's separator character (':\*(R' on UNIX systems,
\&\*(R';\*(R' on Windows NT).
.PP
The subroutine is called once for each line in the file, with \f(CW$_\fR set to the
current line. If the subroutine needs to look at additional lines, or, for
that matter, the entire file, then it may read them itself, from the
filehandle SCAN. It may also terminate the loop, if it knows that no further
include information is available, by closing the filehandle.
.PP
Whether or not a lookup path is provided, QuickScan first tries to lookup
the file relative to the current directory (for the top-level file
supplied directly to QuickScan), or from the directory containing the
file which referenced the file. This is not very general, but seems good
enough\*(--especially if you have the luxury of writing your own utilities
and can control the use of the search path in a standard way.
.PP
Here's a real example, taken from a \fIConstruct\fR file here:
.PP
.Vb 14
\&  sub cons::SMFgen {
\&      my($env, @tables) = @_;
\&      foreach $t (@tables) {
\&          $env->QuickScan(sub { /\eb\eS*?\e.smf\eb/g }, "$t.smf",
\&                          $env->{SMF_INCLUDE_PATH});
\&          $env->Command(
\&              ["$t.smdb.cc","$t.smdb.h","$t.snmp.cc","$t.ami.cc", "$t.http.cc"],
\&              "$t.smf",
\&              q(
\&                smfgen %( %SMF_INCLUDE_OPT %) %<
\&              )
\&          );
\&      }
\&  }
.Ve
The subroutine above finds all names of the form <name>.smf in the
file. It will return the names even if they're found within comments,
but that's OK (the mechanism is forgiving of extra files; they're just
ignored on the assumption that the missing file will be noticed when
the program, in this example, smfgen, is actually invoked).
.PP
[NOTE that the form \f(CW$env->QuickScan ...\fR  and \f(CW$env->Command
\&...\fR should not be necessary, but, for some reason, is required
for this particular invocation. This appears to be a bug in Perl or
a misunderstanding on my part; this invocation style does not always
appear to be necessary.]
.PP
Here is another way to build the same scanner. This one uses an
explicit code reference, and also (unecessarily, in this case) reads
the whole file itself:
.PP
.Vb 7
\&  sub myscan {
\&      my(@includes);
\&      do {
\&          push(@includes, /\eb\eS*?\e.smf\eb/g);
\&      } while <SCAN>;
\&      @includes
\&  }
.Ve
Note that the order of the loop is reversed, with the loop test at the
end. This is because the first line is already read for you. This scanner
can be attached to a source file by:
.PP
.Vb 1
\&  QuickScan $env \e&myscan, "$_.smf";
.Ve
This final example, which scans a different type of input file, takes
over the file scanning rather than being called for each input line:
.PP
.Vb 11
\&  $env->QuickScan(
\&      sub { my(@includes) = ();
\&          do {
\&             push(@includes, $3)
\&                 if /^(#include|import)\es+(\e")(.+)(\e")/ && $3
\&          } while <SCAN>;
\&          @includes
\&      },
\&      "$idlFileName",
\&      "$env->{CPPPATH};$BUILD/ActiveContext/ACSCLientInterfaces"
\&  );
.Ve
.SH "SUPPORT AND SUGGESTIONS"
Cons is maintained by the user community.  To subscribe, send mail to
\fBcons-discuss-request@gnu.org\fR with body \fBsubscribe\fR.
.PP
Please report any suggestions through the \fBcons-discuss@gnu.org\fR mailing
list.
.SH "BUGS"
Sure to be some. Please report any bugs through the \fBbug-cons@gnu.org\fR
mailing list.
.SH "INFORMATION ABOUT CONS"
Information about CONS can be obtained from the official cons web site
\fBhttp://www.dsmit.com/cons/\fR or its mirrors listed there.
.PP
The cons maintainers can be contacted by email at
\fBcons-maintainers@gnu.org\fR
.SH "AUTHORS"
Originally by Bob Sidebotham. Then significantly enriched by the members
of the Cons community \fBcons-discuss@gnu.org\fR.
.PP
The Cons community would like to thank Ulrich Pfeifer for the original pod
documentation derived from the \fIcons.html\fR file. Cons documentation is now
a part of the program itself.

.rn }` ''
.IX Title "CONS 1"
.IX Name "Cons - A Software Construction System"

.IX Header "NAME"

.IX Header "DESCRIPTION"

.IX Header "Introduction"

.IX Header "Why Cons? Why not Make?"

.IX Subsection "Build complexity"

.IX Subsection "Build reproducibility"

.IX Header "\fBCons: A Software Construction System\fR"

.IX Header "\fBIntroduction\fR"

.IX Header "\fBWhy Cons? Why not Make?\fR"

.IX Item "\fBBuild complexity\fR"

.IX Item "\fBBuild reproducibility \fR"

.IX Item "\fBVariant builds\fR"

.IX Item "\fBRepositories\fR"

.IX Header "\fBKeeping it simple\fR"

.IX Item "\fBPerl scripts\fR"

.IX Item "\fBHello, World!\fR"

.IX Item "\fBConstruction environments\fR"

.IX Item "\fBAutomatic and complete dependency analysis\fR"

.IX Subsection "Using modules in build scripts"

.IX Subsection "Scope of variables"

.IX Item "\fBA hierarchy of build scripts\fR"

.IX Item "\fBThe \fR\fBBuild\fR\fB command\fR"

.IX Item "\fBRelative, top-relative, and absolute file names\fR"

.IX Item "\fBScope of variables\fR"

.IX Item "\fBThe \fR\fBExport\fR\fB command\fR"

.IX Item "\fBThe \fR\fBImport\fR\fB command\fR"

.IX Item "\fBBuild script evaluation order\fR"

.IX Header "\fBA Model for sharing files\fR"

.IX Item "\fBSome simple conventions\fR"

.IX Item "\fBClean, understandable, location-independent scripts\fR"

.IX Header "\fBSeparating source and build trees\fR"

.IX Item "\fBSeparating build and source directories using the \fR\fBLink\fR\fB command\fR"

.IX Header "\fBVariant builds\fR"

.IX Item "\fBHello, World!\fR\fB for baNaNa and peAcH \s-1OS\s0's\fR"

.IX Item "\fBVariations on a theme\fR"

.IX Header "\fBSignatures\fR"

.IX Item "\fB\s-1MD5\s0 cryptographic signatures\fR"

.IX Header "\fBCode Repositories\fR"

.IX Item "\fBRepository\fR"

.IX Item "\fBFinding the Construct file in a Repository\fR"

.IX Item "\fBRepository source files\fR"

.IX Item "\fBRepository derived files\fR"

.IX Item "\fBLocal copies of files\fR"

.IX Item "\fBRepository dependency analysis\fR"

.IX Item "\fBRepository_List\fR"

.IX Item "\fBRepository interaction with other Cons features\fR"

.IX Header "\fBDefault targets\fR"

.IX Header "\fBSelective builds\fR"

.IX Item "\fBSelective targeting\fR"

.IX Item "\fBNo ``special'\*(T' targets\fR"

.IX Header "\fBBuild Pruning\fR"

.IX Header "\fBBacking builds\fR"

.IX Subsection "Interpolating construction variables"

.IX Header "Default construction methods"

.IX Item "\fBThe\fR\fB Override\fR\fB command\fR"

.IX Subsection "The \f(CWAfterBuild\fR method"

.IX Subsection "The \f(CWCommand\fR method"

.IX Header "\fBDefault construction methods\fR"

.IX Item "\fBThe \fR\fBnew\fR\fB constructor\fR"

.IX Item "\fBThe \fR\fBclone\fR\fB method\fR"

.IX Item "%[ %]"

.IX Item "%( %)"

.IX Subsection "The \f(CWObjects\fR method"

.IX Item "\fBThe \fR\fBPrecious\fR\fB method\fR"

.IX Item "\fBThe \fR\fBCommand\fR\fB method\fR"

.IX Item "\f(CW%\fR>"

.IX Item "\f(CW%0\fR"

.IX Item "\f(CW%1,\fR"

.IX Item "C<%<>"

.IX Item ""

.IX Item "\fBThe \fR\fBObjects\fR\fB method\fR"

.IX Item "\fBThe \fR\fBProgram\fR\fB method\fR"

.IX Item "\fBThe \fR\fBLibrary\fR\fB method\fR"

.IX Item "\fBThe \fR\fBModule\fR\fB method\fR"

.IX Item "\fBThe \fR\fBDepends\fR\fB method\fR"

.IX Header "\fBExtending Cons\fR"

.IX Item "\fBOverriding construction variables\fR"

.IX Item "\fBAdding new methods\fR"

.IX Item "\fBOverriding methods\fR"

.IX Header "\fBInvoking Cons\fR"

.IX Item "\fItarget\fR"

.IX Item "\fI+pattern\fR"

.IX Item "\fIname\fR=<val>"

.IX Item "\f(CW-cc\fR"

.IX Item "\f(CW-cd\fR"

.IX Item "\f(CW-cr\fR"

.IX Item "\f(CW-cs\fR"

.IX Item "\f(CW-d\fR"

.IX Item "\f(CW-f\fR <file>"

.IX Item "\f(CW-h\fR"

.IX Item "\f(CW-o\fR <file>"

.IX Item "\f(CW-k\fR"

.IX Item "\f(CW-m\fR"

.IX Item "\f(CW-p\fR"

.IX Item "\f(CW-pa\fR"

.IX Item "\f(CW-pw\fR"

.IX Item "\f(CW-q\fR"

.IX Item "\f(CW-wf\fR <file>"

.IX Item "\f(CW-r\fR"

.IX Item "\f(CW-R\fR <repos>"

.IX Item "\f(CW-t\fR"

.IX Item "\f(CW-v\fR"

.IX Item "\f(CW-V\fR"

.IX Item "\f(CW-x\fR"

.IX Header "Using and writing dependency scanners"

.IX Header "SUPPORT AND SUGGESTIONS"

.IX Header "BUGS"

.IX Header "INFORMATION ABOUT CONS"

.IX Header "AUTHORS"

