#!/usr/bin/env perl

#
# This shift/noshit selection is always a mess ...
# Get around by fixing ROOT make file + some special actions
# we need to perform due to an AFS based installation.
#
# (c) J. Lauret 2003 - 2009
#
# -unlink  remove the soft-links for etc/ files system.rootc and
#          root.mimes
# -fix     re-establish the link for system.rootrc and also fixes
#          bin/root-config
# 
# Default action will also create several files as local files
# rather than links allowing to escape some AFS side effects (timestamp
# issues).
#

# All the below files will have a local copy instead of a link
%LOCAL = ("configure",1,
          "config/Makefile.config",1,
	  "build/unix/compiledata.sh",1,
          "Makefile",1);

# one of those files will be touch-ed during build 
foreach $f (glob("cint/iosenum/iosenum.*")){
    $LOCAL{$f} = 0 if ($f !~ m/\.c/i);
}



# for Gprof support, we will tewak Makefile.linux
if ( $ENV{ROOTSYS} =~ m/Groot/ ){
    print "Detecting GPROF version\n";
    $LOCAL{"config/Makefile.linux"} = 1;
    $GP = 1;

    # TODO
    #
    print 
	"Please alter config/Makefile.linux and use\n",
	"  EXTRA_CXXFLAGS = -pg\n",
	"  EXTRA_CFLAGS   = -pg\n",
	"  EXTRA_LDFLAGS  = -pg\n",
	"plus add -pg to F77FLAGS\n\n";
    #
} else {
    $GP = 0;
}



$CERNL = $ENV{CERN_LEVEL};
$CERN  = $ENV{CERN};

# Default values - this is no longer needed started from ROOT 5.22.00
if ( ! defined($CERNL) ){
    print "CERN_LEVEL defined as 'pro'.\n";
    $CERNL = "pro";
}
if ( ! defined($CERN) ){
    print "CERN defined as /cern\n";
    if ( defined($ENV{USE_64BITS}) && -e "/cern64" ){
	$CERN = "/cern64";
    } else {
	$CERN = "/cern";
    }
}

# Now do the work
if ( ! -e "Makefile" ){
    die "Missing Makefile - you are probably not in the proper directory\n";
} else {
    # if -l, copy local otherwise it will be share by debug / no-debug
    # version and create confusions.
    foreach $f (keys %LOCAL){
	if ( -l $f ){
	    $link = readlink($f);
	    if ( unlink($f) ){
		system("/bin/cp -fp $link $f");
		print "Made local $f\n" if ($LOCAL{$f});
	    } else {
		&Die($f);
	    }
	}
    }
}



# Now parse arguments
$ULINK = $FIXIT = 0;
while ( defined($arg = shift(@ARGV))) {
    # print "$arg\n";
    if ($arg eq "-fix"){      $FIXIT = 1;}
    if ($arg eq "-unlink"){   $ULINK = 1;}
}



#
# The etc/ files are links - we will now warn only
# and control this behavior via a arg call.
#
$ADDMESS="";
print "Checking etc/ files\n";
foreach $file (("system.rootrc","root.mimes")){
    if ( $FIXIT ){
	# In the final operation, we want to make sure to remove any 
	# of those files created during the make process and replace 
	# by a backup file we created - to simplify
	if ( ! -e "etc/$file.new"){
	    die "  ERROR We could not find a backup file $file.new (step missing?)\n";
	} elsif ( -l "etc/$file.new"){
	    unlink("etc/$file") if ( -e "etc/$file");
	    $ofile = readlink("etc/$file.new");
	    $ofile =~ s/.new//;

	    if ( -e $ofile ){
		system("/bin/ln -s $ofile etc/$file");
		print "  Linked etc/$file to $ofile\n";
	    } else {
		system("/bin/cp -fp etc/$file.new etc/$file");
		print "  WARNING created a local etc/$file from etc/$file.new (no link found)\n";
	    }

	} else {
	    # it is -e but not -l
	    die "  ERROR File etc/$file.new is local\n";
	}

    } else {
	# In this mode, we need to be sure we create a .new does not exist
	# so we can restore later - we also need to unlink the file in our
	# list as the make process will override

	# we first take care of creating a .new if it does not exists
	# but we will ONLY assume one exists in the original source dir and
	# abort otherwise
	if ( ! -e "etc/$file.new"){
	    if ( -l "etc/$file"){
		$ofile = readlink("etc/$file");
		if ( -e "$ofile.new"){
		    # We can create it from the source dir via link
		    system("/bin/ln -s $ofile.new etc/$file.new");
		    print "  Linked etc/$file.new to $ofile.new\n";
		} else {
		    # we do not want to copy $file as a local $file.new as this
		    # may complicate the propagation of changes in $file to each
		    # OS specific directories
		    print "  WARNING There are no $ofile.new\n";
		}
	    } else {
		if ( -e "etc/$file"){
		    die "  ERROR We could not find etc/$file.new and etc/$file is local\n";
		} else {
		    die "  ERROR We could not find etc/$file.new and there is no etc/$file\n";
		}
	    }
	}

	# We then take care of etc/$file
	if ( -l "etc/$file" ){
	    $ofile = readlink("etc/$file");
	    unlink("etc/$file");
	    system("/bin/cp -fp $ofile etc/$file");
	    print "  Creating a local etc/$file\n";
	} elsif ( -e "etc/$file" ){
	    print "  There is already a local etc/$file\n";
	} else {
	    # Nothing exists?? Search for a .new and create
	    if ( -e "etc/$file.new"){
		system("/bin/cp -fp etc/$file.new etc/$file");
		print "  Created etc/$file from etc/$file.new\n";
	    } else {
		die "  ERROR Cannot find nor generate etc/$file\n";
	    }
	}
    }
}



#+
# Now back on the shift stuff, the main purpose of this helper script
#-
$packlib = "";
$packlib = "$CERN/$CERNL/lib/libpacklib_noshift.a" if ( -e "$CERN/$CERNL/lib/libpacklib_noshift.a");
$packlib = "$CERN/$CERNL/lib/libpacklib-noshift.a" if ( -e "$CERN/$CERNL/lib/libpacklib-noshift.a");

if ( $packlib eq "" ){
    die "$CERN/$CERNL/lib/libpacklib{_|-}noshift.a does not exist.\n".
        "Would not know what to do...\n";
} else {
    
}

if ( ! open(FI, "config/Makefile.config") || ! open(FO,">config/Makefile.config.new") ){
    print " Did not find config/Makefile.config - trying to proceed\n";
}

$done = 0;

while ( defined($line = <FI>) ){
    chomp($line);
    if ($line =~ m/CERNLIBS\s+:=\s*$/){
	print FO "CERNLIBS := $packlib $CERN/$CERNL/lib/libkernlib.a\n";
	print    "CERNLIBS := $packlib $CERN/$CERNL/lib/libkernlib.a\n";
	$done = 1;
    } elsif ( $line =~ m/BUILDHBOOK/){
	# Introduced at ROOT 4.04.02
	print FO "BUILDHBOOK := yes\n";
    } else {
	print FO "$line\n";
    }
}
close(FI);
close(FO);



if ($done){
    unlink("config/Makefile.config.old") if ( -e "config/Makefile.config.old");
    rename("config/Makefile.config",    "config/Makefile.config.old");
    rename("config/Makefile.config.new","config/Makefile.config");
    # one problem is timestamp restoration
    @all = stat("config/Makefile.config.old");
    utime($all[8],$all[9],"config/Makefile.config");

    print "=> config/Makefile.config fixed\n";
} else {
    print "=> config/Makefile.config already fixed\n";
    unlink("config/Makefile.config.new");
}





#
# This was added in 2007/10 JL - lack of local copy disturbs
# the make process
#
if ( -l  "config.status" ){
    my($f)=readlink("config.status");
    unlink("config.status");
    system("/bin/cp -fp $f ./config.status");
    if ( ! -e "config.status"){
	die "We failed to copy $f to ./config.status - Please fix manually\n";
    }
}



#
# Now we can proceed with FIXIT additional tasks
#
$ARCH = $CONFIG = $SUP = "";

if ( -e "config.log"){
    if ( open(FI,"config.log") ){
	while ( defined($line = <FI>) ){
	    if ( $line =~ m/(Result: Enabled support for)(.*)/){
		$SUP = $2;
		$SUP =~ s/,//g;
		chop($SUP);
	    }
	}
	close(FI);
    }
}
if ( -e "config.status"){
    if ( open(FI,"config.status") ){
	while ( defined($line = <FI>) ){
	    if ($line =~ m/--enable/){
		chomp($line);
		$CONFIG = $line;
		@items  = split(" ",$line);
		$ARCH   = $items[0];
	    }
	}
	close(FI);
    }
}


print
    "\n".
    "Checking bin/root-config\n".
    " + ARCH   = [$ARCH] \n".
    " + CONFIG = [$CONFIG]\n".
    " + SUP    = [$SUP]\n";


# now we have all we need to re-write root-config file
# The below logic will also remove the link because it will re-generate
$mod = 0;
if ( -e "bin/root-config"){
    if ( open(FI,"bin/root-config") ){
	if ( open(FO,">bin/root-config.new") ){
	    while ( defined($line = <FI>) ){
		chomp($line);
		if ( $line =~ m/(arch=)(.*)/ ){
		    #print "Match! [$line]\n";
		    if ( $2 ne $ARCH && $ARCH ne ""){
			$mod = 1;
			print FO "arch=$ARCH\n";
			next;
		    }
		}
		#
		# Features enabled by default are not displayed
		# as "enabled support" in ROOT 5.34.09
		#
		# if ( $line =~ m/(features=\")(.*)(\")/){
		#    if ( $2 ne $SUP && $SUP ne ""){
		#	$mod = 1;
		#	print FO "features=\"$SUP\"\n";
		#	next;
		#    }
		# }
		if ( $line =~ m/(configargs=\")(.*)(\")/){
		    if ( $2 ne $CONFIG && $CONFIG ne ""){
			$mod = 1;
			print FO "configargs=\"$CONFIG\"\n";
			next;
		    }
		}
		print FO "$line\n";
	    }
	    close(FO);
	} else {
	    print " * ERROR could not open file bin/root-config.new for write (token issue?)\n";
	    $ERR = 1;
	}
	close(FI);
    }
}


# if modifications are needed, rename else blabla and cleanup
if ( $ERR){
    die "Please fix errors above and try again\n";
}

if ($FIXIT){
    if ( $mod ){
	$i = $f = "bin/root-config";
	if ( -l $f){  $f = readlink($f);}
	@stat = stat($f);

	print "=> Modifying the file $i ".($i ne $f?"($f)":"")."\n";
	chmod($stat[2],"bin/root-config.new");
	unlink("bin/root-config") if ( -e "bin/root-config");
	rename("bin/root-config.new","bin/root-config");
    } else {
	print "=> No changes necessary\n";
	unlink("bin/root-config.new") if ( -e "bin/root-config.new");
    }
} else {
    unlink("bin/root-config.new") if ( -e "bin/root-config.new");
    if ($mod){
	print 
	    "=> NOTE bin/root-config need modifications\n".
	    "=> If you are done with compilation, run this script with -fix argument\n";
    } else {
	print "=> There is nothing to do with bin/root-config\n";
    }
}




sub Die
{
    my($file)=@_;
    die "Could not unlink $file ($!) - Is this a token or accesss perm issue?\n";
}
