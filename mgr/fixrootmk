#!/usr/bin/env perl

#
# This shift/noshit selection is always a mess ...
# Get around by fixing ROOT make file + some special actions
# we need to perform due to an AFS based installation.
#
# (c) J. Lauret 2003 - 2008
#
# -fix  re-establish the link for system.rootrc and also fixes
#       bin/root-config
# 
#

$CERNL = $ENV{CERN_LEVEL};
$CERN  = $ENV{CERN};

if ( ! defined($CERNL) ){
    die "No CERN_LEVEL defined. Cannot proceed.\n";
}
if ( ! defined($CERN) ){
    print "CERN defined as /cern\n";
    $CERN = "/cern";
}

if ( ! -e "config/Makefile.config"){
    die "You are probably not in the proper directory\n";
} 



# Now parse arguments
$ULINK = $FIXIT = 0;
while ( defined($arg = shift(@ARGV))) {
    #print "$arg\n";
    if ($arg eq "-fix"){      $FIXIT = 1;}
    if ($arg eq "-unlink"){   $ULINK = 1;}
}



#
# The etc/ files are links - we will now warn only
# and control this behavior via a arg call.
#
$ADDMESS="";
print "Checking etc/ files\n";
foreach $file (("system.rootrc","root.mimes")){
    if ( -l "etc/$file.new" && ! -l "etc/$file"){
	if ($FIXIT){
	    print "  Establishing etc/$file\n";
	    $link = readlink("etc/$file.new");
	    $link =~ s/\.new//;
	    if ( -f "etc/$file" ){  unlink("etc/$file");}
	    system("/bin/ln -s $link etc/$file");
	} else {
	    print 
		" + Native etc/$file - we could establish a link to common file\n".
		"   Use -fix if you want to do that (but after all is compiled)\n";
	}
    } elsif ( -e "etc/$file"){
	if ( ! -e "etc/$file.new"){
	    print "  WARNING Could not find $file.new\n";
	} else {
	    # This also requires an arg because we do not want to alter anything
	    # by accident if the post-comoiation actions were all made
	    if ( $ULINK ){
		print "  Unlinking $file\n";
		unlink("etc/$file");
	    } else {
		print 
		    " + etc/$file is a link - you may want to remove using -ulink\n";
		$ADDMESS = " * WARNING you MUST do this before starting compilation\n";
	    }
	}
    }
}
print $ADDMESS if ($ADDMESS ne "");


#+
# Now back on the shift stuff, the main purpose of this helper script
#-
if ( ! -e "$CERN/$CERNL/lib/libpacklib_noshift.a"){
    die "$CERN/$CERNL/lib/libpacklib_noshift.a does not exist. Would not know what to do...\n";
}

$ERR = 0;


if ( ! open(FI, "config/Makefile.config") || ! open(FO,">config/Makefile.config.new") ){
    print " * ERROR cannot open file - trying to proceed\n";
    $ERR = 1;
}

$done = 0;

while ( defined($line = <FI>) ){
    chomp($line);
    if ($line =~ m/CERNLIBS\s+:=\s*$/){
	print FO "CERNLIBS := $CERN/$CERNL/lib/libpacklib_noshift.a $CERN/$CERNL/lib/libkernlib.a\n";
	print    "CERNLIBS := $CERN/$CERNL/lib/libpacklib_noshift.a $CERN/$CERNL/lib/libkernlib.a\n";
	$done = 1;
    } elsif ( $line =~ m/BUILDHBOOK/){
	# Introduced at ROOT 4.04.02
	print FO "BUILDHBOOK := yes\n";
    } else {
	print FO "$line\n";
    }
}
close(FI);
close(FO);



if ($done){
    rename("config/Makefile.config",    "config/Makefile.config.old");
    rename("config/Makefile.config.new","config/Makefile.config");

    print "=> config/Makefile.config fixed\n";
} else {
    print "=> config/Makefile.config already fixed\n";
    unlink("config/Makefile.config.new");
}





#
# This was added in 2007/10 JL - lack of local copy disturbs
# the make process
#
if ( -l  "config.status" ){
    my($f)=readlink("config.status");
    unlink("config.status");
    system("/bin/cp -p $f ./config.status");
    if ( ! -e "config.status"){
	die "We failed to copy $f to ./config.status - Please fix manually\n";
    }
}



#
# Now we can proceed with FIXIT additional tasks
#
$ARCH = $CONFIG = $SUP = "";

if ( -e "config.log"){
    if ( open(FI,"config.log") ){
	while ( defined($line = <FI>) ){
	    if ( $line =~ m/(Result: Enabled support for)(.*)/){
		$SUP = $2;
		$SUP =~ s/,//g;
		chop($SUP);
	    }
	}
	close(FI);
    }
}
if ( -e "config.status"){
    if ( open(FI,"config.status") ){
	while ( defined($line = <FI>) ){
	    if ($line =~ m/--enable/){
		chomp($line);
		$CONFIG = $line;
		@items  = split(" ",$line);
		$ARCH   = $items[0];
	    }
	}
	close(FI);
    }
}


print
    "\n".
    "Checking bin/root-config\n".
    " + ARCH   = [$ARCH] \n".
    " + CONFIG = [$CONFIG]\n".
    " + SUP    = [$SUP]\n";


# now we have all we need to re-write root-config file
# The below logic will also remove the link because it will re-generate
$mod = 0;
if ( -e "bin/root-config"){
    if ( open(FI,"bin/root-config") ){
	if ( open(FO,">bin/root-config.new") ){
	    while ( defined($line = <FI>) ){
		chomp($line);
		if ( $line =~ m/(arch=)(.*)/ ){
		    #print "Match! [$line]\n";
		    if ( $2 ne $ARCH && $ARCH ne ""){
			$mod = 1;
			print FO "arch=$ARCH\n";
			next;
		    }
		}
		if ( $line =~ m/(features=\")(.*)(\")/){
		    if ( $2 ne $SUP && $SUP ne ""){
			$mod = 1;
			print FO "features=\"$SUP\"\n";
			next;
		    }
		}
		if ( $line =~ m/(configargs=\")(.*)(\")/){
		    if ( $2 ne $CONFIG && $CONFIG ne ""){
			$mod = 1;
			print FO "configargs=\"$CONFIG\"\n";
			next;
		    }
		}
		print FO "$line\n";
	    }
	    close(FO);
	} else {
	    print " * ERROR could not open file for write (token issue?)\n";
	    $ERR = 1;
	}
	close(FI);
    }
}


# if modifications are needed, rename else blabla and cleanup
if ( $ERR){
    die "Please fix errors above and try again\n";
}

if ($FIXIT){
    if ( $mod ){
	$i = $f = "bin/root-config";
	if ( -l $f){  $f = readlink($f);}
	@stat = stat($f);

	print "=> Modifying the file $i ".($i ne $f?"($f)":"")."\n";
	chmod($stat[2],"bin/root-config.new");
	unlink("bin/root-config") if ( -e "bin/root-config");
	rename("bin/root-config.new","bin/root-config");
    } else {
	print "=> No changes necessary\n";
	unlink("bin/root-config.new") if ( -e "bin/root-config.new");
    }
} else {
    unlink("bin/root-config.new") if ( -e "bin/root-config.new");
    if ($mod){
	print 
	    "=> NOTE bin/root-config need modifications\n".
	    "=> If you are done with compilation, run this script with -fix argument\n";
    } else {
	print "=> There is nothing to do with bin/root-config\n";
    }
}




