#!/usr/local/bin/perl
use Env;
use File::Basename;
use File::Copy;
system 'echo "Starting job execution at" `date` " on " $HOSTNAME';
print "STAR_LEVEL = $STAR_LEVEL\n";
my $Chain = "";
die "No input Chain defined" if ! defined($ARGV[0]);
for (my $i = 0;$i<=$#ARGV;$i++){
  if ($ARGV[$i] && ! ($ARGV[$i] =~ /\./)) {$Chain .= " " .  $ARGV[$i];}
}
my  $input_file;
my  @ACTUAL_OUTPUTS = ($ACTUAL_OUTPUT0,
		       $ACTUAL_OUTPUT1,
		       $ACTUAL_OUTPUT2,
		       $ACTUAL_OUTPUT3,
		       $ACTUAL_OUTPUT4,
		       $ACTUAL_OUTPUT5,
		       $ACTUAL_OUTPUT6,
		       $ACTUAL_OUTPUT7,
		       $ACTUAL_OUTPUT8,
		       $ACTUAL_OUTPUT9);
my @OUTPUTS = ($OUTPUT0,
	       $OUTPUT1,
	       $OUTPUT2,
	       $OUTPUT3,
	       $OUTPUT4,
	       $OUTPUT5,
	       $OUTPUT6,
	       $OUTPUT7,
	       $OUTPUT8,
	       $OUTPUT9);
my  @OUTPUT_FILES = ();
my  @output_files = ();
if ($ACTUAL_INPUT0) {
  chomp ($ACTUAL_INPUT0);
  print "Input: ",$ACTUAL_INPUT0, "\n";
  $input_file = basename($ACTUAL_INPUT0);
  print "input: ",$input_file,"\n";
  foreach my $actual_output (@ACTUAL_OUTPUTS) {
    if ($actual_output) {
      my $out = convert($actual_output);
      push @OUTPUT_FILES, $out;
      my $outf = basename($out);
      push @output_files, $outf;
    }
  }
  print "ACTUAL_OUTPUTS = @ACTUAL_OUTPUTS\n";
  print "OUTPUT_FILES   = @OUTPUT_FILES\n";
  print "output_files   = @output_files\n";
  my $out_dir      = dirname ($OUTPUT_FILES[0]);
  print "Dirname:", $out_dir, "\n";
  if ($out_dir && !-d $out_dir) {mkdir $out_dir,0773;}
  foreach my $out (@output_files) {unlink $out if $out && -f $out;}
  symlink $INPUT0      ,  $input_file;
  for (my $i = 0; $i<=$#OUTPUT_FILES; $i++) {
    next if ! $output_files[$i];
#    symlink $OUTPUT_FILES[$i],  $output_files[$i];# keep files on disk
    symlink $output_files[$i],  $OUTPUTS[$i]; # convert to real names
  }
}
else {
  for (my $i = 0;$i<=$#ARGV;$i++){
    if ($ARGV[$i] && $ARGV[$i] =~ /\./) {$input_file =  $ARGV[$i];}
  }
}
die "No input file has been defined" if ! $input_file;
my $NofEvents = 10000;
if ($input_file =~ /evts/){
  my $dummy,  $evts, $ev;
  ($dummy, $dummy, $evts)  = split /_/, $input_file;
  ($ev, $dumm) = split /e/, $evts;
  if ($ev > 0 && $ev < 100000000) {$NofEvents = $ev;}
}
my $inFile = $input_file;
  $inFile =~ s/daq/log/g;

symlink "/star/data03/reco/StarDb", "StarDb";

$cmd = " root4star -b -q 'bfc.C(" . $NofEvents . ",\"" . $Chain . "\",\"" . $input_file . "\")\'";
print $cmd,"\n";
system $cmd;
system 'echo "Finished job execution at" `date` " on " `hostname`'; 
for (my $i = 0; $i<=$#OUTPUT_FILES; $i++) {
  next if !$OUTPUT_FILES[$i];
  copy($output_files[$i], $OUTPUT_FILES[$i]);
}
system 'echo "Finished with files copying at" `date` " on " `hostname`'; 

exit 0;
#______________________________________________________
sub copy {
  my ($sp,$tp) = @_;
  print "copy $sp to $tp\n";
  my($mode, $length, $atime, $mtime) = (stat($sp))[2,7,8,9];
  print "Request for copy of $sp(mode=$mode,length=$length,atime=$atime,mtime=$mtime) to $tp\n";
  if (-r $sp) {
    if (! File::Copy::copy($sp, $tp)) {
      warn qq($0: can\'t copy "$sp" to "$tp" ($!)\n); #'
    }
    else {
      print "Copied $sp to $tp\n";
    }
  }
}
#______________________________________________________
sub convert($) {
  my $new_name = $_[0];
#  $new_name =~ s'/home/starreco/reco'/star/rcf/disk00001/star/reco'g;
  $new_name =~ s|/home/starreco/reco|/star/data08/reco|g;
  return $new_name;
}
#________________________________________________________________________________
__END__;





