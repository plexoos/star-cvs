/*    pxlControl
*
*  Table: pxlControl
*
* description: Control parameters for the PXL 
* 
*/ 

struct pxlControl {
  unsigned long headerToken; /* sector header token */
  unsigned long separatorToken; /* seperator token at the end of hits data block */
  unsigned long endToken; /* sector data end token */
  unsigned long dummyState; /* dummy last state when a sensor ends on the lower 16 bits of a 32-bit word */
  float pixelSize; /* size of one pixel */
  float centerOfDiodeZ; /* centor z of sensitive diode relative to pixel centor */
  float centerOfDiodeX; /* centor x of sensitive diode relative to pixel centor */
  octet headerLength; /* length of sector data header */
  octet hardwareIdPosition; /* position for hardware id, including sector number */
  octet chipIdStartBit; /* start bit for chip id */
  octet chipIdEndBit; /* end bit for chip id */
  octet chipIdPow; /* chipId = mChipIdPow*chipIdFromHigher16Bits+chipIdFromLower16Bits */
  octet overflowBit; /* bit for row overflow (more fired columns than can be read) */
  octet rowOrColumnFlagBit; /* bit for rowOrColumnFlag, determining "data" is row or column number */
  octet codingStartBit; /* start bit for "coding", which means how many sequential fired columns */
  octet codingEndBit; /* end bit for "coding", which means how many sequential fired columns */
  octet dataStartBit; /* start bit for "data" (row / column number depending on rowOrColumnFlag) */
  octet dataEndBit; /* end bit for "data" (row / column number depending on rowOrColumnFlag) */
  octet sensorGoodStatusMin; /* minimum for sensor good status range */
  octet sensorGoodStatusMax; /* maximum for sensor good status range */
  octet rowColumnGoodStatus; /* row and column good status */
};
