C_geant3_UNIX_compiler..v....3....v....4....v....5....v....6....v....7....v....8....v....9....v....100..v....110..v
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ$_(,.=-+/*) ':%?abcdefghijklmnopqrstuvwxyz{;#@"!}[]<>|&~?\`^????C|r{}bdep<>@#s?????
%N
(E1) (NULL TEMPLATE IN RULE DEFINITION)             (F1) (STRING OR STATEMENT TOO LONG)
(E2) (the BLOCK was not CREATed)                    (F2) (ERROR IN COUNT FIELD OF QUANTIFIER)
(E3) (UNKNOWN COLUMN 1 DIRECTIVE. DEFAULT ASSUMED)  (F3) (GEANT3 WORK SPACE EXCEEDED)
(E4) (1000 RULES EVALUATED WITH NO OUTPUT)          (F4) (NOSUCH ARG. IN TEMPLATE OF RULE.)
(E7) (NO LABEL FOR THIS RIGHT BRACKET)              (F5) (ERROR IN EVALUATOR IF-THEN-ELSE)
(E8) (the END-OF-BLOCK does not match any block)    (F6) (NUMBER OF RULES EXCEEDS CAPACITY)
(E9) (FIRST SYMBOL IN TEMPLATE MUST BE PRINTABLE)   (F7) (ILLEGAL USE OF BREAK SYMBOL)
(EA) (DIVISION BY ZERO IN C-EXPRESSION)             (F8) (TOO MANY FORTRAN STATEMENT LABELS GENERATED)
(EB) (INVALID OPERATOR IN C-EXPR)                   (F9) (ILLEGAL SYMBOL IN RULE DEFINITION)
(EC) (INCORRECT RULE FORMAT. IGNORED.)              (FA) ( WARNINGS ISSUED>100)
(ED) (UNCLOSED STRING PREDICATE)                    (FB) (GEANT3 RULE-SPACE EXCEEDED)
(EE) (NULL FOLLOWS FORTRAN LABEL)                   (FH) (UNKNOWN PRIMITIVE )
(EF) (UNDEFINED SPECIFIER)                          (FI) (EVALUATOR IF-ELSE NESTING TOO DEEP)
(EG) (UNCLOSED LOOP OR BLOCK)                       (FJ) (INDIRECT SPECIFIER REFERENCES>50)
(EH) (INCORRECT SPECIFICATION)                      (FK) (QUALIFIERS+QUANTIFIERS IN ONE SPECIFIER>50)
(EJ) (INVALID SPECIFICATION)                        (FL) (FORTRAN LABELS ON STACK>50)
(EK) (MISSING RIGHT BRACE ON SPECIFIER)             (FM) (NESTING LEVEL GREATER THAN 50)
(EL) (TEMPLATE MAY NOT BEGIN WITH PARAMETER MARKER) (FN) (MORE THAN 100 OPERANDS+OPERATORS IN C-EXPR)
(EM) (ILLEGAL SYMBOL, COLUMN 1 DIRECTIVE)           (FY) (LEVELS OF EVALUATOR NESTING>50)
(EN) (INVALID C-EXPRESSION)                         (FU) (INPUT UNITS PENDING>50)
(EP) (INCORRECT NESTING OF EVALUATOR IF-ELSE)       (EU) (ERROR FROM USER ROUTINE)
(FZ) (ERROR DURING USER INITIALIZATION)
(D1) (LOCATIONS RECOVERED)                          (D2) (LOCATIONS REMAINING)
(D3) (PERCENT RULE CAPACITY REMAINING)              (D4) (EOF ON INPUT UNIT)
(G1) (END OF GEANT3 INPUT)    (G2) (LABEL NOT USED)      (G3) (UNCLOSED BLOCKS)
(G4) (UNCLOSED COMMENT)       (G5) (UNCLOSED STRING)     (G6) (NO GEANT3 ERRORS DETECTED)
(G7) (GEANT3 ERROR(S))
;
 (!ANNOTATE;)    4(1@SA=;)        (!NOANNOTATE;)    4(0@SA=;)  "M-in => F-out as comments"
 (!COMMENTS;)    4(1@SP=;)        (!NOCOMMENTS;)    4(0@SP=;)  "M-comments => F-comments "
 (!DEFINE;)      4(1@SD=;)        (!NODEFINE;)      4(0@SD=;)  "New macro => M-listing   "
 (!STRINGS;)     4(1@SS=;)        (!NOSTRINGS;)     4(0@SS=;)  "M-input ' => F-output '' "
 (!UPLOW;)       4(1@SL2=;)       (!NOUPLOW;)       4(0@SL2=;) "M-input case UN/Sensitive"
 (!LIST;)        4(1@SL=;)        (!NOLIST;)        4(0@SL=;)  "write M-listing file     "
 (!FORTRAN;)     4(1@SF=;)        (!GEANT3;)        4(0@SF=;)   (!GEANT;)        4(0@SF=;)
 (!BLACK;)       4(1@SX=;)        (!GREEN;)         4(0@SX=;)
 (!LOCAL;)       4(@SYC@SZ=;)     (!ENDLOCAL;)      4(@K;0@SZ=)
 (!RECOVER;)     4(@K;)           (!CONDITIONAL;)   4(1@SJ2=)
 (!TRACE@110;)   4(#1@ST=;)       (!NOTRACE;)       4(0@ST=;)
 (!REPORT@110;)  4(1@SS1=;)       (!DEFAULT@110;)   4(#1@SV=;)
 (!MODE@110;)    4(#1@SX1=;)      (!TRIGGER (@111)) 4(#1@SK=)
 (!LABELS@110;)  4([B(#1)]@SG=;)  (!SEQUENCE@110;)  4([B(#1)]@SJ=;)
 (!EUNIT@110;)   4(#1@SK2=;)      (!INDENTC@110;) 4(#1@SD1=;)
 (!INDENTM@110;) 4(#1@SR1=;)      (!INDENTF@110;) 4(#1@SI=;)
 (GENERATE)4(@CG)             (NOGENERATE)4(@CN)           (ENDGENERATE)4(@CE)
 (GENERATE)0(@CG)             (NOGENERATE)0(@CN)           (ENDGENERATE)0(@CE)
 (RESCAN)  4 ((@J6@@111@J7)2(@JZ@JV@@B(@JV@@G1@JW)@JW##1_)) ;      RESCAN;
 ([COMPUTE @001]) 1(@JV@@C(#1)@JW)  ([REDUCE @001])  1(@JV@@E#1@JW)
 ([BINARY(@001)]) 1(@JV@@B(#1)@JW)  ([USER @001])    1(@JV@@U(#1)@JW)
 ([LENGTH @001])  1(@JV@@G#1@JW)    ([WAIT @001])    1(@JV@@D#1@JW)
 ([INCR @001])    1(A@JTU#1+)       ([DECR @001])    1(A@JTU#1-)
 ([NULL @001])    1('@JU#1'='')     ([EXIST @001])   1('@JU#1'~'')
 ([MCUR+])        1(@@SN2C2)        ([MCUR-])        1(@@SN2C0)       ([MCURX]) 1(@@SN2C1)
 ([QUOTE @000])   1('#1')           ([EMIT@000])     1(@SE3C#1@SF3C)    ([P@000]) 1(@JU#1)
 ([COPY @001])    1(A@JTU#1C)       ([COPY@001BASE@001])1(#2@JTU#1C)
 ([SETR @110=@110])            1(@JV@@B(#2)@JWA@JTU#1=)
 ([SETH @110=@110])            1(@JV@@A #2 @JWA@JTU#1=)
 ({IF}@010{@010})              1(@JTP0000@JV@@C(#1)@JW@JH#2@JG)
 ({IF}@010{@010}{ELSE}{@010})  1(@JTP0000@JV@@C(#1)@JW@JH#2@JG@JH#3@JG)
 (APPEND[@000]TO[@000])        4(@JL#2@JKC@JL#1@JK)
 (APPEND'@000'TO'@000')        4(@JL#2@JKC@JL#1@JK)
 (DFN[@000]AS[@000])           4(@JL[2#1]@JK @JL[1#2]@JK)
 (REPLACE[@000]WITH[@000])     4(@JL[2#1]@JK @JL[1#2]@JK)
 (SPECIFY @000 AS @000;)       4(@JL#1@JK3@JL[3#2]@JK)
 (KEEP[@000.@000;@000])        4(@JL+CDE,[2#1];@JK @JL[1"#1 included:";#3;]@JK;)

 (##) 2 (@JT111)                " [#]  ---> <MARKER><LENGTH(BINARY)>#1 "
 ([ARB;])2(@JT001) ([(ARB;)])2(@JT101)   ([{ARB;}])2(@JT011)   ([({ARB;})])2(@JT111)
                   ([{(ARB;)}])2(@JT111) ([ARB]) 2(@JT000)     ([(ARB)]) 2(@JT100)
                   ([{ARB}]) 2(@JT101)   ([({ARB})]) 2(@JT110) ([{(ARB)}]) 2(@JT110)
 !DEFAULT 1;  REPLACE["[ARB]"]   WITH   [@JV@@F#1@JW] ;         !DEFAULT 4;
"----------------------------------------------------------------------------------------"
 !CONDITIONAL;  !STRINGS;
 SPECIFY MRF{@000}           AS   [B(100+#1)];                            "100=NSM"
 SPECIFY |                   AS   MRF{1};
 SPECIFY (@111...@111)       AS   MRF{2}#1#2;
 SPECIFY {@111}              AS   MRF{3}#1MRF{4}11;
 SPECIFY (@111){@111}        AS   MRF{3}#2MRF{4}[B(#1)][B(#1)];
 SPECIFY (@111,@111){@111}   AS   MRF{3}#3MRF{4}[B(#1)][B(#2)];
 REPLACE [REMOVE@000'@000']  WITH [@JL[2#2]@JK
                             {IF}'#1'='SPECIFIER'{E@JL@JK}
                             {ELSE}{{IF}'#1'='RULE'{D@JL@JK}
                             {ELSE}{[EMIT**ILLEGAL REMOVE]} } ];
 REMOVE SPECIFIER'MRF{@000}';
"----------------------------------------------------------------------------------------"
 !BLACK;
" Syntaxis rules start here.  BLACK means generate rules,  GREEN - execute them "
  SPECIFY  GENSWITCH AS {'ON'|'OFF'};
  SPECIFY  DIGIT  AS (0...9);   SPECIFY LETTER AS (A..._);   SPECIFY ALPHAS AS (0..._);
  SPECIFY  NAME   AS (1,8){LETTER};        SPECIFY NUMBER  AS  (1,8){DIGIT};
  SPECIFY  IDENT  AS LETTER(0,9){ALPHAS};  SPECIFY  OSYS   AS  {(0,6){LETTER}};
  SPECIFY  GENAME AS (1,16){ALPHAS};
  SPECIFY  REL   AS  {'<'|'<='|'=='|'>'|'>='|'=>'|'~='|'##'|'='};
  SPECIFY  OPR   AS  {'+'|'-'|'*'|'/'|'**'};
  SPECIFY  0SYS  AS  {'<='|'=>'|'>='|'=>'|'<'|'>'|'=='|'='|'~='|'##'|'!='};
  SPECIFY  1SYS  AS  {'WHILE'|'UNTIL'|'LOOP'|'DO'|'FOR '|'UNTUL'};
  SPECIFY  2SYS  AS  {'IF'|'UNLESS'};
  SPECIFY  3SYS  AS  {2SYS|1SYS};
  SPECIFY  4SYS  AS  {(1,5){DIGIT}};
  SPECIFY  5SYS  AS  {(0,5){DIGIT}};
  SPECIFY  6SYS  AS  {(1,32){LETTER}};
  SPECIFY  7SYS  AS  {'BREAK'|'NEXT'};
  SPECIFY  8SYS  AS  {'WHILE'|'UNTIL'};
  SPECIFY  9SYS  AS  {':'|';'|'}'};
  SPECIFY 10SYS  AS  {(1,32){ALPHAS}};
  SPECIFY  SSYS  AS  {'PROGRAM'|'FUNCTION'|'SUBROUTINE'};
  SPECIFY  GSYS3 AS  {'COMPONENT'|'MIXTURE'|'MEDIUM'|'MATERIAL'|'ATTRIBUTE'};
  SPECIFY  GSYS4 AS  {'PARTICLE'|'POSITION'|'SHAPE'|'CREATE AND POSITION'};
  SPECIFY  GSYS0 AS  {GSYS3|GSYS4};
  SPECIFY  GSYS1 AS  {'AUTHOR'|'CREATED'};
  SPECIFY  GSYS2 AS  {'MODULE'|'BLOCK'|'FILL'|'USE'|'HITS'|'DIGI'};
  SPECIFY  GSYSH AS  {'HITS'|'DIGI'};
  SPECIFY  GSYSA AS  {GSYS3|GSYS4|GSYS1|GSYS2|GSYSH};
  SPECIFY  GSYSN AS  {(4,4){LETTER}};
  SPECIFY  KSYS1 AS  {'IFIELD'|'FIELDM'|'TMAXFD'|'EPSIL'|'STEMAX'|'DMAXMS'|'RADL'|'NLMAT'};
  SPECIFY  KSYS2 AS  {'NDIV'|'STEP'|'IAXIS'|'C0'|'NDVMAX'|'STMIN'|'DEEMAX'|'ABSL'|'DENS'};
  SPECIFY  KSYS3 AS  {'PHIX'|'THETAX'|'PHIY'|'THETAY'|'PHIZ'|'THETAZ'|'SERIAL'|'MOTHER'};
  SPECIFY  KSYS4 AS  {'ALPHAX'|'ALPHAY'|'ALPHAZ'|'ALFAX'|'ALFAY'|'ALFAZ'|'ORT'|'NCOPY'};
  SPECIFY  KSYS5 AS  {'WORK'|'SEEN'|'LSTY'|'LWID'|'COLO'|'FILL'|'ISVOL'|'KONLY'};
  SPECIFY  KSYS6 AS  {'H1'|'TL1'|'BL1'|'DX1'|'DY1'|'PHI1'|'THE1'|'ALP1'|'NPDIV'};
  SPECIFY  KSYS7 AS  {'H2'|'TL2'|'BL2'|'DX2'|'DY2'|'PHI2'|'THE2'|'ALP2'|'NPDV'};
  SPECIFY  KSYS8 AS  {'DX'|'DY'|'DZ'|'RMIN'|'RMAX'|'DPHI'|'NZ'|'ALPH'|'THET'|'TWIS'|'TWIST'};
  SPECIFY  KSYS9 AS  {'RMN1'|'RMN2'|'RMX1'|'RMX2'|'RMN'|'RMX'|'ZI'|'AA'|'ZZ'|'WW'|'PHI'};
  SPECIFY  KSYSC AS  {'LX'|'LY'|'LZ'|'HX'|'HY'|'HZ'|'P1'|'P2'};
  SPECIFY  KSYSB AS  {'CODE'|'PDG'|'TRKTYP'|'MASS'|'CHARGE'|'TLIFE'|'BRATIO'|'MODE'};
  SPECIFY  KSYS0 AS  {KSYS1|KSYS2|KSYS3|KSYS4|KSYS5|KSYS6|KSYS7|KSYS8|KSYS9|KSYSB|KSYSC|LETTER};
" if anything survived until here this is an error "
  REPLACE [ENDFILL]               WITH [; <wrong fill syntax> ; ]
  REPLACE [;[GSYSA] [IDENT]#;]    WITH [; <unrecognized geant operator> : #1 #2 #3; ]
  REPLACE [;<#>[GSYSA] [IDENT]#;] WITH [; <unrecognized geant operator> : #2 #3 #4; ]

  DFN [SET<[GENAME]>=[GENSWITCH];] AS
  [{IF}'#2'='ON'{!DEFAULT 0; DFN[<#1>] AS [GENERATE]; !DEFAULT 4; DFN[<#1>] AS [GENERATE]}
   {ELSE}   {!DEFAULT 0; DFN[<#1>] AS [NOGENERATE]; !DEFAULT 4; DFN[<#1>] AS [NOGENERATE]}]
  !DEFAULT 0; DFN[<END>] AS [ENDGENERATE];!DEFAULT 4; DFN[<END>] AS [ENDGENERATE]
;
  REPLACE [:[10SYS]:]     WITH [@Q0 REPLACE[:[P1]:]WITH[@LC00] @LC00@LU0]
  REPLACE[;:[10SYS]:]     WITH [;[REDUCE :[P1]:]]
  REPLACE[(#,#=#)]        WITH [[EMIT(][P1],[P2]=[P3])]
  REPLACE[;[4SYS][9SYS]]  WITH [[EMIT;[P1]CONTINUE];[P2]]
  REPLACE [{]             WITH [;[EMIT ***********ILLEGAL LEFT BRACKET;]]

!GREEN;
  REPLACE[{]           WITH [;[MCUR+] @MSY]
  REPLACE[}]           WITH [;[MCUR-] [7@MU@@];]
  REPLACE[ENDBLOCK]    WITH [;[MCUR-] [7@MU@@]; [SETR B=0]]
  REPLACE[}ELSE{]      WITH [;[MCURX] @MRU[EMITELSE];]
  REPLACE[}ELSEIF#{]   WITH [;[MCURX] @MRT[EMITELSE IF ][5([P1])] THEN;]
  REPLACE[}[8SYS]#;]   WITH [[EMITIF] {IF}'[P1]'='WHILE'{([5~([P2])])}
                                      {ELSE} {[5([P2])]}      BREAK;}];
  " :label: condition operator"
  REPLACE [;[5SYS]IF(#)#;]     WITH [;[EMIT[P1]IF]      ([5([P2])]) [P3];]
  REPLACE [;[5SYS]ELSEIF(#)#;] WITH [;[EMIT[P1]ELSEIF]  ([5([P2])]) [P3];]
  REPLACE [;[5SYS]CHECK#;]     WITH [;"Skip Unless [P2]";[EMIT[P1]IF] ([5~([P2])]) NEXT;]
  REPLACE [;[5SYS][2SYS] (#)]  WITH [;" Check [P3] "
           ;[EMIT[P1]IF]   {IF}'[P2]'='IF' {[5([P3])]}  {ELSE} {([5~([P3])])} ];
  " :label: condition {block} ... "
  REPLACE [;[5SYS]DO #=#;]  WITH [;[MCUR+] "*" @MSX {IF} [NULL 1] {@Q0}
                    {ELSE} {[P1]@LS0[EMIT[P1]CONTINUE];} [7DO([P2]=[P3])]
          ];
   REPLACE [;[5SYS]DO #=#!]  WITH [;[MCUR+] "*" @MSX {IF} [NULL 1] {@Q0}
                    {ELSE} {[P1]@LS0[EMIT[P1]CONTINUE];} [7DO([P2]=[P3])] !
          ];
 REPLACE [;[5SYS]DO[NUMBER]#;]  WITH [[EMIT;[P1]DO [P2]] [P3];     ];
  REPLACE [;[5SYS][3SYS]#{]  WITH [;
            ;[MCUR+]    {IF}'[P2]'=2SYS
               {"*"; " Check [P3] "  @MSZ [EMIT[P1]IF]
                  {IF}'[P2]'='IF' {[5([P3])]}  {ELSE} {([5~([P3])])}  THEN; }
             {ELSE} { {IF}'[P2]'=1SYS
               {"*"; " Loop here      "   @MSX {IF} [NULL 1]  {@Q0}
                    {ELSE} {[P1]@LS0[EMIT[P1]CONTINUE];} [7[P2]([P3])] }  }
          ];

  REPLACE [;[5SYS]DOWHILE(#);] WITH [;[P1]WHILE  ([P2]) {; ]
  REPLACE [;[5SYS]ENDDO]       WITH [;[P1];[MCUR-][7@MU@@];]
!DEFAULT 7;
  REPLACE[FOR(#=# #)]    WITH [[P1]=[P2];[EMIT GO TO @LC03];[7([P3])[P1];]]
  REPLACE[LOOP()]        WITH [[EMIT@LC01CONTINUE];]
  REPLACE[WHILE(#)]      WITH [[EMIT@LC01IF]([5~([P1])]) GO TO @LC02;]
  REPLACE[UNTIL(#)]      WITH [[EMIT@LC01IF][5([P1])] GO TO @LC02;]
  REPLACE[DO(#=#,#)]     WITH [{IF}[COPY B] {[P1]=[P2];[EMIT GO TO @LC03];[7(TO [P3])[P1];]}
                               {ELSE} {@MRW[EMITDO @LC01] [P1]=[P2],[P3];} ];
  REPLACE[DO(#=#,#,#)]   WITH [{IF}[COPY B]{[P1]=[P2];[EMIT GOTO @LC03];
                                            [7(TO [P3] BY [P4])[P1];]}
                               {ELSE} {@MRW[EMITDO @LC01] [P1]=[P2],[P3],[P4];} ];
!BLACK;
" REPLACE[([4SYS])]      WITH [  [P1] ]   "                       ;
  REPLACE[(BY # TO #)#;] WITH
   [@LC01[P3]=[P3]+([P1]);[EMIT@LC03IF](([P1])*([P3]-([P2])).GT.0) GO TO @LC02;]
  REPLACE[(TO #)#;]      WITH
   [@LC01[P2]=[P2]+1;[EMIT@LC03IF]([P2]-([P1]).GT.0) GO TO @LC02;]
  REPLACE[(TO #BY #)#;]  WITH [(BY [P2] TO [P1])[P3];]

  REPLACE[Z@@] WITH [[EMIT;END IF];]
  REPLACE[T@@] WITH [[EMIT;END IF];]
  REPLACE[U@@] WITH [[EMIT;END IF];]
  REPLACE[W@@] WITH [[EMIT;@LC01CONTINUE;@LC02CONTINUE];@LU0]
  REPLACE[X@@] WITH [[EMIT;GO TO @LC01;@LC02CONTINUE];@LU0]
  REPLACE[Y@@] WITH [;]
  REPLACE[0@@] WITH [[EMITILLEGAL SYNTAX];]
;
  REPLACE[V@@] WITH [ [EMIT @LC01 CALL AgSPOPB;]  GO TO SYSNAME, (@LC00SYSLIST@LC09);
                     "End of Local Procedure";
                      REMOVE RULE'SYSLIST@LC09'; REMOVE RULE'SYSNAME'  @LU0    ]
!DEFAULT 4;
 REPLACE [PROCEDURE#;]   WITH
         [[REDUCE :BLOCK_[P1]:]@LS0 @Q0    "Call To Local Procedure [P1]"
          [REDUCE APPEND[,@LC00]TO[SYSLIST@LC19]]
          [EMIT ASSIGN @LC00 TO BLOCK_[P1];
           GO TO [COMPUTE :BLOCK_[P1]:];@LC00CONTINUE] ;@LU0@LU0
         ];
 REPLACE [;BLOCK [6SYS] #;] WITH
        [ {IF} [COPY M] {[EMIT; Call AgSENDM; RETURN;]}      [SETR M=0]
          {IF} [COPY B] {;" EndBlock inserted"; ENDBLOCK;}   [SETR B=1]
          @MSV;[MCUR+] [REDUCE :BLOCK_[P1]:]@LS0   "Begin Local Procedure [P1]"  " #1 #2 "
          [REDUCE REPLACE [SYSNAME] WITH [BLOCK_[P1]] ]  [EMIT @LC00CONTINUE] ;
          $Title='#1'; $Module=Module; $Mark='V00'; CALL AgSPUSH; $Module=Module; "*";
        ;]
 REPLACE [;BLOCK [6SYS] #{] WITH
        [ {IF} [COPY M] {[EMIT; Call AgSENDM; RETURN;]}  [SETR M=0]
          @MSV;[MCUR+] [REDUCE :BLOCK_[P1]:]@LS0   "Begin Local Procedure [P1]"  " #1 #2 "
          [REDUCE REPLACE [SYSNAME] WITH [BLOCK_[P1]] ]  [EMIT @LC00CONTINUE]
          $Title='#1'; $Module=Module; CALL AgSPUSH; $Module=Module; "*";
       ;]
 REPLACE [LEAVE#;]      WITH
        [{IF} [NULL 1] {GO TO @LC02;} {ELSE}{GO TO [COMPUTE :[P1]:+2];}];
"-----------------------------------------------------------------------------------------"
; " logical expressions "
  (&)5(.AND.)   (|)5(.OR.)   (~)5(.NOT.)    (!)5(.NOT.)                         ;
  (=)5(.EQ.)    (>)5(.GT.)   (<)5(.LT.)     (!=)5(.NE.)   (~!=)5(.EQ.)          ;
  (~=)5(.NE.)   (~>)5(.LE.)   (~<)5(.GE.)   (==)5(.EQ.)                         ;
  (=<)5(.LE.)   (>=)5(.GE.)   (<=)5(.LE.)   (=>)5(.GE.)   (~##)5(.EQ.)          ;
  (~<=)5(.GT.)  (~=>)5(.LT.)  (~=<)5(.GT.)  (~>=)5(.LT.)  (~~=)5(.EQ.)  (~==)5(.NE.);
  (~(~(@110)))        5((#1))             (~((@110)))         5(~(#1))          ;
  (~(@110[0SYS]@110)) 5(#1~#2#3)          (~(@110&@110))      5(~(#1)\~(#2))    ;
  (~(@110|@110))      5((~(#1))&(~(#2)))  (~(@110\@110))      5((~(#1))&(~(#2)));
  (~((@110)))         5 (~(#1))           (##) 5 (~=)         (\) 5 (|)         ;
  ( <[IDENT]< ) 5 ( <#1&#1< )  (~(@110 <[IDENT]< @110)) 5 (~(#1 <#2&#2< #3))    ;
  (<=[IDENT]<=) 5 (<=#1&#1<=)  (~(@110<=[IDENT]<=@110)) 5 (~(#1<=#2&#2<=#3))    ;
;
      REMOVE RULE'(@110)@110(@110)';      " phase one finish "
;
 REPLACE[OUTF(#)#;(#)] WITH [@Q0WRITE([P1],@LC00)[P2];@LC00FORMAT@LU0([P3]);]
 REPLACE[OUTPUT#;(#)]  WITH [@Q0WRITE(Lu,@LC00)[P1];@LC00FORMAT@LU0([P2]);]
 REPLACE[INPUT#;(#)]   WITH [@Q0READ (Li,@LC00)[P1];@LC00FORMAT@LU0([P2]);]
 REPLACE[<W>#;(#)]     WITH [@Q0WRITE(Lout,@LC00)[P1];@LC00FORMAT@LU0([P2])]
 REPLACE[<R>#;(#)]     WITH [@Q0READ (Linp,@LC00)[P1];@LC00FORMAT@LU0([P2])]
 REPLACE[{#=#,#;]      WITH [@MSW ;[MCUR+] @Q0 DO @LC01 [P1] = [P2],[P3];]
;
 REPLACE [;BREAK;]     WITH [;[EMIT GO TO @LC02];]
 REPLACE [;BREAK:#:;]  WITH [;[EMIT GO TO][COMPUTE :[P1]:+2];]
 REPLACE [)BREAK;]     WITH [)[EMIT GO TO @LC02];]
 REPLACE [)BREAK:#:;]  WITH [)[EMIT GO TO][COMPUTE :[P1]:+2];]
 REPLACE [;NEXT;]      WITH [;[EMIT GO TO @LC01];]
 REPLACE [;NEXT:#:;]   WITH [;[EMIT GO TO][COMPUTE :[P1]:+1];]
 REPLACE [)NEXT;]      WITH [)[EMIT GO TO @LC01];]
 REPLACE [)NEXT:#:;]   WITH [)[EMIT GO TO][COMPUTE :[P1]:+1];]

 DFN[RHO(# #)] AS [{IF}[EXIST 2]{[REDUCE APPEND[:#1:,]TO[TLIST]]RHO(#2 )}
                       {ELSE}{[REDUCE APPEND[:#1:]TO[TLIST]]GOTO(TLIST),JMP;
                               REMOVERULE'TLIST'                         }]
 DFN [CASE#OF(#)]     AS   [ "Case #1  Of (#2) selected " JMP=#1; RHO(#2)];
 REPLACE [}REPEAT]    WITH [}] ;
 REPLACE ['']         WITH [[EMIT']] ;

" some C-like constructions "
 REPLACE[;[5SYS]#-=#;] WITH [;[EMIT[P1]]#2=#2-#3;]   ;
 REPLACE[;[5SYS]#*=#;] WITH [;[EMIT[P1]]#2=#2*#3;]   ;
 REPLACE[;[5SYS]#+=#;] WITH [;[EMIT[P1]]#2=#2+#3;]   ;
 REPLACE[;[5SYS]#/=#;] WITH [;[EMIT[P1]]#2=#2/#3;]   ;
 REPLACE[;IF(#)#-=#;]  WITH [;IF(#1) #2=#2-#3;]      ;
 REPLACE[;IF(#)#+=#;]  WITH [;IF(#1) #2=#2+#3;]      ;
 REPLACE[;IF(#)#*=#;]  WITH [;IF(#1) #2=#2*#3;]      ;
 REPLACE[;IF(#)#/=#;]  WITH [;IF(#1) #2=#2/#3;]      ;
 REPLACE[{#,#}=#;] WITH [{IF}[EXIST 1]{;[P1]=[P3]; ;{[P2],}=[P3]};]
 REPLACE [-1+1)] WITH [)];
 REPLACE [;[GENAME]={#,#}]   WITH
         [ {IF}[EXIST 2]  {[INCR O]; #1([COPY O])=#2; #1={#3,} } {ELSE} {[SETR O=0];}]
 REPLACE [;_[NUMBER]_[IDENT].[IDENT]={#,#}]   WITH
         [ {IF}[EXIST 4]  {[INCR O]; #2.#3([COPY O],#1)=#4;
           _#1_#2.#3={#5,} } {ELSE} {[SETR O=0];}]
 REPLACE [;[GENAME]={#(#:#)}] WITH [; DO $i=#3,#4 {  #1($i-#3+1)=#2($i); };]
 REPLACE [;[GENAME]={#(#:#,#:#)}] WITH [;  DO $j=#5,#6 { DO $i=#3,#4
                                      { #1($i-#3+1,$j-#5+1)=#2($i,$j); } };]
"PN, 28.08.98: c-like for(;;)"
 REPLACE [;[5SYS]FOR(#;] WITH [;" For-Loop "[EMIT[P1]]#2;while(]
 REPLACE [while(#;]      WITH [ while(#1)( ]
 REPLACE [while(#)(#)#;] WITH [;{IF}[EXIST 1]{WHILE(#1)}{ELSE}{LOOP}{#3;#2;}]
 REPLACE [while(#)(#){]  WITH [;[MCUR+] @MSX @Q0 GO TO @LC03;"*"; @LC01 #2;
                                @LC03 {IF}[EXIST 1]{IF(~(#1)) GO TO @LC02};]
;
     !UPLOW; !DEFAULT 4; !BLACK;
;
 "----------------------------------------------------------------------"
 " register      P    H     M     N,U,V,W   O,Q     E     B     A       "
 " assignement  prin hist module  struct    vect  1cont Block StrCnt    "
 "----------------------------------------------------------------------"
 DFN [_P_ #;]         AS   [$$D#1; PROGRAM    #1; $$T#1;]  ;
 DFN [_F_ #;]         AS   [$$D#1; FUNCTION   #1; $$T#1;]  ;
 DFN [_S_ #;]         AS   [$$D#1; SUBROUTINE #1; $$T#1;]  ;
 DFN [_B_ #;]         AS   [$$D#1; BLOCK DATA #1; $$T#1;]  ;
 REPLACE [;[SSYS]#;]  WITH [!LABELS 1000; !LOCAL; [SETR E=1][SETR N=2];
                                 [EMIT #1 #2;] ^sub(#2());]
 REPLACE [^sub(#(#)#);]   with [DFN [^subname] AS ['#1'];]
 REPLACE [^sub(# #(#)#);] with [^sub(#1#2());]
 REPLACE [;END!#;]        with [ ;"#1";END;]
 DFN [;END;]          AS   [[EMIT; {IF}[COPY E]{ 1CONTINUE [SETR E=0]; }
                             {IF}[COPY M]{CALL AGSENDM; [SETR M=0]} END;]
                            [SETR H=0] [SETR P=0] !END LOCAL; !LABELS 1000; !LOCAL;];
 DFN [RETURN]        AS   [{IF}[COPY E]{[EMIT GO TO 1]}{ELSE}{[EMIT RETURN]};];
 DFN [QUIT]          AS   [{IF}[COPY E]{[EMIT GO TO 1]}{ELSE}{[EMIT RETURN]};];
 DFN [(([GENAME]))]   AS   [(#1)]                                    ;
 DFN[COMMON/#/#/#/#;] AS   [COMMON /#1/ #2; COMMON /#3/ #4;]         ;
 REPLACE[<H>]         WITH [[INCR H]]                                ;
 REPLACE[<P>]         WITH [[INCR P]]                                ;
;
 DFN [/*#*/]  AS
 [;"..."  "-----------------------------------------------------------"
   "#1"   "-----------------------------------------------------------" "...";]
 REPLACE [;_[NUMBER]_[GENAME]([NUMBER])=]          WITH [;#2(#3,#1)=]
 REPLACE [;_[NUMBER]_[IDENT].[IDENT]([NUMBER])=]   WITH [;#2.#3(#4,#1)=]
 REPLACE [;[GENAME]={#;]     with  [[INCR Q]; _[COPY Q]_#1={#2,}; #1={]
 REPLACE [;[GENAME]={#;#}]   with  [[INCR Q]; _[COPY Q]_#1={#2,};
                                    [INCR Q]; _[COPY Q]_#1={#3,}; [SETR Q=0]]
 REPLACE [;[IDENT].[IDENT]={#;] with [[INCR Q];_[COPY Q]_#1.#2={#3,}; #1.#2={]
 REPLACE [;[IDENT].[IDENT]={#;#}] with [[INCR Q];_[COPY Q]_#1.#2={#3,};
                               [INCR Q]; _[COPY Q]_#1.#2={#4,}; [SETR Q=0]]

"-------------------    g e a n t 3   d e f i n i t i o n s   -----------------------"
  Replace [;MODULE [GENAME]#;] with
          [;SUBROUTINE #1;  {IF} [EXIST 2] {" #1 #2"};  Implicit None;
            Character Module*20,Mcomment*80,Bank_Title*60;
            Data      Module/'#1'/,         Bank_Title/'*'/;
            {IF} [EXIST 2] {Data Mcomment/'#2'/;}
            {ELSE}         {Data Mcomment/'uncommented'/;}
            Logical FIRST; Data FIRST/.true./; Save FIRST;
            Integer JUMPAD; External JUMPAD;
            Integer Ok; Parameter (Ok=0);
            Integer %i,%j;  Save %i,%j;  Data %i/0/,%j/0/;
            [SETR M=1][SETR N=2][SETR V=0][SETR W=0][SETR O=0][SETR U=0]
            [SETR Q=0][SETR B=0][SETR A=0] ]
  Replace [;*#;] with ["* #1";]
  Replace [;BEGIN;] with [;"*"; CALL AgSBEGM(Module,Iprin); IF(Iprin<0) RETURN;]
 " Geant3 OPERATOR definition - skip assignements before and keep them in PARLIST "
  REPLACE [;[GSYS0]#{#,#}#;]   WITH
          [ {IF}[EXIST 3]  {[INCR O]; IF (#2==[COPY O]) { #1 #3 #5; }; #1 #2{#4,}#5;}
            {ELSE} {;"*"; UNLESS (0<#2&#2<=[COPY O]) { Print *,
            ' Error in #1 #2=',#2,': switch is outside range'; NEXT;} [SETR O=0];"*"; }]
  REPLACE [,;]  with [;]
  REPLACE [;<#>[GSYS0][10SYS];]  with
          [; %TITLE = '#3'; %EXNAME = '#2'; %ParList = '#1';Call Ax#2;"*"; ]
  REPLACE [;<#>[GSYS0][10SYS] [KSYS0]=#;]      with  [; %#4 = #5; <#1_#4>#2 #3; ]
  REPLACE [;<#>[GSYS0][10SYS],[KSYS0]=#;]      with  [; %#4 = #5; <#1_#4>#2 #3; ]
  REPLACE [;<#>[GSYS0][10SYS] [KSYS0]=# #=#;]  with  [; %#4 = #5; <#1_#4>#2 #3  #6=#7; ]
  REPLACE [;<#>[GSYS0][10SYS],[KSYS0]=# #=#;]  with  [; %#4 = #5; <#1_#4>#2 #3  #6=#7; ]
  REPLACE [;[GSYS0][10SYS];] with
          [;" Geant #1 : #2 ===> inherited arguments used <==="; Call AgSRESET;
           %TITLE = '#2'; %EXNAME = '#1'; %ParList = 'NONE'; Call Ax#1;"*";]
  REPLACE [;[GSYS0][10SYS] [KSYS0]=#;] with
          [;" Geant #1 : #2 ===> #3=#4 <==="; Call AgSRESET; %#3 = #4; <#3>#1 #2;]
  REPLACE [;[GSYS0][10SYS] [KSYS0]=# #=#;] with
          [;" Geant #1 : #2 ===> #3=#4 #5=#6 <===";
              Call AgSRESET; %#3 = #4; <#3>#1 #2 #5=#6;]

  REPLACE [;CREATE[GSYSN]#;]   with
          [;{IF}[COPY M]{ Call AGSBEGM(Module,Iprin); IF (Iprin<0) Return; }
           ;" Create #1 :#2 ";  PROCEDURE #1  ; "*"; ]
  REPLACE [;CREATE[GSYSN] [KSYS0]=#;]   with [; %#2 = #3; CREATE #1; ]
  REPLACE [;CREATE[GSYSN] [KSYS0]=# #=] with [; %#2 = #3; CREATE #1 #4=]
  REPLACE [;CONTENT [GSYSN];]  with  [ ;Integer BLOCK_#1;]
  REPLACE [;CONTENT #,#;]      with  [ {IF}[EXIST 1] {;Integer BLOCK_#1; CONTENT #2,;}
                                       {ELSE} {;}]
" --------------------------------------------------------------------------------"
Replace [;STRUCTURE#{#}]     with  [;STRUCTURE#1{#2,}]
Replace [;STRUCTURE#{#,#}]   with
   [;{IF}[EXIST 2] { {IF}'#2'='REAL SYSTEM(2)'   {[SETR N=0]}
                     {IF}'#2'='REAL SYSTEM ( 2)' {[SETR N=0]}
                     [INCR N] [INCR W] [SETR X=[COPY N]]
    "-" ^stv{#1,#2}; STRUCTURE #1{#3,}} {ELSE}
   {"-" Integer   Len_#1,Llen_#1,Link_#1;
        Parameter (Len_#1=[COPY N],Llen_#1=[COPY W]);
        Integer   Flag_#1/0/,Map_#1(2,Llen_#1),IDNum_#1(10);
        Character Names_#1(Llen_#1)*12,Commen_#1(Llen_#1)*40;
        data      Commen_#1/Llen_#1*' '/,IDNum_#1/10*0/;
        Real      Bank_#1(len_#1);  Character*60 Bpath_#1/' '/;
        Save      Flag_#1,Map_#1,IdNum_#1,Names_#1,Commen_#1,Bpath_#1;
        {IF}[COPY U]{ Common   /#1wnd/  Link_#1, Bank_#1;  }
        {ELSE}      { Data   Link_#1/0/,Bank_#1/Len_#1*0/;  Save  Link_#1,Bank_#1; }
                     DFN[q(link_#1] AS [Q(AG_LINK(Link_#1)]
       "*"  [SETR N=2][SETR W=0][SETR V=0][SETR U=0];
  }]
Replace [;STRUCTURE/#/]      with  [;[SETR U=1] STRUCTURE #1]
Replace [;COMMON STRUCTURE]  with  [;[SETR U=1] STRUCTURE]
Replace [;OLD STRUCTURE]     with  [;[SETR N=0] STRUCTURE]
replace [^stv{#,#}]          with  [^sck{REAL        #1_#2}; ^std{#1,R.#2}]
replace [^stv{#,REAL #}]     with  [^sck{REAL        #1_#2}; ^std{#1,R.#2}]
replace [^stv{#,INT  #}]     with  [^sck{INTEGER     #1_#2}; ^std{#1,I.#2}]
replace [^stv{#,CHAR #}]     with  [^sck{CHARACTER*4 #1_#2}; ^std{#1,H.#2}]
replace [^sck{#}]            with  [#1]
replace [^sck{#(#,[IDENT])}] with  [#1]
replace [^sck{#([IDENT]#)}]  with  [#1]
replace [^std{#,[LETTER].[IDENT]}]    with   [^std{#1,#2.#3()}]
" order is important: V is changed in dim, N is send to X and copied at the end !"
replace [^std{#,[LETTER].[IDENT](#)}] with
   [  DFN [dis_#1_#3] AS [[COPY N]];
      {IF}'#2'='R'{DFN [dis_#1_#3] AS [NINT(q(link_#1+[COPY N]))]
                   DFN [ind_#1_#3] AS [[COMPUTE [COPY N]+1000000]]}
      {IF}'#2'='I'{DFN [dis_#1_#3] AS [Iq(link_#1+[COPY N])]
                   DFN [ind_#1_#3] AS [[COPY N]]}
      equivalence (Bank_#1([COPY N]),#1_#3,re_#1_#3),(Names_#1([COPY W]),N#1_#3);
      equivalence (Commen_#1([COPY W]),C#1_#3),(Map_#1(1,[COPY W]),M#1_#3);
      character   C#1_#3*40, N#1_#3*12/'#2.#3'/;
      Integer     M#1_#3(2)/^dim{#1:#4}/;
      Real        re_#1_#3;  ^def(#1,#2,#3:#4)
   ]
replace [^dim{#:#}]   with [ {IF}[EXIST 2] {^dim{#1:#2,1}} {ELSE} {^dim{#1:1,1}} ]
replace [^dim{#:#,#}] with [ [INCR V] {IF}'#2'=NUMBER{#2} {ELSE}{-ind_#1_#2},
                                     {IF}'#3'=NUMBER{#3} {ELSE}{-ind_#1_#3}   ]
replace [^dim{#:[NUMBER],[NUMBER]}] with [[SETR N=[COPY N]+[REDUCE #2*#3]-1]#2,#3]
replace [^def(#)] with [ ]
"                          dynamic access definition                     "
replace [Hq(l] with [Iq(l]
replace [Rq(l] with [q(l]
replace [^def(#,[LETTER],#:)] with [DFN[#1.#3] AS [#2q(link_#1+[COPY X])] ]
replace [^def(#,[LETTER],#:[NUMBER])]   with
        [ DFN[#1.#3(##)] AS [#2q(link_#1^+([COPY X]-1+##1))] ]
replace [^def(#,[LETTER],#:[IDENT])]    with  [ DFN[#1_#3(##)] AS [#1_#3]
          DFN[#1.#3(##)] AS [#2q(lq(link_#1-[COPY V])^+(2+##1))]
          DFN[#1_#3(] AS [#1.#3(]          ]
replace [^def(#,[LETTER],#:[NUMBER],[NUMBER])] with
        [ DFN[#1.#3(##,##)] AS [#2q(link_#1^+((##2*#4)+[COPY X]-1-#4+##1))] ]
replace [^def(#,[LETTER],#:[NUMBER],[IDENT])] with   [ DFN[#1_#3(##)] AS [#1_#3]
          DFN[#1.#3(##,##)] AS [#2q(lq(link_#1-[COPY V])^+((##2*#4)+2-#4+##1))]
          DFN[#1_#3(] AS [#1.#3(]          ]
replace [^def(#,[LETTER],#:[IDENT],#)]        with   [ DFN[#1_#3(##)] AS [#1_#3]
          DFN[#1.#3(##,##)] AS [#2q(lq(link_#1-[COPY V])^+(2+##1)^+((##2-1)*dis_#1_#4))]
          DFN[#1_#3(] AS [#1.#3(]          ]
Replace [^+(#)]        with [+(#1)]
Replace [^+([NUMBER])] with [+#1]
Replace [^+(0*#)]      with [   ]
Replace [^+(1*#)]      with [+#1]
Replace [^+(([NUMBER][OPR][NUMBER])] with  [^+([COMPUTE  #1#2#3]]
Replace [^+(-[NUMBER][OPR][NUMBER]]  with  [^+([COMPUTE -#1#2#3]]
Replace [^+([NUMBER][OPR][NUMBER]]   with  [^+([COMPUTE  #1#2#3]]
"---------------------------------------------------------------------------------"
  Replace [SECURE [IDENT] #;]     with  [; IF (LINK_#1==0) LINK_#1=-1; ]
  Replace [;FILL #!#;]         with  [;[SETR S=0] [SETR Q=0] "*"BEGIN;
                   " Filling bank #1 - #2"; Bank_Title='#2'; ^bname=#1;(#1/) f]
  REPLACE [;USE #;] with [;" use default #1 bank"[SETR S=0]; ^bname=#1;(#1/) u;]
  REPLACE [;USE # [GENAME]=#;] with
                             [;" use #1 bank "[SETR S=0]; ^bname=#1;(#1/) u #2=#3;]
  REPLACE [;USE [GSYSN]DIG/] with [; USE /DETM/#1/]
  REPLACE [;USE [GSYSN]GEO/] with [; USE /DETM/#1/]

  Replace [^bname=#; ]           with [^short(#1)=#1;]
  Replace [^bname=#(#)]          with [^bname=#1]
  Replace [^short(#)=#;]         with [BPath_#1='#2*'; ^btit #1]
  Replace [^short(#/#)]          with [^short(#2)]
  Replace [^btit#([IDENT]/#)]    with [[INCR S] IDNum_#1([COPY S])={IF}[EXIST 3]{1}{ELSE}{0};
                                                                       ^btit#1(#3)]
  Replace [^btit#([IDENT](#)/#)] with [[INCR S] IDNum_#1([COPY S])=#3; ^btit#1(#4)]
  Replace [^btit#(/#)]           with [^btit#1(#2)]
  Replace [^btit#()]             with [^bfu #1]
  Replace [^bfu [IDENT] f]       with  [^fyll #1 " " ]
  Replace [^fyll [IDENT]] with [;  Call AgDOCUM (MODULE,
     MComment,Author,Created,Bank_Title,'#1',BPath_#1,IDNum_#1,[COPY S],
     Map_#1,Names_#1,Commen_#1,Bank_#1,Len_#1,Llen_#1,Link_#1,Flag_#1);
           "*" [SETR S=0];]
  Replace [^fyll [IDENT] ENDFILL]        with ["endfile" ^fyll #1]
" - significant comment in the next line to prevent arg1 merge with next word "
  Replace [^fyll [IDENT] [GENAME]=#!#;]  with [;"#4"; #1_#2=#3; C#1_#2='#4';  ^fyll #1  "-" ]
  Replace [^fyll [IDENT] [GENAME]={#;]   with [;[INCR Q]_[COPY Q]_#1_#2={#3,};^fyll #1 #2={]
  Replace [^fyll [IDENT] [GENAME]={#;#}!#;]  with  [;[INCR Q]_[COPY Q]_#1_#2={#3,};
           [INCR Q]_[COPY Q]_#1_#2={#4,};  "#5"; C#1_#2='#5'; [SETR Q=0] ^fyll #1 ]

  Replace [^bfu [IDENT] u#;] with [; call AgDGETP(^subname,'*',-999,'#1',' ',Bank_#1,
   Bpath_#1,IDNum_#1,[COPY S],Map_#1,Names_#1,Bank_#1,Len_#1,Llen_#1,Link_#1,Flag_#1) #2 ;]

  Replace [call AgDGETP(#,#,#,#,' ',Bank_#,#) #=# #;] with [ #5_#7=#8;
           call AgDGETP(#1,#2,#3,#4,'#7',re_#5_#7,#6) #9 ;]
  Replace [call AgDGETP(#,#,-999,#) STAT=# #;] with [call AgDGETP(#1,#2,#4,#3) #5 ;]
  Replace [call AgDGETP(#,'*',#)    OPER=# #;] with [call AgDGETP(#1,'#3',#2)  #4 ;]

"---------------------------------------------------------------------------------"

  REPLACE [;[GSYS1] #;] with [" #1 #2 "; Character*40 #1 /'#2'/;
           "* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*";]
  REPLACE [;[GSYSH]  [GSYSN] #;]  with
          [;"Defining Hits: #3";    %Title = '#2';  %EXNAME = '#1'; %TYPE=%Magic;
             Call AgsDETV('#2'); "*";  ~HITS #2 #3; Call AgsDETU('#2'); "*"; ]
  REPLACE [;[GSYSH]  [GSYSN] #=#:#;]  with
          [;"Defining Hits: #3=#4:#5";   %Title = '#2';  %EXNAME = '#1'; %TYPE=#4;
             Call AgsDETV('#2'); "*";  ~HITS #2 #3:#5; Call AgsDETU('#2'); "*"; ]
  REPLACE [;~HITS [GSYSN] [NAME]:#:#;]  with
          [;  %Parlist='#2'; %Title = 'DETH'; %Nbits = %magic;  %bin=#3;
              {IF}[EXIST 4]{ ~HITPAR(#4); }
              {ELSE} { %FHmin=%Magic; %FhMax=%Magic; %Option='*'; }
              Call AgsDETH ({IF} '#2'='USER' {JUMPAD(#1STEP)} {ELSE} {0}); "*"; ]
  REPLACE [;~HITS [GSYSN] [NAME]:[NUMBER]:#;]  with
          [;  %Parlist='#2'; %Title = 'DETH'; %Nbits = #3;  %bin=%Magic;
              {IF}[EXIST 4]{ ~HITPAR(#4); }
              {ELSE} { %FHmin=%Magic; %FhMax=%Magic; %Option='*'; }
              Call AgsDETH ({IF} '#2'='USER' {JUMPAD(#1STEP)} {ELSE} {0}); "*"; ]
  REPLACE [;~HITS [GSYSN] [NAME]:-[NUMBER]:#;]  with
          [;  %Parlist='#2'; %Title = 'DETH'; %Nbits =-#3;  %bin=%Magic;
              {IF}[EXIST 4]{ ~HITPAR(#4); }
              {ELSE} { %FHmin=%Magic; %FhMax=%Magic; %Option='*'; }
              Call AgsDETH ({IF} '#2'='USER' {JUMPAD(#1STEP)} {ELSE} {0}); "*"; ]
  REPLACE [;~HITS [GSYSN] [NAME]:# [NAME]]  with   [;~HITS #1 #2:#3; ~HITS #1 #4]
  REPLACE [;~HITPAR((#,#)#);]   With [;             %Option='*';
             {IF}[EXIST 1]{ %FhMin = #1; } {ELSE} { %FhMin = %Magic;}
             {IF}[EXIST 2]{ %FhMax = #2; } {ELSE} { %FhMax = %Magic;}     ]
  REPLACE [;~HITPAR([OSYS]#);] With [;
             {IF}[EXIST 1]{ %Option='#1';} {ELSE} { %Option='*'; }
             %FhMin = %Magic; %FhMax = %Magic; ]
  REPLACE [;~HITPAR([OSYS](#,#)#);] With [;
             {IF}[EXIST 1]{ %Option='#1';} {ELSE} { %Option='*';    }
             {IF}[EXIST 2]{ %FhMin = #2; } {ELSE} { %FhMin = %Magic;}
             {IF}[EXIST 3]{ %FhMax = #3; } {ELSE} { %FhMax = %Magic;}     ]
;
  " use %Orti instead if %ORT variable "
  REPLACE [;%ORT=#;] with [      {IF} '#1'='XYZ'{;" standart axes used ";}
                         {ELSE} {{IF} '#1'='YZX'{;%Orti=1;}
                         {ELSE} {{IF} '#1'='ZXY'{;%Orti=2;} } }
                          ]
  REPLACE [;POSITION [GSYSN] IN [NAME] ] with [;POSITION #1 MOTHER='#2' ]
  REPLACE [;CREATE AND POSITION [GSYSN]] with [;CREATE #1;  POSITION #1 ]
  Replace[ERROR(#)] with
         [<W> %L(%Module),%L(%Volume),%L(%Exname),%L(%ParList),%L(%Title);
          (' Error in Module ',A,' Block ',A,' Executing ',A/
            10x,' Parameter list is ',A,' For ',A);
          write(LOUT,*) #1;  %Ierror +=1 ;  RETURN; ]
  Replace[ERROR(#,=#,#)] with [ERROR(#1,' #2 =',#2,#3)]
;
Replace[$]  with [ag_];
DFN [$$D#;]  as  ["+DECK,#1.                " ]
DFN [$$T#;]  as
[ "**********************************************************************"
  "* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*"
  "* . . . . . . . . . . #1 . . . . . . . . . . . . . . . . . . . .*"
  "* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .*"
  "* Original Version: . . . . . . . . . . . . . . . . . . . . . . . . .*"
  "* Modifications : . . . . . . . . . . . . . . . . . . . Not done yet *"
  "**********************************************************************"
  Implicit NONE " - Implicit better coding !"; "*" ;
]
Replace [+CDE,#;] with [; include #1.inc;]
"===================================================================="
"---  G E A N T commons: GCONST,GCNUMB,GCKINE,GTMED,GTRACK,GCFLAG ---"
"===================================================================="
Replace[+CDE,GCBANK] With ["  - Dynamic core for the GEANT data (v3.15)  "
  Integer KWBANK,KWWORK,NZEBRA,IXSTOR,IXDIV,IXCONS,LMAIN,LR1,JDIGI,JDRAW,
          JHEAD,JHITS,JKINE,JMATE,JPART,JROTM,JRUNG,JSET,JSTAK,JGSTAT,JTMED,
          JTRACK,JVERTX,JVOLUM,JXYZ,JGPAR,JGPAR2,JSKLT,IQ,IWS,LQ,JCG;
  Real    ZVERSN,GVERSN,FENDQ,WS,Q;
  PARAMETER (KWBANK=69000,KWWORK=5200);
  COMMON
 /GCBANK/NZEBRA,GVERSN,ZVERSN,IXSTOR,IXDIV,IXCONS,FENDQ(16),LMAIN,LR1,WS(KWBANK)
 /GCLINK/ JDIGI,JDRAW, JHEAD,JHITS ,JKINE, JMATE ,JPART,JROTM,JRUNG, JSET,
          JSTAK,JGSTAT,JTMED,JTRACK,JVERTX,JVOLUM,JXYZ, JGPAR,JGPAR2,JSKLT;
  DIMENSION IQ(2),Q(2),LQ(8000),IWS(2);
  EQUIVALENCE (Q(1),IQ(1),LQ(9)),(LQ(1),LMAIN),(IWS(1),WS(1)),(JCG,JGSTAT);
];
Replace[+CDE,GCFLAG] With ["  - Flags and variables to control the run   "
  Integer        Idebug,Idemin,Idemax,Itest,Idrun,Idevt,Ieorun,Ieotri,
                 Ievent,Iswit,Ifinit,Nevent,Nrndm;
  COMMON/GCFLAG/ Idebug,Idemin,Idemax,Itest,Idrun,Idevt,Ieorun,Ieotri,
                 Ievent,Iswit(10),Ifinit(20),Nevent,Nrndm(2);
];
Replace[+CDE,GCKINE] With ["  - Kinematics of current track              "
  Integer        Ikine,Itra,Istak,Ivert,Ipart,Itrtyp,Napart,Ipaold;
  Real           Pkine,Amass,Charge,Tlife,Vert,Pvert;
  COMMON/GCKINE/ Ikine,Pkine(10),Itra,Istak,Ivert,Ipart,Itrtyp,Napart(5),
                 Amass,Charge,Tlife,Vert(3),Pvert(4),Ipaold;
]
Replace[+CDE,GCKING] With ["  - Kinematics of generated secondaries      "
  Integer         KCASE,NGKINE,IFLGK,MXGKIN,MXPHOT,NGPHOT;
  PARAMETER       (MXGKIN=100, MXPHOT=800);
  REAL            GKIN,TOFD,XPHOT,GPOS;
  COMMON /GCKING/ KCASE,NGKINE,GKIN(5,MXGKIN),TOFD(MXGKIN),IFLGK(MXGKIN)
         /GCKIN2/ NGPHOT,XPHOT(11,MXPHOT)
         /GCKIN3/ GPOS(3,MXGKIN);
]
Replace[+CDE,GCMATE] With ["  - Parameters of current material           "
  Integer Nmat,Namate;     Real A,Z,Dens,Radl,Absl;
  COMMON/GCMATE/ NMAT,NAMATE(5),A,Z,Dens,Radl,ABSL ;
]
Replace[+CDE,GCNUM]  With ["  - Current number for various items         "
  Integer        Nmate,Nvolum,Nrotm,Ntmed,Ntmult,Ntrack,Npart,Nstmax,
                 Nvertx,Nhead,Nbit,NALIVE,NTMSTO;
  COMMON/GCNUM/  Nmate,Nvolum,Nrotm,Ntmed,Ntmult,Ntrack,Npart,Nstmax,
                 Nvertx,Nhead,Nbit;
  COMMON/GCNUMX/ NALIVE,NTMSTO;
]
Replace[+CDE,GCONST] With ["  - Natural constants (or considered as such)"
  REAL           PI,TWOPI,PIBY2,DEGRAD,RADDEG,CLIGHT,BIG,EMASS,EMMU,PMASS,AVO;
  COMMON/GCONST/ PI,TWOPI,PIBY2,DEGRAD,RADDEG,CLIGHT,BIG,EMASS;
  COMMON/GCONSX/ EMMU,PMASS,AVO;
]
Replace[+CDE,GCTMED] With ["  - parameters of current tracking medium    "
  Integer        Numed,Natmed,Isvol,Ifield,Iupd,ISTpar,NUMold;
  Real           Fieldm,TmaxFD,Stemax,DEEmax,Epsil,STmin,Cfield,Prec;
  COMMON/GCTMED/ NUmed,NATmed(5),ISVOL,IField,Fieldm,TmaxFD,Stemax,
                 DEEmax,Epsil,STmin,CField,Prec,Iupd,ISTpar,NUmold;
  Real           ThrInd,Pmin,Dp,dNdL;
  Integer                            Jmin,ITCKOV,IMCKOV,NPCKOV;
  COMMON/GCTLIT/ ThrInd,Pmin,Dp,dNdL,Jmin,ITCKOV,IMCKOV,NPCKOV;
]
Replace[+CDE,GCTRAK] With ["  - track parameters at current point        "
  Integer        Nmec,Lmec,Namec,Nstep,MAXnst,IGnext,INWvol,IStop,IGAuto,
                 IEKbin,ILOSL,IMULL,INGOTO,NLdown,NLevin,NLVsav,IStory;
  Real           Vect,GEtot,GEkin,Vout,DEstep,DEstel,Safety,
                 SLeng,Step,Snext,SField,TOFG,GEkrat,UPwght;
  COMMON/GCTRAK/ Vect(7),GEtot,GEkin,Vout(7),Nmec,Lmec(30),Namec(30),Nstep,
                 MAXnst,DEstep,DEstel,Safety,SLeng,Step,Snext,SField,TOFG,
                 GEkrat,UPwght,IGnext,INWvol,IStop,IGAuto,IEKbin,ILOSL,IMULL,
                 INGOTO,NLdown,NLevin,NLVsav,IStory;
]
Replace[+CDE,GCUNIT] With ["  - GEANT description of logical units       "
  COMMON/GCUNIT/ LIN,LOUT,NUNITS,LUNITS(5);
  INTEGER        LIN,LOUT,NUNITS,LUNITS;
  COMMON/GCMAIL/ CHMAIL;
  CHARACTER*132  CHMAIL;
]
Replace[+CDE,GCVOLU] With ["  - Multi-level current volume description   "
  Integer  NLEVEL,NAMES,NUMBER,LVOLUM,LINDEX,INFROM,NLEVMX,NLDEV,LINMX;
  Real     GTRAN,GRMAT,GONLY,GLX;
  COMMON /GCVOLU/ NLEVEL,NAMES(15),NUMBER(15),LVOLUM(15),LINDEX(15),INFROM,
       NLEVMX,NLDEV(15),LINMX(15),GTRAN(3,15),GRMAT(10,15),GONLY(15),GLX(3);
]
Replace[+CDE,GCSETS] With ["  - Identification of the current sensitive detector "
   INTEGER         IHSET,IHDET,ISET,IDET,IDTYPE,NVNAME,NUMBV;
   COMMON /GCSETS/ IHSET,IHDET,ISET,IDET,IDTYPE,NVNAME,NUMBV(20);
]
Replace [+CDE,GCCUTS] With ["  - Cuts for tracking           "
      Real          CUTGAM,CUTELE,CUTNEU,CUTHAD,CUTMUO,BCUTE,BCUTM,
                    DCUTE ,DCUTM ,PPCUTM,TOFMAX,GCUTS;
      COMMON/GCCUTS/CUTGAM,CUTELE,CUTNEU,CUTHAD,CUTMUO,BCUTE,BCUTM,
                    DCUTE ,DCUTM ,PPCUTM,TOFMAX,GCUTS(5);
]
Replace [+CDE,GCTIME] With [" execution time control "
  real            TIMINT,TIMEND;
  Integer                       ITIME,IGDATE,IGTIME;
  COMMON /GCTIME/ TIMINT,TIMEND,ITIME,IGDATE,IGTIME;
]
replace [+CDE,GCSTAK] with [" geant stack definitions "
      INTEGER  NJTMAX,NJTMIN,NTSTKP,NTSTKS,NDBOOK,NDPUSH,NJFREE,NJGARB,
               NJINVO,LINSAV,LMXSAV,NWSTAK,NWINT,NWREAL,NWTRAC,ISTORD;
      PARAMETER (NWSTAK=12,NWINT=11,NWREAL=12,NWTRAC=NWINT+NWREAL+5);
      COMMON /GCSTAK/ NJTMAX, NJTMIN, NTSTKP, NTSTKS, NDBOOK, NDPUSH,
                      NJFREE, NJGARB, NJINVO, LINSAV(15), LMXSAV(15);
      EQUIVALENCE (ISTORD,NJTMIN);
]
replace [+CDE,GCPHYS] with [" geant physics flags "
      INTEGER IPAIR,ICOMP,IPHOT,IPFIS,IDRAY,IANNI,IBREM,IHADR,IMUNU,
              IDCAY,ILOSS,IMULS,IRAYL,ILABS,ISYNC,ISTRA;
      REAL    SPAIR,SLPAIR,ZINTPA,STEPPA,SCOMP,SLCOMP,ZINTCO,STEPCO,
              SPHOT,SLPHOT,ZINTPH,STEPPH,SPFIS,SLPFIS,ZINTPF,STEPPF,
              SDRAY,SLDRAY,ZINTDR,STEPDR,SANNI,SLANNI,ZINTAN,STEPAN,
              SBREM,SLBREM,ZINTBR,STEPBR,SHADR,SLHADR,ZINTHA,STEPHA,
              SMUNU,SLMUNU,ZINTMU,STEPMU,SDCAY,SLIFE, SUMLIF,DPHYS1,
              SLOSS,SOLOSS,STLOSS,DPHYS2,SMULS,SOMULS,STMULS,DPHYS3,
              SRAYL,SLRAYL,ZINTRA,STEPRA,SLABS,SLLABS,ZINTLA,STEPLA;
      COMMON/GCPHYS/IPAIR,SPAIR,SLPAIR,ZINTPA,STEPPA,ICOMP,SCOMP,SLCOMP,ZINTCO,STEPCO,
                    IPHOT,SPHOT,SLPHOT,ZINTPH,STEPPH,IPFIS,SPFIS,SLPFIS,ZINTPF,STEPPF,
                    IDRAY,SDRAY,SLDRAY,ZINTDR,STEPDR,IANNI,SANNI,SLANNI,ZINTAN,STEPAN,
                    IBREM,SBREM,SLBREM,ZINTBR,STEPBR,IHADR,SHADR,SLHADR,ZINTHA,STEPHA,
                    IMUNU,SMUNU,SLMUNU,ZINTMU,STEPMU,IDCAY,SDCAY,SLIFE, SUMLIF,DPHYS1,
                    ILOSS,SLOSS,SOLOSS,STLOSS,DPHYS2,IMULS,SMULS,SOMULS,STMULS,DPHYS3,
                    IRAYL,SRAYL,SLRAYL,ZINTRA,STEPRA;
      COMMON/GCPHLT/ILABS,SLABS,SLLABS,ZINTLA,STEPLA,ISYNC,ISTRA;
]
replace [+CDE,GCLIST] with [" geant control lists "
      INTEGER       NHSTA,NGET ,NSAVE,NSETS,NPRIN,NGEOM,NVIEW,NPLOT,NSTAT,
                    LHSTA,LGET ,LSAVE,LSETS,LPRIN,LGEOM,LVIEW,LPLOT,LSTAT;
      COMMON/GCLIST/NHSTA,NGET ,NSAVE,NSETS,NPRIN,NGEOM,NVIEW,NPLOT,NSTAT,
                    LHSTA(20),LGET (20),LSAVE(20),LSETS(20),LPRIN(20),
                    LGEOM(20),LVIEW(20),LPLOT(20),LSTAT(20);
]
replace [+CDE,GCSCAL] with [" geant scan links "
      INTEGER      MXSLNK, ISLINK, LSLAST, LSCAN, LSTEMP, LSPARA, LSERAY;
      PARAMETER   (MXSLNK=100);
      COMMON/GCSCAL/ ISLINK(MXSLNK);
      EQUIVALENCE (LSLAST,ISLINK(MXSLNK));
      EQUIVALENCE (LSCAN ,ISLINK(1)),(LSTEMP,ISLINK(2));
      EQUIVALENCE (LSPARA,ISLINK(3)),(LSERAY,ISLINK(4));
]
replace [+CDE,GCPUSH] with [" geant bank increment sizes "
      INTEGER       NCVERT,NCKINE,NCJXYZ,NPVERT,NPKINE,NPJXYZ;
      COMMON/GCPUSH/NCVERT,NCKINE,NCJXYZ,NPVERT,NPKINE,NPJXYZ;
]
" geant common done, now all the rest  ";
replace [+CDE,QUEST]  with [; INTEGER IQUEST;  COMMON/QUEST/IQUEST(100);]
REPLACE [+CDE,SCLINK] With [;  "  - SLUG link area for detectors and I/O     "
  INTEGER LVROOT,LKROOT;  COMMON/SCROOT/LVROOT(2);  EQUIVALENCE (LKROOT,LVROOT);
  INTEGER NSLINK,LKSLUG,LKGLOB,LKDETM,LKTFLM,LKTFLT,LKAMOD,LKAGEV,LKAMCH,LKADIG,
          LKMAPP,LKMFLD,LKRUNT,LKEVNT,LKARAW,LKATRI,LKAPRE,LKARP1,LKARP2,LKARP3,
          LKDSTD,LKRUN2,LKEVN2,LKVER2,LKKIN2,LKHIT2,LKGENE;
  PARAMETER (NSLINK=40);              COMMON/SCLINK/LKSLUG(NSLINK);
  EQUIVALENCE (LKSLUG(1),LKGLOB)  " top of temporary HEPEVT Zebra tree        ";
  EQUIVALENCE (LKSLUG(2),LKDETM)  " subdetector structure                     ";
  EQUIVALENCE (LKSLUG(3),LKTFLM)  " permanent track filter structure          ";
  EQUIVALENCE (LKSLUG(4),LKTFLT)  " temporary track filter structure          ";
  EQUIVALENCE (LKSLUG(5),LKAMOD)  " MODule parameters (Don't know whatisthis  ";
  EQUIVALENCE (LKSLUG(6),LKAGEV)  " general event struc.(Different from EVNT? ";
  EQUIVALENCE (LKSLUG(7),LKAMCH)  " MonteCarlo Hits ( not GEANT I guess)      ";
  EQUIVALENCE (LKSLUG(8),LKADIG)  " DIGitized hits (again not GEANT...?)      ";
  EQUIVALENCE (LKSLUG(9),LKMAPP)  " map structure                             ";
  EQUIVALENCE (LKSLUG(10),LKMFLD) " magnetic field banks                      ";
  EQUIVALENCE (LKSLUG(11),LKRUNT) " run tree bank (preliminary run vert.struc.";
  EQUIVALENCE (LKSLUG(12),LKEVNT) " event tree bank (preliminary event vert.s.";
  EQUIVALENCE (LKSLUG(13),LKARAW) " raw data structure                        ";
  EQUIVALENCE (LKSLUG(14),LKATRI) " trigger banks                             ";
  EQUIVALENCE (LKSLUG(15),LKAPRE) " preprocessed hits                         ";
  EQUIVALENCE (LKSLUG(16),LKARP1) " reconstuction phase 1 banks               ";
  EQUIVALENCE (LKSLUG(17),LKARP2) " reconstuction phase 2 banks               ";
  EQUIVALENCE (LKSLUG(18),LKARP3) " reconstuction phase 3 banks               ";
  EQUIVALENCE (LKSLUG(19),LKDSTD) " DST data banks                            ";
  EQUIVALENCE (LKSLUG(20),LKRUN2) " run tree bank for secondary run           ";
  EQUIVALENCE (LKSLUG(21),LKEVN2) " event tree bank for secondary events      ";
  EQUIVALENCE (LKSLUG(22),LKVER2) " secondary GEANT VERT bank                 ";
  EQUIVALENCE (LKSLUG(23),LKKIN2) " secondary GEANT KINE bank                 ";
  EQUIVALENCE (LKSLUG(24),LKHIT2) " secondary GEANT HITS bank                 ";
  EQUIVALENCE (LKSLUG(26),LKGENE) " old slug ZEBRA generator structure        ";
];
REPLACE[+CDE,STAFUNC] with [" Declare control flags in detector bank";
      INTEGER IIIII, LVPRIN,LWPRIN,LWDEBU,LVGEOM,LVHIST,LVGRAP,
              LVDEBU,LVSIMU,LVDIGI,LVRECO,LVMFLD,LVANAL,LVBACK;
      LVPRIN(IIIII)=IQ(LQ(LKDETM-IIIII)+1);
      LVDEBU(IIIII)=IQ(LQ(LKDETM-IIIII)+2);
      LWPRIN(IIIII)=IQ(LQ(LKDETM-IIIII)+2);
      LWDEBU(IIIII)=IQ(LQ(LKDETM-IIIII)+3);
      LVGEOM(IIIII)=IQ(LQ(LKDETM-IIIII)+4);
      LVHIST(IIIII)=IQ(LQ(LKDETM-IIIII)+5);
      LVGRAP(IIIII)=IQ(LQ(LKDETM-IIIII)+6);
      LVSIMU(IIIII)=IQ(LQ(LKDETM-IIIII)+7);
      LVDIGI(IIIII)=IQ(LQ(LKDETM-IIIII)+8);
      LVRECO(IIIII)=IQ(LQ(LKDETM-IIIII)+9);
      LVMFLD(IIIII)=IQ(LQ(LKDETM-IIIII)+10);
      LVANAL(IIIII)=IQ(LQ(LKDETM-IIIII)+11);
      LVBACK(IIIII)=IQ(LQ(LKDETM-IIIII)+12);
];
Replace [+CDE,ASFLAGS] with [" names and order of control flags ";
      INTEGER      NFLAGS;
      PARAMETER    (NFLAGS=15);
      CHARACTER*4  CFLAG(NFLAGS);
      DATA CFLAG   /'PNOW','PRIN','DEBU','GEOM','HIST','GRAP','SIMU','DIGI',
                    'RECO','MFLD','ANAL','BACK','RESA','RESB','RESC'/;
]
Replace[+CDE,RBBANK] with [;" - Reconstruction bank access variables "
  Character  Cnam*4;
  Integer    Lu,BIG,MM,Inam,II,KK,Iadr,Leng,IrbDIV,IrMode,
             IOD,IOX,LDD,NDDmax,Ndd,DDL,Nfr,FrTab;
  Parameter (LDD=5, NDDmax=100);
  COMMON /RBXBANK/  Lu, Cnam,II,KK,Iadr,Leng,IOD,IOX,IrbDIV,IrMode
         /RBXLIST/  Ndd,DDL(LDD,NDDmax)  /RBXFORM/  Nfr,FrTab(NDDmax);
  Equivalence (Cnam,Inam);   Data  BIG /99999/,MM/2/;
];
Replace [+CDE,AGCLINK] with [;" - links for dynamic bank access    "
       INTEGER    NALinkMAX,AG_NLink,AG_Link;
       PARAMETER  (NALinkMAX=100);
       COMMON /AGCLink/ AG_NLink,AG_Link(0:NALinkMAX);
];
replace[+CDE,AGCDOCL] with  [;"  common for the documentation supporting links "
      Integer           LDarea(2),L1Doc,L2Doc,LKDoc,Ldoc,Ldete,Lpar;
      COMMON /AGCDOCL/  LDarea,   L1Doc,L2Doc,LKDoc,Ldoc,Ldete,Lpar;
]
REPLACE [+CDE,AGECOM] with [;" - Advanced Geant interface ";
  character*20  %Module,%Title,%ExName,%ParList,%ChDir,
                %material,%mixture,%component,%medium;
  character*4   %Volume,%Mother,%Shape,%Cnick,%Konly,%Option,%Ort,%Mark;
  Integer       %BegCom,%Ivolume,%Imother,%Ignum,%Ishape,%Imed,%Imat,%Ifield,
                %NLmat,%Ierror,%NWBUF,%Npar,%Istatus,%Irot,%NBits,%Serial,
                %Attribute(6),%Work,%Seen,%Lsty,%Lwid,%Colo,%Fill,%Jdu,%Orti,
                %Ndiv,%Iaxis,%NdvMax,%Iprin,%Reset1,%Reset2,%BegScr,%EndScr,
                %Idtype,%Iset,%Idet,%Isvol,%level,%ireser,%Igeom,%Standalone,
                %LSTACK,%NwuHit,%NwuVol,%Magic,%LDETU,%NpDiv,%NpDv,%Nz,%Ncopy,
                %Idebu,%Igrap,%Ihist,%Imfld,%Isimu,%EndSave,%code,%trktyp,
                %mode,%ecode,%pdg,Iprin;
  Real          %FIELDM,%TMAXFD,%STEMAX,%DEEMAX,%EPSIL,%STMIN,%Dens,%RadL,%AbsL,
                %Thetax,%Thetay,%Thetaz,%Alfax,%Alfay,%Alfaz,%Phix,%Phiy,%Phiz,
                %Alphax,%Alphay,%Alphaz,%Type,
                %dx,   %dx1,  %dx2,  %dy,   %dy1,  %dy2, %DMAXMS, %Twist,
                %thet, %the1, %the2, %phi,  %phi1, %phi2, %alph, %alp1, %alp2,
                %Rmin, %Rmax, %Rmn,  %Rmx,  %Zi ,  %rmn1, %rmn2, %rmx1, %rmx2,
                %h1,   %h2,   %bl1,  %bl2,  %tl1,  %tl2,  %Dphi, %dz,   %Twis,
                %x, %y, %z,   %A, %Za, %W,  %Step, %C0, %Par,    %AA, %ZZ, %WW,
                %LX,  %LY,  %LZ,  %HX,  %HY,  %HZ, %P1, %P2,
                %Stack,%UBUF,%Xhmax,%Yhmax,%Zhmax,%Rhmax,%FhMax,%Fhmin,%bin,
                %charge,%mass,%tlife,%bratio;

  Parameter     (%LSTACK=130,%NwuHit=10,%NwuVol=3,%MAGIC=-696969,%LDETU=250);

  COMMON/AGCGLOB/ %Module,%ChDir,%Level,%Idtype,%Ierror,%Standalone,Iprin,
                  %Iprin,%Igeom,%Idebu,%Igrap,%Ihist,%Imfld,%Isimu;
  "Inherited variables a: saved during internal calls"
  "                    b: reset at the entry in a block and then saved"
  COMMON/AGCPARA/ %BegCom, %Ivolume, %Imother, %Ignum, %Ishape, %Imed, %Imat, %Ifield,
        %FIELDM, %TMAXFD, %STEMAX, %DEEMAX, %EPSIL, %STMIN, %Dens, %Radl, %AbsL,
        %dx,   %dx1,  %dx2,  %dy,   %dy1,  %dy2,  %rmn1, %rmn2, %rmx1, %rmx2,
        %thet, %the1, %the2, %phi,  %phi1, %phi2, %alph, %alp1, %alp2,
        %h1,   %bl1,  %tl1,  %h2,   %bl2,  %tl2,  %Rmin, %Rmax, %Dphi, %Npdiv,
        %Nz,   %dz,   %Twis, %LX,   %LY,   %LZ,   %HX,   %HY,   %HZ,
        %A, %Za, %W, %NLmat, %Work, %Seen, %Lsty, %Lwid, %Colo, %Fill,
        %Serial, %Isvol,  %Istatus, %Zi(16), %Rmn(16), %Rmx(16),
        %Volume, %Mother, %Shape,   %Cnick,                           %EndSave,
        %Reset1,%Thetax,%Thetay,%Thetaz,%Alfax,%Alfay,%Alfaz,%Phix,%Phiy,%Phiz,
        %x,%y,%z, %Step,%C0,%Ndiv,%Iaxis,%NdvMax,%Orti,%Ncopy,         %Reset2,
        %Konly, %Ort, %Mark;
  "local variables valid inside same block "
  COMMON/AGCLOCA/ %begScr,%UBUF(100),%Par(100),%AA(20),%ZZ(20),%WW(20),%NwBuf,
                 %Xhmax,%Yhmax,%Zhmax,%Rhmax,%FhMax,%FhMin,%Nbits,%Bin,%Type,
                 %Irot,%Npar,%Iset,%Idet,%JDU,%ireser,                %EndScr,
                 %Title,%Exname,%Parlist,%material,%mixture,
                 %component,%medium,%Option;
  COMMON/AGCPART/%code,%trktyp,%mass,%charge,%tlife,%bratio(6),%mode(6),%pdg,%ecode;

  COMMON/AGCSTAC/ %Stack(%LSTACK,15);
  Equivalence    (%Attribute,%Work),(%STEMAX,%DMAXMS),(%Alphax,%Alfax),
                 (%Alphay,%Alfay),(%Alphaz,%Alfaz),(%Twist,%Twis),(%NpDiv,%NpDv),
                 " temporarly " (%P1,%HX),(%P2,%HY);
];
Replace [+CDE,AGCKINE] with [;"   AGI general data card information "
      Integer          IKineOld,IdInp,Kevent,
                       Iback,IbackOld,IbMode,IbBefor,IbAfter,
                       IbCurrent,IvCurrent,Ioutp,IoutpOld;
      Real             AVflag,AVcoor,AVsigm,Ptype,PTmin,PTmax,
                       Etamin,Etamax,PhiMin,PhiMax,Ptflag,
                       Zmin,Zmax,BgMult,BgTime,BgSkip,
                       Pxmin,Pxmax,Pymin,Pymax,Pzmin,Pzmax;
      COMMON /AgCKINE/ IKineOld,IdInp,Kevent(3),
                       AVflag,AVcoor(3),AVsigm(3),
                       Ptype,PTmin,PTmax,Etamin,Etamax,
                       PhiMin,PhiMax,Ptflag,Zmin,Zmax,
                       Pxmin,Pxmax,Pymin,Pymax,Pzmin,Pzmax;
      COMMON /AgCKINB/ Iback,IbackOld,IbMode,IbBefor,IbAfter,
                       BgMult,BgTime,BgSkip,IbCurrent,IvCurrent;
      COMMON /AgCKINO/ Ioutp,IoutpOld;
      Character*20     CoptKine,CoptBack,CoptOutp;
      COMMON /AgCKINC/ CoptKine,CoptBack,CoptOutp;
      Character*20     CrunType;
      COMMON /AgCKINR/ CrunType;
      Integer          Ncommand;
      Character*20     Ccommand;
      COMMON /AgCCOMD/ Ncommand,Ccommand;
      Integer          IUHIST;
      Character*80            CFHIST,CDHIST;
      COMMON /AgCHIST/ IUHIST,CFHIST,CDHIST;
;
      Integer          NtrSubEV,NkineMax,NhitsMax,NtoSkip,NsubToSkip,Nsubran,
                       ItrigStat,NsubEvnt,IsubEvnt,Make_Shadow,Flag_Secondaries;
      Real             Cutele_Gas,VertexNow;
      COMMON /AgCSUBE/ NtrSubEV,NkineMax,NhitsMax,NtoSkip,NsubToSkip,Nsubran(2);
      COMMON /AgCSTAR/ Make_Shadow,Cutele_Gas,Flag_Secondaries;
      COMMON /AgCstat/ ItrigSTAT,NsubEvnt,IsubEvnt,VertexNow(3);
]
Replace [+CDE,AGCSTEP] with [;" Connection between AgGSTEP, AgGHIT and a user step routine ";
    Real              vect0,   vloc0,   vloc,   xloc   ,Astep,Adestep,HITS;
    Integer           IhaveMore;
    COMMON /AGCSTEP/  vect0(7),vloc0(7),vloc(7),xloc(7),Astep,Adestep;
    COMMON /AGCSTEPH/ HITS(15);
    COMMON /AGCSTEPI/ IhaveMore;
]
Replace [+CDE,AGCRDIG] with [;" communication between AgFHIT0/1,FDIGI,FPATH,FDPAR ";
    Integer          IWA,   JS,JD,JX,JXD,JDS,JDU;
    COMMON /AGCRDIG/ IWA(2),JS,JD,JX,JXD,JDS,JDU;
    Integer          Iprin,Nvb,Nw,Last,Mb,Nc1,Nc2,Iv,Ia;
    Character*4                                         cs,cd;
    COMMON /AGCHITV/ Iprin,Nvb,Nw,Last,Mb,Nc1,Nc2,Iv,Ia,cs,cd;
];
Replace [+CDE,AGCDIG] with [;" for internal AGSDIG0/1 communication only ";
      INTEGER        NLOCAL,   JS,JD,JDX,JX,JXD,JDU,LOCAL;
      COMMON/GCLOCA/ NLOCAL(2),JS,JD,JDX,JX,JXD,JDU,LOCAL(14);
      Integer        Iset,Idet,NW,NV,ND,NVU,NDU;
      COMMON/AGCDIGA/Iset,Idet,NW,NV,ND,NVU,NDU;
];
Replace [+CDE,AGCBUFF] with [;"     buffer for hit/digi maps ";
    Integer          Ibuf,Lbuf;
    Parameter        (Lbuf=500 000);
    Common /AGCBUFF/ Ibuf(Lbuf);
];
Replace [+CDE,AGCRTAB] with ["  Commons for the inner detector digi reconstruction "
      Integer           Lstack,     Lr,   Lhead,   Lpack;
      Parameter        (Lstack=2000,Lr=15,Lhead=52,Lpack=512);
                       "                  subsystem descriptor         "
      Integer          Isys,Nplane,Itp,Iset,Idet,kkk,kfi,krz,mrz,NumPmx,
                       Nadr,Istart,Inamd,Iaxr,Iaxt,Iaxz,Ires, nam,nmx;
      Real             Rstack,drzm,RRmin,RRmax,ZZmin,ZZmax;
      Common /AgCRtab/ Isys,Nplane,Itp,Iset,Idet,kkk,kfi,krz,mrz,drzm,
                       RRmin,RRmax,ZZmin,ZZmax,
                       NumPmx,Nadr,Istart,Inamd,Iaxr,Iaxt,Iaxz,Ires,
                       Nam(15),Nmx(15),  Rstack(Lr,Lstack);
      Integer                            Istack(Lr,Lstack);
      Equivalence      (Rstack,Istack);
                       "                      plane descriptor         "
      Real             rzp,RZmin,RZmax,Fmin,Fmax,Dfi,Dzr,tilt,sas,Fcent;
      Integer          Nfi,Nzr,Nump,Iadr,Jres,Lpacku;
      Common /AgCRta1/ rzp,RZmin,RZmax,Fmin,Fmax,Dfi,Dzr,tilt,sas,Fcent,
                       Nfi,Nzr,Nump,Iadr,Jres,Lpacku;
                       "                      detector size            "
      Integer          Ishape,Npar;
      Real                         AgTran,   AgRmat,    Par;
      Common /ARCplan/ Ishape,Npar,AgTran(3),AgRmat(10),Par(50);
"     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  ";
]
Replace [+CDE,TRBANK] with ["           - Track point bank                "
      INTEGER         LTB,NTB,LPNT,ISPOINT;
      PARAMETER       (LTB=10000,LPNT=12);
      REAL            TRPOINT,DTRPOINT;
      COMMON /TRBANK/ NTB,TRPOINT(LPNT,LTB);
      COMMON /TRBANI/     ISPOINT(LTB);
      COMMON /TRBANJ/     DTRPOINT(LTB);
      REAL            OPNT,XPNT,DPNT,SPNT,APNT,EPNT,PPNT;
      COMMON /TRKPNT/ OPNT,XPNT(3),DPNT,SPNT(2),APNT(3),EPNT,PPNT;
      REAL            PIXB,PIXE,GAAS,SCTT,ZSCT,SITV,SIT,MSGC,XTRT;
      DATA            PIXB,PIXE,GAAS,SCTT,ZSCT,SITV,SIT,MSGC,XTRT
                      / 1,   2,   3,   4,   5,   6,  7,   8,   9  /;
"     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ";
]
Replace [+CDE,PAWC] with [" Hbook-Paw store "
      INTEGER     NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,        LMAIN;
      REAL                                       FENC   ,      HCV;
      COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,HCV(9989);
      INTEGER   IQ        ,LQ;
      REAL            Q;
      DIMENSION IQ(2),Q(2),LQ(8000);
      EQUIVALENCE (LQ(1),LMAIN),(IQ(1),LQ(9)),(Q(1),IQ(1));
]
Replace [+CDE,TYPING] with [;Implicit None;];
" - - - - - - - - - - - - - - - - - - - - - - - - - - - "
"                    cmz part                           ";
 REPLACE [;+COMMON]      WITH  [[SETR U=1];+CDE,]
 REPLACE [;+INCLUDE]     WITH  [;+CDE,]
 REPLACE [;+COMMON,#.#;] WITH  [;+COMMON,#1;]
 REPLACE [;+CDE,#.#;]    WITH  [;+CDE,#1;]
 REPLACE [;+CDE,#,]      WITH  [{IF} [EXIST 1] {;+CDE,#1};+CDE,]
 REPLACE [;+COMMON,#,]   WITH  [{IF} [EXIST 1] {;+COMMON,#1};+COMMON,]
 REPLACE [;+DECK,#;]     WITH  [;"* DECK,#1";];
 REPLACE [;CDECK ID,#;]  WITH  [;"* DECK,#1";];
 REPLACE [;+PATCH,#;]    WITH  [;"* PATCH,#1";];
 Replace [;*KEEP,#;]     with  [;"* KEEP,#1";!FORTRAN;];
 Replace [*KEEP,#;]      with  [;"* KEEP,#1";!FORTRAN;];
 Replace [*KEND.;]       with  [;"* KEND.";!GEANT3; ];
;
Replace[PRIN[DIGIT]]  With [{IF} '#1'='0' {;<W>} {ELSE} {; IF (Iprin>=#1) <W>}]
Replace[%] with [ag_];
Replace[;%[IDENT]={#}] with [;$#1={#2};]
Replace[%L(#)] with [#1(1:Lenocc(#1))]
REPLACE[! #;] with [" #1";]
"                                   <----------place CRAY commands here       "
" REPLACE[;;] with [;]  -  this also kills comment lines "
;
!INDENT F3; !INDENT C3; !INDENT M3; !NODEFINE; !TRACE0;
!RECOVER;  !DEFAULT 4; !BLACK;     !MODE 0;    !UPLOW;
%B80     - Lrecl in G-input
%C81     - significant columns  should be < 132
%Q1      - stop comments at the end of each line
%INCLUDE [detmsys.def]
!COMMENTS;
%S1  - number fortran file with source line numbers
%U7  - read file.g
;;
%%


+SELF,IF=CRAY.
replace [AADATA    #/#/]      with [DATA    #1/#2/]
replace [AADATA #(#)/#/]      with [DATA    #1/#3/]
replace [AADATA  #*#/#/]      with [DATA    #1/#3/]
replace [AADATA  #,#/#/]      with [AADATA  #2/#3/]
replace [INTEGER #/#/#;]      with [INTEGER      #1 #3; AADATA #1/#2/;]
replace [REAL    #/#/#;]      with [REAL         #1 #3; AADATA #1/#2/;]
replace [LOGICAL #/#/#;]      with [LOGICAL      #1 #3; AADATA #1/#2/;]
replace [CHARACTER*# #/#/#;]  with [CHARACTER*#1 #2 #4; AADATA #2/#3/;]
replace [CHARACTER   #/#/#;]  with [CHARACTER    #1 #3; AADATA #1/#2/;]
+SELF.

