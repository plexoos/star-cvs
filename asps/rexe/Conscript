#!/opt/star/bin/perl
Import qw ( env INCLUDE LIB BIN  EXPORT BUILD OBJ);
(my $build = $OBJ) =~ s/\#//g;
$build =~ s/\\/\//g;
(my $ObjDir = DirPath '.') =~ s/\\/\//g;
(my $Dir = $ObjDir) =~ s/$build\///g;
$ObjDir = "#" . $ObjDir; 
(my $obj_dir = $ObjDir) =~ s/^\#//g;
my $STAR_SYS = $env->{ENV}->{STAR_SYS};
my $pkg;
if ($env->{ENV}->{STAR}) {$pkg  = "root4star";}
else                     {$pkg  = "Root.exe";}
my @GDIRS = qw(.
	       ../agi/gst/agsim
	       ../agi/gst/geant
	       ../agi/gst/zebra
	       ../agi/gst/dzdoc
	      );

my $PKG  = $pkg . $env->{SUFEXE};
my $SO_PKG = $PKG . "." . $env->{SUFSOLIB};
my $LIBPKG = $PKG . "." . $env->{SUFLIB};
my @h_files = script::find_hfiles($Dir);
$CPPPATH = "#asps/agi" . $main::PATH_SEPARATOR . "#asps/agi/gst" . $main::PATH_SEPARATOR . $env->{CPPPATH};
$CPPFLAGS = $env->{CPPFLAGS} . " -DCERNLIB_DZDOC -DCERNLIB_NONEWL -DCERNLIB_SHL -DCERNLIB_HADRON -DCERNLIB_BSLASH -DCERNLIB_HIGZ -DCERNLIB_CG";
if ($STAR_SYS =~ /egcs$/) {$CPPFLAGS .= " -DPrivateMalloc";}
print "build $pkg with cons\n";
(my $share = $EXPORT .  "/" . $Dir) =~ s/\/asps//g; 
my $CXXFLAGS = $env->{CXXFLAGS};
my $LIBPATH = $env->{ENV}->{ROOTSYS} . "/lib" . $main::PATH_SEPARATOR . $env->{LIBPATH};
my $LIBS  = $env->{ROOTLIBS} . " " . $env->{ROOTGLIBS} . " " . $env->{RINTLIBS};# . " " . $env->{LIBS};
#print "LIBS = $LIBS : ROOTLIBS = ",$env->{ROOTLIBS}," ROOTGLIBS = ",$env->{ROOTGLIBS},
#  " RINTLIBS = ", $env->{RINTLIBS},"\n";
if ($env->{ENV}->{STAR}) {$LIBS .= " -lStar -lStar2Root";}
my $Libraries =  $env->{Libraries};
my $FC    = $env->{FC};
my $FFLAGS = $env->{FFLAGS};
my $FEXTEND = $env->{FEXTEND};
if ($STAR_SYS =~ /^i386/) {
  $FC = "g77";
  $FFLAGS   = "-w %DEBUG -fno-second-underscore -fno-automatic";
  $FEXTEND  = "-ffixed-line-length-132"; 
}
if ($STAR_SYS =~ /^sun4x_5.$/) {$CXXFLAGS .= " -ptr" . $obj_dir;}
$env2 = $env->clone('CPPPATH'      => $CPPPATH,
		    'CPPFLAGS'     => $CPPFLAGS,
		    'CXXFLAGS'     => $CXXFLAGS,
		    'FC'           => $FC,
		    'FFLAGS'       => $FFLAGS,
		    'FEXTEND'      => $FEXTEND,
		    'LIBPATH'      => $LIBPATH,
		    'LIBS'         => $LIBS,
		    'Libraries'    => $Libraries
		   );
my @src = ();
foreach my $d (@GDIRS){
  my $dir = $Dir . "/" . $d;
  my @sources  = script::find_sources($dir);
  foreach my $s (@sources) {
    my $ss = $d . "/" . $s;
    next if $ss =~ /\/gst\/agsim\/agdummy\.g/ or $ss =~ /traceqc/ or $ss =~ /ighcxy/;
#    next if $ss =~ /kgsim/;
#    next if $ss =~ /\gst\/geant\/grndm\.F/ or  $ss =~ /\gst\/geant\/grndmq\.F/; 
    push @src, $ss; 
  }
}
my @dirs = split /$main::PATH_SEPARATOR/,$env->{CPPPATH};# print "dirs = @dirs\n";
for my $cpp (@dirs,$Dir) {
  next if $cpp =~ ' ';
  if ($cpp =~ /cern/ ||
      $cpp eq "/usr/include"
     )  {next;}
  if ($ROOTCINT_CPP) {$ROOTCINT_CPP .= "" . $main::PATH_SEPARATOR . $cpp;}
  else               {$ROOTCINT_CPP .= $cpp;}
}
$cscanner= find scan::cpp($env2->{_cwd}, $ROOTCINT_CPP);
my $ROOTCINT_CPPPATH = $cscanner->iflags($env2);# print "ROOTCINT_CPPPATH = $ROOTCINT_CPPPATH\n";
my $DIR = Cwd::cwd(); 
my $line;
my @Defs = ();
if ($Dir !~ /pams\//) {
  foreach $h (@h_files) {
    if ($h =~ /LinkDef/ || $h =~ /Stypes/) {push @Defs, $h; next;}
    my $hh = $Dir . "/" . $h;
    if (-r $hh) {
      open (In,$hh) or die "Can't open $hh";
      while ($line = <In>) {if ($line =~/ClassDef/ || $line =~ /StCollectionDef/) {push @Defs, $h; goto ENDL;}}
      close(In);
    }
    else {      
      foreach my $Rep (@Repo) {
	my $RepDir = $Rep . "/" . $Dir;
	if (-d $RepDir) {
	  my $hh = $RepDir . "/" . $h;
	  if (-r $hh) {
	    open (In,$hh) or die "Can't open $hh";
	    while ($line = <In>) {if ($line =~/ClassDef/ || $line =~ /StCollectionDef/) {push @Defs, $h; goto ENDL;}}
	    close(In);
	  }
	}
      }
    }
  ENDL:
  }
}
if ($#Defs > -1) {
  Install $env2 $INCLUDE, @Defs;
  my @CintFiles = 
  ($share . "/"  . $PKG . "_Cint.cxx", $share . "/"  . $PKG . "_Cint.h");
  my @defs = ();
  my @d    = ();
  foreach my $def (@Defs) {
    push @defs, $share . "/" . File::Basename::basename($def); 
    push @d   , "#include/" .  File::Basename::basename($def); 
  }
  Install $env2 $share, @d;
  Command $env2 [@CintFiles], @defs,  qq(RootCint.pl "%>" "%<" "$ROOTCINT_CPPPATH" );
  Install $env2 $ObjDir, @CintFiles;
  (my $cint =  $CintFiles[0]) =~ s/$share/$ObjDir/g;
  push @src, $cint; 
}

if ($#src > -1) {
  script::Keep $pkg;
  Program      $env2 $pkg, @src;
  Install $env2 $BIN, $pkg;
}  
