#!/usr/bin/env perl
Import qw ( env INCLUDE LIB BIN BUILD OBJ);
(my $build = $OBJ) =~ s/\#//g;
$build =~ s/\\/\//g;
(my $obj_dir = DirPath '.') =~ s/\\/\//g;
(my $Dir = $obj_dir) =~ s/$build\///g;
my $ObjDir = "#" . $obj_dir; 
my $STAR_SYS = $env->{ENV}->{STAR_SYS};
my $OPTSTAR  = $env->{ENV}->{OPTSTAR};
my $pkg  = "root4star";
my $pkgN = $pkg . "N";
my $ROOTLIBS = $env->{ROOTLIBS};
if ($ROOTLIBS =~ /-lNew/) {$ROOTLIBS =~ s/-lNew//;}
my @GDIRS = qw(.
	       ../agi/gst/agsim
	       ../agi/gst/geant
	       ../agi/gst/zebra
	       ../agi/gst/dzdoc
	      );

my $PKG  = $pkg . $env->{SUFEXE};
my $SO_PKG = $PKG . "." . $env->{SUFSOLIB};
my $LIBPKG = $PKG . "." . $env->{SUFLIB};
my @h_files = script::find_hfiles($Dir);
my $FCPATH = $env->{FCPATH};
my $FFLAGS = $env->{FFLAGS};
my $FPPFLAGS = $env->{FPPFLAGS};
my $CPPFLAGS = $env->{CPPFLAGS};
my $FLIBS = $env->{FLIBS};
my $PGI = $env->{ENV}->{PGI};
my $PGILIBS = "";
my $Libraries =  $env->{Libraries};
my $LD = $env->{LD};
my $LDFLAGS = "";#$env->{LDFLAGS};
if ($LD eq 'gcc' or $LD eq 'g++' or $LD eq 'icc'){
  $LDFLAGS = "-Wl,-export-dynamic -Wl,-noinhibit-exec,-Bdynamic";
}
if ($PGI) {
  if ($STAR_SYS =~ /^i386/) {
    if( -e "$OPTSTAR/lib/libpgf77S.so"){
      $PGILIBS .= " -L" . $OPTSTAR . "/lib -lpgf77S";
      if( -e "$OPTSTAR/lib/libpgf77A.a"){
	$PGILIBS .= " -lpgf77A";
      }
    }
    if ( -e "$PGI/linux86/lib/libpgftnrtl.a"){
      $PGILIBS .= " $PGI/linux86/lib/libpgftnrtl.a ";
    } else {
      $PGILIBS .= " -L$PGI/linux86/lib -lpgftnrtl ";
    }
    if ( -e "$PGI/linux86/lib/libpgc.a"){
      $PGILIBS .= " $PGI/linux86/lib/libpgc.a ";
    } else {
      $PGILIBS .= " -L$PGI/linux86/lib -lpgc";
    }
  }
  else {
    $PGILIBS .= " -L$PGI/linux86/lib";
    $PGILIBS .= " -Wl,--whole-archive -Wl,-Bstatic";
    if ( -e "$PGI/linux86/lib/libpgftnrtl.a"){
      $PGILIBS .= " -lpgftnrtl";
    }
    if ( -e "$PGI/linux86/lib/libpgc.a"){
      $PGILIBS .= " -lpgc";
    }
    if ( -e "$PGI/linux86/lib/libpgnod_prof.a"){
      $PGILIBS .= " -lpgnod_prof";
    }
    $PGILIBS .= " -Wl,--no-whole-archive -Wl,-Bdynamic";
    $Libraries  .= " ". $PGILIBS;
  }
  
#  print "PGILIBS = $PGILIBS ====================================\n";
}
$FCPATH  = "#asps/agi" . $main::PATH_SEPARATOR . "#asps/agi/gst" . $main::PATH_SEPARATOR . $env->{FCPATH};
$FPPFLAGS = "-D__ROOT__ -DCERNLIB_TYPE -DCERNLIB_UNIX -DCERNLIB_BSLASH -DCERNLIB_DZDOC -DCERNLIB_SHL ".
  "-DCERNLIB_NONEWL -DCERNLIB_HIGZ -DCERNLIB_CG  -DCERNLIB_HADRON";
  $CPPFLAGS  = "-D__ROOT__ -DCERNLIB_QMGLIBC -DCERNLIB_DZDOC -DCERNLIB_NONEWL -DCERNLIB_SHL " .
  "-DCERNLIB_HADRON -DCERNLIB_BSLASH -DCERNLIB_HIGZ -DCERNLIB_CG";
if ($STAR_SYS =~ /egcs$/) {$CPPFLAGS .= " -DPrivateMalloc";}
print "build $pkg with cons\n";
my $LIBPATH = $env->{ENV}->{ROOTSYS} . "/lib" . $main::PATH_SEPARATOR . $env->{LIBPATH};
my $LIBS  = $env->{ROOTLIBS} . " " . $env->{ROOTGLIBS} . " " . $env->{RINTLIBS};
$LIBPATH .= $main::PATH_SEPARATOR . $env->{Packages}->{MYSQL}->{LIBDIR};
if ($env->{ENV}->{STAR}) {$LIBS .= " -lTable";}
my $FC        = $env->{FC};
my $FEXTEND   = $env->{FEXTEND};
if ($PGI && $STAR_SYS =~ /^rh/ or  $STAR_SYS =~ /i386/) {
  $FC       = $env->{G77}; print "set FC => $FC ==============================\n" if $param::debug;
  $FFLAGS   = $env->{G77FLAGS}; 
  $FEXTEND  = $env->{G77EXTEND};
  $FPPFLAGS .= " -DCERNLIB_LINUX";
}

$Libraries  .= " " . $env->{CERNLIBS};
$Libraries  .= " " . $env->{Packages}->{MYSQL}->{LIBS};
$Libraries  .= " " . $env->{FLIBS} . " " . $env->{CLIBS} . " " . $env->{SYSLIBS} . " -lstdc++";
chomp($Libraries); print "Libraries = $Libraries\n" if $param::debug;
if ($STAR_SYS =~ /^i386/) {$Libraries  .= " ". $PGILIBS;}
if ($STAR_SYS =~ /^sun4x_5.$/) {
    if ($LIBPATH) { $LIBPATH .= $main::PATH_SEPARATOR; }
    $LIBS .= " -lCstd";
  
}
$env2 = $env->clone('FC'           => $FC,
		    'FPPFLAGS'     => $FPPFLAGS,
		    'FFLAGS'       => $FFLAGS,
		    'FCPATH'       => $FCPATH,
		    'FEXTEND'      => $FEXTEND,
		    'CPPFLAGS'     => $CPPFLAGS,
		    'LD'           => $LD,
		    'LDFLAGS'      => $LDFLAGS,
		    'LIBPATH'      => $LIBPATH,
		    'LIBS'         => $LIBS,
		    'ObjDir'       => $obj_dir,
		    'Libraries'    => $Libraries
		   );
my $LIBSN = $LIBS; $LIBSN =~ s/-lRint/-lRint -lNew/;
$envN = $env2->clone('LIBS'         => $LIBSN);
my @src = ();
foreach my $d (@GDIRS){
  my $dir = $Dir . "/" . $d;
  my @sources  = script::find_sources($dir); print "In Dir = $dir sources = @sources\n" if $param::debug;
  foreach my $s (@sources) {
    my $ss = $d . "/" . $s;
    next if $ss =~ /\/gst\/agsim\/agdummy\.g/ or $ss =~ /traceqc/ or $ss =~ /ighcxy/;
    next if $ss =~ /\/gst\/geant\/grndm\.F/ or $ss =~ /\/gst\/geant\/grndmq\.F/;
    next if $FC !~ /g77/ and $ss =~ /df\.F$/;
    push @src, $ss; 
  }
}
my @dirs = split /$main::PATH_SEPARATOR/,$env->{CPPPATH};
for my $cpp (@dirs,$Dir) {
  next if $cpp =~ ' ';
  if ($cpp =~ /cern/ ||
      $cpp eq "/usr/include"
     )  {next;}
  if ($ROOTCINT_CPP) {$ROOTCINT_CPP .= "" . $main::PATH_SEPARATOR . $cpp;}
  else               {$ROOTCINT_CPP .= $cpp;}
}
$cscanner= find scan::cpp($env2->{_cwd}, $ROOTCINT_CPP);
my $ROOTCINT_CPPPATH = $cscanner->iflags($env2);
my $DIR = Cwd::cwd(); 
my $line;
my @Defs = ();
if ($Dir !~ /pams\//) {
  foreach $h (@h_files) {
    if ($h =~ /LinkDef/ || $h =~ /Stypes/) {push @Defs, $h; next;}
    my $hh = $Dir . "/" . $h;
    if (-r $hh) {
      open (In,$hh) or die "Can't open $hh";
      while ($line = <In>) {if ($line =~/ClassDef/ || $line =~ /StCollectionDef/) {push @Defs, $h; goto ENDL;}}
      close(In);
    }
    else {      
      foreach my $Rep (@Repo) {
	my $RepDir = $Rep . "/" . $Dir;
	if (-d $RepDir) {
	  my $hh = $RepDir . "/" . $h;
	  if (-r $hh) {
	    open (In,$hh) or die "Can't open $hh";
	    while ($line = <In>) {if ($line =~/ClassDef/ || $line =~ /StCollectionDef/) {push @Defs, $h; goto ENDL;}}
	    close(In);
	  }
	}
      }
    }
  ENDL:
  }
}
if ($#Defs > -1) {
  my @CintFiles = 
  ( $PKG . "_Cint.cxx", $PKG . "_Cint.h");
  my @defs = ();
  foreach my $def (@Defs) {
    next if $def =~ /LinkDef/;
    push @defs   , $INCLUDE . "/" . File::Basename::basename($def); 
  }
  Command $env2 [@CintFiles], @defs,  qq(RootCint.pl "%>" "%<" "$ROOTCINT_CPPPATH" );
  my $cint =  $CintFiles[0];
  push @src, $cint; 
}

if ($#src > -1) {
  script::Keep $pkg;
  Depends $env2 $pkg, $BIN . "/agetof";
  Depends $env2 $pkg, $BIN . "/stic";
  Program      $env2 $pkg, @src;
  Install $env2 $BIN, $pkg;
  
  InstallAs $env2 $BIN . "/Root.exe", $pkg;
  my @o = Objects $env2 @src;
  script::Keep $pkgN;
  Program      $envN $pkgN, @o;
  Install $envN $BIN, $pkgN;
}  
