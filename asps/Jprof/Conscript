#!/opt/star/bin/perl

Import qw ( env INCLUDE LIB BIN  EXPORT BUILD OBJ);
(my $build = $OBJ) =~ s/\#//g;
$build =~ s/\\/\//g;

(my $obj_dir = DirPath '.') =~ s/\\/\//g;
(my $Dir = $obj_dir) =~ s/$build\///g;
my $ObjDir = "#" . $obj_dir; 
my $STAR_SYS = $env->{ENV}->{STAR_SYS};

my $libr = "libJprof." . $env->{SUFSOLIB};
my $pkg  = "jprof";
my $PKG  = $pkg . $env->{SUFEXE};
my $DIR  = Cwd::cwd(); 
my $Libraries;
my $CXXFLAGS = $env->{CXXFLAGS};
my $CPPFLAGS = $env->{CPPFLAGS};
my $LIBPATH  = $env->{LIBPATH};
my $SOFLAGS  = $env->{SOFLAGS};

if($^O eq "solaris"){
    # Package made for Linux. Give up man !!
    print "---> $pkg package cannot be assembled on $^O\n";
    return;
} else {
    print "---> build $pkg with cons $Dir\n";
}


# Save a copy in the src directory
$CPPPATH = "#" . $Dir . 
    $main::PATH_SEPARATOR . $Dir . "/exe".
    $main::PATH_SEPARATOR . $ObjDir."/exe";


# Change some values
$CPPFLAGS = "";
$Libraries = " -lJprof -lbfd -liberty -ldl ";

# Correct a 'cons' annoying side-effect
$tmp = $LIBPATH;
$tmp =~ s/\#//;
if( -d $tmp){ $LIBPATH = $tmp;}



# Display new or current values
print "\tLibraries = $Libraries\n";
print "\tCPPPATH   = $CPPPATH\n";
print "\tLIBPATH   = $LIBPATH\n";
print "\tSOFLAGS   = $SOFLAGS\n";
print "\tCXXFLAGS  = $CXXFLAGS\n";
print "\tCPPFLAGS  = $CPPFLAGS\n";

# Find sources and determine what should go in t
# the library. /leaky/ is pretty much hardcoded.
foreach $file (script::find_sources($Dir)){
    if($file !~ /leaky/){
	push(@src,$file);
    } else {
	$main = $file;
    }
}

#print " *** ".$main."\n";
#print " *** ".join(" ",@src)."\n";





# Library
$env1 = $env->clone(CPPPATH  => $CPPPATH,
		    CPPFLAGS => $CPPFLAGS,
		    SOFLAGS  => $SOFLAGS);
LinkedModule $env1 $libr, @src;
Install      $env1 $LIB, $libr;




# Exec. Make it depend on the .so library, otherwise,
# complation precedence is rather unpredicatble.
my $Plibr = $LIB."/".File::Basename::basename($libr);

$env2 = $env->clone(Libraries => $Libraries,
		    LIBPATH   => $LIBPATH,
		    CXXFLAGS  => $CXXFLAGS,
		    CPPPATH   => $CPPPATH);

script::Keep  $pkg;
Depends       $env2 $pkg, $Plibr;
Program       $env2 $pkg, $main;
Install $env2 $BIN, $pkg;
  
