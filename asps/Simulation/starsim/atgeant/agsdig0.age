*
* $Id: agsdig0.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
* $Name:  $
* $Log: agsdig0.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.3  2001/10/28 14:56:17  nevski
* allow offset in comulative part
*
* Revision 1.2  2001/03/01 19:55:38  nevski
* config file becomes atlsim specific
*
* Revision 1.1  2001/02/27 10:14:34  nevski
*  first working release
*
*
#include <atlsim/config.h>
************************************************************************
*                                                                      *
                 Function  A G S D I G 0 (CSET,CDET)
*                                                                      *
*  Description:   store GEANT digits in the new dense format           *
*  Compared to the original GEANT routine a new SET/DET can be added   *
************************************************************************
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "atlsim/agcdig.inc"
   Character*4    Cset,Cdet,cs
   Integer        AgSDIG0,NSET,NDET,NEED,ier,Nwd

   AgSDIG0=-1;  Cs=Cset(1:3)//'D';
   "            Find if selected set, detector exists       "
   JDU=0;                                                   Check JSET> 0;
   NSET = IQ(Jset-1);                                       Check Nset> 0;
   Call GLOOK(Cs,IQ(Jset+1),Nset,Iset);                     Check Iset> 0;
   JS   = LQ(Jset-Iset);                                    Check Js  > 0;
   NDET = IQ(Js-1);                                         Check Ndet> 0;
   Call GLOOK(Cdet,IQ(JS+1),Ndet,Idet);                     Check Idet> 0;
   JD   = LQ(JS-Idet);                                      Check JD  > 0;
   JDX  = LQ(JD-2);                                         Check JDX > 0;
   NW   = IQ(JD+1)+IQ(JD+5)+1;                              Check Nw  > 0;
   JDU  = LQ(JD-3);                                         Check JDU > 0;
   NV   = IQ(JD+2);   ND   = IQ(JD+6);   NWD = IQ(JD+5);
   NVU  = Q(JDU+6);   NDU  = Q(JDU+2);
   IF NV+ND != NVU+NDU { Print *,'AgSDIG0 error: bad User descriptor'; Return;}
   If NWD != ND        { Print *,'AgSDIG0 error: bad DIGI descriptor'; Return;}

   Ier=iquest(1); Iquest(1)=0;
   IF JDIGI==0                       "    Create DIGItisation master bank    "
   {  Call MZBOOK(IXDIV,JDIGI,JDIGI,1,'DIGI',NSET,NSET,0,2,0); IQ(JDIGI-5)=1;}
   else IF IQ(JDIGI-2)<NSET
   {  NEED=NSET-IQ(JDIGI-2);  Call MZPUSH(IXDIV,JDIGI,NEED,0,'I');   }
*
   JX=LQ(JDIGI-ISET);                "    Create DIGItiastion set bank       "
   IF  JX==0
   {   Call MZBOOK(IXDIV,JX,JDIGI,-ISET,'DIGI',NDET,NDET,NDET,2,0);  }
   else IF min(IQ(JX-1),IQ(JX-2))<Ndet
   {   NEED=NDET-min(IQ(JX-1),IQ(JX-2)); Call MZPUSH(IXDIV,JX,NEED,NEED,'I');}
*
   JXD=LQ(JX-IDET);                  "    Create DIGItisation bank           "
   IF (JXD==0) Call MZBOOK(IXDIV,JXD,JX,-IDET,'SJDX',0,0,IQ(JD+8),1,0);
*
   If IQUEST(1)!=0 {<W> Ier,IQuest(1);(' AgSDIG0 Memory problem ',2i6); Return}
   AgSDIG0 = 0;  IQ(JX+IDET)=0;

  END
