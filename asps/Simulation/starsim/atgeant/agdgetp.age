*
* $Id: agdgetp.age,v 1.2 2016/06/21 14:23:19 jwebb Exp $
* $Name:  $
* $Log: agdgetp.age,v $
* Revision 1.2  2016/06/21 14:23:19  jwebb
* Retire unused DB / Zebra interface.
*
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
*
* Revision 1.6  2003/10/28 20:29:17  nevski
* use selection verified at the very end to allow for schema evolution
*
* Revision 1.5  2003/10/22 15:14:51  nevski
* better diagnostic on modified bank query, imroved table search
*
* Revision 1.4  2003/10/21 18:01:40  nevski
* explicit message on a query on modified structure
*
* Revision 1.3  2001/03/29 09:01:11  nevski
* better diagnostic on bank failure
*
* Revision 1.1  2001/02/27 10:14:23  nevski
*  first working release
*
#include <atlsim/config.h>
**********************************************************************
*                                                                    *
                     Subroutine   A g D G E T P  _
          (Module,Oper,istat,Bank,Name,Value,Bpath,Num,Lb,
                             Map,Names,Par,LL,LL1,Link,Flag)
*               - - -    USE processor    - - -                      *
* Description: Given the module and the bank name returns the        *
*    instance of the bank containing a selected parameter value      *
*    If the Name is blank, select the first (default) bank           *
*    Flag is 0 only at the first call, allowing more checks on it    *
* Modifications:                                                     *
*  PN, 03/06/96:                                                     *
*  default module/bank is saved in stack as suggested by Ulrik Egede *
*  selected DETM branch becomes Unique only in GEO or by Oper=UNIQ   *
*  PN, 25.02.99: introduce default (Csys) for documentation banks too*
*      26.04.99: Name may have alternative form: 'T.name'            *
*  PN, 29.04.00: rewritten for MySQL                                 *
**********************************************************************
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "commons/agclink.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcflag.inc"
#include "atlsim/agcdocl.inc"
#include "atlsim/rbbank.inc"
#include "slug/sclink.inc"
   INTEGER          Nbp,IP1STACK,    IP2STACK,    IEND,IDSTACK
   COMMON /RBSTACK/ Nbp,IP1STACK(20),IP2STACK(20),IEND,IDSTACK(20)

   Integer       LENOCC,LOCF,JBIT,Iname,Ns,LL,IL,Ia,Ib,Id,LP,JP,La,Lb,Lc,i,J,L,
                 Lvl,LL1,Link,Lk,Flag,Num(Lb),Map(2,LL1),Nch,IDYN,istat,jstat,
                 Inew,ie,Ipath(5),Lus,K,I0,I1,m1,m2,m3,n1,n2,n3,Lo,Io,L1,
                 Iprin,Ivar,Ivalue,JOX,Kstat/0/
   Character*(*) Module,Bank,Bpath,Name,Names(LL1),Oper
   Character*4   Ctop,Csys,Cbank,C1,C2,Upp,DBuser
   Character*8   Dmodu,Dmodule,Dup,Ddef
   Character*80  Cform,Cforn,Bform,bbpath
   Character     cc*24,typ*1,tp*1,cna*8,cnt*12,T*2,Op*1
   Real          Value,Val,Par(LL),Var
   Save          Ctop,Csys,Dmodule,Ddef,Dup,ID
   Equivalence   (Var,Ivar)

   integer             ndtab,nctab
   character           ccc*24,cccc*12000,format*80
   common /agcstaftab/ ccc(500)
   common /agcstaffor/ ndtab,nctab,format
   equivalence         (ccc,cccc)

REPLACE [ERR#{#}] with [;    IF (#1) {  IQUEST(1)=0;
    IF (istat!=-999) { Istat=Jstat; Return; }
    typ=name; <W> %L(Module),%L(Bank),LL,%L(Bpath),(num(i),i=1,lb)
    (' error in USE operator called from ',A,' for bank ',A,' L =',i3/ _
     '***** #2 *****'/6x,'The path is ',A,' with IDN =',10i5 )
    if (typ=='R') <W> %L(Name),Value; (6x,'Looking for variable ',A,' =',G10.3)
    if (typ=='I') <W> %L(Name),Value; (6x,'Looking for variable ',A,' =',I6)
    Return; }
  ]
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*
*1*                 find an existing bank in zebra
*                   ------------------------------
*
* trace module changes - a module may have only ONE default Ctop bank
Cbank=Bank;  Jstat=-1;  ie=0;  ia=0;  Iprin=Idebug;
c$$$ Call DBget('u',DBuser); Call CUTOL(DBuser); 
op=Oper;

if Op=='N' & (Istat==0 | Istat=-999) " this is a NEXT request "
{ Err LINK<0 { Bank was not selected for NEXT};   Lk=%LINK(LINK);
  Err Lk<=0  { Previous bank disappeared     };   Lk=LQ(Lk);
}
else
{ If Nbp==0  { Dmodu=Module;  If Dmodu!=Dmodule
               { Dmodule=Dmodu; Ctop=Cbank; Csys=Dmodu; Ddef=' '; ID=0; }
             }
*
  If Lb==1 & Bpath(1:1)!='/'        "  default directories in the DETM bank   "
  { J=0; :M: If Cbank==Ctop
    { Call ASLDETN(Dmodu,ID);    Err Id<=0 {detector not found in DETM bank}
      IrBDIV=IxCONS;  LkArP2=LQ(LkDETM-Id);  LvL=3;  Dup=Dmodu(1:4)//'DETM'}
    else                                   { LvL=4;  Dup=Ddef }
    If Name!=' '                    " - we need IL. Num(1) is not used at all "
    { Lk=0;  Err LKARP2<=0 {default bank undefined}
      Call UCTOH (Cbank,Iname,4,4);    NS=IQ(LKARP2-2)
      Do IL=1,NS { Lk=LQ(LKARP2-IL); If(Lk>0&IQ(Lk-4)==Iname) Break; Lk=0}
    }
    else  { Call Rebank(Cbank,Num,0,Lk,Ia); }

    " this may not be a good solution, try it however "
    If  Lk<=0 & LvL==4  { Ctop=Cbank; Go to :M:; }
  }
  else                               "     explicit directory setting if /    "
  { J=1;  While Bpath(j:j)=='/' {J=J+1};
    If J==1   " - relative address "
    { If Cbank==Ctop
      {  IrBDIV=IxDIV;  LkArP2=LkArP1;  Lvl=3;  C2='RECB'; ID=0}
      else                            { Lvl=4;  C2= Ctop       }
    }
    else      " - absolute address "   { Lvl=3;  C2='NONE'; ID=0}
    IF LvL==3&Bpath(J:J+3)=='DETM' {Csys=Bpath(J+5:J+8); Call AsBDETE(Csys,ID)}
    Call Ag4PATH(Bpath,BBpath); J=J+5*(lb-2)-1;
    C1=bbpath(J+1:J+4); If (lb>2) C2=bpath(J-4:J-1); Dup=C1//C2;
    Call Rebank (bbpath,num,0,LK,Ia)
} }
*
*                                            explicit parameter request
 If Lk>0 & Ia>=0 & Name!=' '
 { Ib=LOCF(Value)-LOCf(Par)+1;  Err 1>Ib|Ib>LL {variable is not in the bank}
   Call UCOPY(Value,Ivalue,1);
   Ia=0; T=name; Lo=Lk; Io=Ia;  
   L1=IQ(LK-1); n1=-IQ(Lk-5);   if (n1>0) L1=IQ(LK-1)/n1;
*  Err n1>0 & L1!=LL {Cant make query on modified bank before read it in full} 
   Until ((IQ(Lk+Ib+Ia)==IValue) | (T=='R.' & Q(Lk+Ib+Ia)==Value) | Ie>0 )
   { * scan a chain or block of banks
     if  n1<=0 { Lo=Lk; Lk=LQ(Lk); } else { Io=Ia; Ia+=L1; }
     if  Lk<=0 | Ia>=IQ(Lk-1) { Lk=Lo; Ia=Io; Ie=1; "No bank with this value" }
   } if (ie==1 & L1!=LL) ie=2; " scheam evolution has to be done before query "

   "for standard top level make this bank default and shunt it at 1st position"
   If Ie=0 & ((J==0&Id>0&Cbank=Ctop&IrBDIV=IxCONS&Module(5:7)='GEO') | OP='U')
   {  Call ZSHUNT(IxCONS,Lk,LkArP2,-IL,0)
        If (LQ(Lk)>0) Call MZDROP(IxSTOR,LQ(Lk),'L')
 } }
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
c$$$if (Lk<=0 | Ie>0) & DBuser='read'
c$$${  " use database "
c$$$   call DBUSE(Module,Oper,kstat,Bank,Name,Value,Bpath,Num,Lb,
c$$$                                Map,Names,Par,LL,LL1,Link,Flag)
c$$$   if DBuser='read'
c$$$   {  if Lb==1 & Bpath(1:1)!='/'  { Call Rebank (Cbank, Num,LL,LK,Ia) }
c$$$      else                        { Call Rebank (bbpath,Num,LL,LK,Ia) }
c$$$      If (Lk>0)
c$$$      {  JOX=IOX;  Ie=0;
c$$$         Call UCOPY (Par,Q(LK+1+Ia),LL);    Call SBIT0(IQ(Lk),1)
c$$$         LkArP3=Lk  "temporary save bank address"
c$$$         If Lvl==3  { "RbCDir"  LkArP2=Lk;  Ddef=Cbank//Dup }
c$$$   }  }
c$$$}
if (Ie>0) Jstat=-Ie;
Err Lk<=0|Ia<0  {No bank exists for this path}
Err Ie==1       {No bank exists with this value}
Err Ie==2       {Cant make query on modified bank before read it in full}

If LL<=0  " finish processing for dummy calls "
{  if (istat==-999) istat=0; return; }
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*
*                                        bank Validation
 If mod(IQ(Lk-1),LL)>0
 { ie=1; if istat==-999 | Idebug>1
   { Prin1; (' Bank length does not correspond to the structure length'); }
 }
 If Flag==0
 { LkArP3=Lk  "temporary save bank address"
   call AgDForm(Names,map,LL1,LL,Cform,Cforn);  Call MZFORM(Cbank,CForm,Flag)
    " If (LkArP3!=Lk)  print *,' popalsia gad ',LkArP3,Lk; "
   Lk=LkArP3;  Call MZIOTC (IxStor,Lk,Nch,Bform);
   If Cform!=Bform & Cform!=Bform(2:) & Cforn!=Bform
   {  ie=2; Flag=0;
      IF istat==-999 | Idebug>1
      { prin1 Cbank,%L(cform),bform(1:Nch)
        (' Modified format in bank ',a,':'/,
         '    required format is = ',a,'*'/,
         '    found bank format  = ',a,'*');
      }
      If Nch>=0 { prin1; (' Bank formats are not the same'); }
   }
   "    force link to be secured for banks with dymanic arrays  "
   IDYN=0; INEW=LL; Do I=1,LL1
   { If map(1,i)<0 | MAP(2,I)<0 { IDYN=1;         INEW-=1; }
     else                       { INEW-=map(1,i)*MAP(2,I); }
   }
   IF (IDYN>0 & LINK==0) LINK=-1
 }
*  Update once DETM family banks with datacards stored in DETP
*  Bit one of the banks status is SET after update is done
If IrBDIV==IxCONS & ID>0 & JBIT(IQ(Lk),1)==0 & Ie==0
{
   LP=LQ(LKDETM-ID); Ns=IQ(LP-2); Call UCTOH('DETP',Iname,4,4);
   Do IL=1,Ns
   {  JP=LQ(LP-IL);  Check JP>0;  Check IQ(JP-4)=Iname;  L=IQ(JP-1);
      "   <w> bank; (' detp bank found for bank ',a4)         "
      "  if bank was selected with ISEQ, transmit it as value "
      La=IQ(Lk-1); Lc=IQ(lk-5);  Val=Value;
      if (Lc<0)    La=IQ(lk-1)/abs(Lc)
      If (Name==' ' & Lc>=0)  Val=Lc
      If (Name==' ' & Lc <0)  Val=Ia/La+1

      Call AgDatCar (Bank,Name,Val,Names,map,LL1,Q(Lk+1+ia),La,Q(JP+1),L)
      if (Ia+La>=IQ(Lk-1))  Call SBIT1(IQ(Lk),1)
}  }
*
 if Ie<=1   " only length are different "
 {  Call Ucopy (Q(Lk+1+ia),Par,min(LL,IQ(Lk-1))) }
 else       "  doing schema evolution   "
 {
    ***********************************************************************
    If (LdArea(1)=0) call MZLINT(IxCONS,'AGCDOCL',LDarea,L1Doc,Lpar)
    If (Bpath(1:1)='/' & Lenocc(Bpath)>=10)  Csys=BPath(7:10)
    prin1 Csys,bank,LL
    (' Schema evolution for Csys=',a,' bank=',a,' LL=',i5,' : ')
    Call UCTOH('DETMDOCUDETM'//Csys//Bank(1:4),Ipath,4,20)
    L=LKDETM;   Call MZIOTC (IxStor,Lk,Nch,Bform)
    :i: do i=1,4
    {  Check L>0;
       Check IQ(L-4)==Ipath(i);  Ns=IQ(L-2)
       Prin3 i,L,IQ(L-4),Ns; (' ===> i,L,bank,ns=>',i3,i9,2x,a4,i3)
       do IL=1,Ns
       {  JP=LQ(L-IL);  Check JP>0;  check IQ(JP-4)==Ipath(i+1)
          If i<4 { L=JP; Next :i:; }
          Lus=1;  format=' ';  ndtab=99999;
          while JP>0
          { call agdprina(Iprin,Lus,JP,2,0,0,2,Upp);
            If (format==Bform & mod(IQ(lk-1),ndtab)==0) goto :j:
            JP=LQ(JP);
    }  }  }
    prin1 %L(format),ndtab;  (' *** bank format in descriptor=',a,' ndtab=',i5)
    prin1 %L(Bform),IQ(lk-4);(' *** actualy found bank format=',a,' bank =',a4)
    Err (format!=Bform | mod(IQ(lk-1),ndtab)!=0)
    { cant find correct bank format and length for the schema evolution }

    :j: INEW=LL; Do I=1,LL1
    { INEW-=1; If (map(1,i)>0 & map(2,i)>0) INEW=INEW-map(1,i)*map(2,I)+1; }

    {I0,m3,n3}=0; If (Inew==0) I0=1;
    Do I1=I0,LL1
    { if I1==0 { tp='R';       Cna='SYSTEM';      m1=Inew;      m2=1;        }
      else     { tp=Names(i1); Cna=Names(i1)(3:); m1=map(1,i1); m2=map(2,i1) }
      n3=0; do i=2,nctab
         cc=ccc(i);  Call CLTOU(cc);
         {n1,n2}=1;  typ=' ';  cnt='1 1'
         j=INDEX(cc,'[');  if (j==0) j=INDEX(cc,';')
         k=INDEX(cc,']');  if (k >j) cnt=cc(j+1:k-1)//' 1 1 '
         read (cnt,*,err=:n:) n1,n2; :n:;
          if (cc(3:3)=='C' & n2==1) n1/=4 " byte counter";
         If Cna=cc(11:j-1) { typ=cc(3:3);  Break; }
         if n1>0  &  n2>0  { n3+=n1*n2; } else { n3+=1; }
      enddo

      if typ!=' '
      { prin2     tp,cna,m1,m2,m3,  typ,n1,n2,n3
        ('  filling ',a,'.',a,3i5,' from type=',a,3i5)
        do j=1,min(m2,n2)
          do i=1,min(m1,n1)
            if      typ//tp=='FI' { Ivar =  Q(Lk+Ia+n3+i+(j-1)*n1) }
            else if typ//tp=='LR' { Var  = IQ(Lk+Ia+n3+i+(j-1)*n1) }
            else                  { Ivar = IQ(Lk+Ia+n3+i+(j-1)*n1) }
            Call UCOPY(Ivar,Par(m3+i+(j-1)*m1),1)
          enddo
        enddo
      }
      if m1>0 & m2>0 { m3+=m1*m2; } else { m3+=1; }
    }
    if (Istat==-999) ie=0
    *************************************************************************
 }
 if (op=='Z') call VZERO(IQ(Lk+1),IQ(Lk-1))
 if (op=='D') call MZDROP(IxSTOR,Lk,' ')
 Call AGDLINK (Module,Bank,Link,Lk)
 If  LVL == 3    { " print *,' default bank set ' "; LkArP2=Lk; }
*                                      check length once more
 If  istat!=-999 { Istat=0;  Jstat=min(LL,IQ(Lk-1)); }
 Prin4 ie,istat; (' AgdGetP: use done ,ie,istat=',2i5)
 Err Ie>0  {Bank does not correspond to the structure}
 IQUEST(1)=0
 Return

END


