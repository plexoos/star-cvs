*
* $Id: agdprina.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
* $Name:  $
* $Log: agdprina.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.2  2001/03/01 19:55:34  nevski
* config file becomes atlsim specific
*
* Revision 1.1  2001/02/27 10:14:25  nevski
*  first working release
*
*
#include <atlsim/config.h>
*************************************************************************
*                                                                       *
              subroutine agdprina(Iprin,Lu,L,Lev,Iwr,Kw,Idl,upper)
*                                                                       *
* Description: Produce a compiler readable include files for structures *
* Decoding part is tough, for format details see 2.16 MZFORM, page 44:  *
* a Bank consists of 3 types of blocks (P=1-3 -> tit)                   *
* each of blocks contains sectors (crec<=ask(1-9))                      *
* A useful dd sector contains type.variable + comments                  *
* Routine produce or a def file, or an idl file, or struct in memory    *{
*************************************************************************
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "atlsim/agcdocl.inc"
#include "slug/sclink.inc"
   Integer      INDEX,LENOCC,NwDESC,Nwhead,NwGEN,Nwlink,Nwdata,Idl,lu,nc,MM,x
   Integer      Lev,Iwr,Kw,Iprin,i,j,k,l,m,n,is,nd,Nw,iw,iv,i1,j1,P,nn(3)
   Integer      mask(9)/1,1024,16384,8192,9216,10240,15361,19456,17410/
   Character*2  ask (9)/'ba','au','ve','nd','nl','ns','up','io','dd'/
   character*1  Let,T,Sec(0:8)/'*','B','I','F','D','H','*','S','*'/
   character*6  tit (3)/'header','links','data'/
   character*80 Text,texto,texta,Header,Author,Create
   character*8  var,varo,dname,type,typo
   character    CN*20,crec*2,kname*16,blan*12/' '/
   character*4  Upper,Bname,Csys/' '/
   Equivalence  (text,var),(texto,varo)

   Integer             CLEN
   Parameter           (CLEN=500)
   Integer             ndtab,nctab
   character           ccc*24,cccc*1200,format*80
   common /agcstaftab/ ccc(CLEN)
   common /agcstaffor/ ndtab,nctab,format
   equivalence         (ccc,cccc)

   nc=0; NdTab=-1; NcTab=-1; check L>0; upper=' '
   prin3 (IQ(L-i),i=1,5);(' ***** doc bank =',3i10,2x,2a5,' *****')
   call UHTOC(IQ(L-5),4,dname,8); prin5 dname;  (' dname  = ',a)
   call UHTOC(IQ(L+1),4,bname,4); prin5 bname;  (' bname  = ',a)
   NwDesc = IQ(L+2);              prin5 NwDesc; (' Nwdesc = ',i4)
   NwHead = IQ(L+3);              prin5 Nwhead; (' Nwhead = ',i4)
   NwGen  = IQ(L+11);             prin5 NwGen;  (' Nwgen  = ',i4)
   NwLink = IQ(L+12);             prin5 NwLink; (' Nwlink = ',i4)
   NwData = IQ(L+15);             prin5 NwData; (' Nwdata = ',i4)
   i=Nwhead+1;  Call Vzero(NN,3); P=1; Format='-F'; MM=0;

   while i<=Nwdesc+1
   {  if i>=Nwhead+Nwgen+Nwlink+1 {P=3} else if i>=Nwhead+Nwgen+1 {P=2}
      Let='H';  if (Text!=' ') texta=text; Text=' ';
      if i<NwDesc
      {  i1=i; Is=IQ(L+i1); Nw=is/16; i=i+Nw;
         Let=Sec(min(mod(Is,16),8));
      }  i=i+1;

      If let=='I' & Nw==3
      {  iw=IQ(L+i1+1);  Iv=IQ(L+i1+2);
         crec='un';   do k=1,9 { If (iw==mask(k)) crec=ask(k); }
         if (crec(1:1)=='n') { prin5 crec,iv; (' sector ',a4,i5);}
      }
      else If let='H' & i<=NwDesc+1
      {  j1=1; if (crec=='ba') j1=2;
         Call UHTOC(IQ(L+i1+j1),4,text,4*(Nw-j1+1));
         If  NN(P)==0  { Nd=0; Texto=' '; Prin5 tit(p); (' ---  ',a,'  ---') }
         if (P==3 & nn(p)>=mm)  call agreforma(format,mm,type,idl)
         NN(P)+=1;  Prin6 crec,p,NN(p),Nd,type,%L(text);
         (' sector ',A4,':  NN(',i1,')=',i4,'  ND=',i3,' t=',a,' : ',a)
      }
      else  { prin6 i,let,Nw; (' unknown sector at ',i6,2x,a1,i8); crec='dd';}

      If (crec=='ba' & Let='H')  Header = text
      If (crec=='au' & Let='H')  Author = text
      If (crec=='ve' & Let='H')  Create = text
      If (crec=='up' & Let='H')  Upper  = text
      If (crec=='io' & Let='H')  Format = text
      check P==3 & Let='H' & crec='dd'
*
* ----------------  unpacking done, now output stuff --------------
*
      If NN(P)==1
      {  prin5 lev,bname; ('===>  starting lev,bname=',i3,2x,a,' <===');
*         if (Lev<=1) Csys='sys'
         kname=%L(csys)//'_'//%L(bname)
         if (Lev<=1) kname=%L(bname)//'sys'
         if (Idl==0) kname=%L(kname)//'.def'
         if (Idl>0 ) kname=%L(kname)//'.idl'
         call CUTOL (kname); J=index(kname,'.')
         if (Lev==1) Csys=bname

         if Lev==Iwr
         {  If (Lu>6) CLose(lu);  Lu=1 " pseudo-output - in memory only"
            if (0<=idl&idl<=1)
            { lu=62;  prin2 kname; (' AgDocPrin: open file ',a)
              Open (Lu, file=%L(kname), STATUS= 'UNKNOWN')
         }  }

         if (Lu>0 & Idl==0)
         { if (Lev=0) output kname(:j),%L(create)
              ('+PATCH,',a/'*Created: ',a/,
               '*This file is automatically generated by AGI'/,
               '*--------- DO NOT EDIT THIS FILE -----------'/'*')
           if (Lev=1) output kname(:j),%L(header),%L(author),%L(create)
              ('+DECK,',a,' describes the ',a/'*Author : ',a/'*Created: ',a/'*')
           if (Lev=2) output kname(:j),%L(header),%L(author),%L(create),
                                                                  bname,header
              ('+KEEP,',a,' - ',a/'*Author : ',a/'*Created: ',a/'*'/,
               '  structure  ',A4,'    { " ',a42, ' " _ ')
         }
         if (Lu>0 & Idl==1)
         {  if (Lev==Iwr) output %L(kname),%L(header),%L(author),%L(create)
            ('/* File ',a,/'** '/'** Description: ',a/,
             '** Author     : ',a/'** Created    : ',a/,
             '** This file is automatically generated by AGI'/,
             '** --------- DO NOT EDIT THIS FILE -----------'/'*/')
            if (Lev==2) output kname(:j-1);  ('  struct  ',a,'   { ')
         }
         if (Lu>0 & Idl==2 & Lev==2 & nc<CLEN)
         {  nc+=1; CCC(nc)=' struct '//kname(:j-1)//' { '; }
      }
*
      nd+=1; Ndtab+=1; check Lev==2 & var!=varo & lu>0
*
      If varo!='  '
      {  if (varo=='- ') varo='system'
         prin7 varo,var; (' putting ',a,' on ',a)
*        fit rigid stic format - no extra spaces allowed
         call CUTOL(varo); N=Lenocc(varo);
         if (idl>0 & typo=='char') ND=4*ND;

*        take indices from comments, except for char, system, and repetitions
         CN=' ';  if (texto!=texta & Lenocc(texta)<=18) CN=texta(11:18)
         if (typo=='char' | varo='system') write(CN,'(i6)') ND;
         M=Lenocc(CN);   do K=1,M  { if (CN(K:K)!=' ') Break; }

         if Idl==0
         {  T=','; if (text==' ') T='}'
            " hash in comments creates problems for AGI parser "
             do x=9,80  { if (texto(x:x)=='#') texto(x:x)='N' }
            if (ND==1) output typo,%L(varo),blan(N:),texto(9:),T
                    (4x,a4,1x,2a,' " ',a42,' " ',a)
            if (ND >1) output typo,%L(varo),CN(K:M),blan(M-K+N+3:),texto(9:),T
                    (4x,a4,1x,a,'(',a,')',a,' " ',a42,' " ',a)
            if (text==' ') output; ('*');
         }
         If Idl==1
         {  if (ND==1) output typo,%L(varo),blan(N:),texto(9:)
                    (4x,a5,1x,a,       ';',a,'/* ',a42,' */')
            if (ND >1) output typo,%L(varo),CN(K:M),blan(M-K+N+3:),texto(9:)
                    (4x,a5,1x,a,'[',a,'];',a,'/* ',a42,' */')
            if (text==' ') output; ('};');
         }
         If Idl==2
         {  if NC<CLEN
            {  NC+=1;  NCTAB=NC;
              if (ND==1) CCC(NC)='  '//typo//%L(varo)//'; '
              if (ND >1) CCC(NC)='  '//typo//%L(varo)//'['//CN(K:M)//']; '
            }
            else
            { prin0 bname; (' AgDPRINA: description too long for bank ',a) }
            if (text==' ' & NC<CLEN) { NC+=1; CCC(NC)='}' }
         }
      }
      nd=0; Texto=Text; typo=type
   }
  end


****************************************************************************
  subroutine  agreforma (format,num,type,idl)
*                                                                          *
* Description: decode ZEBRA 'format' descriptor into a sequence of 'type's *
*              for format details see: 2.16 MZFORM, page 44                *
*              - num is the number of items already taken, should be saved *
*              - idl is an agi/c switch                                    *
****************************************************************************

  character   format*(*),type*8,List*14/'0123456789-IFH'/
  integer     Lenocc,idl,L,i/0/,k,n,num,big/9999999/

     L=Lenocc(format);  if (num==0) i=0;  N=0;
     Do i=i+1,L
     { k=index(list,format(i:i))-1;  check k>=0
       if  k<=9  "digit"  { N=N*10+k; Next; }
       if  k=10  "tail"   { N=big;    Next; }
       num=num+max(1,N);  Break;
     }
     if (idl==0) { type ='real';  if (format(i:i)=='I') type='int';  }
     else        { type ='float'; if (format(i:i)=='I') type='long'; }
     if (format(i:i)=='H') type='char'
     end

