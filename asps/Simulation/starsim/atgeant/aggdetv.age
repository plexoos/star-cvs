*
* $Id: aggdetv.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
*
* $Name:  $
*
* ---------------------------------------------------------
#include <atlsim/config.h>
**********************************************************************
*                                                                    *
                 Subroutine   A g G D E T V (Cdet,JDU)
*                                                                    *
*  Description: given a sensitive detector make a description of     *
*               path (NAMESV,NBITSV) for the hit definition          *
**********************************************************************
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcnum.inc"
  Character*4 Cdet
  Integer   Nchild,MaxFam
  Parameter (MaxFam=50000)
  Integer   Level,Idet,Ivol1,Iv,Jv,nin,in,Jd,Id,ip,L,M,N,N1,N2,nr,
            Iprin/9/,Nhisch,Ncopy,Jp,Jdu,Ia,Ja,Name(20),GName(20),
            NumV(20),Numb(20),Mask(20),NumP(20),NumH(20),Ivol(20),
            Ifamily(maxfam)

call UCTOH(Cdet,Idet,4,4); call UCTOH('VOL1',Ivol1,4,4);
Level=1;                 {Name(1),Gname(1)}=Idet;
{N1,N2,Mask(1),NumV(1),NumP(1),NumH(1),Nchild}=0;
if (JVOLUM<0) Return;
Do Iv=1,Nvolum
{  Jv=LQ(JVOLUM-Iv);  Check JV>0;  Check IQ(JV-4)=Idet;
   Nchild+=1; Ifamily(Nchild)=Iv;  If (IQ(JVOLUM+Iv)=Idet) Ivol(1)=Iv;
}
If Nchild=0 { <w> Cdet; (' AgGDETV: detector ',a,' not found'); return; }
"<w> cdet,Nvolum,Nchild; (' *** in aggdetv: cdet,nvol,nchild = ',a4,2i6);"

Until "Ifamily(Nchild)==0 \" N1>N2  \ Level==20
{  " previous level children are in (N1,N2) range on family "
   N1=N2+1;  N2=Nchild;  Level+=1;  L=Level;
   {Name(L),Gname(L),NumV(L),Numb(L),NumH(L),Mask(L),NumP(L),Ivol(L)}=0;

  " select family parents: Iv is parent of Id, Nr is copy number or Ndiv  "
  " Nhisch is the number if his direct counted children (previous level !)"
  " Ncopy is the higher copy number, used for NVL if more than one copy ! "
  " NumP contains total number of found new parents at that level         "

   Do Iv=1,NVOLUM                                      " Iv is a parent "
   {  Jv=LQ(JVOLUM-Iv);  nin=Q(Jv+3); Check nin#0;     " He has a child "
      Nhisch=0; Ncopy=0;
      do in=1,max(nin,1)
      {  Jd=LQ(Jv-in); Id=Q(Jd+2); Nr=Q(Jd+3);         " - is his child "
         do ip=N1,N2                                   " in the family? "
         {  Check Id==Ifamily(ip);                     "   Yes !        "
            Nhisch+=1; Ncopy=max(Ncopy,Nr);
            "mark this parent as a next level child (If not marked yet) "
            Do jp=n2+1,Nchild { If (Ifamily(jp)==Iv) go to :known:; }
            if Nchild<MaxFam  { Nchild+=1;  Ifamily(Nchild)=Iv; }
            else {<W> Cdet;(' AgGDETV error: too many parents of ',a);Return;}
            :known:        " -  find its generic name ";
            If IQ(Jv-4)#Ivol1 { Gname(Level)=IQ(Jv-4); }
            else              { Gname(Level)=IQ(JVOLUM+iv); };
            " make XOR name and mask - and select NameSV name "
            Name(Level)=IOR(Name(Level),IQ(JVOLUM+Iv));
            Mask(Level)=IOR(Mask(Level),IEOR(Name(Level),IQ(JVOLUM+Iv)));
            If (Name(level)==Gname(Level)) Ivol(Level)=Iv;
            If  (Iv=1)  NumV(Level)=1;
      }  }  L=Level-1;

      " skip counting if one child only is positioned "
      Unless (Nin>0 & Nhisch<=1) NumH(L)=max(NumH(L),Ncopy)
      NumV(L)=max(NumV(L),Ncopy) " but remember anyway its copy number "
      NumP(Level)=Nchild-N2      " and count how many branches we have "
   }
   If Ivol(Level)==0 " active daughters are positioned NOT in the first copy "
   { Do Iv=1,Nvolum  { If (Gname(Level)==IQ(JVOLUM+iv)) Ivol(Level)=Iv;  } };
   Numb(L)=0; If (NumH(L)>0) { m=NumV(L)-1; while m>0 { m/=2; Numb(L)+=1; }};
   If (Jdu>0) Iprin=Q(Jdu+10); Prin4 Nchild; (' AggDETV: nChild used = ',i6);
   Prin5  L,NumP(L),Name(L),Gname(L),NumH(L),NumV(L),Numb(L),Mask(L),Ivol(L);
         (2i6,2(2x,A4),3i6,1x,Z8,i8);
}  Level=Level-2;
   If Jdu>0
   {  Do L=Level,1,-1
      {  Ia=Q(Jdu+3);      N=Q(jdu+4);       Ja=Jdu+Ia+N*3;   "<<start<<"
         Q(Ja+1)=Ivol(L);  Q(Ja+2)=NumV(L);  Q(Ja+3)=Numb(L); " 3 words "
         N+=1;             Q(jdu+4)=N;       Q(jdu+5)=Ia+N*3; "<< stop<<"
   }  }
   END

