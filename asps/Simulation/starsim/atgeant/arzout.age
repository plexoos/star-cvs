*
* $Id: arzout.age,v 1.1.1.1 2004/01/12 23:49:38 potekhin Exp $
* $Name:  $
* $Log: arzout.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
* Revision 1.2  2001/03/01 19:55:40  nevski
* config file becomes atlsim specific
*
* Revision 1.1  2001/02/27 10:14:39  nevski
*  first working release
*
*
#include <atlsim/config.h>
****************************************************************************
          subroutine  ARZOUT(Idiv,Lo,CCKey,IC,opt)
*                                                                          *
* Description: same functionality as RZOUT is supposed with few additions: *
*            - consistence between Bank at Lo and Ckey is checked          *
*            - previous bank with simular Ckey is read and compaired,      *
*              new bank is writtent only if it differs from the old one.   *
*            - very crude version , to be developed later (?). Therefore   *
*              intermediate input bank is kept on a free Link=1 of L1Doc   *
* Attention:   both RZIN and RZOUT may trigger garbage collection          *
****************************************************************************
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcflag.inc"
#include "atlsim/agcdocl.inc"
 Integer        Ie,Iprin,Idiv,Lo,Li,Key(3),Nc,IC,i,k,New,Old,Mn,Mo,Istat,diff;
 Character*(*)  CCkey,Opt,status*10,Copt*4,Ckey*12,Cold*80
*
 New(k)=IQ(Lo+k)
 Old(k)=IQ(Li+k)
*
*
  check Lo>0;  Nc=0;  Iprin=Idebug; Ie=0; Li=0;

  if new(2)>20
  { diff=IQ(Lo-1)-new(2)-1; if (diff>1) Call MZPUSH(IxCONS,Lo,0,-Diff,'I') }
  else
  { prin1 CCkey; (' ARZOUT: empty documentation bank detected for ',a); }

* take into account that IQ(L-5) are integer and may be swaped,
* but key is ascii and should never be swapped
*
  Ckey=CCkey(1:8)//CCkey(8:8)//CCkey(7:7)//CCkey(6:6)//CCkey(5:5)
  Call CLTOU(Ckey);   Call UCTOH(Ckey,key,4,12);
  if (key(1)!=IQ(Lo-4) | (key(2)!=IQ(Lo-5) & key(3)!=IQ(Lo-5)))
  {  prin1 key,IQ(Lo-4),IQ(Lo-5); (' ARZOUT error: key=',3a4,' bank=',2a4)
     IC=0; Return;
  }

  istat=IQ(Lo); status=' '; IC=0;
  call RZCDIR( Cold,    'R')
  call RZCDIR('//RZDOC',' ')

* look for the previous definition, see that it is readable
* and test thet the output bank was not lost due to garbage collection
* CD - read the highest cycle, return data + cycle info

  CALL RZIN (IxDIV,Li,2,Key,999999,'CD')
  if (IQUEST(1)!=0)
  { prin3 ckey,iquest(1); (' ARZOUT message: bank ',a,' not found, iquest=',i8)
    If (Idebug>=2) Call ZVERIF(IxDiv, 0, ' ARZOUT 2 after RZIN')
    status='new';  Li=0;  go to :w:;
  }
  if (IQ(Lo)!=Istat)
  { prin0 ckey; (' ARZOUT error: bank ',a,' link is not protected !')
    status='bad';  Lo=0;  go to :w:;
  }

* previous definition found - extract its cycle number
  IC=0; Nc=IQUEST(50); if (IQUEST(1)==0 & 0<Nc&Nc<20) Ic=IQUEST(50+Nc)

  ie=1; status='updated';  if (Li<=0)
  { prin4 key; (' ARZOUT error: key=',3a4,' not found '); go to :w: }

  ie=2; "data"   if (New(15)!=Old(15)) goto :w:
  mn=new(3)+new(11)+new(12);  mo=old(3)+old(11)+old(12);
  do i=1,New(15) { If (New(mn+i)!=Old(mo+i)) go to :w: }

  ie=3; "links"  if (New(12)> Old(12)) goto :w:

  ie=4; "header" if (New(11)> Old(11)) goto :w:;
  mn=new(3);  mo=old(3);

* do i=1,New(11) { If (New(mn+i)!=Old(mo+i)) go to :w: }

  ie=0; status='found'

  :w: Copt='SN';                           " If (ie>2)   Copt='SNR'  "

  if (Li>0) Call MZDROP(IxSTOR,Li,' ')     " drop first, it may move "
  if (Lo>0 & status!='found') CALL RZOUT(Idiv,Lo,Key,IC,Copt)
  prin3  status,key,ie,nc,ic; (' ARZOUT status - ',a,' - ',3a4,' cycles ',3i6)

  call RZCDIR(Cold,' ')
 end

