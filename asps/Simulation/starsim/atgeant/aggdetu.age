*
* $Id: aggdetu.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
*
* $Name:  $
*
* ---------------------------------------------------------
#include <atlsim/config.h>
**********************************************************************
*                                                                    *
              Subroutine   A g G D E T U (Iset,Idet,Jdu,IPRIN)
*                                                                    *
*  Description: calculate Nbit,Origin and Factors for hit/digi sets  *
*               and fill DET,DETH/DETD banks starting from DETU bank *
*  ->           Parameters NwuHit,NwuVol,Magic are hardwired here    *
*  ->31.8.96:   Nbit option use full 2**Nbit range,                  *
*               Bin option has its range symmetrise around the center*
**********************************************************************
Replace[ERR(#)] with _
       [<W> Cset,Cdet; (' AgGDETU error for set,det=',2(1x,a));
         Write (Lout,*) ' ******> ',#1; RETURN;              ];
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gconst.inc"

 Character*4 ACFROMR,Cset,Cdet,Chit,Copt
 Integer     INDEX,IPRIN,Iset,Idet,Js,Jd,Jdu,Jx,i,i1,i2,J,K,L,M,N,X,Mode,Node,
             Nbit,Nbin,Nb,Nam,iv,Kv,Nv,Nn,Nh,Nw,Nwo,Lf,Ifun,Ld,Lx,Ldu,Jds,Lex,
             JL,NameV(20),NbitV(20),LL(2)/10,3/,Magic/-696969/
 Real        Lfact,Fmin,Fmax,Orig,Fact,Range,ofs,
             Log2/.30103/,safety/0.02/

  Check  Jset>0 & Idet>0 & Iset>0;
  JS=LQ(Jset-Iset);  Check JS>0;  Call UHTOC (IQ(Jset+Iset),4,Cset,4);
  JD=LQ(JS - Idet);  Check JD>0;  Call UHTOC (IQ(JS + Idet),4,Cdet,4);
  If Cset(4:4)='H'  {X=1}  else  If Cset(4:4)='D'  {X=2}
  else              {err('can not decode set type ')};       Ld =IQ(JD-1);
  JX =LQ(JD-X); If JX <=0 {err('hit/digi bank not found ')}; Lx =IQ(JX-1);
 "Jdu=LQ(JD-3)" If Jdu<=0 {err('No  user bank  defined  ')}; Ldu=IQ(Jdu-1);
  Prin2  Cset,Cdet; (/' *** ',2(1x,A4),' *** ');

  "reset volumes and hit counters " {Nn,Nv,Nw,K,Kv,Nh,Nwo,Mode,Node} =0;
  Do M=2,0,-2
  {  i1=Q(Jdu+M+1); i2=Q(Jdu+M+3); N=Q(Jdu+M+2); Check N>0; L=(i2-i1)/N;
     If L#LL(1+M/2) | 1>N|N>15 | i2>Ldu | i1<10
        {err('Bad format of DETU bank, M,i1/2,N=',M,I1,I2,N)}
     do i=i1,i2-1,L
     {  j=Jdu+i; If M==2   " - - - - - - - volumes - - - - - - - - "
        {  iv=Q(j+1); Nam=IQ(JVOLUM+iv); {Nbit,Nb}=Q(j+3); Check Nb>0; Kv+=1; }
        else               " - - - - - - - - hits  - - - - - - - - "
        {  Chit=ACFROMR(Q(j+1)); Copt=ACFROMR(Q(j+2)); Call UCTOH(Chit,nam,4,4)
          " Limits will be re-calculated If Q(4)>=Q(5), ifun is not redefined "
           Ifun=Q(j+10); Call AgGFLIM(Chit,Cdet,Q(j+4),Q(j+5),Ifun);
                                  * * *
          " mode=1 means commulative part, node=1 - users request for hit part"
           Nbit=Q(j+3);  Fmin=Q(j+4);   Fmax=Q(J+5);   Fact=Q(J+7);
           If Index(Copt,'H')>0             { K=0;    Node=1;  }
           If -32<=Nbit&Nbit<=0 & Mode=0    { K=0;    Mode=1;  }
           If Fmin==Magic & Fmax==Magic & Nbit>0
           {  ofs=0;  if (i==i1 & Q(LQ(JD-3)+8)>Magic) ofs=Q(LQ(JD-3)+8)
              Fmin=ofs-0.5; if (Index(Copt,'F')>0) Fmin=ofs; Fmax=Fmin+2**Nbit;
           }
           "   Define Range (for a cumulative mode Origin is always 0)    "
           Orig=0;  If (mode==0 | X==2) Orig =-Fmin;  Range=Orig+Fmax;
           If (Range<=0) <w> Cset,Cdet,Chit,Fmin,Fmax; (' Error in',2(1x,a4),
             ': HITS/DIGI element ',a4,' has invalid range',2E12.3/,
             ' *** Probably this shape is still absent in GFLCAR/RAD/etc ***'/,
             ' *** You should set limits for this element explicitely !! ***')
                                  * * *
           If Nbit>=-32                                        " Nbit option "
           {  "             Nb is always from 1 to 32                   "
              Nb=min(32,abs(Nbit));  If (Nb=0) Nb=32;
              " 31.08.96:  use all bit combination without last spare   "
              Fact=1;  If (Range>0)  Fact=2.**min(31,Nb)/Range;
              "     if rounding option, factors mantissa is 2 digits    "
              If Index(Copt,'R')>0 & Range>0
              {  Lfact=Log2*min(Nb,31)-log10(Range)-safety;
                 Lf=nint(Lfact-1.5); Fact=nint(10.**(Lfact-Lf))*10.**Lf;
           }  }
           else                                              " fix bin option "
           {  Nbin=Range*Fact+0.99; Range=Nbin/Fact;         " ? to continue? "
              Nb=0;  while Nbin>0 { Nbin/=2; Nb+=1; };
              Nb=min(max(1,Nb),32);
           }
           if (Mode=0) Orig=-(Fmax+Fmin-Range)/2         "  - symmetrise  "
           Q(J+5)=Fmax;  Q(J+6)=Orig;  Q(J+7)=Fact;  Q(J+8)=Nb;
           Prin3 Chit,Ifun,Nb,Fmin,Fmax,Orig,Fact;
           (' hit = ',A4,' cod,nb=',2i3,' min/max,orig,fact=',3F10.3,G12.3);
        }
        " count packed words and the remaining bits "
        If  Nb>K   { Nw+=1; K=32; };    K-=Nb;
        Nn=min(Nn+1,20); NameV(Nn)=Nam; NbitV(Nn)=Nb*(1-2*mode);
                                  * * *
        If Mode=0 & Node=0            " overwrite SEJD detector bank in SETS "
        {  if 2*(nv+1)+10>Ld | Nv>=20
              {err('unsufficient length of the detector bank in SETS',ld,nv)};
           Nv+=1;  IQ(Jd+2*nv+9)=Nam;   nwo=nw;
                   IQ(Jd+2*nv+10)=max(IQ(Jd+2*nv+10),Nb);
        }  else                       " overwrite SJDH or SJDD hit/digi bank "
        {  if (Nh+1)*(4/X)>Lx | Nh>=20
              {err('unsufficient length of DETH or DETD bank in SETS',lx,nh)};
           Nh+=1;  Jx=Jx+1; IQ(Jx)=Nam; Jx=Jx+1; IQ(Jx)=max(IQ(Jx),Nb);
           if X=1 {Jx=Jx+1; Q(Jx)=Orig; Jx=Jx+1;  Q(Jx)=Fact; }
        }
  }  }
  Prin2 (NameV(i),i=1,Nn); (/' NameV : ',20(2x,A4));
  Prin2 (NbitV(i),i=1,Nn); ( ' NbitV : ',20(i4,2x));
  Prin3   Cset,Cdet;       (' *** ',2(1x,A4),' *** '/);
 *                                          this is maximum number of:
 J=JD+2*X;   if  Jdu=LQ(JD-3)   {{IQ(JD+1),IQ(JD+2),IQ(J+1),IQ(J+2)}=0;}
 IQ(JD+1) = max(IQ(JD+1),Nwo)   " words to store packed volume numbers";
 IQ(JD+2) = max(IQ(JD+2),Nv)    " volume descriptors in detector bank ";
 IQ(J+1)  = max(IQ(J+1),Nw-Nwo) " words to store packed hits or digi  ";
 IQ(J+2)  = max(IQ(J+2),Nh)     " hit/digi descriptors in DETH/D bank ";
 Q(Jdu+6) = Kv      " number of geometry branchings - really volumes  ";
 *
 *                                          trim hit/digi/user banks
      Lex=IQ(Jdu-1)-nint(max(Q(Jdu+3),Q(Jdu+5)));
          If (Lex>0) Call MZPUSH(IxCons,Jdu,0,-Lex,'I')
      Lex=IQ(JD-1)-10-2*IQ(JD+2);
 *     original SEJD bank was 100, but GGDETV may change it - then leave it
          If (Lex>0 & IQ(JD-1)==100) Call MZPUSH(IxCons,JD, 0,-Lex,'I')
      JL=JX; JX =LQ(JD-X);  Lex=IQ(JX-1)-(JL-JX);
          If (Lex>0) Call MZPUSH(IxCons,JX, 0,-Lex,'I')

 Nv=IQ(JD+2); Do i=kv+1,nv
 { jds=LQ(JD-3); while Jds>0 { Q(Jds+10*(i-kv)+8)=IQ(JD+10+2*i); jds=LQ(jds)} }
 *
  END

