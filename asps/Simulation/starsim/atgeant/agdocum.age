* $Id: agdocum.age,v 1.2 2016/06/21 14:23:19 jwebb Exp $
* $Name:  $
* $Log: agdocum.age,v $
* Revision 1.2  2016/06/21 14:23:19  jwebb
* Retire unused DB / Zebra interface.
*
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
*
* Revision 1.7  2003/09/29 16:18:11  nevski
* dynamic dblib interface
*
*
* Revision 1.5  2002/06/01 09:25:53  nevski
* bugfix in agdocum for db connection
*
* Revision 1.4  2001/11/18 19:46:28  nevski
* any length for bank names accepted
*
#include <atlsim/config.h>
**********************************************************************
*                                                                    *
                 Subroutine   A g D O C U M  _
     (Module,MTitle,Author,Created,Btit,Bank,Bpath,num,Lb,
                   Map,Names,Comment,Par,LL,LL1,Link,Flag)
*                                                                    *
*  Description: store a bank in DETM or RECB structure with          *
*               corresponding documentation bank for DZDOC           *
* - AgDOCU is the FILL processor. It may be called in MODULEs only.  *
* - There may be 3 forms of Bpath: short relative (one word),        *
*   long relative (words separated by /), absolute (starts with /).  *
* - If the first call in a MODULE has a short Bpath, the latest is   *
*   kept as a CTOP bank, attached to //DETM/MODULE.                  *
* - If the first call in a MODULE has a long Bpath (sect, trig...),  *
*   the latest is attached to //RECB.                                *
*   CTOP bank or any absolutely addressed bank remain a DEFAULT bank *
* - All documetation banks are created lineary in DOCU/MODULE bank   *
* - Flag controls the I/O format, Link - access methode              *
* Modifications:                                                     *
* 16/04/96 PN: flag list changed as in AsFLAGS                       *
* 23.10.98 PN: save and restore rz CWD before saving documentation.  *
*          RZPURG cannot be used here because the CWD may be HBOOK.  *
**********************************************************************
REPLACE [ERR#{#}] with _
        [; IF (#1) {<W>%L(Module),Bank,'#2'; (10x,'AgDOCUM error in module ',A,
                    ' for bank ',A/ 10x,'*** ',A38,' ***');  go to :warn:; }]
REPLACE [SWAP(#,#)] with [;iw=#1;#1=#2;#2=iw;]
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcflag.inc"
#include "slug/sclink.inc"
#include "atlsim/agcdocl.inc"
#include "atlsim/rbbank.inc"
Integer       LENOCC,IndexN,j1,word2desc,iprin/1/,itype/0/,
              OK,Lb,LL,LL1,LvL,ns1,ns2,Ndm,i,j,k,l,M/1000000/,ND(3),
              Idat,Itim,Link,Ia,Lk,L1,L2,Flag,IDYN,INEW,JOX,iw,idd/0/,X/0/,
              map(2,LL1),num(Lb),key(3),ID/0/,Iform/0/,Jform/0/,Istat/0/,IC
Character*(*) Module,MTitle,Author,Created,Bank,Bpath,Btit,
              Names(LL1),Comment(LL1)
Character*12  Ddoc,nam,CC,DD
Character*24  Descr(15),Tshort
Character*4   Ctop,Cbank,C1,C2
Character*8   Flags(15),Dmodule,Dmodu,Dbank,Dbanu,Dup,Ddef,dash/'-'/
Character*80  Cform,Cforn,Commenti,CWD,bbpath
Character     C*1,cinde*40,cin*3/'(,)'/
Parameter     (OK=0)
Save          Id,Dmodule,Dbanu,Dbank,Dup,Ddef,Ctop
Logical       First/.true./,start
Real          Par(LL)
* - - - - - - - - - - - - - - - dete bank - - - - - - - - - - - - - - - - - - -
Data Flags  /'PNOW', 'PRIN', 'DEBU', 'GEOM', 'HIST', 'GRAP', 'SIMU', 'DIGI',
             'RECO', 'MFLD', 'ANAL', 'BACK', 'resa', 'resb', 'resc'/
Data Descr  _
      /'current print level  ','system print level   ','GEANT debug level    ',
       'geometry version     ','system histogram flag','system graphics level',
       'store GEANT hits flag','digitisation flag    ','reconstruction flag  ',
       'magnetic field flag  ','user analysis level  ','pile-up bunch select.',
       'reserve              ','reserve              ','reserve              '/
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
If First
{  First=.false.;   Istat=0;   L1Doc=0;
   Call MZFORM('DETP','-F',Iform);  Call MZFORM('DDOC','1H 19I -S',Jform);
   If (LdArea(1)=0) call MZLINT(IxCONS,'AGCDOCL',LDarea,L1Doc,Lpar)
}
If L1Doc<=0
{  * locate documentation system at the first link of DOCU bank:
   *(only bank IDH is checked, IDN may be swapped - check later)
   Call AsbDETE('DOCU',I);  L=0;  If (I>0)  L=LQ(LQ(LKDETM-I)-1)
   If L>0  { " both DETM?" if (IQ(L-4)==IQ(LKDETM-4)) L1doc=L; }
}
Iprin=Idebug; Itype=0;
#if 0
call agDBFILL (Module,MTitle,Author,Created,Btit,Bank,Bpath,num,Lb,
                      Map,Names,Comment,Par,LL,LL1,Link,Flag,Itype)
#endif

* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* - - - - - -          create the information bank itself           - - - - - *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *

" trace module changes - a module may have only ONE default Ctop bank "
Cbank=Bank;  CWD=' ';  IOX=Flag;  If IOX==0
{ call AgDForm(Names,map,LL1,LL,Cform,Cforn);  Call MZFORM(CBank,CForm,IOX) }
*
Dmodu=Module;  start=.false.
If Dmodu != Dmodule { Dmodule=Dmodu; Ctop=Cbank; Ddef=' '; start=.true.}
*
If Lb==1 & Bpath(1:1)!='/'           "  default directories in the DETM bank  "
{  If Cbank==Ctop
   { Call AsBDETE(Dmodu,ID); Err Id<=0 {detector not found in DETM bank}
     IrBDIV=IxCONS;  LkArP2=LQ(LkDETM-Id);  LvL=3;  Dup=Dmodu(1:4)//'DETM'}
   else                                   { LvL=4;  Dup=Ddef }
   Call Ag4PATH(Cbank,BBpath)
   Call ReBANK (BBpath,Num,LL,LK,Ia)
}
else                                 "     explicit directory setting if /    "
{  J=1;  While Bpath(j:j)=='/' {J=J+1};
   If  J>1                            { Lvl=3;  C2='NONE'}
   else
   {  If Cbank==Ctop
      {  If (LKAR P1==0) Call MZBOOK(IxDIV,LKAR P2,LKAR P1,1,'RECB',2,2,10,2,0)
         IrBDIV=IxDIV;  LkArP2=LkArP1;  Lvl=3;  C2='RECB'}
      else                            { Lvl=4;  C2= Ddef }
   }
   Call Ag4PATH(Bpath,BBpath); J=J+5*(lb-2)-1;
   C1=bbpath(J+1:J+4); If (lb>2) C2=bpath(J-4:J-1); Dup=C1//C2;
   Call ReBANK (bbpath,num,LL,LK,Ia)
}
   JOX=IOX;
   Call UCOPY (PAR,Q(LK+1+Ia),LL);    Call SBIT0(IQ(Lk),1)
   LkArP3=Lk  "temporary save bank address"
   If Lvl==3  { "RbCDir"  LkArP2=Lk;  Ddef=Cbank//Dup }
*
IDYN=0; INEW=LL;             " dependant dynamic banks now - if any required "
DO i=1,LL1
{  if (map(1,i)>0 & map(2,i)>0)       { INEW-=map(1,i)*map(2,i); Next; }
   INEW-=1; IDYN+=1;                      " dynamic array found here "
   If (Link==0) Link=-1                   " force link to be secured "
   L1=map(1,i); If L1<0
   { L1=-L1;    if L1<M { Call Ucopy(Par(L1),L1,1)} else { L1=nint(Par(L1-M))}}
   L2=map(2,i); If L2<0
   { L2=-L2;    if L2<M { Call Ucopy(Par(L2),L2,1)} else { L2=nint(Par(L2-M))}}
   L=Lenocc(Names(i));  Nam=Names(i)(3:L)//'xxxx';  Nam(5:)='*';
   C=Names(i)(1:1); If C=='I' {IOX=2} else If C=='H' {IOX=5} else {IOX=3}
   swap(LkArP2,LkArP3)
   CALL ReBANK (Nam,1,2+L1*L2+3,Lk,Ia)
   swap(LkArP2,LkArP3)
   Err LQ(LkArP3-IDYN)!=Lk {This FILL does not work in this version}
}
* LkArP3 keeps the current bank adress now
Dmodule=Module;  Call AGDLINK(Module,Bank,Link,LkArP3)
Check Flag==0;   Flag=JOX;

* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* - - - - -   new bank: make sure that detector documentation exists  - - - - *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
Dbanu=' '; Dbank=' '; CALL RZCDIR(CWD,'R')   " save rz-CWD "
If Start & Istat==0
{ "-------------------      level 1  - main DETM bank    -------------------"
  Call AsBDETE(Dmodu,ID);     Err Id<=0  {detector does not exist in DETM bank}
  Call AsBDETE('DOCU',Idd);   Err Idd<=0 {cannot book DOCU system in DETM bank}
  Dbanu='DETMNONE';  IQUEST(1)=0;  X=0;
  If L1Doc<=0
  {
    Call UCTOH(Dbanu,Key,4,8); Ldete=LQ(LKDETM-idd)
    Call RZIN (IxCONS,Ldete,-1,Key,0,' ')
    If IQuest(1)==0 { L1Doc=LQ(LQ(LkDETM-idd)-1) }
    else
    {  IQuest(1)=0
       Call MZBOOK (IxCONS,L1Doc,LQ(LkDETM-idd),-1,'DETM',2,2,300,Jform,0)
       Call AgDOCBA(L1Doc,Dbanu,'Detector main bank', Author,Created,'-H',
                          0, 1, 'detector','subsystem or faculty name ',X)
    }
    Err L1Doc<=0 | Iquest(1)#0 | X!=0 { Cant access main documentation bank }
    if (Idebug>1)  Call DZVERI(' AgDOCUM documentation initialized ',0,'CLU')
    Err    Iquest(1)!=0    { Bad initialization of the documentation system }
  }
  "-------------------       level 2  -  DETE bank      -------------------"
  If L1Doc>0
  { "        first add link description in DETM bank                       "
    Call AgDTIT  (MTitle,Tshort)
    Call AgDOCBA (L1Doc,Dbanu,'*','*','*','*',1,0,Module(1:4),Tshort,X)

    " insure that links in doc DETM coincides with the main DETM "
    Ns1=IQ(LkDETM-2);  Ns2=IQ(L1Doc-2)
    If (Ns1>Ns2) Call MZPUSH (IxCONS,L1Doc,Ns1-Ns2,0,' ')
    if (L1Doc>0) L2Doc=LQ(L1Doc-Id)

    If L1Doc>0 & L2Doc<=0    "Documentation does not exist for THIS detector"
    { Dbank=DModu(1:4)//'DETM';   Call UCTOH(Dbank,Key,4,8);
      Call RZIN (IxCONS,L1Doc,-ID,Key,0,' ');  L2Doc=LQ(L1Doc-Id);
      If Iquest(1)#0|L2Doc<=0
      { IQuest(1)=0; Call MZBOOK(IxCONS,L2Doc,L1Doc,-ID,Dbank,2,2,300,Jform,0)
        Call AgDOCBA(L2Doc,Dbank,Tshort,Author,Created,'-I',0,15,Flags,Descr,X)
      }
      Err L2Doc<=0|Iquest(1)#0|X!=0 { Can not access DETE documentation bank  }
  } }
  Err IQuest(1)#0|L2Doc<=0|L1Doc<0 {cannot find top level documentation banks}
}

"---   level 3/4  -  the bank itself: all documentation is linear in DETE  ---"

Ldoc=0; Lkdoc=0; X=0;
If Istat==0 & L2Doc>0
{  * first, update links in the upper level bank
   Ddoc=Cbank//Dup;   Ndm=60+LL*16;    Ns1=IQ(L2doc-2)
   Call UHTOC (IQ(L2doc-4),4,C1,4)           " - for level 3 doc "
   Call UHTOC (IQ(L2doc-5),4,C2,4)
   if C1==Dup(1:4) & C2==Dup(5:8)
   {  Call AgDOCBA (L2doc,Dup,'*','*','*','*',1,0,Cbank,Btit,X) }
   do i=1,Ns1
   {  Ldoc=LQ(L2Doc-i);   If (Ldoc<=0) go to :f:
      Call UHTOC (IQ(Ldoc-4),4,C1,4)
      Call UHTOC (IQ(Ldoc-5),4,C2,4)
      prin6 Cbank,C1,C2,Dup; (' in agdocum cbank=',a,' id=',2a,' Dup=',a)
      if C1==Cbank & C2==Dup(1:4)    { "MZDROP(IxSTOR,Ldoc,' ');"  goto :f:; }
      if C1==Dup(1:4) & C2==Dup(5:8)            " - insert links for level 4 "
      { Lkdoc=Ldoc; Call AgDOCBA (Ldoc,Dup,'*','*','*','*',1,0,Cbank,Btit,X) }
   }  i=Ns1+1;  Call MZPUSH(IxCONS,L2DOC,5,0,' ')

   :f: Ldoc=LQ(L2Doc-i)   " If (Ldoc==0) "
   Call MZBOOK (IxCONS,Ldoc,L2doc,-i,Cbank,2,2,Ndm,Jform,0)
   Call AGDTIT (Btit,Tshort)
   Call AgDOCBA(Ldoc,Ddoc,Tshort,Author,Created,cform,0,0,' ',' ',X)
   If INEW>1
   {  Call AgDOCBA(Ldoc,Ddoc, '*', '*', '*', '*',0,1,dash,'usage counter',X)
      Call AgDOCBA(Ldoc,Ddoc, '*', '*', '*', '*',0,1,dash,'system version',X)
   }
   Err LDoc<=0 | Iquest(1)#0 { Can not create documentation bank }
   DO i=1,LL1
   {  k=1; cinde=' ';
      if map(1,i)>0 & map(2,i)>0 { k=map(1,i)*map(2,i) }
      else                           " format a text dimension descriptor "
      {  do j=1,2
         {  CC=' '; DD=' '    " real dynamic index is displaced by M "
            if map(j,i)<0     " index word number to index number    "
            { j1=word2desc(map(j,i),map,LL1,Inew);    CC=Names(j1)(3:)    }
            if map(j,i)>=j { write (DD,*) map(j,i);   CC=DD(IndexN(DD):); }
            * print *,' i,j,map(j,i),j1,cc = ', i,j,map(j,i),j1,cc
            if (Lenocc(CC)>0) cinde=%L(cinde)//cin(j:j)//%L(CC)
         }  cinde=%L(cinde)//cin(3:3)//'- '
            prin5 cinde; (' AGDOCUM: dynamic index = ',a,2i5)
      }                              "              --- done ---

      L=Lenocc(Names(i));   Nam=Names(i)(3:L);  if L>10
      { Prin1 %L(Module),Bank,Names(i)(3:L);
       (' AgDOCUM/DZDOC warning in module ',a,', bank ',a,', variable ',a,':'/,
        ' -name too long, will be trucated in documentation and include files')
      }
      * take description from previous doc - 01.11.98
      L1=Ldoc; commenti=%L(cinde)//comment(i)
      while LQ(L1)>0 & Commenti=='    '
      {  L1=LQ(L1);  call agdocline(L1,Iprin,Nam,commenti) }

      * Negative ND(1) means only one comment per the whole array
      ND = { -k,map(1,i),map(2,i) }
      Call AgDOCBA(Ldoc,Ddoc,Tshort,Author,Created,cform,0,ND,Nam,Commenti,X)
   }
   If X==0 & Ldoc>0
   {
     if (Dbanu!=' ') CALL aRZOUT (IXCONS,L1doc,Dbanu,IC,'SN')
     if (Dbank!=' ') CALL aRZOUT (IXCONS,L2doc,Dbank,IC,'SN')
     CALL aRZOUT (IXCONS,Lkdoc,Dup , IC,'SN')
     CALL aRZOUT (IXCONS,Ldoc, Ddoc, IC,'SN')
     L1=LQ(Ldoc); if L1>0
     { if IQ(Ldoc-1)==IQ(L1-1)
       { do i=1,IQ(Ldoc-1) { if (IQ(Ldoc+i)!=IQ(L1+i)) go to :P:; }
         call MzDROP (IxSTOR,LQ(Ldoc),' ')
     } } :p:
   }
   else { <W> Ddoc; (' AGDOCUM: problems writing out doc for ',a) }
}
if INEW>1
{  Call DATIME (Idat,Itim);  Par(1)=Idat+Itim/2401.;  Q(LkArP3+1+Ia)=Par(1)
                             Par(2)=IC;               Q(LkArP3+2+Ia)=Par(2)
}
goto :e:

:warn: <W>; (10x,'***   detm.rz file is probably corrupted   ***'/,
             10x,'***     delete it and try to run again     ***'/,
             10x,'**********************************************');
"no doc mode" {L1Doc,L2Doc,Ldoc}=0; Istat=-100
:e: if (CWD!=' ')     Call RZCDIR(CWD,' ')   " restore CWD      "
    if (CWD=='RZDOC') Call ARZUPDA            " keep it in hbook "
    if (Idebug>=3)    Call DZVERI(' after AgDOCUM ',0,'CLU')
END

******************************************************************************

  function word2desc(j,map,LL1,Inew)
* translate word position in a bank into position of its descriptor in map
  Integer  word2desc, M/1000000/,map(2,LL1)

  word2desc=0
  jj=abs(j); if (jj>M) jj-=M;
  kk=Inew
  do i=1,LL1
     k=1;   if (map(1,i)>0 & map(2,i)>0) k=map(1,i)*map(2,i)
     kk+=k; if (kk>=jj)    { word2desc=i; return; }
  enddo
  end

******************************************************************************

  subroutine    Ag4PATH (bpath,bbpath)
* PN, 05.07.99: allows none-standard (less then 4 letters) names in path
*               Important for ATRIG (T2 banks used!)
  implicit   none
  character  bpath*(*),bbpath*(*),c1*4,e*1
  integer    INDEX,LENOCC,j,j1,j2,j3,l1

   J=1;  While Bpath(j:j)=='/' {J=J+1};
   {j1,j2,j3}=j;  bbpath=Bpath(:j);
   L1=Lenocc(Bpath);   e='*';
   if Bpath(L1:L1)!='*' { L1+=1; e=' '; }
   While j3<L1
   {  j3 = j1+index(Bpath(j1:L1),'/')-1;  if (j3<j1) j3=L1
      c1 = bpath(j1:j3-1);            j1=j3+1
      if j2>j { bbpath(j2:j2)='/';    j2+=1; }
                bbpath(j2:j2+3)=c1;   j2+=4;
   }  bbpath(j2:j2)=e;
   * print *,' bbpath=',%L(bbpath)

  end


