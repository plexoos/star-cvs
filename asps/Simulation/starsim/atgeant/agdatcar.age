*
* $Id: agdatcar.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
*
* $Name:  $
*
* --------------------------------------------------------
#include <atlsim/config.h>
****************************************************************************
*                                                                          *
                 Subroutine   A g D A T C A R _
          (Bank,Name,Value,names,map,LL1,vars,LL,Buf,Lbuf)
*                                                                          *
*  Description: datacard input, stored in BUF by FFREAD, is assumed to be  *
*        a sequence of text addresses 'bank(sel).variable(ind)=' and some  *
*        amount of real numbers. All parts of the address are optional.    *
*        Type of the selector Value corresponds to the first letter of Name*
*        CKRACK is an entry in CHPACK (M432)                               *
****************************************************************************
#include "commons/typing.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcflag.inc"
Integer       ND,NE,NF,NG,NUM,   Dummy;     Real Anum(2);
Common/slate/ ND,NE,NF,NG,NUM(2),Dummy(34);
Equivalence              (num,                   anum);
Integer       LL,LL1,LBUF,LENOCC,ICLOCU,ICFIND,Isel,i,j,K,M,N,ia,ib,map(2,LL1),
              ie,iv,ii,i0,i1,i2,Lt,Lb,Lv,jv,kv,ind,jb,kb,ia1,Irind,Ivalue,ift
Character     Name*(*),Names(LL1)*(*),Bank*4,Cn*1,
              Line*80,Cline*80,C*1,EQ*1/'='/,CRind*4,Cvalue*4
Real          Value,Rind,Rvalue,vars(LL),Buf(Lbuf),Blank/-989898.e-17/
Equivalence   (Rind,Irind,Crind),(Rvalue,Ivalue,Cvalue)
Replace[ERR(#)]  with [;<W>;(' AgDatCar error : ','#1'); Isel=0; Ia=0; NEXT;]
Replace[DEBUG#;] with [;IF (IDEBUG>=7) print *,#1;]

{i1,i2,Ia,Isel,M}=0;
*                      find reference variable type and bank format
do N=1,LL1
{  if (Name==Names(N)(3:) | Name=Names(N)) M=N
   Ia+=1; If (Map(1,N)>0&Map(2,N)>0) Ia+=Map(1,N)*Map(2,N)-1
}  Ift=LL-Ia+1;  Ia=0;
* take care of IDN selector - it is passed as a real number
Cn='R'; if (M>0) Cn=Names(M);

Call UCOPY(Value,Rvalue,1);
debug ' checking item ',bank,'.',name,': ft=',ift,' M=',M,' c=',Cn

While i2<Lbuf
{  " get new field " i0=i2;  Call AgDatAdr(Buf,i1,i2,Lbuf);
   if Isel>0 & Ia>0      " fill the previous address field with data "
   {  do i=i0+1,i1
      {  j=ia+i-i0-1;  if 1<=j&j<=LL
         {  if  Names(N)(1:1)=='I'
            {  Call Ucopy(Nint(Buf(i)),Vars(j),1)
               <w> Names(N),j-ia1+1,Nint(Buf(i)),Bank,Value
               (' ===> Datacard assign ',a,'(',i2,') =',i10,' in ',a,
               ' bank selected with ',F10.3)
            }
            else if Names(N)(1:1)=='H'
            {  Call Ucopy(Buf(i),Vars(j),1)
               <w> Names(N),j-ia1+1,Buf(i),Bank,Value
               (' ===> Datacard assign ',a,'(',i2,') =',6x,a4,' in ',a,
               ' bank selected with ',F10.3)
            }
            else
            {  Call Ucopy(Buf(i),Vars(j),1)
               <w> Names(N),j-ia1+1,Buf(i),Bank,Value
               (' ===> Datacard assign ',a,'(',i2,') =',F10.4,' in ',a,
               ' bank selected with ',F10.3)
   }  }  }  }
*                          transform the next address field into characters
   Lt=4*(i2-i1);     If Lt>80   {err(address field is too long)}
   Lt=min(lt,80);    Line=' ';   Call UHTOC(Buf(i1+1),4,line,Lt)
   Cline=Line;       Call CLTOU (Cline)
   Lb=Lenocc(Bank);  Lt=Lenocc(Line(1:Lt));   Iv=0 "- already used characters "
*
   Jb=ICLOCU(Bank,Lb,CLine,1,LT);              " look for this bank reference "
   debug 'looking for bank ',bank,'.',name,' in item ',line(:lt),' LT,JB=',lt,jb
   if jb==1
   {  ib=jb+lb; C=Line(ib:ib);  Rind=blank;   Iv=ib;  Isel=1; Ia=0;
      if C='('                                 " check for index in brackets  "
      {  kb=ICFIND(')',Line,ib,Lt); if kb<=0 {err(no closing bracket)};
         ia=0; ie=index(line(ib+1:kb-1),'=')
         if ie>0
         {  while Line(ib+1:ib+1)==' ' {ib+=1; ie-=1;}
            Ia=ift;  do N=1,LL1                 " find reference variable "
            {  K=N;  if (CLine(ib+1:ib+ie-1)==Names(N)(3:)) Break;  K=0;
               Ia+=1; If (Map(1,N)>0&Map(2,N)>0) Ia+=Map(1,N)*Map(2,N)-1
            }  ib=ib+ie
            debug ' ...name=',%L(name),' line,ib,ie,ia=',line(ib:kb),ib,ie,ia
         }
         Iv=kb+1; call CKRACK(Line,ib+1,kb-1,-1);
         if Nf=2 {Rind=NUM(1)}  else if Nf>2 {Rind=Anum(1)}
         else    {while Line(ib+1:ib+1)==' ' {ib+=1;}; CRind=Line(ib+1:kb-1)}
      }
      if C=EQ                                  " or direct select assignement "
      {  if ib#Lt {err(equal sign is not the last one)}
         Rind=Buf(i2+1);  Iv=Lt+1;
      }                                        " there was a selection done   "
      If Rind!=blank
      { Cn='R'; Rvalue=blank;
        if ia==0    { If (M>0) Cn=Names(M); Call Ucopy(Value,Rvalue,1)    }
        else if K>0 {          Cn=Names(K); Call Ucopy(Vars(ia),Rvalue,1) }
        else        { Isel=0 }
        If (Cn=='I' & Rind!=Ivalue)  Isel=0
        If (Cn=='R' & Rind!=Rvalue)  Isel=0
        If (Cn=='H' & CRind!=Cvalue) Isel=0
      } ia=0
   }  If (Isel=0 | Iv>Lt) Next
*
   Ia=Ift; jv=0; do N=1,LL1                      " now check variable reference "
   {  Lv=Lenocc(Names(N));       Jv=ICLOCU(Names(N)(3:Lv),Lv-2,CLine,Iv+1,LT)
                                 C=line(jv+Lv-2:jv+Lv-2)
      debug ' ...now for ',names(n)(3:lv),' in ',line(Iv+1:LT),' iv,lt,jv,C=',
      iv,lt,jv,C
      Ia1=Ia;   If (jv==iv+1 & (C=='('|C==EQ)) break;     " 2.06.98: was jv>0 "
      Ia=Ia1+1; If (Map(1,N)>0&Map(2,N)>0) Ia=Ia1+Map(1,N)*Map(2,N)
   }
* variable name should imediatly follow - otherwise it may be another bank name
   If jv!=Iv+1 { Isel=0; Next; }
*
   ii=jv+(lv-2);  C=Line(ii:ii);  Ind=1;  Ie=ii;
   If C='('
   {  kv=ICFIND(')',Line,ii,Lt);      if kv<=0 {err(closing bracket lost)}
      call CKRACK(Line,ii+1,kv-1,-1); Ie=kv+1;
      If Nf=2 {Ind=Num(1)} else {err(Index must be integer)}
   }
   debug ' ........ isel,ia,ind=',isel,ia,ind
   Ia+=Ind-1;  If Line(Ie:Ie)#EQ {err(bad assignement termination)}
}
   END

