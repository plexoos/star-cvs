*
* $Id: agfdig0.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
* $Name:  $
* $Log: agfdig0.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.2  2001/03/01 19:55:35  nevski
* config file becomes atlsim specific
*
* Revision 1.1  2001/02/27 10:14:26  nevski
*  first working release
*
*
#include <atlsim/config.h>
**********************************************************************
*                                                                    *
             Function     A g F D I G 0 (Cset,Cdet)
*                                                                    *
*  Prepare hits for digitization making chains in each element       *
*  modifications: 1.09.95 - protect agains 0 path     - PN           *
*  25.01.96 - invert hits order as suggested by Fred                 *
*  01.05.97 - check consistency between sets and hits/digi structure *
*  13.05.97 - on error keep Iv=-1 to stop AgFDIG1                    *
*  02.04.98 - accept wildcard (*) for Cdet (Idet=1)                  *
**********************************************************************
 Replace [;#?;]   With   [; IF #1 {" Take next word " K=1; Nk+=1; } ]
#include "commons/typing.inc"
#include "commons/agcbuff.inc"
#include "commons/agcrdig.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcnum.inc"
#include "geant321/gcflag.inc"
Character*(*)     Cdet,Cset;
Integer Lp;       Parameter (Lp=20);
Integer           AgFDIG0,JBYT,MSBYT,LENOCC,ICDECI,NVL(Lp),ISC(Lp),Itr,Ier,
                  Iset,Idet,X,Nv,Nr,Nb,Ja,i,j,k,L,Na,Ma,Jv,Nk,Ih,JH,Mbm
#if defined(CERNLIB_OLDD)
integer           nac,nas,iac,itc,jtr,La
parameter         (La=50000)
common/agctrbuf/  nac,nas,iac(La),itc(La)
#endif
*
   Cs=Cset;  Cd=Cdet;  {AgFDIG0,Iv,Ia}=-1;  {Iset,Idet,Jdu}=0;
   CALL MZLINT (IXSTOR,'AGCRDIG',IWA,JS,JDU);
*
   "  Find if hits in selected set & detector exist  "
   Call GLOOK(Cs,IQ(Jset+1),IQ(Jset-1),Iset);               Check Iset> 0;
   JS  = LQ(Jset-Iset);                                     Check Js  > 0;
   Call GLOOK(Cd,IQ(JS + 1),IQ(JS - 1),Idet);
   if (Cd=='*' & IQ(JS-1)>0 & IQ(Js+1)!=0) Idet=1;          Check Idet> 0;
   JD  = LQ(JS-Idet);                                       Check JD  > 0;
   JDU = LQ(JD-3);                                          Check Jdu > 0;
   if Cset(4:4)=='H' {X=1; JH=JHITS} else {X=2; JH=JDIGI};  Check JH  > 0;
   Ier = 1;          If (Iset>IQ(JH-2))                     goto :e:
   Jx  = LQ(JH-Iset);                                       Check Jx  > 0;
   Ier = 2;          If (Idet>IQ(Jx-2)|Idet>IQ(Jx-1))       goto :e:
   JXD = LQ(JX-Idet);                                       Check JXD > 0;
   Last= IQ(JX+Idet);                                       Check Last> 0;
*
   Nw=IQ(JD+1)+IQ(JD+2*X+1)+1;  Nvb=Q(Jdu+6);  Nv=IQ(JD+2); Nc1=Last/Nw;
   Ier = 3;          If (mod(last,nw)!=0)                   go to :e:
   Nr=0;  if (LENOCC(Cdet)>=6)  Nr=ICDECI(Cdet,5,6);   Nvb=min(Nvb+Nr,Nv);

* here we calculate Mbm - number of bits needed to save max pointer
   Call VZERO(NVL,Lp);          Mb=0; i=Nc1; while i>0 {i/=2; Mb+=1;};
   If Mb>1  { Mbm=2**(32-Mb) } else { Mbm=2 000 000 000 "big positive" }
*
Ier=0; last=Nc1+1; JDS=0;
*
#if !defined(CERNLIB_OLDD)
   IF (IQ(JXD-2)==0) CALL MZPUSH(IxDIV,JXD,1,0,'I')
   L=0;  JDS=LQ(JXD-1);  IF (JDS>0) L=IQ(JDS-1)
   if (JDS>0 & L<= Nc1)  CALL MZDROP(IXDIV,JDS,' ')
   if (LQ(JXD-1)==0) CALL MZBOOK(IXDIV,JDS,JXD,-1,'SJHJ',0,0,Nc1+1,1,0)
                     IQ(JDS-5)=IQ(JXD-5)
#endif
#if defined(CERNLIB_OLDD)
* calculate number of hit segments, produced by the same track, verify tracks
   Nac=0; Jtr=-1;
   do ih=1,Nc1
   {  j=JXD+(Ih-1)*Nw+1; itr=IQ(J);
      If itr>Ntrack & ier<=Idebug
      { ier+=1; <w> Cset,Cdet,itr;(' AgFDIG0 error in',2a5,': bad ITRA=',i12)}
      if jtr!=itr { Nac+=1; jtr=itr; }
   }
   if(Nac>=La)<w>Cset,Cdet,Nac;(' AgFDIG0 error in',2a5,': too many tracks',i9)
*
* Now make a bidirectional list of tracks, which produced hits in this detector
* Replace track numbers by their position in the list (packed by nas if needed)
* Track numbers should be restored in agfdig1, otherwise they will be lost !
   nas=Nac/Mbm+1; jtr=-1; Nac=0
   do ih=1,Nc1
   {  j=JXD+(Ih-1)*Nw+1; itr=IQ(J);
      if jtr!=itr { nac=min(nac+1,La-1); iac(nac)=ih; itc(nac)=itr; jtr =itr; }
      IQ(J)=(nac-1)/nas " this is now a position in the list, sometimes crude "
   }  iac(nac+1)=Nc1+1
#endif
*
   "       ----------      associate hits in chains     ---------    "
   call VZERO(Ibuf,Lbuf); Na=1; Ma=0; ISC(1)=1; ier=0;
   Do Jv=1,max(1,Nvb)                      " for all higher levels   "
   {  Do Ih=Nc1,1,-1                       " rescan all hits to find "
      {  Nk=1; K=1; J=JXD+(Ih-1)*NW+1;     " the actual maximum of   "
         do Iv=1,min(Jv+1,Nvb)             " the volume number used  "
         { Nb=IQ(JD+2*Iv+10); K+Nb>33?; ISC(iv)=JBYT(IQ(j+Nk),K,Nb)+1; K+=Nb;}
         *                                   now get buffer address
         Ia=1; do i=1,Jv { Ja=Ia+ISC(i); Ia=IBuf(Ja);}  Ma=max(Ma,Ja);
         If Jv<Nvb { IBuf(Ja)=max(Ia,ISC(Jv+1)); }
         else
         {   itr=IQ(J);  IBuf(Ja)=Ih;
             if JDS>0   {       IQ(JDS+ih+1)=Ia        }
             else       { IQ(J)=MSBYT(Ia,Itr,33-Mb,Mb) }
         }
      }  If (Jv=1) Ibuf(1)=Ma-1;
      *
      Ja=Ma+1;  "expand array"  While Ibuf(Na)>0 & Na<Ma & Jv<Nvb
      {  Do Ia=1,Ibuf(Na)
         {  L=Ibuf(Na+Ia); Check L>0; Ibuf(Na+Ia)=Ja; Ibuf(Ja)=L; Ja+=1+L;
            Check Ja>Lbuf; Ibuf(Na+Ia)=0;  <W> Cset,Cdet;
            (' AgFDIG0: NOT ENOUPH MEMORY FOR',2(1x,A),', HITS WILL BE LOST');
         }  Na+=1+Ibuf(Na);
   }  }
   {AgFDIG0,Iv,Ia,nc2}=0;   return
***
   :e: <w> ier,Cset,Cdet
   (' AgFDIG0 FATAL ERROR:',i3,' Probably inconsistent geometry ',2(1x,a4))
   {AgFDIG0,Iv,Ia,nc2}=-1
   END


