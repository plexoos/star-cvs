*
* $Id: aggstep.age,v 1.2 2004/03/31 22:54:16 fisyak Exp $
* $Name:  $
* $Log: aggstep.age,v $
* Revision 1.2  2004/03/31 22:54:16  fisyak
* Keep hits for Laserino
*
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
*
* Revision 1.2  2001/03/01 19:55:37  nevski
* config file becomes atlsim specific
*
* Revision 1.1  2001/02/27 10:14:30  nevski
*  first working release
*
*
#include <atlsim/config.h>
**********************************************************************
*                                                                    *
                  Subroutine   A g G S T E P (Iret)
*                                                                    *
*    Description: general gustep for any detector with auto-hits     *
*    Scan and fill the hit structure for all sensitive detectors     *
**********************************************************************
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcflag.inc"
#include "geant321/gconst.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcvolu.inc"
#include "geant321/gctmed.inc"
#include "geant321/gcsets.inc"
#include "geant321/gckine.inc"
#include "geant321/gcking.inc" 
#include "geant321/gctrak.inc"
#include "atlsim/agcstep.inc"
#include "slug/sclink.inc"
 Real      Org,Fct,Fmx,Hit,AgGHIT,Serial,xx,h1,Gold
 Integer   JBIT,JATTF,LWSTEP,LDETE,Jj,JS,JD,i,j,k,i1,i2,Nb,Ih,Jh,Jv,Idevt0,
           iv,iw,Nlev,Jat,Ihit,Ic,Iad,Id,Iopt,Iret,Itr,JDH,Jds,mode,mec,itry,
           Iprin,Isimu,bin,Nbr,Jdu/0/,Id0/-1/,NwuVol/3/,NwuHit/10/
 Save      Jdu,iv,iw,Iprin,Isimu,Iopt,Id0,Serial,Gold,Idevt0
#include "slug/stafunc.inc"
 LWSTEP(IIIII) = IQ(LQ(LKDETM-IIIII)+13)
 LDETE (IIIII) = IQ(LQ(LKDETM-IIIII)-1)
 JATTF(Jj)     = Jj+int(Q(Jj+5))+6
 bin(xx)       = Ifix((xx+org)*fct)
*
* - - - - - - - - - - - - - print control - - - - - - - - - - - -
 If (Idevt!=Idevt0&LkDETM>0) Call GLOOK('TRAC',IQ(LKdetm+1),IQ(LKdetm-1),Id0);
 Idevt0=Idevt;  Jat=JATTF(LQ(JVOLUM-LVOLUM(Nlevel)));  Id=Q(Jat+9);  Iprin=0;
 If Idebug>0 & LkDETM>0
 {  If (Id>0)  Iprin = max(LVPRIN(Id),Idebug)
    If (Id0>0) Iprin*= max(LVPRIN(Id0),Idebug)
    If (iw!=NAMES(Nlevel)&Iprin>0 | Nlevel+Iprin>=15)  Call Gdebug
**  If (iw!=NAMES(Nlevel)&Iprin>0&STEP>0) print *,'InwVol=',InwVol
        iw =NAMES(Nlevel)
 }
* - - - - - - - - - - - - - energy correction - - - - - - - - - -
 If LKDETM>0 & Id0>0
 {  if (sleng==0)  Gold=GeKin
    If Istop>0 & 2<=Ipart & Ipart<=3 & NGKINE<2 & LVSIMU(id0)>0
    {  Mec=0;  Do i=1,Nmec { If (Lmec(i)==30 | Lmec(i)==11) Mec=Lmec(i) }
       If (Ipart==3 & NGKINE==0 & Mec==30) dEstep=Gold
       If (Ipart==2 & NGKINE<=1 & Mec==11)
       {   dEstep=Gold+2*emass;  If (NGKINE==1) dEstep-=GKIN(4,1);    }
    }  Gold=Gekin
 }
* - - - - - - - - - - - - - - - - user - - - - - - - - - - - - - - -
 Iret=Id;
 If LKDETM>0 & Id>0          " permanent user tracing routine needed "
 { Iad=0; If (LdetE(id)>12) Iad=LWSTEP(Id); If (Iad!=0) Call JUMPT0(Iad); }
* - - - - - - - - - - - - - - - sensitive - - - - - - - - - - - - -
 AdEstep+=DeStep;  Astep+=Step;
* print *,'DeStep :', DeStep, ' 	Step : ', Step
 If (Charge=0 & ipart != 170 & dEstep=0)  Go To :done:
 If (isvol<=0)             Go To :done:
 Iret=0;
* - - - - - - - - - - - - - first point in hit - - - - - - - - - - -
 If  InwVOL==1 | Charge==0 & ipart != 170
 { " If sensitive detector, find it's description banks a la GFINDS "
   Do Nlev=Nlevel,1,-1
   { Jat=JATTF(LQ(JVOLUM-LVOLUM(Nlev))); If (Q(Jat+8)>0) goto :sens:; };
   { IHset,IHdet,Iset,Idet,IDtype,NVname,Jdu }=0;        goto :done:;
   :sens:                               " now fill GCSETS "
   Iset=Q(Jat+7);    Js=LQ(Jset-Iset);  IHset=IQ(Jset+Iset);
   Idet=Q(Jat+8);    Jd=LQ(Js - Idet);  IHdet=IQ(Js  +Idet);
   IdType=Q(Jat+9);  Serial=Q(Jat+10);  NVname=IQ(Jd+2);
   Jdu=LQ(Jd-3);     Iret=Jdu;
   If jdu>0
   { i1=Q(Jdu+3);  i2=Q(Jdu+5);  {jv,iv}=0;
     do i=i1,i2-1,NwuVol         " - - - - - - - volumes - - - - - - - - "
     {  jv+=1; Nb=Q(jdu+i+3); Check Nb>0; iv+=1; NUMBV(iv)=NUMBER(jv)-1;
        If (NUMBV(iv)<0) <w> IHset,IHdet,iv,NUMBER(jv)
        (' AgGSTEP error in ',2(1x,a4),' at level',i5,' NUMBER=',i6)
     }
     Isimu=1;  If (IdType>0 & LKDETM>0) Isimu=LVSIMU(IdType)
     Iopt=Q(Jdu+7);               {Astep,AdEstep}=0;
     Call UCOPY(vect,vect0,7);     Vloc0(7)=Vect(7)
     If (Jbit(Iopt,2)>0) Call GMTOD(vect,vloc0,1)
     If (Jbit(Iopt,3)>0) Call GMTOD(vect(4),vloc0(4),2)
   }
   if (charge==0 & ipart != 170) AdEstep=dEstep;
 }
* - - - - - - - - - - - - - -
 If (STEP>0|dEstep>0) & Jdu>0 & Isimu>0
 {
    "  Single hit option - only entry and exit are registered by user  "
    If Istop=0 & InwVol<2 & Jbit(Iopt,1)>0 & aStep<.95*SteMax & NMec<=4
    { Mec=0; do I=1,NMec { if (LMEC(i)!=24) Mec=max(Mec,LMEC(I)) };
      If(Mec<=4) go to :done:;
    }
    If (Isimu>1 & Istak>0)                   Call AgSKING
*
    If Jbit(Iopt,2)>0                     " calculate the middle position "
    { Call GMTOD(vect,vloc,1);       do i=1,3 { xloc(i)=(vloc(i)+vloc0(i))/2.}}
    If Jbit(Iopt,3)>0                     " calculate the middle cosines  "
    { Call GMTOD(vect(4),vloc(4),2); do i=4,6 { xloc(i)=(vloc(i)+vloc0(i))/2.}}
    Vloc(7)=Vect(7);                            xloc(7)=(vloc(7)+vloc0(7))/2.
*
    Itr=ITRA;  If (Jbit(Iopt,4)>0) Itr=1;  IhaveMore=0;
    Loop
    {"  reaccess Jdu, it might move since we entered the volume "
     Js=LQ(Jset-Iset);  Jd=LQ(Js-Idet);  JDU=LQ(Jd-3);  Iret=Jdu;
     i1=Q(Jdu+1);  i2=Q(Jdu+3);  jv=iv;  ih=0;  jh=0;  JDH=Jd+10+2*iv;
     K=0;
     do i=i1,i2-1,NwuHit        " - - - - - - - - hits  - - - - - - - - "
     {  j=jdu+i;  Fmx=Q(j+5); Org=Q(j+6); Fct=Q(j+7); Iad=IQ(j+9); ic=Q(j+10);
        hit=serial;
        If   Iad==0   { hit=AgGHIT(ic)           }
        else If ic>0  { Call JumpT2(Iad,j,hit)   }
        else          { Call CSJCAL(Iad,2, j,hit,0,0,0, 0,0,0,0,0) }

        " special case for phi(0,2pi) and rapidity(0,max) -> Org=-Fmin "
        If "phi"  ic==6  { If (Org<=0 & Fmx>6.28 & hit<0) hit+=TwoPi;  }
        If "eta"  ic==8  { If (Org<=0 &            hit<0) hit=-hit;    }
        K+=1; Hits(k)=hit;
     }
     K=0;  Jds=Jdu;  h1=hits(1);  Mode=0
     do i=i1,i2-1,NwuHit        " - - - - - now make binning  - - - - - "
     {  j=jds+i;  Fmx=Q(j+5); Org=Q(j+6); Fct=Q(j+7); Nb=Q(j+8); Nbr=Q(j+3)
        " NB: Nb is always positive, only Nbr keeps track of REQUESTED Nb "

        K+=1;      hit=max(-Org,HITS(k))
        If jv<NVname        "  pseudo-volumes - may change SJDH content   "
        { jv+=1; NumBV(jv)=bin(min(hit,Fmx-.1/fct));
                 JDH+=2;IQ(JDH)=mod(Nb,32);              }
        else                " hit part - may be only partially comulative "
        { ih+=1; Hits(ih)=min(Hit,Fmx-1.1/fct);
                 if (-32<=Nbr&Nbr<=0) Mode=1; jh+=Mode;  }

        " select the appropriate hit descriptor using the first hit element "
        If K==1
        { while LQ(Jds)>0 & bin(Q(LQ(Jds)+8))<=NumBv(jv) {Jds=LQ(Jds)} }
     }
    " all non-comulative AGI hits before opt=H are stored in the volume part "
     If IEOTRI==0
     { do itry=1,2
       { Call GSCHIT(Iset,Idet,Itr,NumBV,Hits,jh,Ihit);    if (ihit>0) break
         If itry==1 { call mzgarb(2,0); call mzgarb(20,0); call mzdred(20);}
         else       { IEOTRI=1; IQUEST(1)=0;  Call GPCXYZ;
                      <w> IHset,IHdet;(' AGGSTEP cant store hits in',
                          2(1x,a4)/' **** event simulation abandoned ****');
     } }            }
    } while IhaveMore>0
    Call UCOPY(vect,vect0,7); call Ucopy(vloc,vloc0,7); {Astep,AdEstep}=0;
 }
 :done:; " If  NGKINE>0 { Call GSKinG (0); NGKINE=0; } - now in gustep "
   END


