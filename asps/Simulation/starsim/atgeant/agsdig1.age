*
* $Id: agsdig1.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
* $Name:  $
* $Log: agsdig1.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.5  2001/11/24 17:42:34  nevski
* agsdig1 bug fix (overflow becomes underflow)
*
* Revision 1.4  2001/10/28 14:56:17  nevski
* allow offset in comulative part
*
* Revision 1.3  2001/08/18 00:12:16  nevski
* pile-up bunch id update
*
* Revision 1.2  2001/03/01 19:55:38  nevski
* config file becomes atlsim specific
*
* Revision 1.1  2001/02/27 10:14:34  nevski
*  first working release
*
*
#include <atlsim/config.h>
**********************************************************************
*                                                                    *
                 FUNCTION A G S D I G 1 (LTRA,NUMBV,DIGI)
*                                                                    *
*  Description:   store GEANT digits in the new dense format         *
*  Modifications:                                                    *
*  PN, 17.08.01 - bug corrected in cumulative digits detection       *
*                 all digits remember the first track id             *
*  PN, 24.11.01 - bug corrected: max values should not exceed 2.**31 *
**********************************************************************
 Replace [;#?;]   With   [; IF #1 {" Take next word " K=1; Nk+=1; } ]
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "atlsim/agcdig.inc"
  Integer   AgSDIG1,NUMBV(*),NwuHit/10/
  Integer   Last,Kdigi,Nk,Nb,I,J,K,N,i1,i2,i3,Ltra,j1,num,bin,jds,Nwv,Nwd,mx
  REAL      DIGI(*),Org,fct,fmx,xx,xm,dig,VALMX/2.1474835e+9/
  bin(xx) = (xx+org)*fct

  AgSDIG1=-1;  Check Jdu>0;  Jds=Jdu;
  LAST=IQ(JX+IDET)     "  Check if enough space. If not increase bank size  "
  If IQ(JXD-1)<=LAST+Nw             "    one attempt should be enouph       "
  {  N=MAX(100,NW,IQ(JD+8)/2);   CALL MZPUSH(IXDIV,JXD,0,N,'I');
     If IQUEST(1)#0 { <W>; (' Lack of Memory in AgSDIG1');  Return; } }

  " ========>    Store tracks numbers, volumes numbers and digits  <========"
  " Nbit is taken from the SEJD/SJDD banks not to dublicate option analysis "
  " Org&Fct are taken from SJDU - the only place containing all variables   "
  j=JXD+LAST+1; IQ(j)=max(0,LTRA);  NK=1; K=1; i3=0;
  Nwv=IQ(JD+1); Nwd=IQ(Jd+5); N=Nw;

  DO I=1,NVU           "           Store packed volume numbers              "
  {  Nb=IQ(JD+2*I+10);     num=max(0,NUMBV(i)-1);
     IF Nb>0  { K+Nb>33 ?; CALL MVBITS(NUM,0,Nb,IQ(j+NK),K-1);   K+=Nb; }
     else     { K>1     ?; IQ(j+Nk)=NUM;                         Nk+=1; }
  }
  Do I=1,NDU           "               Store packed digits                  "
  {  i1=JDS+i*10;
     org=Q(i1+6); fmx=Q(i1+5); fct=Q(i1+7);  xm=min((org+fmx)*fct-.5,valmx)
     dig=min(max(0.,(org+DIGI(i))*fct),xm);  KDIGI=dig;  Mx=xm;
     i2=I+Nvu;  i3=i2-Nv;  i3==1 & K>1 ?;
     If i3<=0 { Nb=IQ(Jd+2*i2+10) } else { Nb=IQ(Jdx+2*i3) };
     IF Nb>0  { K+Nb>33 ?; CALL MVBITS(KDIGI,0,Nb,IQ(j+Nk),K-1); K+=Nb; }
     else     { K>1     ?; IQ(j+Nk)=KDIGI;                       K+=32; }
     "   select the appropriate hit descriptor using first hit element  "
     If I==1  { while LQ(Jds)>0 & bin(Q(LQ(Jds)+8))<=KDIGI {Jds=LQ(Jds)}}

     If I3==1    " Cumulative digits starts here ? (first J1 corrected) "
     { :D: Do j1=J-nw,JXD+1,-Nw
           {  do i1=1,Nwv { if (IQ(j1+i1)!=IQ(j+i1)) Next :D:; }
              if (0<IQ(j1) & IQ(j1)!=IQ(j)) IQ(j1)=-IQ(j1);
              N=0; Break :D:
     }     }
     if N==0 " allow for a non-zero offset in digits adding"
     {  KDIGI=IQ(j1+Nk)+nint(DIGI(i)*fct); IQ(j1+Nk)=min(max(0,KDIGI),mx) }
     K>32?
  }
  " if (N=0) <W> (DIGI(i),i=1,NDU); ( ' AGSDIG1 digi added: ',10F10.3);     "
  Last+=N;   IQ(JX+IDET)=Last;  IWS(1)=Last/Nw;
  AgSDIG1=0;
   END
