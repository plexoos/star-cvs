* $Id: agputrim.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
*
* $Name:  $
*
* $Log: agputrim.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.6  2003/08/23 16:00:39  nevski
* impouve extra kine cleaning
*
* Revision 1.4  2002/10/10 15:51:56  nevski
* bug fix in clearing KINE
*
* Revision 1.1  2002/10/03 22:58:04  nevski
* new code to cleanup KINE/VERT after pileup
*
#include "atlsim/config.h"
******************************************************************************
*                                                                            *
                   subroutine   AGPUTRIM
*                                                                            *
* Description: after pileup event mixing a lot of garbage may be produced    *
* On BACK.DIGI>0 clean up HEAD banks and filter KINE/VERTEX banks content    *
* Idig = 2 - keep all tracks from main event and BX0 + used tracks from outBX*
* Idig = 3 - keep tracks from main event + used tracks from BX0, drop outBX  *
* Idig = 4 - keep used tracks from main event, drop any pileup tracks        *
*                                                                            *
******************************************************************************
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcflag.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcnum.inc"
#include "slug/sclink.inc"

   Integer         AgVTRBUNCH,LgKINE,LgVERT,ISLFLAG
   Integer         Iprin/0/,Idigi/0/,X/2/,nnt(3),nnv(3),n(6),
                   neve,nev0,Jkin,Jver,Iset,Idet,Jbg,Kind,Last,Itl,Ivl,
                   iev,nt0,nt1,nv0,nv1,nts,nvs,nt,it,iv,Nw,N1,N2,L,
                   Jt,Jv,Jn,kk,JS,JX,JD,JXD,i,j,n0,nb,ng,nm

* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

   check JHEAD>0 & JSET>0 & JKINE>0 & JVERTX>0 & JDIGI>0
   
   Iprin = ISLFLAG('BACK','PRIN')
   Idigi = ISLFLAG('BACK','DIGI')
   Check Iprin>=0 & Idigi>0

   NEVE = 0;  if (IQ(JKINE-1)>=3) NEVE = IQ(JKINE+3)
   Nev0 = 0;  JBG = LQ(JHEAD-3)
   do iev = 1,NEVE
      if (JBG>0 & IQ(JBG+3+Iev)!=0) break;  Nev0 = iev 
   enddo
   nt1=IQ(JKINE+4);  nt0=IQ(JKINE+4+Nev0)
   nv1=IQ(JVERTX+4); nv0=IQ(JVERTX+4+Nev0)
*  tracks with user information are counted as used:
   do it = 1,NTRACK
      Jt=LgKINE(JKIN,it);  if (Jt>0) IQ(Jt)=min(1,IQ(Jt-2)*LQ(Jt-1))
   enddo
   do iv = 1,NVERTX
      Jv=LgVERT(JVER,iv);  if (Jv>0) IQ(Jv)=0
   enddo

* mark all tracks referenced by digits:
   N0=0; NB=0; NG=0; NM=0
   do Iset = 1,IQ(JSET-1)
      JS = LQ(JSET -Iset);    Check Js>0
      JX = LQ(JDIGI-iset);    Check JX>0
      do idet = 1,IQ(JS-1)
         JD   = LQ(Js-Idet);  Check JD>0
         JXD  = LQ(JX-Idet);  Check JXD>0
         LAST = IQ(JX+Idet)
         Nw   = IQ(JD+1)+IQ(JD+2*X+1)+1
         do J=JXD+1,JXD+LAST,Nw
            IT=IQ(j)
            if (IT<=0)           n0+=1
            if (IT>NTRACk)       nb+=1;
            Jt=LgKINE(JKIN,it);  check Jt>0
            IQ(Jt)=+1;   ng+=1;  nm=max(nm,it) 
         enddo
      enddo
   enddo

* mark all vertices referenced by used tracks and their parent tracks
* move backward to get all parents

   call VZERO(nnt,3)
   call VZERO(nnv,3)
   do it = NTRACk,1,-1
      Jt=LgKINE(JKIN,it);  check Jt>0 & IQ(Jt)>0 

*     trigger, BX0 or else ?   count referenced tracks
      kind=3;  if (it<=nt0) kind=2;  if (it<=nt1) kind=1
      nnt(kind)+=1

*     geant parent ?  count vertices
      iv=Q(Jt+6);  Jv=LgVERT(JVER,iv)
      Check Jv>0;  IQ(Jv)+=1
      if (IQ(Jv)==1) nnv(kind)+=1

      nt=Q(Jv+5);  Jn=LgKINE(JKIN,nt)
      check Jn>0;  IQ(Jn)+=1
          
*     test inheretance logic
      kk=3;  if (nt<=nt0) kk=2;  if (nt<=nt1) kk=1
      if (kk!=kind) print *,' cross event inheretance ',it,iv,nt
      if (nt>=it)   print *,' decreasing inheretance  ',it,iv,nt
         
   enddo

   prin2;(/' ***PUSTAT***    Trig     BX0     All')
   prin2 1,nev0,neve;    (' N of event =', 3i8)
   prin2 nt1,nt0,NTRACK; (' all tracks =', 3i8)
   prin2 nnt;            (' refd track =', 3i8)
   prin2 nv1,nv0,Nvertx; (' all vertex =', 3i8)
   prin2 nnv;            (' redf vertx =', 3i8)

* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
*
*  cleanup kine/vert structure -  N1 <= N2 
*
   nts=0; itl=1
   n = { Ntrack,nt0,nt1,1 }  
   n1=N(min(max(1,Idigi  ),6))
   n2=N(min(max(1,Idigi-1),6))
   do it = 1,NTRACK
      Jt = LgKINE(JKIN,it);  Check Jt>0
      if ((it>N1 & IQ(Jt)==0) | it>N2) then
        call MZDROP(IxDIV,Jt,'L')
      else
        nts+=1; IQ(Jt)=0; Itl=it
      endif
   enddo
*
   nvs=0; ivl=1
   n = { Nvertx,nv0,nv1,1 }
   n1=N(min(max(1,Idigi  ),6)) 
   n2=N(min(max(1,Idigi-1),6))
   do iv = 1,NVERTX
      Jv = LgVERT(JVER,iv);  Check Jv>0
      if ((iv>N1 & IQ(Jv)==0) | iv>N2) then
        call MZDROP(IxDIV,Jv,'L')
      else
        nvs+=1; IQ(Jv)=0; Ivl=iv
      endif
   enddo

   Jt = LgKINE(JKIN,Itl); 
   if (JKIN>0 & IQ(JKIN-1)>1) then
      IQ(JKIN+1)=Itl; L=IQ(JKIN-3)-Itl+IQ(JKIN+2)
      if (L>10)       Call MZPUSH(IxDIV,JKIN,-L,0,' ')
      if (LQ(JKIN)>0) Call MZDROP(IxDIV,LQ(JKIN), 'L')
   endif
   Jv = LgVERT(JVER,ivl)
   if (JVER>0 & IQ(JVER-1)>1)  then
      IQ(JVER+1)=Ivl; L=IQ(JVER-3)-Ivl+IQ(JVER+2)
      if (L>10)       Call MZPUSH(IxDIV,JVER,-L,0,' ')
      if (LQ(JVER)>0) Call MZDROP(IxDIV,LQ(JVER), 'L')
   endif
   if (LQ(JHEAD)>0) call MZDROP(IxDIV,LQ(JHEAD),'L')

   prin1 nts,Itl,nvs,Ivl; (' PUTRIM: remaining tracks=',2i8,' vertices=',2i8)
   prin3 n0,nb,ng,nm; (' PUTRIM: track in dig: zero,big,good,max =',4i8)
   prin3; ('PUTRIM: extra HEAD banks are dropped ')
   Call MZGARB(2,0)

   end

