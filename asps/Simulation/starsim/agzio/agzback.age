* $Id: agzback.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
* $Name:  $
* $Log: agzback.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.14  2003/11/10 16:43:50  nevski
* dblib returns error flag
*
* Revision 1.13  2003/08/30 16:52:24  nevski
* bugfix: HEAD bank lost on event skip
*
* Revision 1.12  2003/03/28 12:59:29  nevski
* another bugfix in the standard pileup procedure
*
* Revision 1.11  2003/02/19 17:31:50  nevski
* NGPART is done static
*
* Revision 1.10  2003/01/30 15:03:38  nevski
* optimize memory usage in huge bank
*
* Revision 1.9  2002/10/03 22:58:04  nevski
* new code to cleanup KINE/VERT after pileup
*
* Revision 1.8  2002/09/13 14:15:46  nevski
* better histograms for control
*
* Revision 1.7  2001/07/30 16:23:09  nevski
* huge pile-up timing randomised
*
#include "atlsim/config.h"
***************************************************************************
                SUBROUTINE A G Z B A C K
*                                                                         *
* Description: AG pileup facility - draft, to be polished later           *
* Control FLags: SIMU: 1 - Sequential read; 2 - select closest vertex, DA *
*                DIGI>=1 - AgPUTRIM starts to filter KINE/VERT in GUDIGI  *
* Modifications:                                                          *
* PN, 27.11.97 : Negative Bg multiplicity means no fluctuations           *
***************************************************************************
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcflag.inc"
#include "commons/agckine.inc"
#include "slug/sclink.inc"
     Character Copt*4,ctit*40
     Integer   ISLFLAG,AgPOINTR,Iprin,Isimu,Ihist,Nback,Ibevnt,Nskip,Ier,
               Nmerge,Nhuge,LH,Iset,Idet,Icnt,id1
     Integer   JDSA1,JDSA2,Lrec,Len,I,J,L,N,L1,iu,ib,i0,k,iz,n1,n2,nc,in,nmax,
               Idevt0/-1/,Id/-1/,ns/0/,IbBefMax/-1/,IbAftMax/-1/,Jb
     Real      RNDM,Tbunch,Zvert,d,di,z0,d0,w,Bmax/0/,T
     Logical   HEXIST
*    batch mode introduces strong error handling
     Integer         Ibatch
     Common /ACXUSER/Ibatch
*
     Iprin = ISLFLAG('BACK','PRIN')
     Isimu = ISLFLAG('BACK','SIMU')
     Ihist = ISLFLAG('BACK','HIST')
     If (Ihist>=100 & Id!=Ihist)
     { Id  =Ihist; N=IbBefor+Ibafter+1
       call Hbook1(Id,  'pile-up vertex displacement', 100,0,0,0)
       call Hbook1(Id+1,'pile-up events in read gate', 100,0,0,0)
       call Hbook1(Id+2,'total of all pile-up events', 100,0,0,0)
       Call Hbook1(id+3,'number of events vs bunch',N,-IbBefor-.5,IbAfter+.5,0)
     }

     iz=0
     If INDEX(StrmBack,'S')>0 & LkHIT2==0
     { *  huge bank is going to be created, reserve a place for it CONS div.
       Call MZGARB(IxDIV,0); Call MZNEED(IxDIV,100,' '); iz=IQUEST(11)/2000
       Call MZBOOK(IxCons,LkHIT2,LkHIT2,2,'dummy',0,0,Iz*1000,0,-1)
       call MZDROP(IxCons,LkHIT2,' ');  LkHIT2=0; 
     }

     d0 = -1;  Nmerge=0;  Nhuge=0;  Ier=0;
     if JHEAD<=0 { Prin0; (' AGZBACK error: No HEAD bank, QUIT !'); Return; }
     if (IQ(JHEAD-2)<3 ) Call MZPUSH(IxDIV,  JHEAD, 3,0,'I')
     if (LQ(JHEAD-3)<=0) Call MZBOOK(IxDIV,L,JHEAD,-3,'BGEV',0,0,10,2,0)
     Call AgVTRSTAT(JVERTX); Call AgVTRSTAT(JKINE); Call AgHITSTAT;

     IbCurrent=0; k=sign(1,IbBefor-IbAfter); i0=2*min(IbBefor,IbAfter)
     :bunch: Do ib=0,IbBefor+IbAfter
     { if ib<=i0 { k=-k; IbCurrent+=ib*k; } else { IbCurrent+=k; }

       Call POISSN(BgMult,NBack,Ier)
       If (BgMULT<0) NBack=nint(abs(BgMULT))
       Prin2 IbCurrent,Nback
       (' AGZBACK: pile-up in bunch',i5,' consists of ',i5,' event(s)')
       Do IBevnt=1,Nback
       { If Isimu<=1
         { Nskip=2*Rndm(-1.)*BgSkip+.5
           Prin3 IbEvnt,Nskip
           (' AGZBACK:    merging event',i5,' after skipping',i5)
           Do I=1,Nskip+1
           { Copt='BS';   If (I>Nskip) Copt='B'
             Call AgZREAD (Copt,ier); Check Ier>0  " event still was read "
             Call AGZOPEN ('B',' ',' ',Ier);
             Call AgZREAD (Copt,ier); Check Ier>0  " geometry skept Only  "
             Prin0; (' AGZBACK error: CANNOT OPEN FILE WITH BG EVENTS, QUIT !')
             If (Ibatch>0) STOP 'This is fatal in Batch Mode'
             IbackOld=0;  Return
         } }
         else
         { Iu=2; Zvert=0; ier=-1;
           do J=1,1
           { If (JVERTX>0 & LQ(JVERTX-1)>0) Zvert  = Q(LQ(JVERTX-1)+3)
             Check LkMAPP>0 & IQ(LkMAPP-2)>=Iu & LQ(LkMAPP-Iu)>0
             L   =LQ(LkMAPP-Iu); Check L>0
             Len =IQ(L-1);       Check Len>3
             Lrec=IQ(L+2);       Check Lrec>0
             d=99999999.e+10;    Idevt0=-1
             do i=1,IQ(L+3);
               L1=L+i*3; di=abs(Q(L1+1)-Zvert); Check d0<di&di<d; d=di;
               JDSA2=mod(IQ(L1+2),Lrec);  JDSA1=IQ(L1+2)/Lrec+1;
               z0=Q(L1+1); Idevt0=IQ(L1+3);
             enddo
             If Idevt0>=0
             { Prin2 Idevt0,z0; ('AGZBACK: found event ',i6,' at ',F8.4)
               Call FZINXT (20+Iu,JDSA1,JDSA2)
               Call AgZREAD('BN',ier);   d0=d;
               If (id>0) call Hfill(Id,d,Zvert,1.)
           } }
           if (ier!=0) <W> ier,z0
           (' AGZBACK error ',i3,' - event not found for z=',f9.4)
         }
*
         ier=0; if INDEX(StrmBack,'C')==0 _
         { * Positive Iz signals the first filling of the HIGE bank
           * In this case individual detector gates are used
           * only as the total number of collected bunches
           Nmerge+=1;  Tbunch=IbCurrent*BgTime*1.e-9
           Jb=-1; if (iz>0) Jb=Ib
           call AgMERGE(Iprin,IbCurrent,Nmerge,Tbunch,Jb,Ier)
           If (Ier!=0) Return
           Call AgVTRSTAT(JVERTX);  Call AgVTRSTAT(JKINE)
           LH=LQ(JHEAD-3); IF(IQ(LH-1)<Nmerge+3) Call MZPUSH(IxDIV,LH,0,10,'I')
           IQ(LH+3)        = Nmerge
           IQ(LH+3+Nmerge) = IbCurrent
         }
    }  }
    Call AgHITSTAT
    Call AgTRIM
*                                         Add HUGE pile-up
    Check INDEX(StrmBack,'S')!=0 & JHITS>0
    IbBefMax=Max(IbBefmax,IbBefor)
    IbAftMax=Max(IbAftmax,IbAfter)

    CALL MZGARB  (IxSTOR,0)
    CAll AgMERGE (Iprin,0,-Nmerge,0.,0,Ier)
    if (Ier!=0)  Return
*    if  iz > 0   { Call MZGARB(IxCons,0); Call MZDRED(IxCons); }

    Call AgHITSTAT
    Nhuge = IQ(JHITS+3) "last  huge event number"
    Check Nhuge>Nmerge
*                                     Randomise event timing for huge pile-up
    ns+=1; w=1./ns;   Nmax=Nhuge-Nmerge
    Bmax = Bmax*(1-w)+Nmax/abs(BgMult)*w
    LH=LQ(JHEAD-3);  IQ(LH+3)=Nhuge;  L1=IQ(LH-1)
    IF (L1<Nhuge+3) Call MZPUSH(IxDIV,LH,0,Nhuge+3-L1,'I')

    n2=0; nc=0; L=IQ(LkHIT2+2)
    while (n2<Nmax)
    { nc+=1; n1=n2; n2=Nmax;
      do i=1,L { in=IQ(LkHIT2+3+L+i); check in>n1; n2=min(n2,in); }
      do i=n1+1,n2 
      { t=(n1+rndm(-1)*(n2-n1))/BgMult; 
        ib=IbBefor+1+t;  IQ(LH+3+Nmerge+i)=-ib
        if (Ib>IbBefMax) IQ(LH+3+Nmerge+i)=IbAfter+ib-IbBefMax
      }
    }

    If Id>0 
    {  Call Hfill(Id+1,Nmerge+0.1,1.,1.)
       Call Hfill(Id+2,Nhuge+0.1, 1.,1.)
       do i=1,Nhuge { Call Hfill(Id+3,IQ(LH+3+i)+.0,1.,1.) }
       Iset=0; Icnt=0; While AgPOINTR (Jset,Iset,Idet)==0
       { Icnt+=1; In=IQ(LkHIT2+3+L+Icnt); Check In>0; Id1=Id+3+Icnt; 
         if .not.HEXIST(Id1)
         { write (ctit,'(10Hpile-up in,2(1x,a4))') IQ(JSET+Iset),
                                                   IQ(LQ(JSET-Iset)+Idet)
           Call Hbook1(id1,ctit,IbBefmax+Ibaftmax+1,-IbBefMax-.5,IbAftmax+.5,0)
         }  
         do i=1,Nmerge+In { Call Hfill(Id1,IQ(LH+3+i)+.0,1.,1.) }
    }  }
    prin1 Nmerge,Nhuge,Bmax; (' AGZBACK: Nmerge,Nhuge = ',2i6,' Bmax=',f8.2)
    Call AgTRIM
*
    END










