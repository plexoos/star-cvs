* $Id: agzopen.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
*
* $Name:  $
*
* $Log: agzopen.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.13  2003/08/22 10:51:57  nevski
* disable looping on P stream
*
* Revision 1.10  2003/06/13 14:51:57  nevski
* multi-file chain implemented on P stream
*
* Revision 1.9  2002/10/10 15:50:45  nevski
* allow option change in a list
*
* Revision 1.8  2002/10/05 19:30:50  nevski
* allow I/O file chaining in lists
*
* Revision 1.6  2001/11/27 02:09:29  nevski
* bugfix: in a file loop on stream B geometry is read only once
*
#include "atlsim/config.h"
******************************************************************************
*                                                                            *
     subroutine    A G Z O P E N (stream,name,Copt,ier)
*                                                                            *
* Description: (re)open a file with events in GENZ format-via Fatmen or GENZ *
*   After a succesful open, K keeps track of what should be closed next call *
*   i.e. K=1 - Fatmen I/O,  K=2 - Fortran I/O,  K=3 - C I/O                  *
* Modifications:                                                             *
* PN 20.04.98  - automatic record length correction                          *
*              - stream is saved in mem stack                                *
* PN 27.11.01  - option G on B stream acts only once                         *
******************************************************************************
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcflag.inc"
#include "geant321/gckine.inc"
#include "commons/agckine.inc"
#include "atlsim/rzversion.inc"
#include "slug/sclink.inc"
Character  Stream*(*),Name*(*),Copt*(*),IOFILE*8,FName*255/' '/,
           LINE*256,CREQ*256,COPTN*20,CSTREAM*8,FZOP*4,C*1,CEND*4/' #* '/
Integer    LOCF,INDEX,KEYS(10),LENOCC,Nfound,Jcont,Unit,LRECA/0/,N,N1,L,I,J,
           Ier,Irc,Jrc,K,iend,mem,iu,IREQ,ko,LREC,NUH,HEAD(400),ic0,ic9,ics,ic
Common     / AgZbuffer /  K,JRC,JCONT,CSTREAM,COPTN,CREQ,IREQ,iend,mem(100,5)
Real       Fzmx / 536  /  " 2-GB max file length in 4-byte MegaWords "
Logical    First/.true./, Fexist/.false./
*
*  extract requested unit record
   If      INDEX(Stream,'B')>0 { iu=2; IBack = -1; IBackOld = 0; }
   else If INDEX(Stream,'O')>0 { iu=3; Ioutp = -1; IOutpOld = 0; }
   else                        { iu=1; IKine = -1; IKineOld = 0; }
   if (LocF(iend)-LocF(K)>=100) Stop ' AGZOPEN: insufficient  buffrer length '
   Call UCOPY(mem(1,iu),K,LocF(iend)-LocF(K));
   Unit=20+iu;  write (IOFILE,'(6hIOFILE,i2)') Unit;

*  close previously opened unit
   If  K==1
   { Call FMCLOS(FName,IOFILE,0,'DE',Irc);  IF (Jrc==0) Jcont=0;  }
   else If K>0
   { if iu<=2 {  Call FZENDI(Unit,'TX') }
     else     {  If LkMAPP>0 & IQ(LkMAPP-2)>=iu & LQ(LkMAPP-iu)>0
                 {  L=LQ(LkMAPP-iu); N=IQ(L+3); N1=IQ(L-1)-3*(N+1)
                    If (N1>0) Call MZPUSH (IxCons,L,0,-N1,'I')
                    Call FZODAT(Unit,IxCons,LQ(LkMAPP-Iu))
                    Call MZDROP(IxCons,LQ(LkMAPP-Iu), 'L')
                 }  Call FZENDO(Unit,'TX')
   }          }
*
   If Name!=' '  { CREQ=Name; COPTN=COPT; CSTREAM=Stream; IREQ=0;  }
   If COPT!=' '  { COPTN=COPT; }
   Fname=CREQ

   * Multy-file request starts with IREQ=0, ends when IREQ <0.
   * Positive IREQ means request is already open, continue it.
   If Index(CSTREAM,'T')+Index(CREQ,'.list')>0
   { while IREQ>=0
     {* This is a filelist request, multy-pass on unit 2, single pass otherwise
      * Empty lines and lines starting with * or # in any position are ignored
       If IREQ==0 { CLOSE(Unit); OPEN(Unit,FILE=CREQ,ERR=:e2:,STATUS='OLD'); }
       j=0; FNAME=' '; LINE=' '; READ (Unit,'(a)',END=:e1:) LINE; 
       Do i = 1,LENOCC(LINE)
       {  C=LINE(i:i); If (C==' ' & j=0) Next
          If (INDEX(CEND,C) > 0)  Break; j+=1; FNAME(j:j)=C
       }  If (J==0) Next; IREQ=1; Break;
       :e1: CLOSE(Unit); If (IREQ>0 & Iu==2) { IREQ=0; } else { IREQ=-1; }
     } :e2: if (Iu==1 & IREQ==0) IREQ=-1 
   }
   If Index(CSTREAM,'W')>0
   { * This is a wildcard request
     ic0=ICHAR('0');  ic9=ICHAR('9');  ics=ICHAR('/');  
     ier=-1; fexist=.false.;
     While (IREQ>=0 & Ier!=0)
     { IF IREQ>0
       { do i=LENOCC(Fname),1,-1
         { ic=ICHAR(Fname(i:i));           if (ic==ics) Break
           check ic0<=ic&ic<=ic9; ic=ic+1; if (ic>ic9)  ic=ic0;
           Fname(i:i)=CHAR(ic);            if (ic>ic0)  Goto :ok:
         } if iu==1  { IREQ=-1; Break; }
       }
       :ok: IREQ=1; CREQ=Fname; CALL CFOPEN(IQUEST,0,0,'r ',0,FNAME,ier); 
                    if (ier==0) Call CFCLOS(IQUEST,0)
     } if (Iu==1 & IREQ==0) IREQ=-1
   }
   If (Name==' ' & iu!=2 & IREQ==0) IREQ=-1;  " only stream B may loop "

*  on input automatic rec.length has precedence:
   LREC=8100;        If (Index(CStream,'Z')>0) LREC=0
                     If (iu<=2 & Lreca>0)      Lrec=Lreca
   if (FzMaxL != 0)  FzMx = FzMaxL

   Nfound=0;  Ier=-1;  Ko=K;  K=0;
   If Index(CStream,'F')>0
   {  Print *,'* AGZOPEN trying to get tape from FATMEN catalog *'
      CALL FMLOGL(-2); Call FMLFIL(%L(CREQ),FName,KEYS,NFound,1,JCont,JRC)
      If NFound>0 & Jrc<=0                    "   fatmen request manager    "
      {  K=1;  IQUEST(10)=3;                  "inhibit tape label processing"
         Call FMFILE(Unit,FName,'FN',Irc);      ier=0;  If (Irc>1) ier=irc
   }  }
   else If iu<=2 & IREQ>=0                    "   direct  file  request     "
   { " first try the variable record length format, then the fix length one "
      :R: Print *,' AGZOPEN opening file ',%L(FNAME);
      do I=0,9*Index(CStream,'M')
      {  * M - multiply try for mass storage access
         If Index(CStream,'L')>0
         {  Fzop='XDI';  K=2;  OPEN (Unit,FILE=FNAME,Iostat=Ier,
                               STATUS='OLD',FORM='UNFORMATTED',RECL=8100) }
         else
         {  Fzop='XDIL'; K=3;  CALL CFOPEN(IQUEST,0,0,'r ',0,FNAME,ier)    }
         if (ier==0) Break;    call sleepf(10);
      }
      IF Ier==0
      { Call FZFILE(Unit,LREC,Fzop); CALL FZLOGL(Unit,-2)
        * automatic record length detection
        NUH=400;  Call FZIN  (Unit,IxDiv,L,2,'S',NUH,HEAD)
        If Iquest(1)==-4 & mod(Iquest(12),100)==2
        {  LRECA=IQUEST(15); print *,' AGZOPEN: LREC corrected to',LRECA
           LREC =LRECA;      Call FZENDI(Unit,'TXQ');   GoTo :R:
        }
        Call FZENDI(Unit,'IQ')
        If LkMAPP>0 & IQ(LkMAPP-2)>=iu
        {  If (LQ(LkMAPP-iu)>0)   Call MZDROP(IxCons,LQ(LkMAPP-Iu),'L')
           CALL FZLOGL(Unit,-3);  Call FZIDAT(Unit, IxCons, LkMAPP,-iu)
           If (IQUEST(1)!=0 & Idebug>0) print *,' DaT not found ',IQUEST(1)
        }
   }  }
   else If iu==3 & IREQ>=0
   {  CALL CFOPEN(IQUEST,0,LREC,'w ',0,FNAME,ier);          K=3;
*                             eXchange,Direct,Output, cLibrary:
      If Ier==0 { Call FZFILE(Unit,LREC,'XDOL');  Ier=Iquest(1); }
      If Ier==0 { Call FZODAT(Unit,0,0) " direct access record " }
      If Ier==0 { Call FZLIMI(Unit,Fzmx)" set maximum file len " }
   }
   IF Ier!=0
   { If(IREQ>=0) print*,'AGZOPEN error K,ier=',K,Ier,' file=',%L(FNAME); K=0 }
   else
   { If iu==1 { IKine=-1; IKineOld=-1; CoptKine=Coptn; StrmKine=CStream; }
     If iu==2 { IBack=-1; IBackOld=-1; CoptBack=Coptn; StrmBack=CStream;
                I=INDEX(Coptn,'G'); if (I>0) Coptn(i:i)='g';             }
     If iu==3 { Ioutp=-1; IOutpOld=-1; CoptOutp=Coptn; StrmOutp=CStream; }
     If (LkMAPP>0 & IQ(LkMAPP-1)>=Iu)  IQ(LkMAPP+iu)=Lrec;
     CALL FZLOGL(Unit,-2);
   }
   Kevent(iu)=0;  Call UCOPY(K,mem(1,iu),LocF(iend)-LocF(K))
*
End
