* $Id: agzread.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
* $Name:  $
* $Log: agzread.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.15  2003/08/30 16:52:24  nevski
* bugfix: HEAD bank lost on event skip
*
* Revision 1.14  2003/05/07 17:04:01  nevski
* make draw bank persistent
*
* Revision 1.13  2002/10/01 23:30:32  nevski
* more pile-up tools
*
* Revision 1.12  2002/06/12 00:35:14  nevski
* AgUsRead may leave event in HEPEVT, AGUKINE can be a filter
*
* Revision 1.11  2002/01/25 00:31:34  nevski
* E-input: empty GENZ record skipt, HEAD not replaced
*
* Revision 1.10  2001/12/18 01:29:33  nevski
* prevent data accumulation on skips
*
* Revision 1.8  2001/06/21 17:28:36  nevski
* verify zebra after input in debug mode
*
* Revision 1.1  2001/02/27 10:14:14  nevski
*  first working release
*
#include "atlsim/config.h"
******************************************************************************
*                                                                            *
                subroutine    A G Z R E A D (Stream,ier)
*                                                                            *
* Modifications and comments:                                                *
* PN, 24.11.97 - both IDEVT and IDRUN are taken only from the primary stream *
* PN, 20.08.98 - new error handling logic
* - On entry, SOR/EOR and EOF (ier<5) are skipped to read a multi-file input *
* - To read the last event, EOR (ier=2) is not returned as an error on exit  *
* - i/o errors are considered as zebra EOF (ier=3), event is tagged IEOTRI=1 *
* PN, 26.10.98 - bug fix: the whole KINE/VERT chain expanded to 2 words      *
* PN, 03.03.99 - new input mode C: check that const structures are the same  *
* PN, smtim.00 - all appended event data have non-zero status word for p-up  *
* PN, 24.01.01 - on a E option the existing HEAD bank is preserved           *
*              - GENZ bug corrected - empty record before RUNT bank is skipt *
* PN, 30.08.03 - bugfix: after skip the first event was loosing HEAD bank    *
*                                                                            *
******************************************************************************
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcnum.inc"
#include "geant321/gcdraw.inc"
#include "geant321/gcflag.inc"
#include "commons/agckine.inc"
#include "slug/sclink.inc"
   Integer      ISLFLAG,i,ier,iprin,jvol,Ldata,Lk,Lk2,Ng,NT,NS,IdZ/0/,IdG/0/
   Integer      NHSETS,NDSETS,NSECT,NDETM,NSET,JOCRUN,JOCEVT,IGEN,NTRA,J,M,N
   Integer      LOCF,INDEX,iu,jb,none,Idev,Idn,Ierold(3)/3*0/,Ndif
   Integer      Lun/21/,Lhead/0/,ifl/0/,nw/0/,Lsup,Iev/0/,Ihead(400)/400*0/
   Character    Stream*(*),HEAD*4,CHEAD(2)*4/2*' '/,Chopt*8/'*'/,IDH*4,Cin*4
   Logical      Trig,Done/.true./
*  tentative guess for standard GFOUT data
   Character*4  Gsets(23)/'PART','MATE','TMED','VOLU','ROTM','SETS','DRAW',
                          'RUNG',  'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a' ,
                          'HEAD','VERT','KINE','JXYZ','HITS','DIGI','SCAN'/
   Character*4  Esets(3) /'CODE','RUN ','EVEN'/
   Character    CREQ*256,COPTN*20,CSTREAM*8
   Integer      K,Jrc,Jcont,IREQ,iend,mem
   Common       /AgZbuffer/ K,JRC,JCONT,CSTREAM,COPTN,CREQ,IREQ,iend,mem(100,5)
*
* example of a bad in-line coding:
  Replace [INP(#,#,#,#,#)] with [
    CHECK (Index(Chopt,'#1')+Index(Chopt,'*')>0 | '#1'=='*');  Nt=Nt+1;
    {IF} '#1'='G' { Ng=Ng+1; IF (HEAD!='SETS')
                    {CHECK Jvol==0; IF (#3>0) Call MZDROP(#2,#3,'L');} }
    IF #3==0 { Call FZIN(LUN,#2,#3,1,'A',Nhead,Ihead); jb=#3; IDN=iu;  }
    ELSE     { jb=#3; WHILE LQ(jb)>0 { jb=LQ(jb) }; IDN=IQ(jb-5)+1;
               Call FZIN(LUN,#2,jb,0,'A',Nhead,Ihead); jb=LQ(jb);      }
    Ier=Iquest(1);  Nw=Iquest(14);  IDH='NONE';
    if jb>0
    {  Call UHTOC(IQ(jb-4),4,IDH,4);  IQ(jb-5)=max(iu,IDN);  #4=IQ(jb+(#5));
       Ns+=1; IF (#5==-2&Ier==0) { DO I=1,IQ(jb-2) { IF (LQ(jb-I)>0) #4=I; }}
       {IF} '#1'='G' {} {ELSE}
       {N=0; FOR (j=#3;j>0;j=LQ(j)) {if(j==jb) N+=1; if(IQ(j)<65536) IQ(j)=N;}}
    }
    PRIN2 '#3','#4',#4,Nw,ier;(' AGZREAD: read',2(2x,a6),' =',i6,' Leng =',2i8)
    IF IDH!=HEAD  { PRIN1 IDH,HEAD; (' AGZREAD got ',a,' instead of ',a); }
    IF jb<=0 | ier!=0 { IEOTRI=1; ier=3; HEAD='NONE' }
       IF (Cin=='SE' & jb>0) Call MZDROP(#2,jb,'L');
  ]
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*
    Check ( index(stream,'P')>0 & IkineOld<=-1 _
          | index(stream,'B')>0 & IBackOld<=-1 )
10  Iprin=max(Idebug,ISLFLAG('INPU','PRIN'))
                             iu=1;  Chopt=CoptKine;
    If index(stream,'B')>0 { iu=2;  Chopt=CoptBack; }
    Call Ucopy(mem(1,iu),K,LocF(Iend)-LocF(k))
    M=5;  If (INDEX(CSTREAM,'1')>0) M=2
    Lun=20+iu;  HEAD=CHEAD(iu);  jvol=JVOLUM;
    Ng=0; Nt=0; Ns=0; Ier=0; Ndif=0; Done=.false.; Cin=' ';
    If (Kevent(iu)==0)     { Done=.true.; Ierold(iu)=0 }
    If index(stream,'S')>0 { "special: skip this event" Chopt=' '; }
    If index(stream,'N')>0 { "special: new position " done=.true.; }
*
  Loop
  {  If done | HEAD=='NONE'
     {  Cin='S';  if (Chopt==' ') Cin='SE';  IerOld(iu)=ier;  Ndif=0;
        If (iu==1 & 0<kevent(1) & kevent(1)<=Ptype)  Cin='SE'
        Lhead=400;      Call FZIN(LUN,IXDIV,LSUP,2,Cin,LHEAD,IHEAD)
*   <w> Lhead,iquest(1),(Ihead(i),i=1,3) ('  Lhead,iquest,Ihead = ',4i6,2x,a4)
        Ier=Iquest(1);  ifl=Iquest(11);  Nw=Iquest(14);  HEAD='NONE'
        If Ier<0  { prin0 ifl; (' error',i6,', see ZEBRA manual page 299');
                    If (IQUEST(11)==-4 & mod(IQUEST(12),100)==2) _
                       <w> IQUEST(14),IQUEST(15)
                       (10x,'Expected block size',i6,', found on input',i6);
                           Ier=3; IEOTRI=1;    Kevent(iu)+=1;  break;}
        If Ier==1 { prin1 ifl; (' zebra sor, run ',i6); Iev=0; IDz=Ifl; Next;}
        If Ier> 1 { prin1 ier,ifl,nt; (' zebra err, run, nt ',3i6);
                    " skip zebra inter-file records "
                    If (nt==0 & Ier<=M) Next;   Kevent(iu)+=1;  break;}
       * decode header
        If      Lhead=1 & Ifl=0 { i=IHEAD(1);  If(1<=i&i<=22) HEAD=Gsets(i); }
        else If Lhead=2 & Ifl>0 { HEAD='RUNG'; If(Kevent(iu)>0) HEAD='HEAD'; }
        else If Lhead=1 & Ifl>0 { i=IHEAD(1);  IF(1<=i&i<=3)  HEAD=Esets(i); }
        else If LHead==3 & Ihead(1)+IHEAD(2)+Ihead(3)==0      { HEAD='RAWD'; }
        else If Lhead>2 {"atlas genz format" Call UHTOC(Ihead(3),4,HEAD,4);  }

       * analyse end of event - Hardware flag ifl>0
        Trig = Ifl.gt.0
       * Software : new Event information after Run information
        If (HEAD=='HEAD' & Ng>0)                                Trig=.true.
       * exceptions: Star FZ has CODE and RUN written separately
        If (HEAD=='CODE' | HEAD=='RUN')                         Trig=.false.
       * skip new RUN header inside file (multi-file input)
        If (HEAD=='HEAD' & Ns==0 & Kevent(iu)>0)                Trig=.false.
       * always append RUNG
        If (HEAD=='RUNG' & Nt==0)                               Trig=.false.
       * old GENZ bug - an empty record before RUNT bank, 24-1-01
        If (HEAD=='RUNT' & Nt==0)                               Trig=.false.
        If Trig
        { prin2 kevent(iu),nt,ns,Lun,IHEAD(1),IHEAD(2),HEAD
          (' AGZREAD: event',i7,2i3,' on unit',i4,' ended by',2i6,A6)
          Break;
        }
     }  Done=.true.
*
     If (iu==1 & Head=='HEAD' & JHEAD>0 & Chopt!='E') _
             { Call MZDROP(IxDIV,JHEAD,' '); JHEAD=0; }
     If      Head=='RUNG' { inp(G,IXCONS,JRUNG,  IdG,    +1)
             If (iu==1)          IDRUN=max(IdG,IdZ,IHEAD(1)) }
     else If Head=='PART' { inp(G,IXCONS,JPART,  NPART,  -2) }
     else If Head=='MATE' { inp(G,IXCONS,JMATE,  NMATE,  -2) }
     else If Head=='TMED' { inp(G,IXCONS,JTMED,  NTMED,  -2) }
     else If Head=='ROTM' { inp(G,IXCONS,JROTM,  NROTM,  -2) }
     else If Head=='VOLU' { inp(G,IXCONS,JVOLUM, NVOLUM, -2) }
     else If Head=='SETS' { inp(G,IXCONS,JSET,   NSET,   -1);
                            call AGSDIFF(JSET,jb,Ndif);      }
     else If Head=='DETM' { inp(G,IXCONS,LKDETM, NDETM,  -1) }
     else If Head=='DRAW' { inp(G,IXCONS,JDRAW,  NKVIEW, -2) }
     else If Head=='SCAN' { inp(G,IXCONS,LKDETM, NDETM,  -1) }
     else If Head=='CODE' { inp(E,IxCONS,LKRUNT, IGEN,   +1) }
     else If Head=='RUN ' { inp(E,IxCONS,LKRUNT, none,   +1) }
     else If Head=='RUNT' { inp(E,IxDIV, LKRUNT, JOCRUN, +5) }
     else If Head=='EVNT' { inp(E,IxDIV, LKEVNT, JOCEVT, +6) }
     else If Head=='EVEN' { inp(E,IxDIV, LKEVNT, NTRA,   +1) }
     else If Head=='HEAD' { inp(*,IxDIV, JHEAD,  IDEV ,  +2)
          If iu==1 & Jb>0 & IQ(Jb+1)>1  {IDRUN=IQ(Jb+1); IDEVT=IDEV}}
     else If Head=='VERT' { inp(K,IXDIV, JVERTX, NVERTX, +1) }
     else If Head=='KINE' { inp(K,IXDIV, JKINE,  NTRACK, +1) }
     else If Head=='HITS' { inp(H,IXDIV, JHITS,  NHSETS, -2) }
     else If Head=='DIGI' { inp(D,IXDIV, JDIGI,  NDSETS, -2) }
     else If Head=='RECB' { inp(R,IXDIV, LKARP1, NSECT,  -2) }
     else If Head=='RAWD' { inp(R,IXDIV, LKARAW, Ldata,  -1)
              Lk=LkaRaw; N=0; while Lk>0
              {  prin2 (IQ(LK-i),i=1,5);(' ND,NS,NL=',3i6,' IDH,IDN =',a4,i8)
                 N+=1; Call UCTOH('RAWD',IQ(Lk-4),4,4); IQ(Lk-5)=N; Lk=LQ(Lk)
              }
          }
     else {   prin2 HEAD,LHEAD,(IHEAD(i),i=1,min(LHEAD,10))
              (' READRZ: unknown structure ',A,' skipped '/,
                 8x,'Lhead=',i6,' header=',10z9/(20x,10z9))
          }
     IF Ier#0 { <W> Ier,head; (' AgZREAD error ',i5,' entering ',A); break; }
  }
  If (IDebug>=2) Call ZVERIF(0,0,' tape structures have been read ')

  prin3; (' AGZREAD: make sure top level KINE+VERT banks have extended format')
  for (LK2=JKINE;  LK2>0; LK2=LQ(LK2))
  { If (IQ(LK2-1)==1) Call MZPUSH(IxDIV,LK2, 0,1,'I'); NTRACK=IQ(LK2+1)}
  for (LK2=JVERTX; LK2>0; LK2=LQ(LK2))
  { If (IQ(LK2-1)==1) Call MZPUSH(IxDIV,LK2, 0,1,'I'); NVERTX=IQ(LK2+1)}
*
  if  Ndif>0 { " set error status after bad SETS " IEOTRI=1; ier=3; }

  CHEAD(iu)=HEAD; Kevent(iu)+=1;
  If Stream=='P' & ier==0
  {  if ( jvol==0 & Jvolum>0 )   Call AgReINIT
     If (LKARAW>0 & LKARP1==0)   Call AgBEAMdat
     if (1<kevent(1) & kevent(1)<=Ptype+1 & Ier==0)  Goto 10;
  }
  prin3 ns,ier; (' * leaving agzread with ns,ier = ',2i6)
  if (ns>0 & Ier<3) {" zebra eor pending " Ier=0; IQUEST(1)=0; }
  End

