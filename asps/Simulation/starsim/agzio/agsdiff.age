* $Id: agsdiff.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
* $Name:  $
* $Log: agsdiff.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.4  2003/09/10 15:10:43  nevski
* exclude 32-0 bit error
*
*
* Revision 1.1  2001/02/27 10:14:12  nevski
*  first working release
*
*************************************************************************
*                                                                       *
               subroutine  A G S D I F F (j1,j2,Ndif)
*                                                                       *
* Description: compare 2 structures pointed by j1,j2 and drop the       *
*              second one if it is the same. Two exceptions known:      *
*              a) in SJDU bank hit function addresses may differ        *
*              b) in SEJD bank last hit element may be (non)comulative  *
*              Extra banks are tolerated - they are taken into account  *
*              in the merge procedure.                                  *
*************************************************************************
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcflag.inc"
#include "slug/sclink.inc"
   integer     NwuHit/10/,NwuVol/3/,Ndif,J1,J2,iddet,idvol
   integer     j,i,k,L,M,lk(20),mk(20),IL(20),id1,id2
   character*4 nam,cset,cdet,dset,ddet,cdet1,cdet2
   character   cst*8
   Real        eps
*
   Ndif=0;  Check J1>0 & J2>0 & J1!=J2
   L=j1; M=j2; Ndif=0; iddet=0; idvol=0; J=1
   call VZERO(IL,20)
   while J>0
   { if L>0
     { Lk(j)=L; Mk(j)=M; IL(j)=0;
       Cset=' ';  if (j>=1&IL(1)>0) Call UHTOC(IQ(Lk(1)+IL(1)),4,Cset,4)
       Cdet=' ';  if (j>=2&IL(2)>0) Call UHTOC(IQ(Lk(2)+IL(2)),4,Cdet,4)
       Dset=' ';  if (j>=1&IL(1)>0) Call UHTOC(IQ(Mk(1)+IL(1)),4,Dset,4)
       Ddet=' ';  if (j>=2&IL(2)>0) Call UHTOC(IQ(Mk(2)+IL(2)),4,Ddet,4)

       if M>0
       { k=-1; call UHTOC(IQ(L-4),4,nam,4); Cst='differs';
         if IQ(L-1)==IQ(M-1)
         { k=0;
           if nam=='SJDU'
           { " set print flag as in P stream "  IQ(M+10)=IQ(L+10)

             " give only one warning if detectors are numbered differntly
             if iddet+Q(M+9)!=Q(L+9)
             {  iddet=Q(L+9) -Q(M+9);
                id1=Q(L+9); Call UHTOC(IQ(LkDetm+id1),4,cDet1,4)
                id2=Q(M+9); Call UHTOC(IQ(LkDetm+id2),4,cDet2,4)
                if (iddet!=0) <W> cdet1,iddet; (' AGSDIFF Warning: ',
                   ' systems starting from ',a,
                   ' have different numbering, diff=',i6)
             }  Q(M+9)=Q(L+9)

             " hit function addresses may differ - reset them "
             do i=Q(L+1)+9,Q(L+3),NwuHit
             { if (Q(L+i)!=0) Q(L+i)=-1; if (Q(M+i)!=0) Q(M+i)=-1 }

             " volume nubering may differ  - give single warning "
             do i=Q(L+3)+1,Q(L+5),NwuVol
             { if Q(L+i)!=Q(M+i)
               { if idvol+Q(M+i)!=Q(L+i)
                 {  idvol=Q(L+i) -Q(M+i);
                    Id1=Q(L+i);  Call UHTOC(IQ(JVOLUM+id1),4,cDet1,4)
                    <W> cdet1,idvol; (' AGSDIFF Warning: ',
                    ' Geant volumes starting from ',a,
                    ' have different numbering, D=',i6)
               } } Q(M+i)=Q(L+i)
           } }
           " check the rest "
           k=0; do i=1,IQ(L-1)
           { " digi definition may differ because digitization will re-run "
             if (Cset(4:4)=='D' & Dset(4:4)=='D') break
             " exception 2: 32 bits are converted to 0 at tracking time!   "
             if (nam=='SEJD'&i>10&mod(i,2)==0&mod(IQ(L+i)-IQ(M+i),32)==0) Next
             eps = (IQ(L+i)-IQ(M+i)+0.) / (IQ(L+i)+IQ(M+i)+0.)
             if (nam='SJDU'                & abs(eps)<1.e-7)  Next
             if (nam='SJDH' & mod(i-1,4)>1 & abs(eps)<1.e-7)  Next
             if  nam='SJDU'  { if  Q(L+i)!= Q(M+i) { Ndif+=1; k=i } }
             else            { if IQ(L+i)!=IQ(M+i) { Ndif+=1; k=i } }
           }
         } else if Cset(4:4)!='D' | Dset(4:4)!='D' { Ndif+=1; k=-2; }

         if (k==0) Cst='same';  
         if Idebug==0 & k==-1 { " this is only a warning, reset " k=0; }
         if Idebug>1  | K!=0    " this looks like a real error, print! "
         { <w> IL(1),IL(2),Cset,Cdet,IQ(L-4),IQ(L-1),
                           Dset,Ddet,IQ(M-4),IQ(M-1),Cst
            (' Sets at ',2i3,' : ',3(a4,1x),' L=',i4,
                           ' and ',3(a4,1x),' L=',i4,1x,a)
           if (k>0) <W> k,IQ(L+k),Q(L+k),IQ(M+k),Q(M+k), Q(L+k)-Q(M+k)
              (' content at',i4,1x,2(':',i12,'/',G12.3),1x,'D=',G12.2)
       } }
*      else   { <W> j,L,IQ(L-4),IQ(L-5);(' set',i3,' : ',i12,a6,2i5,' absent')}
     }

     M=0
*    now navigate in the structure - first through links, then to next bank
     If IL(j)<IQ(LK(j)-2)  { IL(j)+=1; L=LQ(LK(j)-IL(j));
                             If (MK(j)>0&IL(j)<=IQ(MK(j)-2)) M=LQ(MK(j)-IL(j))
                             If (L >0) j+=1;
                           }
     else   " brothers "   { If (j==1) Break; L=LQ(LK(j));
                             If (MK(j)>0)     M=LQ(MK(j));
                             If (L<=0) j-=1;
                           }
   }
   If Ndif==0 { call MZDROP(IXCONS,j2,'L') }
   else       { <W>; (8x,50('*')/,
                      8x,'*  Error: inconsistant geometry on input P or B  *'/,
                      8x,'*  All merged data more probably will be wrong!  *'/,
                      8x,'*  You may continue for debugging purpose only,  *'/,
                      8x,'*  but the program will almost certainly crash!  *'/,
                      8x,50('*'))
              }
   end





