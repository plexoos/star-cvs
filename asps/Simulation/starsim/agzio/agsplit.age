*
* $Id: agsplit.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
* $Name:  $
* $Log: agsplit.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.4  2001/06/13 23:54:29  nevski
* release free in the top KINE bank
*
* Revision 1.3  2001/03/05 20:28:13  nevski
* introduce a temporary AGEOLD flag
*
* Revision 1.2  2001/03/02 21:03:12  nevski
* agmer splitted, gnz restored
*
* Revision 1.1  2001/02/27 10:14:13  nevski
*  first working release
*
*
#include "atlsim/config.h"
***************************************************************************
                subroutine A G S P L I T (N0,Ier)
*                                                                         *
* Description: If KINE bank contains too many tracks, event is splitted   *
*              into a number of smaller events with exactly N0 tracks     *
*              First guess for the algorithm, may be done better          *
***************************************************************************
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcnum.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcflag.inc"
#include "slug/sclink.inc"
   integer itr1,itr2,itr,jtr,it,iv,jv,Lk,Lv,Nt
   Integer IDN,N0,Ier,IsubEV/-1/,Iprin,NTRA,NVER,Lfree

 Ier=-1; Check  N0>0;
 Iprin=Idebug; NTRACK=0; NVERTX=0;
 IF JVERTX>0 & JKINE>0
 { IDN=IQ(JVERTX-5); If IDN>=0
   {  * first call on an event: both vertex and kine are loaded
      * -and- VERT bank has positive IDN  -  start splitting:
      If (LKGENE>0) Call MZDROP (IxSTOR,LKGENE,   'L')
      CALL MZGARB (IxDiV,0)
      Call MZCOPY (IxDIV,JVERTX, IxCONS,LKGENE, 1,' ')
      call MZCOPY (IxDIV,JKINE,  IxCONS,LKGENE, 0,'L')
      * mark copies with IDN=-1
      IQ(LKGENE-5)=-1;  IQ(LQ(LKGENE)-5)=-1
      call MZDROP(IxSTOR,JVERTX,'L')
      call MZDROP(IxSTOR,JKINE ,'L')
      IsubEv=0; Ier=0;  GOTO :e:
 } }

 If LKGENE>0
 { IsubEv += 1;
   If (JVERTX>0) call MZDROP(IxSTOR,JVERTX,'L')
   If (JKINE >0) call MZDROP(IxSTOR,JKINE ,'L')
   Call MZCOPY (IxCONS,LKGENE,     IxDIV,JVERTX, 1,' ')
   call MZCOPY (IxCONS,LQ(LKGENE), IxDIV,JKINE,  1,'L')
   * restore IDNs:
   IQ(JVERTX-5)=1;      IQ(JKINE -5)=1
   NVER=IQ(JVERTX+1);   NTRA=IQ(JKINE+1)
*
     itr1=N0*(IsubEV-1)+1;  itr2=min(N0*IsubEV,NTRA)
     if Itr1>Itr2 " all done, clear store and show end_of_event flag: "
     { Call MZDROP(IxSTOR,LKGENE,  'L'); ier=1; GOTO :e: }
*
     do iv=1,NVER
     {  Lv=LQ(JVERTX-Iv);  Check Lv>0;  Call VZERO (Q(7+Lv),IQ(Lv-1)-6) }
*
     jtr=0; do itr=1,NTRA
     {  "===>"    if itr1<=itr&itr<=itr2   "<==="
        {  * move selected track to consequtive positions
           Lk=LQ(JKINE-itr);  check Lk>0;  Jtr+=1
           call ZSHUNT(IxSTOR,Lk,JKINE,-jtr,0)
           Iv=Q(6+Lk);   Lv=LQ(JVERTX-Iv)
           Nt=Q(7+Lv)+1; Q(7+Lv)=Nt;  Q(7+Lv+Nt)=jtr
        }
        else    { Call MZDROP(IxSTOR,LQ(JKINE-itr),' ') }
     }
     * release free links corresponing to unused tracks from the top KINE bank
     Lfree=IQ(JKINE-3)-Jtr-10;
     if (Lfree>0) Call MZPUSH(IxSTOR,JKINE,-Lfree,0,'I')
*
     jv=0; do iv=1,NVER
     {  Lv=LQ(JVERTX-Iv);  Check Lv>0;  Nt=Q(7+Lv)
        If Nt>0  { jv+=1; Do itr=1,Nt { it=Q(7+Lv+itr); Q(6+LQ(JKINE-it))=jv }
                   * copy vertex with selected tracks and trim it to used
                   Call ZSHUNT(Ixstor,Lv,JVERTX,-jv,0);  Lfree=IQ(Lv-1)-Nt-10;
                   if (Lfree>0) Call MZPUSH(IxSTOR,Lv,0,-Lfree,'I')
                 }
        else     { call MZDROP(IxSTOR,LQ(JVERTX-iv),' ') }
     }
     Ntrack=jtr; IQ(JKINE+1)=Jtr; NVERTX=Jv; IQ(JVERTX+1)=Jv; Ier=0
   }
:e:; PRIN1 IsubEv,Idevt,Nvertx,Ntrack
     (3x,'** GSPLIT: subevt=',i7,' idevt=',i7,' Vertex/Track =',i11,i12)
   end



