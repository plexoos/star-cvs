*
* $Id: agzkine.age,v 1.2 2009/05/09 01:35:16 perev Exp $
* $Name:  $
* $Log: agzkine.age,v $
* Revision 1.2  2009/05/09 01:35:16  perev
* StMCFilter: immediat return after reject
*
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
*
* Revision 1.12  2002/08/24 20:16:13  nevski
* production prints improved
*
* Revision 1.11  2002/06/12 22:06:53  nevski
* additional IO facilities: text IO, heptuple, mickey-mouse generator
*
* Revision 1.10  2002/06/12 00:34:17  nevski
* cleanup
*
* Revision 1.9  2002/01/25 01:41:50  nevski
* add facility to collect all IDs
*
* Revision 1.8  2001/12/18 01:32:16  nevski
* less print on skip, default actions only on ikine=-1
*
* Revision 1.3  2001/06/13 23:52:37  nevski
* call HEP banks filling
*
* Revision 1.2  2001/02/28 17:16:09  nevski
* agckine.inc moved to commons
*
* Revision 1.1  2001/02/27 10:14:14  nevski
*  first working release
*
*
#include "atlsim/config.h"
******************************************************************************
*                                                                            *
                   Subroutine  AGZKINE
*                                                                            *
* Description: Read or Generate Kinematics for primary tracks (new version)  *
* This routine understands the KINE card in the following format (a la SLUG) *
* KINE IKINE part pmin pmax etamin etamax phimin phimax gmode zmin zmax      *
*   - if IKINE=0 and gmode=0                                                 *
*                px,py,pz and z are generated randomly according to          *
*                pmin-pmax, etamin-etamax, phimin-phimax, zmin-zmax ranges   *
*   -  . . . .   gmode=1 - same, but pt-range is assumed instead of E-range  *
*   - if IKINE=-1                                                            *
*                FZ file opened on unit 21 is used as input (GNZ format)     *
*                If not opened previously with AgZOpen, ZEBRA.P is opened    *
*   - if IKINE=-2                                                            *
*                a hbook file with a CWN (on unit 20) is used as an input    *
*                If not opened previously with AgNTopen, hcwn.hbook is used  *
******************************************************************************
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gconst.inc"
#include "geant321/gcflag.inc"
#include "geant321/gckine.inc"
#include "geant321/gcnum.inc"
#include "geant321/gcunit.inc"
#include "commons/agckine.inc"
#include "slug/sclink.inc"
     Integer  LENOCC,CsADDR,Ier,Iev,J,L
     Real     Undf/9.e9/
*
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     IF (NtrSubEV>0 & IsubEVNT<NsubEvnt) Go to :splitted:
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*
* prepare AgCKINE/VERT parameters here, because they may be common for all KINE
*
     If Pkine(1)<Undf  { PType =    Pkine(1)         }  else  { Ptype = 0    }
     If Pkine(2)<Undf  { PtMin =max(Pkine(2),0.)     }  else  { PtMin = 0    }
     If Pkine(3)<Undf  { PtMax =max(Pkine(3),Ptmin)  }  else  { PtMax = 99999}
     If Pkine(4)<Undf  { EtaMin=max(Pkine(4),-10.)   }  else  { EtaMin=-10   }
     If Pkine(5)<Undf  { EtaMax=min(Pkine(5),+10.)   }  else  { EtaMax=+10   }
     If Pkine(6)<Undf  { PhiMin=max(Pkine(6),-TwoPi) }  else  { PhiMin= 0    }
     If Pkine(7)<Undf  { PhiMax=min(Pkine(7), TwoPi) }  else  { PhiMax= TwoPi}
     If Pkine(8)<Undf  { Ptflag=    Pkine(8)         }  else  { Ptflag= 0    }
     If Pkine(9)<Undf  { ZMin  =max(Pkine(9),-10000.)}  else  { ZMin  =-10000}
     If Pkine(10)<Undf { ZMax  =min(Pkine(10),10000.)}  else  { ZMax  = 10000}
*   Fixed target version
     If Pkine(2)<Undf  { Pxmin =max(Pkine(2),-10000.)}  else  { Pxmin  = -1 }
     If Pkine(3)<Undf  { Pxmax =max(Pkine(3),Pxmin)  }  else  { Pxmax  =  1 }
     If Pkine(4)<Undf  { Pymin =max(Pkine(4),-10000.)}  else  { Pymin  = -1 }
     If Pkine(5)<Undf  { Pymax =max(Pkine(5),Pymin)  }  else  { Pymax  =  1 }
     If Pkine(6)<Undf  { Pzmin =max(Pkine(6),-10000.)}  else  { Pzmin  = -1 }
     If Pkine(7)<Undf  { Pzmax =max(Pkine(7),Pzmin)  }  else  { Pzmax  =  1 }
*
*get event:
* initialise data file - when called directly be user, these routines should
* reset IKineOld to prevent file name redifinition to defaults
*
      If (IKINE!=IKineOld) then
         If (IKine > 0) IKineOld = Ikine
         If (IKine==-1) Call AgZOPEN (' ', ' ', '*', ier)
         If (IKine==-2) Call AgNTOPEN('hcwn.hbook' ,  4 )
         If (IKine==-3) Call AgFOPEN ( 0,  ' ',      ier)
         If (IKine<=-4) { J=CsADDR('AGUSOPEN'); IkineOld=Ikine;
                          If (J>0) Call CSjCAL1S(J,' ') }
      endif
*
      Ier   = 0
      Call HEPEZERO
*     If (Idebug>0)     Itest=max(Itest,1)
      If  IKINE >0      { Do iev=1,IKINE { Call AgSPkine } }
      If (IKineOld==-1) call AgPread (ier)
      If (IKINEold==-2) call AgNTread(ier)
      If (IKINEold<=-3) call AgFread (ier)
      If (IKINEold<=-4)
      { J=CsADDR('AGUSREAD'); If (J>0) Call CSjCAL(J,1,Ier,0,0,0,0,0,0,0,0,0) }

      If (LkEvnt<=0 & IKINE>0)    Call HEPEFILL
      If (LkEvnt<=0 & IKINE<=-1)  Call HEPEREAD
      Ieotri=0
        J=CsADDR('AGUKINE');  If (J>0) Call CSjCAL(J,1,Ier,0,0,0,0,0,0,0,0,0)
      if (Ieotri .ne.0) { Iquest(1)=0; return;}

*
      If  ier!=0
      {   Ikineold=0; Ieotri=1; Iquest(1)=Ier; Return; }
*
      If NtoSKIP>0
      { if (IDEBUG>1) <w> Ievent,Idevt; (' AGZKINE event ',2i7,' is skipped ')
        NtoSKip-=1; Ieotri=1; Return;
      }
*
                                  Call AgUPROD
      If (IBackOld==-1)           Call AgZback
      L=1+max(Alog10(1.+NVERTX),Alog10(1.+NTRACK))
      If (Idebug>L & JVertx>0)    Call GPVERT(0)
      If (Idebug>L & Jkine >0)    Call GPKINE(0)
      NsubEvnt=-1;  IsubEvnt=0;
      Check 0<NtrSubEV & NtrSubEV<NTRACK " split events needed"
*
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:splitted:        Check NtrSubEV>0
*   repeat gtreve conditions: spitting is done in simulations only
      If (Lenocc(CrunType)>0) then
         Check  Index(CrunType,'S')>0  | Index(CrunType,'*')>0
      else If (IKine==-1) then         " standard atlas Zebra "
         Check  Index(CoptKine,'H')==0 & Index(CoptKine,'D')==0
         Check  Index(CoptKine,'R')==0 & Index(CoptKine,'*')==0
      endif
      check JHITS==0 & JDIGI==0 & JVOLUM>0  " & JKINE>0 "
      Iquest(1)=0
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*
*     count subevents from one, first is always event generator info only
      If NsubEvnt==-1  { NsubEvnt=(NTRACK-1)/NtrSubEv+2; IsubEvnt=0;
*                        Call GSVERT(VertexNow,0,0,0,0,Nv)
                       }
      IsubEvnt+=1;  Call AgSPLIT(NtrSubEv,ier)
      If (Ier!=0) <w> IsubEvnt,NsubEvnt;
      (' AgSPLIT track counting wrong in sub-event',i4,' out of',i4)
      IF (IsubEvnt > 1)         "not first - for Identity"  Idevt  -= 1
      IF (IsubEvnt!=NsubEvnt)   "not last  - for counting"  Ievent -= 1
*
*     set header bank
      If Jhead>0       { IQ(JHEAD+5)=NsubEvnt; IQ(JHEAD+6)=IsubEvnt; }
      return
END


