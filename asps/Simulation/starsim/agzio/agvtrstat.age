* $Id: agvtrstat.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
* $Name:  $
* $Log: agvtrstat.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.3  2001/12/18 01:34:11  nevski
* bug fix for no pileup events
*
* Revision 1.2  2001/07/30 16:17:05  nevski
* huge pile-up timing randomised
*
* Revision 1.1  2001/07/26 16:06:45  nevski
* *** empty log message ***
*
************************************************************************
                  SUBROUTINE AgVTRSTAT(Link)
*                                                                      *
* Description :                                                        *
*  - Saves the filling status of VERT/KINE banks in the top level bank *
*    The structure of counters is { Ntot, Noffset, Nev, NH(Nev) }      *
*  - reset status word of existing banks                               *
* Modifications:                                                       *
* 04.12.01 PN, Fred - when a track number is above 64k seach for event *
*    should still be done in the first KINE bank, not in the extention *
************************************************************************
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
    Integer Link,Lx,Ntot,Nev,N0,L0,I,L,Ivt,Iev,MMM/1000000/

    If (JVERTX==0) CALL MZBOOK(IXDIV,JVERTX,JVERTX,1,'VERT',10,10,10,2,0)
    If  (JKINE==0) CALL MZBOOK(IXDIV, JKINE, JKINE,1,'KINE',10,10,10,2,0)

    Check Link>0;
* determine number of events already piled-up
    N0=IQ(LINK-1); Nev=1; If (N0>3) Nev=IQ(LINK+3)+1;

* check that there is enouph space to save this event info
    L0=3+Nev; if (N0<L0) Call MZPUSH(IxDIV,LINK,0,L0-N0+10,'I')

* find numeber of objects and zero status words (i don't remember the reason)
    for (L=Link; L>0; L=LQ(L)) { IQ(L)=0; Ntot=IQ(L+1); }

* save next event record in the original bank
    IQ(LINK+3)=Nev;  IQ(LINK+L0)=Ntot;

    Return
*
    Entry AgVTRevnt (Link,Ivt,Iev)
* return pile-up Event number Iev, corresponding to the vertex/track number Ivt
* trigger event is Iev=0
    Iev=-MMM;   Check Link>0 & Ivt>0;
    Lx=Link; while LQ(Lx+2)>0 { Lx=LQ(Lx+2) }
    if Ivt>=MMM { Iev=Ivt-MMM; Return; }
    do I=1,min(IQ(Lx+3),IQ(Lx-1)-3)
    {  if Ivt<=IQ(Lx+3+I) { Iev=I-1; Return; } }
*
end

