*
* $Id: agmerge.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
* $Log: agmerge.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.9  2003/03/28 15:02:15  nevski
* bugfix in the standard pileup procedure (detector gates were lost)
*
* Revision 1.8  2003/03/28 12:59:29  nevski
* another bugfix in the standard pileup procedure
*
* Revision 1.7  2003/02/19 17:31:50  nevski
* NGPART is done static
*
* Revision 1.6  2002/09/13 14:14:18  nevski
* MZCOPY to const div protected with Garbage collection in ev.div
*
* Revision 1.5  2001/07/30 16:35:10  nevski
* huge pile-up timing randomised
*
***************************************************************************
   subroutine AgMERGE (Iprin,IbCurrent,IbEvnt,Tbunch,Ibunch,Ier)
*                                                                         *
* Description: append NEXT bank to the PREVIOUS for KINE,VERT,HITS        *
* Modifications:                                                          *
* PN,  26.08.98: extended BACK flag format to xxx1xxx -or- xx1xxx         *
* PN, smtime.00: all appended event data have non-zero status word        *
***************************************************************************
#include "commons/typing.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcnum.inc"
#include "geant321/gcflag.inc"
#include "commons/quest.inc"
#include "slug/sclink.inc"
*
   Integer            Laref,   Jd,jhs,jhd,jv2,jk2
   Common  /agcmerge/ Laref(2),Jd,jhs,jhd,jv2,jk2
   Integer            LgKINE,LgVERT,AgPointr,Dum(20)/20*0/,MMM,Ibunch,
                      Iprin,IbCurrent,IbEvnt,Ier,Ib,Iudet,jver,nev,ic,
                      Jdu,Jdh,Idu,Nv1,Nv2,Nt1,Nt2,Nh1,Nh2,gate,Iev,Icnt,
                      Iv,Jv,It,Jt,i,j,Nw,Nw0,Nw1,Nw2,L,M,L1,L2,jo,ju,
                      Nmerge,Nmax,Last
   PARAMETER          (MMM=1000000)
   REAL               Tbunch
   Character*4        Cdet
   Logical            Special
   Character*24       cerr(7)/'Link entry invalid','Bank chain invalid',
                              'Not enouph space','Hits larger than target',
                              'Source bank empty','Copied chain invalid',
                              'Unknown error'/
*  GEANT general definitions for SET-type banks:
   Integer            JSF,JDF,IDF,ISF,LINK,Iset,Idet
#include "slug/stafunc.inc"
   "link" JSF(LINK) = LQ(LINK-Iset);  JDF(LINK) = LQ(LQ(LINK-Iset)-Idet)
   "data" ISF(LINK) = IQ(LINK+Iset);  IDF(LINK) = IQ(LQ(LINK-Iset)+Idet)
*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*
   Prin3 IbCurrent; ('*****  AgMERGE in bunch',i5,' *****')
   Call MZLINT(IXSTOR,'AgCMERGE',Laref,Jd,Jk2)

   Call AgMER(Iprin,JVERTX,+1,Nv1,Nv2);  Nvertx=Nv1+Nv2;
   Call AgMER(Iprin,JKINE, +1,Nt1,Nt2);  Ntrack=Nt1+Nt2;
*  get current EVNT gate number:
   gate=1; ju=LkEvnt; while ju>0 { gate=IQ(ju-5); ju=LQ(ju); }
   prin3 Nvertx, Ntrack,gate;
   (' AgMERGE: merged ',i6,' vertices,',i7,' tracks in gate',i5)
*
*                        adjust track-vertex cross references
   do iv=Nv1+1,Nvertx
   {  jv=LgVERT(JVER,iv); check jv>0; "ToF"  Q(jv+4)+=Tbunch;
      if (Q(jv+5)>0) Q(jv+5)+=Nt1     " only for geant produced tracks   "
      do i=8,7+nint(Q(jv+7))          " update track numbers in vertices "
      {  j=jv+i; if (Q(j)>0) Q(j)+=Nt1; If (Q(j)>Ntrack) Q(j)=0; }
      ju=LQ(jv-1); if ju>0 { if (IQ(ju-1)==2 & Q(ju+1)==1) Q(ju+1)=gate; }
   }
   do it=Nt1+1,Ntrack
   {  jt=LgKINE(jo,it);  check jt>0;
      do i=6,7+nint(Q(jt+7))          " update vertex numbers  in tracks "
      {  check i!=7;  j=jt+i; if (Q(j)>0) Q(j)+=Nv1; if (Q(j)>Nvertx) Q(j)=0; }
      ju=LQ(jt-1); if ju>0 { if (IQ(ju-1)==2 & Q(ju+1)==1) Q(ju+1)=gate; }
   }
*
*  First, count number of hit sets in both streams as the number of links
   Check Jset>0 & Jhits>0;
   Call AgMER(Iprin,Jhits,-2,Nh1,Nh2)
   prin3 Nh1,Nh2; (' AgMerge: start hit sets merging',2i8)
   Jd=JHITS; if (IQ(jd)==0) Jd=LQ(JHITS);

   Special=IbEvnt.le.0;
   If Special
   {**> save initial HUGE status and then insure it existance:
      Jd=LkHIT2;  Nmerge=-Ibevnt; Last=IQ(Jd+3)+Nmerge;
      if Jd==0 
      { Call MZGARB(IxDIV,0); Call MZCOPY(IxDIV,JHITS,IxCONS,LKHIT2,1,'P');
        Ier=Iquest(1); if Ier!=0
        { <w> Cerr(min(7,Ier)); (' AGMERGE Error: ',a,' program will crash ')
          return
        } IQ(LkHIT2-5)=-1; IQ(LkHIT2+3)=0; Last=Nmerge;
      }
*     Last is the last complete (usable) event number 
      IQ(JHITS+3)=Last; Nmax=0;
*     use setdet vectors at LkHIT2 as counters of completed events 
      L=IQ(LkHIT2+2); Call UCOPY(IQ(LkHIT2+4),IQ(LkHIT2+4+L),L);
                      Call VZERO(IQ(LkHIT2+4),L)
   }
*
   Iset=0; Icnt=0
   While AgPOINTR (Jset,Iset,Idet)==0
   {**>                                 Check geometry consistance later
      Icnt+=1;  JDU=LQ(JDF(JSET)-3);  Check JDU>0;  " is this  AGI  hits ? "
                JDH=LQ(JDF(JSET)-1);  Check JDH>0;  " is this HITS et all? "
      Nw =1+IQ(JDF(JSET)+1)+IQ(JDF(JSET)+3);  Nw2=0
      If (Jd>0 & Iset<=IQ(Jd-2) & JSF(Jd)>0 & Idet<=IQ(JSF(Jd)-2)) Nw2=IDF(Jd)
      if Nw2>0
      {**>                              Correct only track references now
         Idu=Q(JDU+9);  Ib=LVBACK(Idu)
         " if requested, redefine Ib,L1,L2 at subdetector level "
         CALL UHTOC(IDF(Jset),4,cdet,4)
         CALL GLOOK(Cdet, IQ(LKDETM+1),IQ(LKDETM-1),Iudet)
         if (Iudet>0 & Ib>0) Ib=LVBACK(Iudet);  L=abs(Ib)
         " x1x -or- 01x / xx1xx -or- 0x1xx /  xxx1xxx -or- 0xx1xxx "
         M=10**(int(1+LOG10(L+.9))/2);  L1=-L; L2=+L;      " rule 1: t+/-(i-1)"
         IF M>1  { L1= - (L/M/10);  L2= mod(L,M) }         " rule 2: -i1,1,+i2"

         JHS=JDF(Jd);
         If Ib>=0 & ( (Ibunch<0  & L1<=IBcurrent&IBcurrent<=L2) _
                    | (Ibunch>=0 & Ibunch<=-L1+L2) )
         {  do i=JHS+1,JHS+Nw2,Nw
            {  If 0<IQ(i)&IQ(i)<=nt2 { IQ(i) += Nt1;    }
               else If nt2==0  { if Ibevnt>0 { IQ(i) = MMM+IbEvnt; }
                                 else        { IQ(i)+= abs(IbEvnt);}         }
               elseif IQ(i)!=0 { prin0 IbEvnt,iset,idet,(i-JHS)/nw+1,IQ(i);
                         (' AgMERGE:  bad track number in ev ',5i8); IQ(i)=0 }
         }  }
         else  { Call MZDROP (IxSTOR,JHS,'L'); Next; }
      }
      if Jd!=JHITS & Nw2>0
      {**>                                       real merging here
         J=JHITS; If Iset>IQ(J-2) | JSF(J)<=0 | Idet>IQ(JSF(J)-2) | JDF(J)<=0
         { " hit set/det did not exist previously "
            Call GSAHIT (Iset,Idet,Dum,Dum,Dum,Ier)
            IF Ier<=0
            { <w> ISF(JSET),IDF(JSET)
              (' AgMERGE: Unable to create bank for secondary HITS for ',2a6)
              Ier=1;  Break
            } IQ(LQ(JHITS-Iset)+Idet)=0;  Ier=0
         }
         **>                                     Copy hits to existing bank
         Nw1=IDF(JHITS);  JHD=JDF(JHITS); 
           prin3 nw2,nw1,ISF(JSET),IDF(JSET)
           ('  ===> Copying',i10,' words to',i10,' in set/det',2(2x,a4))
           Call AgPUSH (Iprin,JHD,0,Nw1+Nw2,Ier);
           IF Ier>0
           {  <w> IbCurrent; (/1x,30(1H*),' AgMERGE ERROR ',30(1H*)/,
              5x,'not enouph memory to merge bunch',i3,', merging abandoned'/)
              Break
           }
           **>
           Call UCOPY (IQ(JHS+1),IQ(JHD+Nw1+1),Nw2)
           IQ(LQ(JHITS-Iset)+Idet)       = Nw1+Nw2
         if (.not.Special) Call MZDROP(IxSTOR,JHS,'L')
      }
      if Special
      {**>  save modified HUGE pile-up bank back in const division
         J=LkHIT2; Check Iset<=IQ(J-2)&JSF(J)>0 & Idet<=IQ(JSF(J)-2)&JDF(J)>0
         * reverse source and destination:
         JHS=JDF(JHITS);   JHD=JDF(LKHIT2);
         Nw1=IDF(JHITS);   Nw2=IDF(LKHIT2);
         check Nw2>0;      Nw0=IQ(JHITS+3+Icnt)

         * copy back to HUGE and update event reference:
         call UCOPY(IQ(JHS+Nw0+1),IQ(JHD+1),Nw2)
         Nev=0
         do i=Nw0+1,Nw1,Nw
         { j=i-Nw0; Call AgVTREvnt(JKINE,IQ(JHS+i),Iev)

           * update ev.reference, find the last complete event copied to HUGE
           if j<=Nw2 { IQ(JHD+j)=MMM+Iev;  Nev=Iev; }
           else      { Nev=min(Nev,Iev-1); }

           * remove uncomplete event collections from HITS
           if (Iev<=Last) IQ(LQ(JHITS-Iset)+Idet)=i-1+Nw
         }
         IQ(LkHIT2+3+Icnt)=Nev;  Nmax=max(Nmax,Nev)

         prin3 nw0,nw1,nw2,Nev,ISF(JSET),IDF(JSET)
         ('  ===> Special',i5,i8,'->',i8,' Nev=',i4,' in set/det',2(2x,a4))
   }  }

   If Special           { IQ(LkHIT2+3)=Nmax; }
   else If LQ(JHITS)>0  { Call MZDROP(IxSTOR,LQ(JHITS),'L'); }

   If (Special & Iprin>=2) <w> Nmerge,Last,Nmax
      ('  ===> Special Nmerge+Last=',2i6,' -> new Nmax=',2i6)
   If (IDebug>1) Call DZVERI(' VERT/KINE/HITS merged',IXDIV,'CLU')
   If (Ier==0)   Ier=Iquest(1)
   Laref(1)=0
END


