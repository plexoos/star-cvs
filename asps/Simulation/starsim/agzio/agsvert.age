* $Id: agsvert.age,v 1.2 2011/10/20 23:07:11 jwebb Exp $
* $Log: agsvert.age,v $
* Revision 1.2  2011/10/20 23:07:11  jwebb
* Added capability to provide a slope in the x,y vertex.
*
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
*
* Revision 1.3  2001/12/18 01:36:03  nevski
* no action on skips
*
* Revision 1.2  2001/02/28 17:16:08  nevski
* agckine.inc moved to commons
*
* Revision 1.1  2001/02/27 10:14:13  nevski
*  first working release
*
***************************************************************************
                Subroutine  A G S V E R T (Vertex,NtBeam,NtTarg,UBUF,NU,Nv)
* Description:                                                            *
*               add a common vertex displacement in an event              *
*               and save vertices in GEANT VERT bank                      *
* Note:         An additional word in Vertex(4) is Time-of-flight - this  *
*               is different from GSVERT, which pass it in /GCTRAK/ TOFG  *
* modifications                                                           *
* PN, 17/06/99: event generator vertices have NtBeam<=0                   *
*               =0 - find vertex within Vcut                              *
*               <0 - correct vertex with the same reference as NtBeam     *
***************************************************************************
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcflag.inc"
#include "geant321/gcnum.inc"
#include "geant321/gctrak.inc"
#include "commons/agckine.inc"
*
     Integer  NtBeam,NtTarg,NU,IVmode,Iv,Nv,Iprin,
              LgVERT,JVERT,JV,IDevt0/-999/
     Real     RNDM,VDIST,VMOD,Vertex(4),UBUF(*),Vxyz(4)
     REAL     a,b,d,z,d1,Vcut/0.0001/,Xscale/1./,Tscale/1./
     Real     my_x, my_y
     character cmod*15
*
     Iprin=Idebug; Nv=0
     If (NtoSkip>0) Return

*    if 3 sigma interval overlaps with request and Sigma is not too big:
     If Idevt0!=Idevt
     {  Idevt0=Idevt; D=abs(AvSigm(3));  Z=-1.e+10
        if Zmin<AvCoor(3)+3*D & AvCoor(3)-3*D<Zmax & Zmax-Zmin > D/5
             { until ZMin<=z&z<=ZMax { call rannor(a,b); z=Avcoor(3)+D*b } }
        else { z=Zmin+Rndm(-1.)*(Zmax-Zmin) }
        call rannor(a,b)

        my_x = AvCoor(1) + AvSlope(1) * z + AvSigm(1) * a;
        my_y = AvCoor(2) + AvSlope(2) * z + AvSigm(2) * b;

        VertexNow = { my_x, my_y, z };

        If (VMOD(VertexNow,3)>0 & Iprin>=2) <w> VertexNow;
           (' AgSVERT: vertex shifted at ',3F10.4)
     }
*                                   get vertex in cm,sec
      D1=VMOD(Vertex,4);  TOFG=Vertex(4)*Tscale;  Vxyz(4)=TOFG
      Call VSCALE (Vertex,XScale, Vxyz,3)
      CALL VADD   (Vxyz,VertexNow,Vxyz,3)

      If (NtBeam<=0) then
        DO IV=1,Nvertx
          JV=LgVERT(JVERT,IV)
          Check NtBeam == Q(JV+5)
          Check NtTarg == Q(JV+6)
          If NtBeam!=0 { If (D1>0) Call UCOPY(Vxyz,Q(JV+1),4); }
          else         { If (VDIST(Q(JV+1),Vxyz,4)>Vcut) Next; }
          Nv=Iv; Return
        Enddo
      endif
*
      Call GsVERT(Vxyz,NtBeam,NtTarg,UBUF,NU,Nv)
      If (Nv>0) Return
      <w> ntbeam,Vxyz; (' AgSVERT can not set vertex ',i8,' at ',4F10.2)
      Return

*       set units for external vertex
      Entry agsvertset (IvMode)
      Iprin=Idebug
      If IvMode==0 { cmod='geant native'; VCUT=.0001; Xscale=1;  Tscale=1;  }
      If IvMode==1 { cmod='ATLAS GENZ';  VCUT=.0001; Xscale=100; Tscale=1;  }
      If IvMode==2 { cmod='STAR PYTHYA'; VCUT=.0001; Xscale=.1; Tscale=.33e-11}
      Prin2 IvMode,Cmod,Vcut,Xscale,Tscale;
      (' AgSVERT Mode=',i3,2x,a,' cut=',F8.4,',  scale=',F7.1,'cm  ',G12.3,'s')
END


