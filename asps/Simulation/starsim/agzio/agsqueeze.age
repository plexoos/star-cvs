* $Id: agsqueeze.age,v 1.1.1.1 2004/01/12 23:49:37 potekhin Exp $
* $Name:  $
* $Log: agsqueeze.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:37  potekhin
*
* Revision 1.5  2003/08/27 12:43:06  nevski
* correct squeeze for max density
*
* Revision 1.4  2003/08/24 16:34:37  nevski
* correct squeeze when there were kine/vert banks already dropped
*
* Revision 1.2  2003/08/23 16:00:39  nevski
* impouve extra kine cleaning
*
* Revision 1.1  2003/06/13 16:40:05  nevski
* new code to compress kine information
*
*
#include "atlsim/config.h"
******************************************************************************
*                                                                            *
                   subroutine   agsqueeze
*                                                                            *
* Description: squeeze KINE/VERT banks leaving there only trackes used in    *
*              hits/digi banks (a bit similar to AgPUTRIM                    *
* On BACK.DIGI>0 clean up HEAD banks and filter KINE/VERTEX banks content    *
* Idig = 2 - keep all tracks from main event and BX0 + used tracks from outBX*
* Idig = 3 - keep tracks from main event + used tracks from BX0, drop outBX  *
* Idig = 4 - keep used tracks from main event, drop any pileup tracks        *
*                                                                            *
******************************************************************************
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcflag.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcnum.inc"
#include "slug/sclink.inc"

   integer LgVERT,LgKINE,JVER,JKIN,iv,jv,n1,j1,it,jt,n2,j2,i,j,n0,ivo,ito
   integer Iset,Idet,x,js,jd,jx,jdx,jxd,last,nw,l,nt,jn,nu,nn,Ltemp
   integer Iprin/2/,mode/1/,nt1,nt2,nt3,nt4,nb
   Integer ISLFLAG

*  protect in case no ATLR detector is initialised
   Mode  = ISLFLAG('ATLR','SIMU')
   Iprin = ISLFLAG('ATLR','PRIN')
   Check Mode>0 & Iprin>=0
  
   call MZBOOK(IxDIV,Ltemp,0,2,'KTMP',0,0,NTRACK,0,0)

*  tracks with user information are counted as used:
   nt1=0; nt2=0; nt3=0; nb=0
   do it = 1,NTRACK 
   { Jt=LgKINE(JKIN,it); Check Jt>0;          IQ(Jt)=0;
     Check Mode<=2 & IQ(Jt-2)>0 & LQ(Jt-1)>0; IQ(Jt)=1; nt1+=1; }
   do iv = 1,NVERTX 
   { Jv=LgVERT(JVER,iv);  if (Jv>0) IQ(Jv)=0; }

   do Iset = 1,IQ(JSET-1)
      JS = LQ(JSET -Iset);    Check Js>0
      X  = 0
      IF JDIGI>0 & LQ(JDIGI-iset)>0  { X=2; JX=LQ(JDIGI-iset) }
      IF JHITS>0 & LQ(JHITS-iset)>0  { X=1; JX=LQ(JHITS-iset) }
      Check X>0 
      do idet = 1,IQ(JS-1)
      {  JD   = LQ(Js-Idet);  Check JD>0
         JXD  = LQ(JX-Idet);  Check JXD>0
         LAST = IQ(JX+Idet);  Nw = IQ(JD+1)+IQ(JD+2*X+1)+1
         do J=JXD+1,JXD+LAST,Nw
         {  It=IQ(j);  Jt=LgKINE(JKIN,it);
            if it>Ntrack  
            { nb+=1; print *,' track ',nb,it,' bad  in ',iset,idet ; next;}
            if (it>0&jt<=0) print *,' track ',it,' lost in ',iset,idet 
            check Jt>0; if (IQ(Jt)==0) nt2+=1; 
            IQ(Jt)=1; IQ(J)=IQ(Ltemp+It); IQ(Ltemp+It)=J; nt3+=1;
   }  }  }

* mark all vertices referenced by used tracks and ... not their parent tracks
   nu=0
   do it = NTRACk,1,-1
   {  Jt=LgKINE(JKIN,it);               check Jt>0 & IQ(Jt)>0;  Nu+=1
      iv=Q(Jt+6);  Jv=LgVERT(JVER,iv);  
      if Jv>0 
      { IQ(Jv)+=1;
        nt=Q(Jv+5); Jn=LgKINE(JKIN,nt); if Jn>0
        { if ( MODE==1 ) IQ(Jn)+=1;        "default: mark ancestor tracks" 
          if (IQ(Jn)==0) Q(Jv+5)=-abs(nt); "vertex becomes orphan, disconnect"
      } }
*     remove produced vertices if they were or will be droped
      do i=1,Q(Jt+7)  
      { j=Jt+7+i; iv=Q(j); jv=LgVERT(JVER,iv); 
        if (jv<=0 | IQ(jv)==0) Q(j)=-abs(iv); 
      }
   }   
* move and renumber vertices, correct references to them in remaining tracks
   n1=0
   do iv = 1,NVERTX
   {  Jv = LgVERT(JVER,iv);  Check Jv>0 

* if vertices and/or tracks were already dropped there is a problem: 
* references to dropped vertices should be removed BEFORE vertices are squeezed

      if IQ(Jv)==0  
      { Call MZDROP(IxDIV,jv,'L');
        prin3 iv,n1; (' vertex ',i6,' dropped, nv=',i6); next; 
      }
      n1+= 1; nn=n1; if n1<iv
      {  j1 = LgVERT(JVER,n1);  if (j1>0) Call MZDROP(IxDIV,j1,'L')
         N0 = IQ(JVER+2);       call ZSHUNT(IxDIV,Jv,JVER,-(n1-n0),1)
      }
*     this vertex parent track:
      it=Q(Jv+5); Jt = LgKINE(JKIN,it);
      if Jt>0 & IQ(Jt)>0 { do i=1,Q(Jt+7) { j=Jt+7+i; if (Q(j)==iv) Q(j)=nn; }}
      else    { Q(Jv+5) = -abs(it); }
*     this vertex daughters:
      do i=1,Q(Jv+7) 
      {  j=Jv+7+i; it=Q(j); Jt=LgKINE(JKIN,it); 
*        daughter track was or will be dropped ? agputrim could do it before...
         if Jt<=0 | IQ(jt)==0  { Q(j)=-abs(it); next; }
         ivo=Q(Jt+6); Q(Jt+6)=nn; check ivo!=iv
         print *,' logical error v:',iv,'->',nn,' t:',it,'<-',ivo; return
      }
   }
* move and renumber tracks,  change references to them in vertices
   n2 = 0; nt4=0
   do it = 1,NTRACK
   {  Jt = LgKINE(JKIN,it);  Check Jt>0
      if IQ(Jt)==0           
      { Call MZDROP(IxDIV,jt,'L'); 
        prin3 it,n2; (' track ',i6,' dropped, nt=',i6); next; 
      }
      n2+= 1;  IQ(Jt)=0;     if n2<it 
      {  j2 = LgKINE(JKIN,n2);  if (j2>0) Call MZDROP(IxDIV,j2,'L')
         N0 = IQ(JKIN+2);       call ZSHUNT(IxDIV,Jt,JKIN,-(n2-n0),1)
      }
*     origin vertex :
      iv=Q(Jt+6);  jv=LgVERT(JVER,iv); 
      if jv>0 { do i=1,Q(jv+7) { j=Jv+7+i; if (Q(j)==it) Q(j)=n2; } }
*     produced vertices
      do i=1,Q(Jt+7)
      {  j=Jt+7+i; iv=Q(j); jv=LgVERT(JVER,iv); 
         if jv<=0 | IQ(jv)==0 { Q(j)=-abs(iv); next; }
         ito=Q(Jv+5); Q(Jv+5)=n2; check ito!=it
     print *,'logical error t:',it,'->',n2,' v:',iv,jv,iq(jv),'<-',ito; return
      }
*     change track numbering in hits/digits:
      J=IQ(Ltemp+it);  while J>0  { J1=IQ(J); IQ(J)=n2; J=J1; nt4+=1; }
      IQ(Ltemp+it)=0 
   }
   do it=1,ntrack { check IQ(Ltemp+it)>0; print *,' lost track ? ',it; }

   Prin2 nu,n1,n2; (' AgSqueeze: nused,nvert,ntrack =',3i7)
   prin2 nt1,nt2,nt3,nt4; (' found ',2i6,' useful tracks ',2i8,' hits')

   Jv = LgVERT(JVER,n1)
   if (JVER>0 & IQ(JVER-1)>1)  then
      IQ(JVER+1)=n1;  L=IQ(JVER-3)-n1+IQ(JVER+2)
      if (L>10)       Call MZPUSH(IxDIV,JVER,-L,0,' ')
      if (LQ(JVER)>0) Call MZDROP(IxDIV,LQ(JVER), 'L')
   endif
   NVERTX = n1; 

   Jt = LgKINE(JKIN,n2); 
   if (JKIN>0 & IQ(JKIN-1)>1) then
      IQ(JKIN+1)=n2;  L=IQ(JKIN-3)-n2+IQ(JKIN+2)
      if (L>10)       Call MZPUSH(IxDIV,JKIN,-L,0,' ')
      if (LQ(JKIN)>0) Call MZDROP(IxDIV,LQ(JKIN), 'L')
   endif
   call MZDROP(IxDIV,Ltemp,' ')
   NTRACK = n2; 

   end
