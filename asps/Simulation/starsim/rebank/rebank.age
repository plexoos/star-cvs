*
* $Id: rebank.age,v 1.1.1.1 2004/01/12 23:49:49 potekhin Exp $
* $Name:  $
* $Log: rebank.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:49  potekhin
*
* Revision 1.7  2003/10/22 15:11:48  nevski
* failure in table scan does not reset Link, but returns negative Ia instead
*
* Revision 1.1  2001/02/27 10:16:03  nevski
*  first working release
*
#include <atlsim/config.h>
**********************************************************************
*                                                                    *
            Subroutine   R E B A N K  (Cname,NVL,Npar,Link,Ia)
*                                                                    *
* Input:                                                             *
*  Cname - 'Unix-like' path to the data block: /dir1/.../name.exte   *
*  NVL   - Bank numbers in their linear structures                   *
*  Npar >0 Bank is requested for writing, may be created or expanded *
*       <0 BAnk is requested for reading, should not be changed      *
* Output:                                                            *
*  Link  - returned link pointer to the bank, >0 if bank was found   *
*  Ia    - displacement in the bank for a row by row mode            *
*                                                                    *
**********************************************************************
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "atlsim/rbbank.inc"
#include "slug/sclink.inc"
  INTEGER      NVL(*),Npar,LinkUp,Link,ia,Need,NV1,
               J,IE,J0,IL,JL,NS,ND,NV,Lm,LENOCC
  CHARACTER    Cname*(*),Del*1

Replace[ERR#;]  with [;OUTPUT kk,NVL(kk),IL,#1; (' REBANK ERROR: ',2x,
                      'level/copy/link=',3i4,' needed/found=',3i6); Return; ]

if (Lu<=0) Lu=6

"  Set starting directory - top level or current "
KK=0; {J0,J}=1;  While Cname(J0:J0)=='/' {J0=J0+1}
If J0>1
{  KK=1;
   " Get RECB/DETM bank address and make sure that it has been booked "
    If     Cname(J0:J0+3)=='DETM'
   { If (LK Detm==0) Call MZBOOK(IxCons,LKAR P2,LK Detm,1,'DETM',50,50,50,5,0)
     IrbDIV=IxCons;   Link=LK Detm;
   }
   else If Cname(J0:J0+3)=='RECB'
   { If (LKAR P1==0) Call MZBOOK(IxDIV,LKAR P2,LKAR P1, 1,'RECB',MM,MM,10,2,0)
     IrbDIV=IxDIV;    LINK=LKAR P1;
   }
   else If Cname(J0:J0+3)=='SECT' | Cname(J0:J0+3)=='TRIG' "old name for recb"
   { If (LKAR P1==0) Call MZBOOK(IxDIV,LKAR P2,LKAR P1, 1,'RECB',MM,MM,10,2,0)
     IrbDIV=IxDIV;    LINK=LKAR P1;   KK=0;
   }
   else If Cname(J0:J0+3)=='HEAD'   { IrbDIV=IxDIV;    Link=JHEAD;   }
   else If Cname(J0:J0+3)=='EVNT'   { IrbDIV=IxDIV;    Link=LKEVNT;  }
   else If Cname(J0:J0+3)=='SETS'   { IrbDIV=IxCons;   Link=JSET;    }
   else If Cname(J0:J0+3)=='MAPP'
   { If (LkMAPP==0) Call MZBOOK(IxCons, LkMAPP, LKMAPP, 1,'MAPP', 3,3,10, 2,0)
     IrbDIV=IxCons;   Link=LKMAPP;
   }
   else                             { "set externally" Link=LKAR P2; }

   LKAR P2=Link;  J=J0+5*KK;  If (Cname(J-1:J-1)='*' | Link<=0) Return;
}
else { LINK=LKAR P2 }
                                    "  search requested level "
Lm=LENOCC(Cname);                   "  Check Lm>=J+3; ?       "

:Search_level: Loop
{ J=J0+5*KK;  KK+=1;  LinkUp=Link;  NS=IQ(LinkUp-2);
  Cnam=Cname(J:J+3);  Del=Cname(J+4:J+4);
#if defined(CERNLIB_CRAY)
  Call UCTOH(Cname(J:J+3),Inam,4,4);
#endif
  If(J+4>Lm) Del='*'; If (J+3>Lm) break

  NV1=0; NV=NVL(KK);  JL=NS+1;  II=1;
  IF (NV==0 & Npar>0) NV=BIG       " 0 means the free element "
                                   "   Find structural link   "
  :Check_link: Do IL=1,NS
  {  Link=LQ(LinkUp-IL);   If Link==0 { JL=min(IL,JL); Next; }
     Check Inam==IQ(Link-4);   JL=IL
     :Linear_search: do II=2,NV+1
     { NV1=IQ(Link-5);  If (NV1==NV) Break;  If (NV1> NV) GOTO :new_bank:
***
     * on CHAIN entry: last item, no links, no next bank - group them together.
     * IrMode -1 prevents grouping, 0 - allows only on append, 1 - go wild:
     * if IDN is negative, grouping was already forced, continue
       if (IrMode>=0 & ii==2 & Del=='*' & LQ(Link-1)==0 & LQ(Link)==0)|(Nv1<0)
       { If (Nv==Big | IrMode>0 | Nv1<0 )
         {  Nd=IQ(Link-1);  Del='.';  kk-=1;  Break :Search_level:; }
       }
***
       JL=0;  LinkUP=Link;  Link=LQ(Link);   If (Link==0) GOTO :new_bank:
     } Nd=IQ(Link-1);       GOTO :Next_level:
  }
                                    "   create a new bank   "
  :new_bank: Link=0; IF Npar>0
  { IF (JL>NS) Call MZPUSH (IrbDIV,LinkUp,MM,0,' ')
    IF Del#'/' & Npar<BIG { Leng=Npar; IOD=IOX; } else { Call RBFIND; }

    Call MZBOOK (IrbDIV,Link,LinkUp,-JL,Cnam,MM,MM,Leng,IOD,0);
    if NV<BIG {IQ(link-5)=NV} else {IQ(link-5)=NV1+1};   Nd=0;
  }
  :Next_level: If (Del!='/' | Link==0) Break
}
                    "   end of request chain, copy and update LAST pointers "
  Leng=Iabs(Npar);  If (Leng==BIG) Call RBFIND;
  Ia=0;  Ie=Leng;
  If Del=='.'
  {  kk+=1;
     if Leng==0 { Leng=IQ(Link-1); if (IQ(Link-5)<0) Leng=-Leng/IQ(Link-5) }
     Ia=0; If (Npar>0) Ia=Nd; If (NVL(kk)>0) Ia=Leng*(NVL(kk)-1);
     Ie=Ia+Leng; II=Ie/Leng;  If (Npar<=0 & Ie>IQ(Link-1)) " Link=0;" Ia=-1;
     "print *,' Packing kk,NVL,leng,ia,ie,ii = ',Cnam,kk,NVL(kk),leng,ia,ie,ii"
  }
  If Npar>0 & Link>0
  {  Need=Ie-IQ(Link-1); " If Need>leng { Err Ie,Nd; } "
     if (IrMode>9) print *,' REBANK: Need,del=',need,del
     If (Need > 0) Call MZPUSH(IrbDIV,Link,0,NEED,' ')
     if (Del=='.') IQ(Link-5)=-max(Ie/Leng,-IQ(Link-5))
  }
  IQUEST(1)=0
END

subroutine REBANKM(i)
#include "atlsim/rbbank.inc"
   IrMode=i
end
