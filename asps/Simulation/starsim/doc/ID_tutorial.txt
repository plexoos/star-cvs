A beginner's tutorial for inner detector simulation studies

Authors: Ulrik Egede and Jo Pater

These pages maintained by Jo PATER Feedback will help immensely in making
and keeping these pages useful. Please don't hesitate to contact me with
your suggestions and comments.

LAST MODIFIED: 17 February 1997, to update the versions of the
reconstruction software
An older version (16 September 1996) of this document is still available by
clicking here.

You are Visitor No: [Image] since 11 November 1996
  ------------------------------------------------------------------------

A Brief Overview of the Atlas Software

There are of course a number of things that a user would like to be able to
do with the atlas offline software, including:

   * Generate single tracks with Geant (muons, electrons, whatever)
   * Generate physics events with a particular physics generator (e.g.
     pythia)
   * Turn this `generator output' (be it single tracks or full events) into
     energy depositions (`HITS' to use the Geant term) in the atlas detector
   * Turn these hits into simulated detector output, for example a list of
     fired strips in the semiconductor strip tracker. This is referred to as
     `digitising' the event. The resulting pieces of information are
     referred to (in Geant-speak) as `DIGITS'.
   * Work directly with the hits or digits, for example to try to determine
     which digits were caused by the passage of which particle (ie `pattern
     recognition') which would, in the inner detector, result in a
     collection of `tracks'.
   * Run a further analysis on the output of the previous step, for example,
     try to arrange the tracks into decay products of a short-lived
     particle.

With the atlas software, all of these tasks can be performed in the
`traditional' way, i.e. run one program in batch mode to make an event tape,
run another batch job on that tape to simulate the detector, run another to
analyse the output of the simulation step...) (As the framework package used
do this is called `SLUG' in atlas, throughout this document this will be
referred to as `running in SLUG'). However in atlas each step can also be
performed using the software package called `atlsim', which when run
interactively, is (simplistically speaking) a sort of combination of
interactive geant and paw. Atlsim can also be run in batch mode for long
jobs.

For physics studies for the inner detector TDR, the following chain of
analysis is recommended:

   * The user works mainly with event files that have been centrally
     produced, through to the digitisation and/or reconstruction stage. Of
     course there will be cases where a user must produce his or her own
     events, or must redigitise the existing events for example to add
     pileup, which is added to the signal file at the HITS stage. In these
     cases the user will be encouraged to do this using the SLUG-based
     version of the atlas simulation-by-geant package (DICE). Instructions
     for how to do this are in preparation.
   * If the reconstruction output is not available on the tape, the user
     runs a batch job to reconstruct the events using the official
     SLUG-based ATRECON executeable. ATRECON is a package that contains the
     code for the atlas pattern recognition algorithms, and also the
     official interfaces to the digits for each subdetector. Starting with
     the 96_12 software release, there have been three inner detector
     pattern recognition programs available in SLUG-based atrecon: xKalman,
     iPatRec and PixLRec. The result of this reconstruction step will be
     another event file, containing (at least) the ZEBRA banks with the
     results of the track fitting. It may also contain any or all of the
     information that was on the tape the job was run on, e.g. the KINE
     information, and/or the HITS and DIGITS from the detector simulation.
   * Using the atlsim program (either interactively, for development, or in
     batch mode for running long jobs) the user reads in the file created in
     the last step and performs his or her analysis.

For complete instructions about how to do analysis in the above way, see
Reconstruction and analysis in the ATLAS Inner Detector by Ulrik Egede.

This chain of actions has the advantage that everywhere the user is using
official atlas executeables (binaries) and will not have to re-compile or
re-link ANYTHING. The last step (the user analysis) can also be done in SLUG
by re-making an official atlas binary (either DICE or ATRECON if I
understand correctly) to include the private analysis module.

In September 1996, the middle step above (running reconstruction in batch
mode using an official ATRECON executeable) was not possible as it requires
(obviously!) that an official executeable exist, which was not the case at
the time. In order to allow people to get started working with the atlas
software while waiting for this executeable, I provided a version of the
following tutuorial, which gives instructions for how to do this step also
in atlsim, in the same session as the anlaysis step. Now an official atrecon
executeable DOES exist, but perhaps people like the atlsim way of working,
so I leave this tutorial available, but update it to use official versions
of atlsim rather than the private collection which was used before.

A simple example of an analysis done in ATLSIM

The following example demonstrates how to set up an atlsim working area, and
how to read in, reconstruct and analyse atlas inner-detector events using
the atlsim program.

No prior experience with the atlas offline software is assumed. The end
result of this exercise will be a file containing ntuples and histograms
which can then be manipulated in the ususal way, using for example PAW. This
tutorial does assume that the reader knows how to program in fortran,
including how to use HBOOK to create and fill ntuples and histograms, and
that he or she is familiar with PAW and its associated kumac language. Also
some familiarity with the ZEBRA memory manager is assumed.

In this tutorial I have tried to point out problems that you might have
while running atlsim. Others can crop up. In general if strange things start
to happen while you are developing code in atlsim, it can help to exit
atlsim and restart it.

Setting up and running atlsim

Note from Jo: I recommend that beginners start by working on the atlas work
group servers at cern, rather than on another machine with a copy of the
atlas software. This will make for one less source of potential problems for
you, and will make it easier for me and others at cern to help you if you
have trouble. Once you know your way around the software you should switch
to running on your home system if it has copies of the atlas software, in
order to reduce the load on the already-overloaded work group servers at
cern.

So, here's what you do to set yourself up to work with atlsim: Make yourself
a working directory under your atlas wgs account. NB: The directory name
MUST NOT contain any capital letters, for example ~paterjo/public/IDsoft
will not work. ~paterjo/public/idsoft WILL work. In this working directory
you will need links to several files in order to make atlsim work. Here are
example commands to get official versions of what you need:

ln -s $LHC_ROOT/96_12/bin/atlsim .
ln -s $LHC_ROOT/96_12/bin/geant3 .
ln -s $LHC_ROOT/96_12/bin/geant3.def .

`atlsim' is the atlsim binary executeable file, I am not sure exactly what
geant3 and geant3.def are (sorry) but atlsim needs them.

Note that these commands give you the 96_12 versions of the code, which is
the best version available at the moment I'm updating this guide (15 January
1997). I may not get this guide updated every time we have a software
release, so you should check to see what the current best release is and use
that rather than 96_12, if it is different. Generally information about
software releases is sent out to the dice, reconstruction and/or sw mailing
lists; check the mail archives on the web.

You need copies of two other files, geom.kumac and Makefile which are used
by atlsim to compile and dynamically link in the code you wish to run in
atlsim. Make yourself copies in your working directory by clicking on their
names here and saving them with your web browser. NB: This version of
Makefile is specific to HP-UX.

Once you have the above links and files, type `atlsim' at the unix prompt.
(You must be sitting in front of a machine with graphics capability.) This
will start up something that looks a lot like paw, it will tell you that it
has started up interactive Geant, then it welcomes you to PAW and asks you
for your workstation type. Input whatever you normally do to run PAW. Note
that your graphics window size (generally defined in higz_windows.dat, in
your top-level directory) must be the default 600-by-600 in order for some
features of atlsim to work properly.

You are now in atlsim, and you can issue line commands or execute kumacs
full of commands. (The next section of this tutorial contains an example
kumac for you to try.) In principle all the paw and interactive geant
commands work in atlsim, but sometimes you need to use the full command name
rather than use the abbreviated commands that you might use in for example
an ordinary paw session (e.g. `opt stat' will confuse atlsim, you should say
`option stat'; `set stat 111111' will cause problems, you should say `g/set
stat 111111'). Note that this may cause you to get strange messages upon
starting up atlsim: if you have a .pawlogon.kumac in your top directory and
it contains some of these abbreviated commands, atlsim may ask you some
cryptic questions at startup time. Modify your .pawlogon.kumac to use the
full commands and this problem should disappear.

At this point it would be useful to make yourself a copy of the AGUSER
manual, which contains a list of the commands you can use in atlsim,
together with their syntax and a brief description of what they do. To make
your copy, while in atlsim, issue the command

MANUAL AGUSER MAN.TEX LATEX

(Note capitals are not necessary, in general atlsim commands are not
case-sensitive.) This will create a file in your working directory called
`man.tex' which you can then process as you would any other LaTeX file to
make a printed document.

You can exit atlsim either by saying `quit' or `exit', however it should be
noted that if you have opened any output files they may not be properly
closed if you say `quit'.

Now you are ready to run the example atlsim kumac in the next section.

An example atlsim analysis

This section contains instructions on how to run, in atlsim, an example
kumac (provided) which reads in, reconstructs (with xkalman) and analyses
(with a provided example of a user analysis subroutine) a pre-produced file
of muons in the inner detector. With minor changes which will be disussed
later, the same kumac can be used to run on some prepared tapes of physics
events.

Atlsim works by dynamically linking into itself the code that you want to
work with, for example the pattern recognition code you intend to run,
and/or your own analysis routine(s). In order for it to do this, you must
have in your working directory copies of the code you wish to use, or a
links to official copies. In the example kumacs of this tutorial you will
need links to the reconstruction code:

ln -s
/afs/cern.ch/atlas/www/GROUPS/INNER_DETECTOR/LAYOUT/sw_tutorial/axxxrec.g .
ln -s
/afs/cern.ch/atlas/www/GROUPS/INNER_DETECTOR/LAYOUT/sw_tutorial/xkalman.g .

Also, if you would like to experiment with the PixlRec package, make the
link

ln -s
/afs/cern.ch/atlas/www/GROUPS/INNER_DETECTOR/LAYOUT/sw_tutorial/pixlrec.g .

and have a look at some examples of how to run pixlrec in atlsim. Note that
where that document says to use the file xkalrec.g, you can use xkalman.g;
it is not foreseen to maintain an official version of xkalrec.g, only of
xkalman.g (xkalrec is a subset of xkalman).

This page was updated on 17 February 1997 to offer the latest reconstruction
software available; however the older software (version of 15 January 1997)
is still available for a limited time:

ln -s
/afs/cern.ch/atlas/www/GROUPS/INNER_DETECTOR/LAYOUT/sw_tutorial/axxxrec_970115.g
.
ln -s
/afs/cern.ch/atlas/www/GROUPS/INNER_DETECTOR/LAYOUT/sw_tutorial/xkalman_970115.g
.
ln -s
/afs/cern.ch/atlas/www/GROUPS/INNER_DETECTOR/LAYOUT/sw_tutorial/pixlrec_970115.g
.

Sorry, iPatRec does not (yet?) run in atlsim.

These source files correspond to the official 96_12 version of atrecon. Soon
we will have an official area to store these source files in the form in
which atlsim needs them. When this area is organised I will update this
document to point you at the official files rather than at my private
copies. Note that in previous versions of this tutorial, you were asked to
link to only ONE file, called `arecon.g', which contained axxxrec.g and
xkalman.g. My apologies for the style change, it reflects changes in code
management made necessary by the growing number of algorithms available.

You will also need copies of the following files in your working directory:
mu_ana.kumac and tstana.g which you can download to your working directory
from your web browser.

mu_ana.kumac is an atlsim kumac to read in and analyse a pre-produced muon
`signal' file. This kumac is commented to explain what each command is
doing, it would perhaps be beneficial for you to read it through before
trying to run it. tstana.g is a simple example user analysis subroutine
which is compiled, linked and called by mu_ana.kumac. tstana.g is also
commented, please read it before running it, I will not reproduce the
comments here and it contains information you will need to write your own
analysis routine. tstana.g (and most, if not all, other code used in atlsim)
is written in the age language. For an introductory description of the age
language, see the section of Reconstruction and analysis in the ATLAS Inner
Detector entitled `The AGE language for beginners', which also contains
information about how to access information from the zebra banks.

There is one last thing which you must do before running the example. You
must make a link to the event file you wish to use. For example, to get some
muons, give the command (from the unix prompt, not from atlsim):

atlas_stage LT0052

This will, via the stagein command (see the cern SHIFT reference manual)
create a link called `ZEBRA.P' to a file on the stage area that holds the
contents of the first file on the tape LT0052. This is a file containing
2000 200-Gev-Pt muons which have been created by Dario Barberis, using geant
to generate the muons and the 96_12 version of the inner detector simulation
and digitisation code (dice). mu_ana.kumac reads the muon events from
ZEBRA.P.

Now, invoke atlsim and give the command `exec mu_ana'. Here's what will
happen:

   * Some paw commands are given, mainly for demonstrative purposes: full
     statistics printing is requested for all histograms.
   * here it is possible (by deleting the *'s in the first columns of the
     next two commands) to turn on debug printing in the age files and to
     set the debug printout level. See example of how this is coded in
     tstana.g. (By editing your copy of mu_ana.kumac, you can play with
     turning debug on and off and adjusting the print flag to see what kind
     of output you get.)
   * the input file that you requested with the atlas_stage command will be
     opened, it is accessed by the name you gave it, ZEBRA.P. Note that you
     can rename ZEBRA.P to be anything you want to call it, then modify the
     `gfile' command in mu_ana.kumac to read it according to the name you
     have given it.
   * a histogram file (tstana.his) will be opened in your working directory.
     At the end of your run, tstana.his will contain the histograms and
     ntuples made by all the code modules you run in your kumac (provided
     you leave atlsim with the `exit' command rather than the `quit'
     command).
   * The line 'mode all reco 1' is necessary, starting with the 96_12
     versions of the reconstruction code, to turn on reconstruction in all
     subdetectors.
   * axxrec, xkalman, and tstana will be compiled and linked by geom.kumac,
     making the shared library files `axxxrec.sl', `xkalman.sl' and
     `tstana.sl' in your working directory. This is very slow the first time
     you compile a source file but very quick subsequent times as it uses
     make. NB: if you get the message `not enough space' from atlsim when
     the command `exec geom' is given, that means that the computer you are
     running on is overloaded and doesn't have enough free memory to do the
     job. Try again on a different work group server. Also, please do not
     leave an unused atlsim session running on any machine, you may prevent
     other people from working.
   * An event loop is entered. On each execution of the loop, an event is
     read in (`trig'), all hits and digits are printed out (`GPHITS'), the
     pattern recognition interface is done (`call axxxrec'), the pattern
     recognition is performed (`call xkalman') and the user analysis is run
     (`call tstana').

Once mu_ana has finished running, you will have in your //pawc directory
(give the command `cd //pawc' while still in atlsim to get there), some
histograms and ntuples from tstana (histogram number 1 contains the number
of kine particles in the event, histogram number 2 contains the kine
particles' transverse momentum, ntuple 100 holds more information about the
kine tracks, ntuple 200 holds some information about the barrel sct digits
and histograms 2001 - 2012 hold information taken from the reconstruction
(recb) banks, note that these last are identical to 1001 - 1012 made by
xkalman, which are also in //pawc. Then there is a large ntuple (number
9000) from xkalman. When you exit atlsim, all these histograms and ntuples
will be saved to the file `tstana.his' in your working directory, as
directed by the GHIST command in mu_ana.kumac.

In principle some complete anlayses could be performed using only the
information from the xkalman ntuple. However tstana shows you also how to
extract information from the reconstruction (recb) banks which xkalman makes
as it runs. For more information about this, see the following links:

   * the section of Reconstruction and analysis in the ATLAS Inner Detector
     entitled `The AGE language for beginners'. This includes information
     about how to access information from zebra banks.
   * the section of Reconstruction and analysis in the ATLAS Inner Detector
     entitled `Definition of the reconstruction banks'.
   * atlsim's automatic documentation system . How to interactively learn
     the structure of the banks you have access to.

If you get tired of looking at single muons, there are many other files
prepared which contain physics events. Before you run on your first physics
event I'd recommend commenting out that `GPHITS' command at the bottom of
mu_ana.kumac. Also you probably don't want to fill the sctt digits ntuple in
tstana.g as there are rather a lot of digits per event.

WARNING: this example of running reconstruction will not work on
single-electron files as there you must use an electron seed rather than a
muon seed. For help, see Reconstruction and analysis in the ATLAS Inner
Detector.

If you modify your `atlas_stage' command to give the tape number of a tape
containing physics events, mu_ana will then run on those events. Here is a
link to lists of tapes currently available and how to use them. For now run
on one file at a time, a mechanism exists for specifying multiple files for
atlsim to read but I don't yet understand how to use it. Sorry. When I learn
I'll update this.

Now you should have enough information to start writing your own analysis
routine. A very useful feature of atlsim is that you can modify your code
module and re-link it back in (with geom.kumac) without ever leaving atlsim.
That is, the following chain of events is allowed:

   * exec geom my_analysis | compile and link in your analysis module
   * trig | read in an event
   * call my_analysis
   * (look at some histograms or banks)
   * (using your favorite editor, modify my_analysis.g)
   * exec geom my_analysis | new version replaces the old one WITHOUT
     exitting atlsim
   * trig | reads in next event, skip this call if you want to read same
     event
   * call my_analysis
   * (look at the histograms or banks)
   * etc.

Good luck, and please feel free to contact me if you have questions or
problems.

Jo PATER
