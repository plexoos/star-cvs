
                           
                              
                           DICE-95 update journal
                           ======================
                                 Oh-Oh funs


Introduction

  This is a temporary file containing descriptions of recent DICE95 
modifictions, bugs & fix records, user complains and notes etc...
They will hopefully became later a part of the DICE95 manual update.	 
Topics are random and not necesserely are official.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

More on the GEANT (AGE) language
================================

  The GEANT language (new name suggested by ACOS group is AGE language)
is the FORTRAN extention (with a limited number of restrictions, however).
Like in a standard fortran-77 a program consist of program units:

       PROGRAM, FUNCTION, SUBROUTINE or MODULE.

The latest acts as subroutine but in addition defines some standard
control variables (Module,First,ok...) used mainly for data definitions.

Each program unit consist of a number of OPERATORS. Apart from standard 
fortran-77 operators the parser understands 12 GEANT (AGE) operators,
described in the DICE-95 manual.

An operator by default is a single, FREE FORMATED line (no special colomn 
assignement like in fortran !). It can be continued to the following lines 
by putting a void continuation sign (\ _) or a meaningful comma (,) AT 
THE END OF THE LINE.

! Because the parser does dont distinguish colomns (symbol positions) anymore, 
! some differences with fortran rules arrise:
!  - Fortran continuation sign (a symbol in 6-th colomn) IS NOT allowed;
!  - A comment operator CAN NOT start with "C" in the first colomn;
!  - A comment operator CAN start with "*" in any colomn. 

In addition, IMBEDDED comments (anything in " ") are allowed everywhere WITHIN
a single line. Normal fortran comments ( from "!" TO THE END of the line)
are also recognised as such. 

Other extensions are:
 
 COMPLEX OPERATOR - any sequence of operators, taken in curly brackets { }, 
                    is considered as a single operator.
 MERGED OPERATORS - several operators can be put on a single line using a
                    semicolomn ";" as a delimiter between them
 NATURAL NOTATION for relations and logical operators - 
         &, | can be used instead of .AND., .OR. accordingly and   
         <, >, <=, >=, ==, !=  instead of .LT., .GT., .LE., .GE., .EQ., .NE.

 PRIN<i> list; (format_list) - where <i> is from 0 to 9 - can be used for a 
         debugging printout using a standard print control variable IPRIN.
         It is equivalent to the following fortran sequence:

        If (IPRIN>=i) then
           WRITE(LOUT,label) list
 label     FORMAT(format_list)
        endif


thanks to Stephen Haywood for comments.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Position NAME in MOTHER 
=======================

- provides a way to make the detector positioning in the external (to the
module) volume. If mother is also a generic atlsim volume, the active one
(created latest) actual volume is selected as mother.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

FILL operator
=============

 The whole FILL phrase :
    FILL name ! comment
       VAR1=VAl1 ! description
       .........
       VARn=VALn ! description

 is considered by the parser a single COMPLEX operator and CAN NOT be inter-
leaved by other comments or operators. 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

'Serial' attribute
===================

   Sometime one needs to build several exactly similar volumes but 
with different content(s). In a normal "DICE95" logic this does not
work in a simple way: because the volumes themselves are identic,
atlsim does create just one volume and your different content(s) will be
mixed there TOGETHER ! The way to overcome this is to declare to atlsim
that volumes are different even of all their parameters are the same.
This can be done or by a minor (physically not relevant) modification
of the volume dimensions or by using attribute SERIAL:
                            -------------------------

        Attribute name .... Serial=i

 It is evident that this should be declared before SHAPE operator.	
 Other attributes like colo or seen can be in future also used for
 this purpouse, but now FOR HISTORICAL reason their difference does
 not imply that volumes will be different.

Serial attribute can also be used to distinguish between other simular
GEANT volumes. Its value in the current sensetive volume is also saved 
in hits for any 'measurement' unknown to atlsim. Thus it can easely play
a role of a i.e. readout compartment number etc.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

HITS options and versions
=========================

The complete format of HITS(DIGI) operator is

           HITS name  measurement[=value]:bin or bit:OPTION(min,max) ...

1. option
   ------
There are following OPTIONS recognized by the atlsim by their 1st letter now:
(up to 4 options at a time):

R - Rounding   -  local  (for this measurement only):
    calculated bin size is rounded to 2 decimal digits 
S - SingleStep -  global (for all measurements, bit 1 in IOPTION) 
    Even if Geant breakes path in a sensetive volume into several
    steps, hit is regestered as if it was a single step from the
    entry to the exit point. 
C - Calorimery -  global (for all measurements, bit 4 in IOPTION)
    1 is saved in hits ITRACK instead of actual track number.
    This allows to sum up energies of all particles in the same 
    event in the cumulative part. pn: coded 28.05.95

Bits 2 and 3 in ioption are set to call local coordinate (and direction) 
calculation by aggstep

2. measurement=value
   -----------------

   This form defines a VERSION of the HITS operator with possibly different
parameters (limits, bin sizes) of the following measurements.
Any number of different versions of the HITS(DIGI) operator can be defined
in the increasing order of its values. 
When a hit is stored, the actual version of binning is choosen by selecting
the version with value less or equal within bin width to the first hit element.

   general comments
   ----------------
Number of measurments in a hit should not exceed 15, the number of cumulative
measurements should not exceed 10.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

                      More on Print Control
 
the basic variable for debugging printout is normally called IPRIN.
Except for geometry modules, where this variable comes from the common /AGECOM/,
in all your routines it is the user responsability to define this variable,
However one can use standard routines like ISLFLAG to get IPRIN in a general way
In Digitization modules as soon as you call any atlsim routines (AGFHIT etc)
these routines get there INTERNAL IPRIN in the same way as geometry modules.
 
This "system" IPRIN in interactive session is set by atlsim in the following
way  (SAME FOR ANY SUBSYSTEM in this case):
If the debug mode is OFF, it is always 0
if the debug mode is ON, it increases each time a new module is executed,
so if you repeate the same module several times in a debug mode, you get more
and more printouts.
 
In the BATCH mode this print level is set FOR each SUBSYSTEM separetly by
the MODE datacard, i.e.:
*MODE 'MUCH'  ...  'PRIN' x
*MODE 'FMUC'  ...  'PRIN' y
and not varied with the module execution
Moreover, in batch mode it is MAJORATED by the STAGE print levels defined
by simular datacards (if this datacard is absent, 1 is assumed):
*MODE 'GEOM' .... 'PRIN' a
*MODE 'DIGI' .... 'PRIN' b
*MODE 'RECO' .... 'PRIN' c
 
so in FMUCDIG you will have IPRIN set to y*b
and in MUCHGEO it will be x*a
 
this allows in a complicate system to debug only selected subsytems at selected
stages.
A fery important feature is that IF GEOM level on a detector datacard
is not set at all, or set to a non-positive value, the IPRIN flag is always
negative and all atlsim library routines returns a non-ok value, so everything
for this detector is skipped.
 
The function which follows all these rules and returns IPRIN flag in atlsim
is AGPFLAG(Cdet,Stage)  and this is a recomended mechanism for users print
flags too.
 
ISLFLAG(CDET,Cflag) is a SLUG routine (not defined yet it atlsim, but I'll
do it today). if Cflag='PRIN' it retuurns in a BATCH mode the same print flag
from the MODE datacard as described above (not modified by anything), but
can also return you other detector flags like IHIST, IMFLD etc.
For print control however it is an obsolete machanism and AGPLAG should be used.
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


Parameter access - PN 28.05.95
------------------------------

  If one needs to get in a subroutine banks defined in another module,
the following mechanism is recomended:	

  a) you define STRUCTUREs you want to get in the same way like they were
     defined in the original module;
  b) you read the them from ZEBRA storage using USE operator:     
     
          USE module/Tbank                      - for the top level bank
    then  USE module/Lbank variable=value       - for a lower level bank

     or  USE module/Tbank/Lbank  Variable=value - to get both banks filled
  c) you use variables from these banks in you routine as bank_variable.

example: to get banks from the GAASGEO module described in the Appendix 2
-------  of the manual (page 13) your routine should contain:

*
      Structure   GAAG { Version, Ndisc, DrCounter, DfCounter, DzCounter,
                         TCKsubs, TCKsupp, DXele, DYele, Dzele  }
      Structure   GDSi { Disc, RIdisc, ROdisc, ZDisc }
      . . . 
      USE      GAASGEO/GAAG
      do idisc=1,nint(GAAG_Ndisc)
         USE      GAASGEO/GDSi Disc=idisc
         Ri=gdsi_RIdisc
         ...
      enddo
*
Note: The consistance of the variables listed in the structure can be
      checked by the atlsim library. It is not yet coded but will be
      done in a future (any volonteers?)
      The check that a bank is found is nevertheless done by atlsim
      and you will get a diagnostic printed if it is not the case.
      The top level bank need not to be selected - the one which was USED
      in the geometry as selected by default and only this bank is retained
      in DETM after the geometry is closed (Not yet coded, i am afraid).


  The other possibility which also works but seems to be less convinient
is to copy a bank using RBCOPY, which was modified to allow the "unix-like"
navigation not only RECB tree, but also through the DETM tree.	The path
for this should start with //DETM, which HAS NO corresponding num element. 
( Attention! this is not logical and may be modified in the future).

example: to read same GAAG and GDSi banks one can also write:
-------

*   
      real     gaag(12),gdsi(6)
      integer  num(3)
      . . .
      num={1,1}
      call RBCOPY('//DETM/GAAS/GAAG',num,12,L1,gaag)
      do Idisc=1,nint(gaag(4))
         num={1,1,Idisc}
         call RBCOPY('//DETM/GAAS/GAAG/GDSI',num,6,L2,gdsi)
         Ri=gdsi(4)
         ...
      enddo

Note: Variables in gaag and gdsi arrays have an offset of 2 due to the system
      words reserved in ...(1) and ...(2).
      The first method return banks with selected value of the key variable,
      while the second access the bank using its sequencial number.
      If you set a "defaults directory" by calling RBCDIR, the second methode
      may be a bit faster.
      For those who is a "rigid fortran fun" :
           num={1,1}  
      is equivalent to
           num(1)=1
           num(2)=2

   And the last (third) possibility is to use SLGETBA - this work for the top
level bank only.


Geant volume parameters.
------------------------

Another set of parameters which users may need get access - volume dimension,
positions and rotation angles. 
For a sensetive set/det selected by a AGFHIT0,AGFDIG0 or AGFDIGI call,
each time when a new or digit is returned by AGFHIT1,AGFDIG1 or AGFDIGI
with certain volume identifiers NVL, call to AGFPATH(NVL) will restore
the GCVOLUM common block containing the volume position, address of its
parameters, full description of the path to it etc.

    This is how you can get for example some parameter of the actual 
sensetive volume (by the way, the same works in a user step routine):

+CDE,GCBANK,GCUNIT,GCVOLU.
     Character        Cname*4
 . . .
     If  (AGFHIT0(Cset,Cdet)!=ok)  Return
     do while (AGFHIT1(IH,ITRA,NVL,HITS) == ok)
       call AGFPATH(NVL)
*
       Iprin=1
       prin1 (NAMES (i),i=1,NLEVEL); (' path names  -',15(1x,a4))   
       prin1 (NUMBER(i),i=1,NLEVEL); ('   numbers   -',15i5)     
 
       IVO   = NUMBER(NLEVEL)          ! Actual GEANT volume number
       JVO   = LQ(JVOLUM-IVO)          ! pointer to the volume bank
       Call UHTOC(IQ(JVO-4),4,CNAME,4) ! get the volume generic name 
       nin   = Q(JVO+3)                ! number of contents
*
       JPAR  = LQ(JGPAR-NLEVEL)        ! also pointer to the volume parameters
*              JPAR should be JVO+6 for 'non GEANT developed' volume
       Npar  = nint(Q(JPAR-1)          ! number of volume parameters
       Call Ucopy(Q(JPAR+1),Par,Npar)  ! get a copy of actual volume parameters

GTRAN(i,NLEVEL), i=1-3 contains at that moment the actual volume position
and GRMAT(i,NLEVEL), i=1,9 contains its rotation matrix in Master Reference
system. For more details please read carefully GEOM 199.

This also works in the reconstruction phase when you get access to digits
with AgFDIGI:

     call AGFDIGI(Cset,Cdet,NVS,ITRA,NVL,DIGI,k,ia)
     call AGFPATH(NVL)
- to get the GCVOLU common restored.


A more interesting possibility is to get a full list of the sensetive volume
positions once at the begining of the reconstruction. This can be done using
AGDECODE routine. For a given sensitive detector this routine makes an ordered
table of "hyperplanes", each hyperplane been a known set of detectors
repeating themselves in phi or z(r) in a periodic way, also decoded by the
program. This description will be completed later.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Variable binning 
================

For many detectors the bin size varies from one part to another.
In e.m. calorimeter for it depends on the longitudinal compartment,
in SCT tracker on the layer number etc. DICE-95 allows you to have
different bins and even limits for hits and/or digits on the same 
logical detector. 

  this can be defined by giving different values

   HITS  NAME  measurement=value1:bin_or_bit:(a,b)  measurement2 ...
   HITS  NAME  measurement=value2:bin_or_bit:(a,b)  measurement2 ...

example for the barrel accordion:

   Deta = 0.025
   Dphi = TwoPi/256
   HITS STAC  compart=1:2:  eta:Deta/8:(0,1.4)  phi:dphi*4:(0,TwoPi)  Eloss:0:
   HITS STAC  compart=2:2:   eta:Deta:(0,1.4)    phi:dphi:(0,TwoPi)   Eloss:0:
   HITS STAC  compart=3:2:  eta:Deta*2:(0,1.4)  phi:dphi*2:(0,TwoPi)  Eloss:0:
*
this versioning should be defined in the first measurement.

When you read hits or digits back using AgFHIT0/1, AgFDIG0/1 or	AGFDIGI
you can access the actual binning information by making

    CALL AgFDPAR(HITS,CHIT*,ALIM*,BLIM*,BIN*)

where :
Real HITS(1) -  select the hit binning option
character*4 CHIT(*)  - name of the measurements
real ALIM(*)         - low limits
real BLIM(*)         - upper limits
real BIN(*)          - bin sizes

User should take of the actual dimension of all these arrays
 

ps. I feel the description is still too wage. Please make your comments !!!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


                        Reconstruction interface

the reconstruction interface includes digi access and geometry parameter access.

1. Access to digits.
   ================

   the access to GEANT digits is done by calling subroutine

       AGFDIGI(Cset,Cdet,NUMVS,ITRA*,NUMBV*,DIGI*,*IW*,IA*)

   where 
   Cset  - set identifier
   Cdet  - detector/volume identifier      
   NUMVS - 1D array that must contain on input the geometrical path
           of the detector volume to be selected
   ITRA  - the number of the track which produced this digitisation
   NUMBV - 1D array containing different measurement of the digitisation
           it is user's responsability to make sure it is big enouph to get
           all measurments defined.
   DIGI  - 1D array containing "measurements" in the order how they were
           defined by the DIGI operator
   IW    - on input -  sequential number of the digit after which the search
                       should start
           on output - sequential number of the digit found
   IA    - address of the returned digit in the IQ of the GEANT common GCBANK

  obsolete:  The first call to a new detecor should always start with IW=0
  now: any change in Cset,Cdet resets IW.

  The routine returns next digit element satisfiing the NUMVS mask and sets
  the IW value for sequential accees to next digit element.
  
  Because digits are produce sequentially, to get all digits in a selected
  element, user can store its initial IW value and the total number of digits
  in it somewhere in users memory. Those 2 numbers can later be used to effici-
  ently extract the full information on the selected element from DIGI bank.

  After a set/detector has been selected by the AGFDIGI call(* also by AGFDIG0),
  user can get the following information (* even if no digits were returned!):

  Call AGFPATH(NUMBV) restore the GEANT GCVOLU common block containing all
                      parameters of the corresponting volume and all its 
                      mothers, transformation matrixes etc.  
  
  Call AGFDPAR(HITS,CHIT,HITmin,HITmax,HITbin)
      
  - returns for the DIGI version corresponting to this HITS element:

    CHIT   - 1d character*4 array with names of the digit measurement
    HITmin - 1D real array with low limits of measurments
    HITmax - 1D real array with upper limits of measurments
    HITbin - 1D real array with bin sizes of measurments  

   Again, like for DIGI, the user should take care of the actual array
   dimensions to be sufficient.
   
   A recomended solution for all this array can be to always have there	
   a value like 15 - the absolute maximum hardwired in atlsim.

  Another access methode consist of AGFDIG0/AGFDIG1 routine simular to
  those used for hits. In this case user should be aware the these routines
  use an internal buffer /AGCBUFF/ for eventual digit ordering. So this methode
  can not be used for several detectors (Cset/Cdet) simultaniously.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Geometry information
 
AGDECODE provides a way to create a simplified description of the geometry
of sensitive detectors with a specific generic name or of selected part
of such detector. It takes the exact information on the detector positions
from the GEANT JVOLUM structure and tries to organise individual detectors
in "hyperplans" - a set of detector with know position repetitions in phi
or in z.
It also calculate for each plane the number of detectors in it and
consequently, assigns corresponding number of buffer cells to keep
it's digi pointer - the address of the its digits (address of the first
and the total number for each detector, because they are always consequtive).
 
      CALL AGDECODE('detecor_name',Itype)
 
detector_name - first 4 letters should coincide with the name of a
                sensetive volume where HITS or DIGI operator was defined
                '-i' may be added to the detector name in order to prevent
                topologically innermost i layers to be assigned a separate
                digi pointer.
                I.e for MDT if i=0, one will get table of digi
                pointers for each separate tube (5*10**5 pointers!)
                but if i=1 there will be separate pointer build only for each
                tube layer in each chamber
                When you will work with really complicate events (which I think
                Mark's program will not be able to deal with), you will see the
                usefulness of this pointers - you will not copy digit to any
                local array, but simple can address them directly in the GEANT
                bank as a function of x,y,z for example:
                x,y,z -> Iplane ->pointer -> list of hits
 
Itype - last decimal digit - classification type, for the moment:
        1- barrel type, ie planes are formed with detectors having the same R
           position of their middle point
        2- endcap type, ie planes are formed with detectors having same Z.
 
        the rest (if not 0) - detector selector. Only detectors with this value
        (or 0) of the SERIAL attributte (assigned in the geometry routine) are
        taken into account, so one can arbitrary split a complicate detector
        system in simpler pieces.


   The routine makes a scan over all geant Cdet volumes and makes
   an ordered list of "HYPERPLANES"

   Each hyperplane is a set of detectors with one of three known periodicity
   rules:
  
   detectors have a phi-symmetry (phi divisions were used)
   Fmin,Fmax, Fcent, delta phi and Nphi is provided

   detectors have a fixed z-step along the beam axes (not necessairely divisions)
   Zmin, Zmax, delta z an Nz is provided 

   detectors have a z-reflection positioning

   the set of rules can be extended in future

 

   Nump and different minus signs beforn counters like number of FMWI or FCLI
volumes and Nrz - are things which are needed to organize the efficient access
to digits.
 
   The idea here is to build a unique number which identify hits and a plane
where they has been registered. This is done using the following scheme:
 
Geant identifies a tube with an integer array NUMBV (see the GEANT manual for
details). For each volume which has branchings in the path to hits, an element
of the NUMBV defines which branch should be selected. If you do
                    dtree ATLT
(example below) you will find that to get any tube you have to make selections
in MMTI MMWI MCHI MLAY and in MSLI, others are irrelevant.
Now, what you have in MMWi is a DIVISION in phi, i.e you can calculate the i-th
plane position using simple formula. All such planes has a single entry  in the
table you got from agdecode, so your plane index NUMP should be the same for
all hits in different MMWI instances - this is ensured by making the correspondi
ng repetition counter negative.
Summarizing: if, when you get a hit/digi from geant you do the following calcula
tions with then NUMBV array, returned to you by AGFDIGI routine (atlsim analog
of GEANT GFDIGI):
 
            { NUMP,K,I1 }=0
            Do I=1,kkk
               if ( abs(NMX(i)>1 )  K=K+1
               if ( NMX(i)>1 )      NUMP=NUMP*NMX(i)+NUMBV(k)-1
               if ( I==kfi )        I1=NUMBV(k)
            enddo
 
- you will get the same Nump as it is written in the corresponding entry of the
table which you got from agdecode.
 
***************************************************
       module muanal is an example
* this is an example how to get mdt/rpc parameters
* using agdecode routine which put them in AGCRTAB
***************************************************
+CDE,GCUNIT.
      integer Iprin,ip,i
*  -----------------------------------------------------------------
*CDE,AGCRTAB: put it temporary here to make it more readable
*     Commons for the detector geometry reconstruction
      Integer           Lstack,     Lr,   Lhead,   Lpack
      Parameter        (Lstack=1000,Lr=15,Lhead=52,Lpack=512)
*
* subsystem descriptor:
      Integer          Isys,Nplane,Itp,Iset,Idet,kkk,kfi,krz,mrz,NumPmx,
                       Nadr,Istart,Inamd,Iaxr,Iaxt,Iaxz,Ires, nam,nmx
      Real             Rstack,drzm,RRmin,RRmax,ZZmin,ZZmax
*
      Common /AgCRtab/ Isys,Nplane,Itp,Iset,Idet,kkk,kfi,krz,mrz,drzm,
                       RRmin,RRmax,ZZmin,ZZmax,
                       NumPmx,Nadr,Istart,Inamd,Iaxr,Iaxt,Iaxz,Ires,
                       Nam(15),Nmx(15),  Rstack(Lr,Lstack)
      Integer                            Istack(Lr,Lstack)
      Equivalence      (Rstack,Istack)
*
*  plane descriptor
      Real             rzp,RZmin,RZmax,Fmin,Fmax,Dfi,Dzr,tilt,sas,Fcent
      Integer          Nfi,Nzr,Nump,Iadr,Jres
      Common /AgCRta1/ rzp,RZmin,RZmax,Fmin,Fmax,Dfi,Dzr,tilt,sas,Fcent,
                       Nfi,Nzr,Nump,Iadr,Jres
*                                            detector size
      Integer          Ishape,Npar
      Real                         AgTran,   AgRmat,    Par
      Common /ARCplan/ Ishape,Npar,AgTran(3),AgRmat(10),Par(50)
*     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*
* step - geometry decoding from geant:
*
       CALL AGDECODE('MTUI-1',1)
       Iprin=1
       Prin1 (nam(i),i=1,15); (' Names=',15(2x,a4))
       Prin1 (Nmx(i),i=1,15); (' LVmax=',15i6)
       Prin1 Itp,Nplane,kfi,krz,mrz,drzm,iaxr,iaxt,iaxz
             (' type',i2,' Nplane=',i3,' k=',2i3,i6,f8.3,' axes r,t,z=',3i2)
       Do ip=1,Nplane
       Call UCOPY(Rstack(1,ip),rzp,Lr)
       Prin1 rzp,RZmin,RZmax,Fmin,Fmax,Dfi,Dzr,tilt,sas,Fcent,Nfi,Nzr,Nump,Iadr
             (' R,z,F=',3F8.2,3F7.3,F8.2,3F7.4,' N=',3i4,i6,i4)
       enddo
*
* some comments:    - see drawing after the end of routine
* Each layer of each chamber in a multichamber is a PLANE in AGCRTAB common.
* For each ip-th plane CALL UCOPY(Rstack(1,ip),rzp,Lr) provide you:
*  rzp is the radius (tangent to the tube) for single layer in one chamber
*  RZmin,RZmax - z-position of the first tube in this layer
*  Fmin,Fmax - angular dimension, can be translated into tube length
*  dfi is the phi periodicity, i.e 2*pi/8  (corresponds to Nfi=8)
*  dzr = distance between tubes in the layer (3 cm always)
*  nzr - number of tubes in the layer (minus is an access flag, used later)
*
            ===========  <- a tube.
            \    i    /
             \   i<-------------- rzp  (at phi=Fcent)
              \  i  /
        Fzmin->\ i /<- Fzmax
                \i/
                 x - beam axis
 
In the Z:   First tube in a layer is at z=(RZmin+Rzmax)/2
....


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


AgFDPAR - getting back the digitization parameters
========

Call AgFDPAR(Digi,Cmeas*,Dmin*,Dmax*,Dwitdh*)

- returns parameters of the digitization in a SET/DETECTOR previously
selected by any of the following calls: AgFHIT0,AgFDIG0,AgFDIGI 
( The set become selected even if no digit exist in it).

Character*4 array Cmeas will contain after the call names of all measurements
in the corresponding digi operator, real arrays Dmin and Dmax will contain
limits of measurments, and the real array Dwidth will contain bin (strip) size.

User should take care of the array dimensions - they should be bigger
then the number of acyual measurments in the DIGI operator, no check is done
by the program.


If the slected DIGI operator had versions, the copy returned corresponds 
to the value in digi(1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


Miscelenious

Measurement 'eta' is always in MRS. Its automatic limits are set to (-5,5)
If positive limits are defined, abs(eta) will be saved.

Measurment 'phi' is automatically defined in (-pi,pi), but can be redefined
by user i.e. to (0,2pi). 
If low limit is zero or positive, negative phi get 2pi added.

As suggested by Rozanov:
When you define a mixture:
      component A ...
      component B ...
      component Z ...
      mixture   abz ...
- after the mixture is defined, the number of its elements (%NLMAT)
is set to zero, but the component table is still available. SO one can
for example define another mixture of A and B:
      %NLMAT=2
      mixture   AB ...

As suggested by Baranov:
If a component weight is <=0, the compunent should be skipped.
Does not work yet.
      
Conversion of measurements to integer in hit/digi packing is different from
GEANT rule: atlsim makes  ibin=Ifix((x-a)/bin)
            geant  makes  ibin=Nint((x-a)/bin)
So decoding of hit cumulative part is funny.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Essencial modifications to SLUG
  - DETE banks are now created with bank name equal to the detector name.
    this allows to use REBANK. The bank size is increased from 12 to 15 
    to store a detector associated routine address after SLUG flags
  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

KINE card (as introduce by A.Rozanov)
=====================================

   At present the KINE card in atlsim has the following format

               KINE ipart  vx vy vz  px py pz

where 
 - ipart is the GEANT particle code (1-photon, 48 - geantino etc)
 - vx,vy,vz is the starting particle position (cm)
 - px,py,pz is the starting particle momentum (GeV/c)

   If ipart is negative, the particle direction is uniformly selected 
within rapidity (-5,5) and phi (0,2pi).


A more general format of the KINE card using keywords is expected in the
future - volonteers to do the job are required.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DEBUG ON/OFF mode
=================

  When making simulations in the interactive atlsim, the following standard
GEANT routine is called if DEBUG ON was asserted. ISWIT values should be
filled by user with "SWIT i val" command before executing TRIG.

      SUBROUTINE GDEBUG
************************************************************************
*             Standard GEANT debug                                     *
*          ==>Called by : <USER>,GUSTEP                                *
************************************************************************
+SEQ,GCFLAG,GCKINE,GCTRAK.
*
*             Debug/plot event
      IF(IDEBUG=0) Return
*
        IF (ISWIT(2)=1 | ISWIT(2)=4 | ISWIT(3)=1)
*        Store space point VECT in banks JXYZ
     >                                             Call GSXYZ
        IF (ISWIT(2)=2)
*        Print track and volume parameters at current point
     >                                             Call GPCXYZ
         IF (ISWIT(1)=2)
*        Print kinematics of secondary tracks at the current interaction point
     >                                             Call GPGKIN
        IF (ISWIT(2)=3) then
*          do not trace uncharged particles
           IF(ISWIT(4)=3 & CHARGE=0) RETURN
*          Online display of the track trajectory
                                                   Call GDCXYZ
                                                   Call IGSA(0)
        ELSE IF(ISWIT(2)=4) THEN
*          Store space point VECT in banks JXYZ
           IF(ISTOP.NE.0)                          Call GDTRAK(' ')
        ENDIF
*
      END


SO to have a tracing printout you can do

GEANT> debug on
GEANT> swit 2 2
GEANT> trig

and to have charge tracks drawn you do:

GEANT> debug on
GEANT> swit 2 3
GEANT> swit 4 3
GEANT> trig




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Bugs/fix report

E.Nagy, 15.05.95
In simplest case, if the path to hits has only one level, the AgFGHIT1
does not get hits at all.    
- fixed

A.Rozanov, 20.05.95
The HIT format is misspelled in the manual on page 6 - min and max values
should be separated by a COMMA. The same separation in the example (page 16)
is correct. 

A.Rozanov, 27.05.95
In the iteractive running if one wants to run several digitization modules
on the same event, care should be taken to call first these digitization
modules just after geometry modules - BEFORE starting generating events	with
TRIG. 
The reason is that all HIT/DIGI structures in the Geant SETS tree should be 
ready before event simulation. It is not evident why this, but it is like this!

A nice example of the interactive reconstruction from Rozanov:

macro pixcand
debug off
exec agdrop('*')
exec mgeome atltgeo
exec mgeome coilgeo
exec mgeome pixbgeo
exec mgeome pixegeo
exec mgeome pixbdig
exec mgeome pixedig
call ggclos
call gphysi
next
dcut slug 1 0. 0. 0. 0.18 0.18
debug on
swit 2 3
swit 4 3
exec mgeome axxxprep
exec mgeome pixcand
kine -6 0 0 0 1000. 0. 0. 0.5
do i=1,100
  trig 1
  call agsflag('PRIN',4)
  call pixbdig
  call pixedig
  call axxxprep
  call pixcand
enddo
return

 22.06.05 RJD:
 USE module_name/top_bank       -    does not return the correct information
 USE module_name/low_bank variable-value  - does work correctly
 - geant parser definition of start-of subroutine actions corrected.



