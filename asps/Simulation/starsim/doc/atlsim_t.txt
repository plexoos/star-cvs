
  AGI/ATLSIM tutorial                           PG, IZ  06.02.97
                                                Draft 0
                                            (pN: a inache nado ubirat' 
                                             passage pro "main author")
 

Content.


1. General information about AGI/ATLSIM

1.1 A short history

1.2 What is AGI/ATLSIM?

1.3 How to install AGI/ATLSIM

1.3.1 AGI/ATLSIM directory organization
1.3.2 The installation procedure

1.4 How to run AGI/ATLSIM?


2. Getting started with AGI/ATLSIM 

2.1 General remarks

2.2 Detector geometry description by examples 

2.2.1 Geometry modules - general remarks
2.2.2 Calorimeter mother volume
2.2.3 Calorimeter consisting of 4 identical parts ("racks")
2.2.4 Rack consisting of iron-scintillator modules
2.2.5 More complicated example - limited streamer tubes
2.2.6 How to insert rack (2.2.4) into the whole calo (2.2.2)
2.2.7 The same for limited streamer tubes

2.3 Digitization and analysis by examples

2.3.1 General remarks
2.3.2 Digitization routine for iron-scintillator calorimeter

2.4 Detector simulation with AGI/ATLSIM by examples

2.4.1 General remarks
2.4.2 How to simulate response of iron-scintillator calorimeter?
2.4.3 Reading back events with AGI/ATLSIM banks 
      from earlier generated file

   
3. How to work with AGI/ATLSIM

3.1 Testing/debugging in AGI/ATLSIM

3.1.1 General comments.
3.1.2 Tracking in AGI/ATLSIM
3.1.3 Hints in tracking/debugging

3.2 HITs and DIGIts in AGI/ATLSIM

3.2.1 How ATLSIM invokes the digitization module?
3.2.2 How to access HITs to be digitized? How to book
      and fill DIGIt banks?
3.2.3 How to print HITs and DIGIts?

3.3 Documentation and input/output in AGI/ATLSIM

3.4 AGI/ATLSIM traps and caveats


4. AGI commands (AGUSER HELP)


5. More about AGI/ATLSIM

5.1 MODULEs and STRUCTUREs in AGI/ATLSIM

5.2 Critical comments to DICE95 manual and AGUSER help.

5.2.1 Critical comments to DICE95 manual
5.2.2 Critical comments to AGUSER HELP  

5.3 geAnt language syntax


Preface 


This note reflect a user's perception of basic AGI/ATLSIM concepts
and is not meant to provide exhaustive definitions of those
concepts. The purpose is, rather, to offer some initial guidance
for beginners who, after gaining some experience with
AGI/ATLSIM, would be able to address more technical but, 
unfortunately, rather sparse original documentation.
It is supposed that user works with PAW [1] and knows something
about detector simulation with standard GEANT [2] package
(tutorial section of GEANT manual only). 

This manual is organized as follows. 
Chapter 1 contains some important information about 
AGI/ATLSIM package. Simulation procedure with AGI/ATLSIM by examples 
is described in Chapter 2. Some more details are clarified in
Chapter 3. Chapter 4 represents online help about AGI commands.
Chapter 5 is intended for non-beginners.

1. General information about AGI/ATLSIM

1.1 A short history

Over past two decades, GEANT [2] was successfully
used for detector simulation. However, this large and complex
software package lacks a user friendly interface. Usually, a considerable time 
is spent for coding and debugging even for relatively simple applications, 
while for complicated cases, like simulation of collider or neutrino 
detectors, the code size and the maintenance efforts may become catastrophic. 

The software group of the ATLAS [3]
Collaboration has developed a high-level 
interface to GEANT called ATLSIM [4].

The similar package GSTAR used for the STAR [5]
experiment in BNL includes almost all of AGI/ATLSIM features and also
can be used for any detector simulations.

The main author of AGI/ATLSIM and AGI/GSTAR is Pavel Nevski [6]
(E-mail: Pavel.Nevski@cern.ch)

1.2 What is ATLSIM?
  
ATLSIM is an integrated environment for detector simulations
which contains standard CERNLIB [7] packages PAW, GEANT, ZEBRA [8],
geant programming language (preprocessor, fortran extension)
and advanced Interactive GEANT interface. 
For a user program it provides a general framework which can keep 
and transport data needed for detector simulation an analysis.

ANY fortran program is easily DYNAMICALLY linked to ATLSIM which 
saves user (and CPU) time for code development and debugging. 
Inside ATLSIM all detector simulation steps can be done: 
- setup geometry (and magnetic field) description
- simulation itself (tracking and creating detector hits)
- digitization
- reconstruction
- analysis 

BECAUSE ATLSIM performs all initialization, provides 
a standard data management and high level Geant interface, 
user programs become SIMPLER and more COMPACT.
Data produced by a user code is automatically DOCUMENTED.

ATLSIM environment provides safe and easy access to banks
and user friendly operation with hits and digits. It
also contains good tools for debugging and documentation.  

ATLSIM includes GHEISHA [9] and FLUKA [10] packages 
for simulation of hadronic interactions. Also GCALOR [11] library
is linked by default (now only for version for HP and DEC computers). 


1.3 How to install AGI/ATLSIM?

1.3.1 ATLSIM directory organization

     ATLSIM is set up on CERN Andrew File System (AFS) [12] at ATLAS 
test area, under the directory /afs/cern.ch/atlas/offline/test/atlsim.
The directory tree (see file /afs/cern.ch/atlas/offline/test/README 
for details) looks like this :

    /test/atlsim  
                  /doc        *.tex, *.ps
                  /src /cmz   atlsim.cmz
                  /@sys/bin   atlsim, geant3, geant3.def, Makefile, geom.kumac

1.3.2 The installation procedure

The installation procedure (file README under atlsim 
directory) is the following:

1. use as it is
================

   This directory branch contains atlsim source (in directory src/cmz)
and executables for the following platforms:

    hp    (in directories hp700_ux90, hp700_ux101)
    sgi   (in directory sgi_52)
    dec   (in directory alpha_osf32c)
    ibm   (in directory rs_aix32)
    sun   (in directories sun4c_411,sun4x_55,sun4m_54 etc)
    PC under Soliaris (sunx86_55)

   For each platform one should link (or copy) from directory @sys/bin
the following 5 files: 

    atlsim
    geant3
    geant3.def
    geom.kumac
    Makefile

It is also useful to COPY detm.rz file with initial documentation.
For ibm pltaform one more file is needed - atlsim_Import.map.

  

2. your own installation (result will be the same!)
===================================================

a. You need this or their equivalent to be defined locally (using ln -s):

 geant321.cmz -> /afs/cern.ch/asis/cern/95a/src/cmz/geant321.cmz
 zebra.cmz ->    /afs/cern.ch/asis/cern/95a/src/cmz/zebra.cmz
 zebpack.cmz ->  /afs/cern.ch/asis/cern/95a/src/cmz/zebpack.cmz
 comis.cmz ->    /afs/cern.ch/asis/cern/95a/src/cmz/comis.cmz

 cmz ->     local or /afs/cern.ch/asis/cern/cmz/1.48/bin/cmz
 kuipc ->   local or /afs/cern.ch/asis/cern/95a/bin/kuipc
 dzedit ->  local or /afs/cern.ch/asis/cern/95a/bin/dzedit

b. If you have `cernlib` command implemented (the one from 
   /afs/cern.ch/asis/cern/pro/bin), use 95a (or 94b) version:
`cernlib -v 95a geant321 pawlib graflib grafX11 packlib genlib kernlib`

 If not, please make available the following libraries:
 
 geant321 -> /afs/cern.ch/asis/cern/95a/lib/libgeant321.a
 pawlib  ->  /afs/cern.ch/asis/cern/95a/lib/libpawlib.a
 graflib ->  /afs/cern.ch/asis/cern/95a/lib/libgraflib.a
 grafX11 ->  /afs/cern.ch/asis/cern/95a/lib/libgrafX11.a
 packlib ->  /afs/cern.ch/asis/cern/95a/lib/libpacklib.a
 genlib  ->  /afs/cern.ch/asis/cern/95a/lib/libgenlib.a
 kernlib ->  /afs/cern.ch/asis/cern/95a/lib/libkernlib.a


c. you should link or copy:

atlsim.cmz  -> src/cmz/atlsim.cmz
install.xxx -> @sys/bin/install.xxx

d. If you have the right GCALOR library, please add
   SEL GCALOR in the last cmz step of the installation script
   and include it in the library list.

   Right GCALOR library now is included in atlsim executable
for HP and ALPHA (ATLAS software test area) and IBMRT platforms
(/afs/cern.ch/user/z/zucv5/public/atlsim/new)


3. Installation of ATLSIM with tutorial examples 

  If you have AFS account on HP or IBMRT computer at CERN
it is sufficient to copy to your working directory and execute 
files linkatlsimhp_with_examples 
from /afs/cern.ch/user/z/zuckerma/public/dice95nevski/demo 
and linkatlsimibmrt_with_examples placed in 
/afs/cern.ch/user/z/zucv5/public/atlsim directory respectively.

For ITEP Moscow SGI computer users (iris1.itep.ru) it is
strongly recommended to copy file 
/disk10/minos/zuckerma/ATLSIM/demosgi/itepatlsim in your
working directory and execute it. 

You will have all ATLSIM
staff with additional files used for demonstration of the
simplicity and power of this software package (see Chapter 2).


1.4 How to run AGI/ATLSIM?

o Interactive mode. 

  Type "atlsim" to login the
  environment. The prompt atlsim> will appear.
  Use "help" to see the list
  of possible commands. Type "help aguser" for
  AGI specific instructions. 
  User can exploit also all of PAW, interactive
  GEANT and ZEBRA DZDOC commands.

o Batch mode. 

  Like PAW, AGI/ATLSIM can be used in batch mode.
  You should provide a kumac files (for example, a.kumac)
  Type "atlsim -w 0 -l a.kumac > a.out"
  to run AGI/ATLSIM and write its output to file a.out  



2. Getting started with AGI/ATLSIM 

2.1 General remarks

Several examples below show you how simple is the
procedure of detector simulation and analysis in AGI/ATLSIM.
They are placed at CERN AFS at locations
/afs/cern.ch/user/z/zucv5/public/atlsim/demoibmrt
(version for IBMRT machines)
/afs/cern.ch/user/z/zuckerma/public/dice95nevski/demo 
(option for HP-computers). 

ITEP Moscow SGI computer (iris1.itep.ru) users can also look at
directory /disk10/minos/zuckerma/ATLSIM/demosgi. 

See also the third part of Chapter 1.3.2 

In other case, please, 
install ATLSIM yourself in accordance with the installation procedure 
(Chapter 1.3.2, parts 1 and 2) and try the examples below. 
The directories mentioned above contain links to atlsim related files 
(atlsim, atlsim.cmz, geant3, geant3.def, geom.kumac, Makefile), 
several *.g files 
(user routines with geometry description and analysis:
chrbgeo.g, chrmgeo.g, scnsgeo.g, scntgeo.g, strcgeo.g, strtgeo.g,
scntdig.g) and user kumacs 
(demo0.kumac and replay.kumac) for demonstration. Additional file
atlsim_Import.o is needed for IBMRT version.

We recommend you to create special directory for ATLSIM 
and copy to it *.g and *.kumac files mentioned above. 


2.2 Detector geometry description by examples

2.2.1 Geometry modules - general remarks

The geometry of your detector subsystem (drift chamber array,
limited streamer tubes etc.) is usually described in a separate
file with .g extension.
Each geometry MODULE (file xxxxgeo.g) contains: 

- header with the author name, the date of code creation and the
  list of geant volumes to be created (CONTENT).
   
- named STRUCTUREs with most important parameters (banks with
  geometrical sizes etc.), which may be potentially used 
  in another MODULEs. The special FILL construct 
  is needed to assign the values to these main variables.  

- Geant standard common blocks may be included according to cmz rules.
  Any auxiliary variables MUST be defined as in standard FORTRAN.

- BLOCKs for GEANT volume description (for details, see
  DICE95 manual, page 2).

To compile, link and execute a module the only command
"gexec xxxxgeo" should be executed after you start AGI/ATLSIM.
(a special geom.kumac may be used instead: "exec geom xxxxgeo"). 
During this procedure your xxxxgeo.g code will be translated to fortran 
(xxxxgeo.f), compiled (xxxxgeo.o) and then linked into so-called shared 
library (xxxxgeo.sl), loaded into AGI/ATLSIM memory and called.
If all steps are succesful, intermediate files are deleted.


The file detm.rz, updated after each "exec geom" procedure
contains description of structures and ZEBRA banks.
ZEBRA DZDOC command "disp detm" issued inside ATLSIM displays the
bank environment and allows you to navigate interactively through 
the tree of the created data structures, show, print or modify
their content.

To draw GEANT volume tree, separate volumes and their cut views
interactive GEANT commands DTREE, DRAW and DCUT can be used 
respectively. See XINT section of GEANT manual for more details.

Below you can find the examples how to create geometry 
of a simple calorimeter. Here three consecutive
asterisks (***) mark helpful information.

2.2.2       Calorimeter mother volume.

This code (chrbgeo module) describes the geometry of 
a calorimeter volume inserted into a general mother (hall). 
The last letters of the module name is "geo" for the geometry 
description:

*************************************************************
Module  CHRBGEO  is the geometry of calorimeter (only a box)
*************************************************************
*
***                   HEADER
*
Author   Ilya Zuckerman
Created  24 OCT 96
Content HALL,TACA
*
***            STRUCTUREs of variables (banks)
*
Structure CHRB {version,Xchrb,Ychrb,Zchrb}
Structure TACA {version,Xcal,Ycal,Zcal}
*
***            COMMON Blocks
*
+CDE,AGECOM,GCONST,GCUNIT.
*
***            local variables
*
*             none for the moment
*
*----------------------------------------------------------------
*
***  Filling STRUCTURES (comments after exclamation marks are MANDATORY)
*
     Fill CHRB           ! Mother Geometry Parameters
        version = 1    ! Baseline version
        Xchrb = 150    ! Half X-length of general mother volume 
        Ychrb = 72     ! Half Y-length of general mother volume 
        ZChrb = 72     ! Half Z-length of general mother volume 

     Fill TACA           ! Calorimeter Geometry Parameters
        version = 1    ! Baseline version 
        Xcal = 100     ! Half X-length of mother volume
        Ycal = 40      ! Half Y-length of mother volume
        Zcal = 40      ! Half Z-length of mother volume
*
***  USE operators are NECESSARY if you have SEVERAL geometry versions
***  or in the case of you what to change them with DATACARDs
*
     USE    CHRB  version=1
     USE    TACA  version=1  
*
***  The name of mother volume (HALL) in this example is NOT the same 
***  as first four letters of module name and main structure name (CHRB)
***  as it is so-called "global" module (Chapter 5.1)
*
     Create HALL
* 
* OO-stile: the only actions of the module are filling data and creating 
*           the HALL, the rest of the code explains HOW it will be done
*
*----------------------------------------------------------------
Block HALL is the Mother Volume  
*
*** Material definition
*
     Material Air 
*
*** Medium definition (no magnetic field)
*
     Medium Test Ifield=0
*
*** GEANT graphics attributes for volume drawing
*** For details, see SATT command in GEANT manual (XINT section)
*
     Attribute HALL  seen=1  colo=1
*
*** Definition of shape and sizes of the current volume
*
     Shape  BOX  dx=chrb_Xchrb  dy=chrb_Ychrb  dz=chrb_Zchrb
*
*** Creation and positioning of daughter volume at zero coordinates
*
     Create and Position TACA  
*
Endblock    
*----------------------------------------------------------------
Block TACA is the Calorimeter 
     Attribute TACA  seen=1  colo=1
     Material  lead
     Shape  BOX  dx=taca_Xcal  dy=taca_Ycal  dz=taca_Zcal
Endblock
*
END


pN: otchen' mnogo examplov, nado by sokratit', odin prosteishii i 
    paru po-slojnei - naprimer rack i schitilliator v nem


2.2.3  Calorimeter consisting of 4 identical parts (racks).

- chrmgeo.g  It is the same file as chrbgeo.g, but now
             4 empty racks are inserted to the calo mother. 

*************************************************************
Module  CHRMGEO  is the geometry of calorimeter (4 racks)
*************************************************************
Author   Ilya Zuckerman
Created  24 OCT 96
Content HALL,TACA,RACK
Structure CHRM {version,Xchrm,Ychrm,Zchrm}
Structure TACA {version,Xcal,Ycal,Zcal,Nrack,Xpos(4)}
Structure RACK {version,Xrack,Yrack,Zrack}
+CDE,AGECOM,GCONST,GCUNIT.
*
*** ALL auxiliary variables used in the module should be defined
*
integer i
*----------------------------------------------------------------
Fill CHRM           ! Mother Geometry Parameters
     version = 1    ! Baseline version
     Xchrm = 150     ! Half X-length of general mother volume 
     Ychrm = 72     ! Half Y-length of general mother volume 
     ZChrm = 72     ! Half Z-length of general mother volume 

Fill TACA           ! Calorimeter Geometry Parameters
     version = 1    ! Baseline version 
     Xcal = 100     ! Half X-length of mother volume
     Ycal = 40      ! Half Y-length of mother volume
     Zcal = 40      ! Half Z-length of mother volume
     Nrack   =  4   ! Number of racks
     Xpos={-75,-25,25,75} ! Rack centre positions in TACA frame  

Fill RACK           ! Rack Geometry Parameters
     version = 1    ! Baseline version 
     Xrack = 15     ! Half X-length of rack 
     Yrack = 40     ! Half Y-length of rack 
     Zrack = 40     ! Half Z-length of rack      

        USE    CHRM  version=1
        USE    TACA  version=1
        USE    RACK  version=1
*
***  The name of mother volume (HALL) in this example is NOT the same 
***  as first four letters of module name and main structure name (CHRM)
***  as it is so-called "global" module (Chapter 5.1)
*

        Create HALL
*----------------------------------------------------------------
Block HALL is Mother Volume  
     Material Air
     Medium Test Ifield=0 
     Attribute HALL  seen = 0  colo = 1
     Shape BOX  dx=chrm_Xchrm dy=chrm_Ychrm dz=chrm_Zchrm
     Create and Position TACA  
Endblock    
*----------------------------------------------------------------
Block TACA is the Calorimeter 
     Attribute TACA  seen = 1  colo = 1  fill = 0
     Shape BOX  dx=taca_Xcal dy=taca_Ycal dz=taca_Zcal
* 
*** 4 RACKs are positioned inside TACA via DO loop
* 
     do i=1,taca_Nrack
*
***  Two OVERLAPPING volumes are planned to be placed in TACA:
***  RACK and STRT (see example 2.2.6). It is the only reason for MANY flag
***  For more detailed information about GEANT VOLUMEs, see
***  GEOM part of GEANT manual
*
     Create and Position RACK x=taca_Xpos(i)  konly='MANY'
     enddo
Endblock
*----------------------------------------------------------------
 Block RACK is the rack of the Calorimeter 
     Attribute RACK  seen = 1  colo = 1  fill = 1
     Shape BOX  dx=rack_Xrack dy=rack_Yrack dz=rack_Zrack
 Endblock
End

2.2.4  Rack consisting of iron-scintillator modules

- scnsgeo.g  The geometry description of rack which
             contains iron and scintillator plates.
             In principle, it is possible to
             simulate responce of any subdetector unit
             WITHOUT loading the geometry of the whole detector.
             For this reason the detector subsystems 
             (iron-scintillator assemblies and streamer tubes
             in our case) are usually
             described in DIFFERENT *.g files (modules). 

************************************************************************
Module    SCNSGEO  is the geometry description of the module
************************************************************************
Author    Ilya Zuckerman
Created   23 OCT 96
+CDE,AGECOM,GCONST,GCUNIT.    
Content   SCNS,SCPL,SCIN,IRON
Structure SCNS {version,Nscns,Xscns,Yscns,Zscns}
Structure SCIN {version,Xmodu,Xscin,Xiron}
integer k
* -----------------------------------------------------------------
  FILL  SCNS             !  general parameters of mother volume
      version  =   1     !  version
      Nscns    =  8     !  Number of plates per rack
      Xscns    =  15     !  Half X-size of mother
      Yscns   =   40     !  Half Y-size of mother
      Zscns   =   40     !  Half Z-size of mother
*
  FILL  SCIN             !  general parameters of module
      version  =   1     !  version
      Xmodu    =   1.5   !  Half X-size of the module 
      Xscin    =   0.25  !  Half X-size of scintillator
      Xiron    =   1.25  !  Half X-size of iron            
      USE     SCNS   version=1
      USE     SCIN   version=1
*
*** The name of "non-global" volume (Chapter 5.1), the first four letters
*** of filename and main structure name are the same (SCNS)
*
       Create and Position SCNS
* ------------------------------------------------------
Block  SCNS  is the scintillator system mother
      Material Air
      Medium test  Ifield=0
      Attribute  SCNS  seen = 1 colo = 1  fill = 0  
      Shape  BOX  dx=scns_Xscns  dy=scns_Yscns  dz=scns_Zscns
*
*** Volume SCNS will be DIVIDED by several (equal) SCPL volumes
*** It is the reason that POSITION construct is absent
* 
      Create SCPL 
EndBlock
* -------------------------------------------------------
Block  SCPL  is a scintillator plane
      Attribute SCPL seen = 0 colo = 2  
*
*** In the case of volume DIVISIONING the name of shape 
*** is DIVIsion. Volume SCNS is divided along axis 1
*** For details, see GEOM part of GEANT manual
*
      Shape DIVIsion  Ndiv=scns_Nscns  Iaxis=1
      Create and Position IRON  x=-scin_Xmodu+scin_Xiron
      Create and Position SCIN  x=scin_Xmodu-scin_Xscin
EndBlock
* ------------------------------------------------------
Block  IRON  is the iron absorber
      Material Iron
      Attribute  SCNS  seen = 1 colo = 5  fill = 1
*
*** The parameters of mother volume are INHERITED to daughter
*** by default, so dy and dz are the same as for SCPL volume
*** For details, see DICE95 manual
*
      Shape  BOX  dx=scin_Xiron  
EndBlock
*----------------------------------------------------------------
Block SCIN is the active scintillator
*
*** Creating MIXTURE of two components with density 1.032
*** For details, see DICE95 manual
*
    Component H   A=1.01  Z=1    W=1
    Component C   A=12.01 Z=6    W=1
    Mixture Polystyren  Dens=1.032
*
*** SCIN is considered as ACTIVE detector (i.e, contains HITS)
*** Isvol=1 means that current medium is ACTIVE
*
    Medium Sensiscin Isvol=1
    Attribute SCIN  seen = 1  colo = 6  fill = 1
    Shape BOX  dx=scin_Xscin
*
*** Sensitive volume SCIN will be divided by: 
*** 2**5 pseudodivisions on X (5 bits)
*** 2**4 pseudodivisions on Y (4 bits)
*** 2 pseudodivisions on Z  and 
*** also hits occured in each X,Y and Z pseudocells defined above 
*** with different time-of-flight with 1 ns precision in the interval 
*** from 0 to 1 second are considered as SEPARATE.
*** All the variables with zero number of bits are considered as cumulative 
*** sum inside current pseudodivision and occupy full computer word (32 bits). 
*** They are used usually for energy loss calculations.
*** For details, see DICE95 manual and Chapter 2.3 of the Manual. 
*
    HITS  SCIN  X:5:  y:5:  z:1:  tof:1.e-9:(0,1)  eloss:0:
Endblock
End

2.2.5  More complicated example - limited streamer tubes.

- strcgeo.g  The detailed description of geometry of streamer tubes
             Only a few pages of code are required for such a
             complicated system with 10-level tree in contrary to
             ordinary GEANT
 
************************************************************************
Module    STRCGEO  is the geometry description of the streamer tubes
************************************************************************
Author    Ilya Zuckerman
Created   24 OCT 96
+CDE,AGECOM,GCONST,GCUNIT.
      Real xstrc,x2,x3,x4,vhangle,sgap
Content   STRC,SPLA,SBOX,SCHA,SBCO,SCOM,SPRO,SWIR,SGAS, _
          ALUM,ANAL,SHEE,STRI,WIRE
Structure STRC {version,Npla,Dxalum,Dxanal,Xmodu,Ymodu,Zmodu}
Structure SPLA {Across,Along,Dxinner,Dxouter,Dxslee,Ncham,Ycham, _
                Ncomb,Ycomb,Ygap,Nwire,Yprob,Xprob,Yprof,Ytube, _
                Xtube,Xoff,Rwire}
Structure STRI {Xstri,Xshee}
* -----------------------------------------------------------------
  FILL  STRC                    !  general parameters of mother volume
      version  =   1            !  version
      Npla     =   1            !  number of planes in the rack
      Dxalum   =   0.05         !  Half X-thickness of Al shee
      Dxanal   =   0.055        !  Half X-thickness of analog strips
      Xmodu    =   0.775        !  X half-size of the whole assembly
      Ymodu    =   40           !  Y half-size of the whole assembly
      Zmodu    =   40           !  Z half-size of the whole assembly
* ------------------------------------------------------
  FILL  SPLA                    !  streamer tube plane
      Across   =  66.8          !  dimension across the wires
      Along    =  68.           !  dimension along the wire  
      Dxinner  =    0.47        !  inner half-thickness of streamer module
      Dxouter  =    0.67        !  outer half-thickness of streamer module
      Dxslee   =    0.57        !  outer half-thickness w/o sleeve walls
      Ncham    =  4             ! Number of chambers (16*wires) in the plane
      Ycham    =    8.33        ! Half Y-width of chambers 
      Ncomb    =   2            ! Number of combs per chamber 
      Ycomb    =   4.095        !  Half Y-width of combs
      Ygap     =   0.04         !  Half Y-width of gap between combs
      Nwire    = 8              ! Number of tubes per comb
      Yprob    = 4.05           ! Half Y-width of profile box
      Xprob    = 0.525          ! Half X-thickness of profile box
      Yprof    = 4.00           ! Half Y-width of profile 
      Ytube    = 0.45           ! Half Y-width of wire cell without walls
      Xtube    = 0.45           ! Half X-thickness of wire cell without walls
      Xoff     = 0.025          ! X offset of active cell inside the profile
      Rwire    = 0.0045         ! Radius of the wire

   FILL  STRI                   ! analog strip plate
      Xstri    = 0.0025         ! Half X-thickness of analog strips
      Xshee    = 0.0025         ! Half X-thickness of sheet for analog strips
*
*** The name of "non-global" volume (Chapter 5.1), the first four letters
*** of filename and main structure name are the same (STRC)
*

      USE     STRC   version = 1
      Create and Position STRC in RACK   konly='MANY'
* ------------------------------------------------------
Block  STRC  is the streamer tube system
      Material  Air
      Medium Test Ifield=0
      Attribute STRC     seen=1 colo=1 fill=1
       Shape     BOX  dx=strc_Xmodu  dy=strc_Ymodu  dz=strc_Zmodu
      x2=-strc_Xmodu+strc_Dxalum
      x3=x2+strc_Dxalum+spla_Dxouter
      x4=x3+spla_Dxouter+strc_Dxanal 
        Create and Position ALUM x=x2  
        Create and Position SPLA x=x3  
        Create and Position ANAL x=x4
EndBlock
* -------------------------------------------------------
Block  SPLA  is a streamer tube plane
      Attribute SPLA     seen=1 colo=7  fill=1
      Shape     BOX  dx=spla_Dxouter dy=spla_Across/2. _
                     dz=spla_Along/2.
      Create SBOX
EndBlock
*----------------------------------------------------------------
Block SBOX is the sleeve boxes for streamer chambers
    Attribute SBOX  seen = 0  colo = 2
    Shape DIVIsion Iaxis=2 Ndiv=spla_Ncham
    Create and Position SCHA  x=0  y=0 
Endblock
*----------------------------------------------------------------
Block SCHA is the sleeve
    Attribute SCHA  seen = 1  colo = 3  fill = 1
    Component H   A=1.01  Z=1    W=3
    Component C   A=12.01 Z=6    W=2
    Component Cl  A=35.45 Z=17   W=1
    Mixture PVC   Dens=1.39   
    Shape BOX  dy=spla_Ycham 
    Create SBCO  
    Position SBCO  y=spla_Ygap+spla_Ycomb
    Position SBCO  y=-(spla_Ygap+spla_Ycomb)
Endblock
*----------------------------------------------------------------
Block SBCO is the half-sleeve
    Attribute  SBCO  seen=0  
    Component Ar  A=39.95 Z=18   W=3.5
    Component C   A=12.01 Z=6    W=3.
    Component H   A=1.01  Z=1    W=7.5
    Mixture Isobutan  Dens=0.00231
    Attribute SBCO  seen = 1  colo = 5  fill=1
    Shape BOX  dx=spla_Dxslee  dy=spla_Ycomb
    Create and Position SCOM  y=0
Endblock
*----------------------------------------------------------------
Block SCOM is the profile box
    Attribute  SCOM  seen=1  colo=7  fill=1  
    Mixture PVC   Dens=1.39   
    Attribute SCOM  seen = 1  colo = 4
    Shape BOX  dx=spla_Xprob  dy=spla_Yprob 
    Create and Position SPRO
Endblock
*----------------------------------------------------------------
Block SPRO is the profile 
    Attribute SPRO  seen = 0  colo = 6
    Shape BOX  dy=spla_Yprof
    Create SWIR
Endblock
*----------------------------------------------------------------
Block SWIR is the wire cell
    Attribute SWIR  seen = 0  colo = 1
    Shape DIVIsion Iaxis=2 Ndiv=spla_Nwire
    Create and Position SGAS  x=spla_Xoff
Endblock
*----------------------------------------------------------------
Block  SGAS  is the sensitive part of the streamer tube
    Mixture Isobutan  Dens=0.00231
      Attribute SGAS seen=1 colo=5  fill=1
* 
*** Stemax is maximal GEANT step length inside the volume
*
      Medium  Sensitube  Isvol=1  Stemax=spla_Xtube/10
      Shape     BOX    dx=spla_Xtube  dy=spla_Ytube
      HITS  SGAS  x:0.005: y:0.005: z:0.05: step:0.005: 
    Create and Position  WIRE  x=0  y=0  z=0 
EndBlock
* -------------------------------------------------------
Block  WIRE  is a sensitive wire
      Material Copper      
      Attribute WIRE  seen=1 colo=166 fill=1
      Shape     BOX   dx=spla_Rwire  dy=spla_Rwire _
                      dz=spla_Along/2.
EndBlock
* -------------------------------------------------------
Block  ALUM  is a sheet
    Material Aluminium      
      Attribute ALUM     seen=1 colo=1 fill=1
      Shape     BOX  dx=strc_Dxalum dy=spla_Across/2. _
                     dz=spla_Along/2.
EndBlock
* -------------------------------------------------------
Block  ANAL  is array for strips
      Mixture PVC  Dens=1.39
      Attribute ANAL     seen=1 colo=2  fill=1
      Shape     BOX  dx=strc_Dxanal dy=spla_Along/2. _
                     dz=spla_Across/2.
      Create and Position STRI x=-strc_Dxanal+stri_Xstri
      Create and Position SHEE x=strc_Dxanal-stri_Xshee      
Endblock
* -------------------------------------------------------
Block  STRI  is analog strip plane
    Material Aluminium      
      Attribute STRI     seen=1 colo=1 fill=1
      Shape     BOX  dx=stri_Xstri 
EndBlock
* -------------------------------------------------------
Block  SHEE  is a sheet
    Material Aluminium      
      Attribute SHEE     seen=1 colo=1 fill=1
      Shape     BOX  dx=stri_Xshee
EndBlock
End

2.2.6  How to insert rack (2.2.4) into 
       the whole calo (2.2.2)

* scntgeo.g   This file is almost the same as scnsgeo.g except
              here the iron-scintillator assemblies are inserted 
              in the rack of the calorimeter.

************************************************************************
Module    SCNTGEO  is the geometry description of the module
************************************************************************
Author    Ilya Zuckerman
Created   23 OCT 96
+CDE,AGECOM,GCONST,GCUNIT.    
Content   SCNT,SCPL,SCIN,IRON
Structure SCNT {version,Nscnt}
Structure SCIN {version,Xmodu,Xscin,Xiron}
*
***  The next structure will be extracted from ANOTHER module
*
Structure RACK {version,Xrack,Yrack,Zrack}
integer k
* -----------------------------------------------------------------
  FILL  SCNT             !  general parameters of mother volume
      version  =   1     !  version
      Nscnt    =   10    !  Number of plates per rack
*
  FILL  SCIN             !  general parameters of module
      version  =   1     !  version
      Xmodu    =   1.50  !  Half X-size of module
      Xscin    =   0.25  !  Half X-size of scintillator
      Xiron    =   1.25  !  Half X-size of iron            
      USE     SCNT   version=1
      USE     SCIN   version=1
*
***  Now we use RACK structure from the module CHRMGEO
***  To know the path to this structure you can issue
***  the command "disp detm detm.rz" after loading your
***  chrmgeo module
*
      USE  CHRMGEO/CHRM/RACK  version=1
*
***  You can place your SCNT volume into volume
***  from another module. The USE operator defined above
***  allow you to have an access to RACK structure.
*   
*
*** The name of "non-global" volume (Chapter 5.1), the first four letters
*** of filename and main structure name are the same (SCNT)
*

      Create and Position SCNT in RACK   
* ------------------------------------------------------
Block  SCNT  is the scintillator system mother
      Material Air
      Medium test  Ifield=0
      Attribute  SCNT  seen = 1 colo = 1  fill = 0  
      Shape  BOX  dx=rack_Xrack  dy=rack_Yrack  dz=rack_Zrack
      Create SCPL
EndBlock
* -------------------------------------------------------
Block  SCPL  is a scintillator plane
      Attribute SCPL seen = 0 colo = 2  
      Shape DIVIsion  Ndiv=scnt_Nscnt  Iaxis=1
      Create and Position IRON  x=-scin_Xmodu+scin_Xiron
      Create and Position SCIN  x=scin_Xmodu-scin_Xscin
EndBlock
* ------------------------------------------------------
Block  IRON  is the iron absorber
      Material Iron
      Attribute  SCNT  seen = 1 colo = 5  fill = 1
      Shape  BOX  dx=scin_Xiron  
EndBlock
*----------------------------------------------------------------
Block SCIN is the active scintillator
    Component H   A=1.01  Z=1    W=1
    Component C   A=12.01 Z=6    W=1
    Mixture Polystyren  Dens=1.032
    Medium Sensiscin Isvol=1
    Attribute SCIN  seen = 1  colo = 6  fill = 1
    Shape BOX  dx=scin_Xscin
    HITS  SCIN  x:1:  y:1:  z:1:  tof:1.e-9:(0,1)  eloss:0:
Endblock
End

2.2.7  The same for limited streamer tubes

* strtgeo.g  The same streamer chambers, described in
             strcgeo.g but inserted to the calorimeter
             between racks
 
************************************************************************
Module    STRTGEO  is the geometry description of the streamer tubes
************************************************************************
Author    Ilya Zuckerman
Created   24 OCT 96
+CDE,AGECOM,GCONST,GCUNIT.
      Integer L,Kaxis
      Real xstrt,x2,x3,x4,vhangle,sgap
Content   STRT,SPLA,SBOX,SCHA,SBCO,SCOM,SPRO,SWIR,SGAS, _
          ALUM,ANAL,SHEE,STRI,WIRE
Structure STRT {version,Npla,Dxalum,Dxanal,Xpos(3),Nplane, _
                Xmodu,Ymodu,Zmodu}
Structure SPLA {Across,Along,Dxinner,Dxouter,Dxslee,Ncham,Ycham, _
                Ncomb,Ycomb,Ygap,Nwire,Yprob,Xprob,Yprof,Ytube, _
                Xtube,Xoff,Rwire}
Structure STRI {Xstri,Xshee}
integer ii
* -----------------------------------------------------------------
  FILL  STRT                    !  general parameters of mother volume
      version  =   1            !  version
      Npla     =   1            !  number of planes in the rack
      Dxalum   =   0.05         !  Half X-thickness of Al shee
      Dxanal   =   0.055        !  Half X-thickness of analog strips
      Xpos     ={-50,0,50}      !  Position of centre of tube array in taca   
      Nplane   =   3            !  Number of streamer tube planes
      Xmodu    =   0.775        !  X half-size of the whole assembly
      Ymodu    =   40           !  Y half-size of the whole assembly
      Zmodu    =   40           !  Z half-size of the whole assembly
* ------------------------------------------------------
  FILL  SPLA                    !  streamer tube plane
      Across   =  66.8          !  dimension across the wires
      Along    =  68.           !  dimension along the wire  
      Dxinner  =    0.47        !  inner half-thickness of streamer module
      Dxouter  =    0.67        !  outer half-thickness of streamer module
      Dxslee   =    0.57        !  outer half-thickness w/o sleeve walls
      Ncham    =  4             ! Number of chambers (16*wires) in the plane
      Ycham    =    8.33        ! Half Y-width of chambers 
      Ncomb    =   2            ! Number of combs per chamber 
      Ycomb    =   4.095        !  Half Y-width of combs
      Ygap     =   0.04         !  Half Y-width of gap between combs
      Nwire    = 8              ! Number of tubes per comb
      Yprob    = 4.05           ! Half Y-width of profile box
      Xprob    = 0.525          ! Half X-thickness of profile box
      Yprof    = 4.00           ! Half Y-width of profile 
      Ytube    = 0.45           ! Half Y-width of wire cell without walls
      Xtube    = 0.45           ! Half X-thickness of wire cell without walls
      Xoff     = 0.025          ! X offset of active cell inside the profile
      Rwire    = 0.0045         ! Radius of the wire

   FILL  STRI                   ! analog strip plate
      Xstri    = 0.0025         ! Half X-thickness of analog strips
      Xshee    = 0.0025         ! Half X-thickness of sheet for analog strips

      USE     STRT   version = 1
      do ii=1,strt_Nplane
*
***  Two overlapping volumes are placed in TACA:
***  RACK and STRT. It is the reason for MANY flag
*
*
*** The name of "non-global" volume (Chapter 5.1), the first four letters
*** of filename and main structure name are the same (STRT)
*

      Create and Position STRT in TACA   konly='MANY' _
      x=strt_Xpos(ii)
      enddo
* ------------------------------------------------------
Block  STRT  is the streamer tube system
      Material  Air
      Medium Test Ifield=0
      Attribute STRT     seen=1 colo=1 fill=1
      Shape  BOX  dx=strt_Xmodu  dy=strt_Ymodu  dz=strt_Zmodu
      x2=-strt_Xmodu+strt_Dxalum
      x3=x2+strt_Dxalum+spla_Dxouter
      x4=x3+spla_Dxouter+strt_Dxanal
        Create and Position ALUM x=x2  
        Create and Position SPLA x=x3  
        Create and Position ANAL x=x4 
EndBlock
* -------------------------------------------------------
Block  SPLA  is a streamer tube plane
      Attribute SPLA     seen=1 colo=7  fill=1
      Shape     BOX  dx=spla_Dxouter dy=spla_Across/2. _
                     dz=spla_Along/2.
      Create SBOX
EndBlock
*----------------------------------------------------------------
Block SBOX is the sleeve boxes for streamer chambers
    Attribute SBOX  seen = 0  colo = 2
    Shape DIVIsion Iaxis=2 Ndiv=spla_Ncham
    Create and Position SCHA  x=0  y=0 
Endblock
*----------------------------------------------------------------
Block SCHA is the sleeve
    Attribute SCHA  seen = 1  colo = 3  fill = 1
    Component H   A=1.01  Z=1    W=3
    Component C   A=12.01 Z=6    W=2
    Component Cl  A=35.45 Z=17   W=1
    Mixture PVC   Dens=1.39   
    Shape BOX  dy=spla_Ycham 
    Create SBCO  
    Position SBCO  y=spla_Ygap+spla_Ycomb
    Position SBCO  y=-(spla_Ygap+spla_Ycomb)
Endblock
*----------------------------------------------------------------
Block SBCO is the half-sleeve
    Attribute  SBCO  seen=0  
    Component Ar  A=39.95 Z=18   W=3.5
    Component C   A=12.01 Z=6    W=3.
    Component H   A=1.01  Z=1    W=7.5
    Mixture Isobutan  Dens=0.00231
    Attribute SBCO  seen = 1  colo = 5  fill=1
    Shape BOX  dx=spla_Dxslee  dy=spla_Ycomb
    Create and Position SCOM  y=0
Endblock
*----------------------------------------------------------------
Block SCOM is the profile box
    Attribute  SCOM  seen=1  colo=7  fill=1  
    Mixture PVC   Dens=1.39   
    Attribute SCOM  seen = 1  colo = 4
    Shape BOX  dx=spla_Xprob  dy=spla_Yprob 
    Create and Position SPRO
Endblock
*----------------------------------------------------------------
Block SPRO is the profile 
    Attribute SPRO  seen = 0  colo = 6
    Shape BOX  dy=spla_Yprof
    Create SWIR
Endblock
*----------------------------------------------------------------
Block SWIR is the wire cell
    Attribute SWIR  seen = 0  colo = 1
    Shape DIVIsion Iaxis=2 Ndiv=spla_Nwire
    Create and Position SGAS  x=spla_Xoff
Endblock
*----------------------------------------------------------------
Block  SGAS  is the sensitive part of the streamer tube
    Mixture Isobutan  Dens=0.00231
      Attribute SGAS seen=1 colo=5  fill=1
      Medium  Sensitube  Isvol=1  Stemax=spla_Xtube/10
      Shape     BOX    dx=spla_Xtube  dy=spla_Ytube
      HITS  SGAS  x:0.005: y:0.005: z:0.05: step:0.005: 
    Create and Position  WIRE  x=0  y=0  z=0 
EndBlock
* -------------------------------------------------------
Block  WIRE  is a sensitive wire
      Material Copper      
      Attribute WIRE  seen=1 colo=166 fill=1
      Shape     BOX   dx=spla_Rwire  dy=spla_Rwire _
                      dz=spla_Along/2.
EndBlock
* -------------------------------------------------------
Block  ALUM  is a sheet
    Material Aluminium      
      Attribute ALUM     seen=1 colo=2 fill=1
      Shape     BOX  dx=strt_Dxalum dy=spla_Across/2. _
                     dz=spla_Along/2.
EndBlock
* -------------------------------------------------------
Block  ANAL  is array for strips
    Mixture PVC  Dens=1.39
      Attribute ANAL     seen=1 colo=2  fill=1
      Shape     BOX  dx=strt_Dxanal dy=spla_Along/2. _
                     dz=spla_Across/2.
      Create and Position STRI x=-strt_Dxanal+stri_Xstri
      Create and Position SHEE x=strt_Dxanal-stri_Xshee      
Endblock
* -------------------------------------------------------
Block  STRI  is analog strip plane
    Material Aluminium      
      Attribute STRI     seen=1 colo=1 fill=1
      Shape     BOX  dx=stri_Xstri 
EndBlock
* -------------------------------------------------------
Block  SHEE  is a sheet
    Material Aluminium      
      Attribute SHEE     seen=1 colo=1 fill=1
      Shape     BOX  dx=stri_Xshee
EndBlock
End



2.3  Digitization and analysis by examples

2.3.1 General remarks.

As any .g file, digitization MODULE contains header
and (if needed) structures. The main part is always consists of
ATLSIM routines to access hits (AGFHIT0, AGFHIT1).
Routine AGSDIG1 is used to store single digit. The digitization
module usually has form xxxxdig.g. Optionally you can perform
reconstruction and analysis inside this routine.
For details, see Chapter 3.2 and DICE95 manual.

2.3.2  Example of digitization routine of spectrometer scintillator

- scntdig.g

********************************************************************
Module     SCNTDIG is the digitization of the spectrometer scint
********************************************************************
Author     Ilia Tsoukerman
Created    17 October 96
+CDE,GCONST,GCUNIT.
*
Structure SCND {version,Emax,Tofst,Tofmax}
*
* NUMBV,HITS and DIGI are arrays to contain elements of a single HIT/DIGI
* their maximum depth allowed by Geant3 is 15 
*
   INTEGER    NV,NH,ND,Nhits
   PARAMETER  (NV=15,NH=15,ND=15)
   INTEGER    NUMBV(NV),AgFHIT0,AgFHIT1,AgSDIG1,LTRA,IH,Iprin/0/
   REAL       HITS(NH),DIGI(ND),Etot,Eact

*  ----------------------------------------------------------------------
* begin is an AGE test of a permission for the module to work.
* It is controled by the MODE command and also returns IPRIN variable
* used as verbosity level for print statements
* Module also has internal useful definitions: 
*      logical FIRST/.true./  and  Integer OK/0/
*
 Begin
*
 If (FIRST) then
    FIRST   = .false.
*
    Fill SCND                   !  Digitization parameters
         Version =  1           !  version
         Emax    =  10          ! Max energy
         Tofst   =  1.e-9       ! TOF step
         Tofmax  =  0.5e-6      ! Max TOF
    Endfill
*
    DIGI  SCIN  Sigt:scnd_Tofst:(0,scnd_Tofmax)  Evis:0:(0,scnd_emax) 
 endif

*  ----------------------------------------------------------------------
     Eact=0.
     If (AgFHIT0('SCNT','SCIN') != ok) Return

     DO While (AgFHIT1(IH,LTRA,NUMBV,HITS) == Ok)
       if(abs(IH).eq.1) then ! next scintillation counter
          Etot=0.
	  Nhits=0	
       endif
	 
       call hfill(102,hits(4)*1.E3,0.,1.) ! fill in microseconds
       eact=eact+hits(5) ! full energy deposition
       etot=etot+hits(5) ! energy per each plate
       Nhits+=1
       IF (IH<0) then ! this is the last hit in this scintillator         
*                       ...  all hits in this active element done
	  call hf1(103,float(Nhits),1.) ! Nhits per scintillator 
          DIGI(1) = hits(4)             ! Time of flight of the last hit
          DIGI(2) = Etot                ! energy per schintillator
          If (AGSDIG1(LTRA,NUMBV,DIGI) != ok) return
          EndIF
*
     EndDO
     call hfill(101,eact,0.,1.)
*
END



2.4  Detector simulation with AGI/ATLSIM by examples

2.4.1 General remarks

To simulate detector response you need to
write geometry module(s) (xxxxgeo.g,...,zzzzgeo.g),
digitization module(s) (xxxxdig.g,...,zzzzdig.g)
and provide your kumac file with AGI (see AGUSER HELP),
interactive GEANT, PAW and ZEBRA DZDOC commands.
  
2.4.2 How to simulate response of iron-scintillator calorimeter? 

- demo0.kumac 

 gdebug 0 0    | These two commands should NOT normally be used together
 debug off     | to suppress all internal ATLSIM prints - THIS IS DEFAULT
 
* dopt hide on | GEANT option for drawing
 
 colord='N'
 read colord 'Do you have a color screen? (Y/N)'
 if [colord]  = 'Y' THEN
   dopt shad on
 ELSE
   dopt shad off
 ENDIF
 
 next 
 mess
 mess
 mess step 1 (chrbgeo.g) - define a master volume (a "hall")
 mess '       and  put the calorimeter mother volume in it'
 mess
 gdrop *
 exec geom chrbgeo		| compile and link calorimeter box geometry
 gclose
 draw taca 40 40 0 10 10 .05 .05
 wait ' ' 0
 
 next | clear screen
 mess
 mess
 mess step 2 (chrmgeo.g) - create the calorimeter volume with
 mess '       4 racks'
 mess
 gdrop *  ! drop all banks
 exec geom chrmgeo  | compile and link calo with 4 racks
 gclose
 dcut taca 3 0 10 10 .05 .1
 wait ' ' 0
 
 next
 mess
 mess
 mess step 3 (scntgeo.g) - design the rack: it consists of
 mess '       8 iron/scintillator planes'
 mess
gdrop * 
 exec geom scnsgeo  | compile and link scintillator plates
 gclose
 dcut scns 3 0 10 10 .2 .3 | draw scintillators
 wait ' ' 0
 
 next
 mess
 mess
 mess step 3 (strcgeo.g) - more complicated design: 
 mess '        limited streamer tubes'
 mess
 gdrop *
 exec geom strcgeo  | compile and link streamer chambers
 gclose
 dcut strc 3 0 10 10 1 1 | draw streamer chambers
 wait ' ' 0
 
 next
 mess
 mess
 mess step 3 ...continued: streamer tubes, more detailed view
 mess        
 mess
 dcut strc 3 0 10 10 5 5 | draw streamer chambers at scale 5
 wait ' ' 0
 
 next
 mess
 mess
 mess step 4 (chrmgeo.g/scntgeo.g/strtgeo) - now  compile everything
 mess '        together and display the resulting DETM (DETector Main)'
 mess '        bank structure.'
 mess '        Click on any box (or above any box) to display the bank'
 mess '        contents'
 mess '        Click the right mouse button on the graphics screen to continue'
 mess
 mess

 gdrop *
 exec geom chrmgeo  | compile and link calo with racks
 exec geom scntgeo  | compile and link scintillators
 exec geom strtgeo  | compile and link streamer chambers
 exec geom scntdig  | compile and link digitization routine
 gclose	all	    | close geometry building phase
 
* goto evloop
 
 disp detm detm.rz		| show geometry ZEBRA banks 
* wait ' ' 0 - it waits already in disp
 
 next
 mess
 mess
 mess step 4 ...continued: display the detector "tree"
 mess '        Click on any box to display the corresponding element'
 mess '        Click the right mouse button to continue'
 mess
 mess
 dtree taca 3       | volume tree display
* wait ' ' 0 - waits in dtree
 
 next
 mess
 mess
 mess step 5 (scntdig.g) -- compile the digitization routine;
 mess '       define test beam momentum (with gmomentum);'
 mess '       define interaction vertex position (with gvertex);'
 mess '       trigger one event and display it'
 mess         
 mess
 
 evloop:
 
 debug on  | tracks are displayed only in debug mode
 swit 2 3  | first GEANT switch for drawing tracks 
             (s/r GDEBUG, see GEANT Manual, p.37)
 swit 4 2  | GEANT switch to show all tracks
* physi    | load GEANT cross-section tables etc. - ne nado otdelno

 gmomentum  1 8 5 5 0 0 0 0 0 0 0 | 5 GeV pion kinematics 
 gvertex   -100 0 0               | vertex at calo front face       
 dcut taca  3 0 10 10 .05 .1      | draw all calo elements
 trig 1
 wait ' ' 0
 
 next
 mess
 mess
 mess step 5 ...cont: same event, with only charged particles shown
 mess         
 mess
 dcut taca 3 0 10 10 .05 .1	| draw all calo elements
 swit 4 3                       | GEANT switch to show charged tracks only
 trig 1
 wait ' ' 0
 
 next
 mess
 mess
 mess step 6 generate 100 events and write them into demo0.
 mess         
 mess
 1d 101 ' ' 20 0 0.2
 1d 102 ' ' 20 0 1.
 idopt 0 stat
 idopt 102 logy
 
 gdebug 0 0
 debug off	     | switch the implicit track display off
 
 gfile o demo0.O     | open ZEBRA output file (AGUSER Manual, 1.0.18) 
 trig 100   	     | note that scntdig is called implicitly, 
                     | since it was loaded and its hits are present
 
 zone 1 2
 option STA
 hi/pl 101			| plot calorimeter response
 atitle  'Energy loss in scintillator, GeV' 'Events'
 hi/pl 102    | plot time-of-flight
 atitle 'Time of flight, [m]s' 'Hits'


2.4.3 Reading back events with AGI/ATLSIM banks 
      from earlier generated file

- replay.kumac

* read GEANT file with events and plot the
* same histograms as in demo0
* for technical reasons the command 
* gfile should be issued TWICE (trick for IBMRT and SGI only)
 
 
 gfile P demo0.O  *  
 gfile P demo0.O  *  
 exe geom scntdig 
 gclose
 
 1d 101 'Evis ' 20 0 .2
 1d 102 'Tof ' 20 0 .1
 1d 103 'N of hits per plane' 100 0 100.
 idopt 0 stat
 idopt 102 logy
 
 trig 105
 
 zone 1 2
 option sta
 hi/pl 101			| plot calorimeter response
 atitle  'Energy loss in scintillator, GeV' 'Events'
 hi/pl 102    | plot time-of-flight
 atitle 'Time of flight, [m]s' 'Hits'




3. How to work with AGI/ATLSIM



3.1 Testing/debugging in AGI/ATLSIM. 

3.1.1 General comments

o AGI command GDEBUG with Interactive GEANT instruction
DEBUG can be used for printing of testing/debugging 
information.

Example:

debug on          | debugging mode 
exec geom chrmgeo
gclose all

It will produce the following output:

...
 Module CHRMGEO   running for geometry    1  print level=  3

 **    1 ** we are at level   1 in block HALL

 AGSTMED  for medium CHRM_TEST med,mat,sen,fld =   3  15 0 0
          Field =  20.0 20.0  steps = 10.00000-0.02000 0.01000-0.01000
 AGSVOLU: Name/shape HALL  HALL  BOX    Imed,Iv,Np=    3    1    3
          Par=  150.00   72.00   72.00
 POSITION TACA TACA  into HALL HALL at x,y,z=    0.000    0.000    0.000
          level  1  Ncopy   1 with Npar,Irot=   0   0 Ivdau,Ivact=    2    2    0
 Module CHRMGEO              done
...  

Using this output you can check in particular whether GEANT
daughter volumes are properly positioned inside their mother. 

o AGI command GPRINT is used to print the content of any of
selected GEANT object.

Example:

exec geom chrmgeo
gclose
gprint volu

Issuing these commands you print the
list of GEANT volumes stored in the memory and their characteristics
(shapes and geometrical sizes). The output will be the following:

...
0VOLUME NAME  NUMED SHAPE NPAR  PARAMETERS

      1 HALL    3   BOX     3   0.150E+03 0.720E+02 0.720E+02
0VOLUME NAME  NUMED SHAPE NPAR  PARAMETERS

      2 TACA    3   BOX     3   0.100E+03 0.400E+02 0.400E+02
0VOLUME NAME  NUMED SHAPE NPAR  PARAMETERS

      3 RACK    3   BOX     3   0.150E+02 0.400E+02 0.400E+02
...

See commands GPRINT and GSFLAG PRIN in AGUSER HELP for details.

o Another way to test/debug your detector is to draw the volume
tree (DTREE), the volume itself (DRAW) or its cut view (DCUT).
The commands must be issued after "exec geom xxxxgeo".
For more information about these instructions and other drawing
commands, see GEANT manual (XINT section). 

o ???AGI command GSFLAG GRAP operates with graphics performance???.
 
   Each module has a graphic flag GRAP associated with it.
   Default values of this flag is initilly set to 1. 
   The default value for a new module may be changed by GSFLAG command.
   The actual value of gRAP flag may be changed by MODE command

   With Grap=0 or 1, volumes will be drawn in accordance
   with SEEN attributes, defined in your code (0 prevents automatic
   detector drawing in debug on mode, 1 - allows it)

   Example: instruction
   ATTRIBUTE CHRM  seen = 1  colo = 1 
   means, that volume CHRM will be seen (seen = 1) at your graphics screen
   with BLACK (colo = 1) contours. Interactive GEANT command SATT
   can be used to redefine volume attributes. See XINT section of
   GEANT manual for details and other helpful commands.

   Grap>1 means that user defined  attributes are irrelevant and
   ATLSIM sets SEEN=1 for volume levels Grap-2<=Level<=Grap and SEEN=0
   for other. 

o Displaying tracks

  Tracks can be displayed only in "debug ON" mode, under
  control of GEANT switches 2 and 3 (GEANT Manual, p.37)  and
  the AGI switch 4.
  GEANT command dxyz (GEANT Manual, p. 362) has become obsolete in
  ATLSIM, because tracks are displayed implicitly by ATLSIM 
  for each "trigger" in "debug ON" mode.
  The switch 4 controls this implicit track display.


PN:ne ponial, pochemu 2 i 3 - geant switches, a 4 AGI ???
   oni vse iz odnoi opery - na nix reagiruet GDEBUG.
   A chto dxyz delaet ? pochemu ona obsolete ? ia ee ne trogal.


  In order to define the coordinate system for track display,
  one should draw the detector first and then, WITHOUT clearing
  the screen, issue "triggers"

  Switches relevant to track display:

  debug on  | tracks are displayed only in debug mode
  swit 2 3  | a GEANT switch for drawing tracks 
  swit 2 0  | to suppress track display even with "debug ON"
  swit 2 2  | print tracks step by step 

  swit 4 3  | a GEANT switch to display charged tracks only
  swit 4 2  | all tracks are displayed

 
3.1.2 Hints in testing/debugging (for non-beginners)

When a  detector consists of several subsystems, there are
TWO possible regimes of using ATLSIM, which should not be
mixed within one ATLSIM session:

a) Induvidual testing/debugging of one subsystem  module;
b) Joint testing/debugging  of the main module plus subsystem
   module(s).

  In regime (a) the module's top level volume will be placed in "the Universe",
  as a standalone volume even if it is attempted to be positioned somewhere. 
  (in this case, a diagnostics like "HALL does not exist" is issued, 
  but this is just a warning).

  From this a need for a local mother volume for every subsystem's 
  module becomes evident: in this "mother" any number of "daughters"
  can be created even in a stanalone regime, while only one standalone 
  volume can be created in "the Universe" (GEANT rule).

  In this "standalone" regime, if the name of the module top level volume
  coicides with the 4 first letters of the module name (4-letter SYSTEM
  name addressed by MODE command),  all geometry banks are dropped
  automatically at every "exec geom" for the module being
  invoked and "gclose all" is executed after the geomentry is loaded
  So "gdrop all" and "gclose all" can be (although not necessarily!) 
  omitted in debugging loop:

	start:
	  exec geom sysageo
          (... tests ...)
	  goto start


  In regime (b) "gdrop all" and "gclose all" are obligatory before each 
  geometry set-up iteration:

	start:
	  gdrop *
	  exec geom maingeo
	  exec geom sysageo
	  exec geom sysbgeo
	   ...
	  exec geom syszgeo
	  gclose all
          (... tests ...)
	  goto start

when going from (b) back to (a), first "gdrop all" is still necessary.


o Using AGI/ATLSIM, you have usually access only to HITs and DIGIts and
  NOT to each step. A universal gustep routine is used inside 
  AGI/ATLSIM to fill hits according to HITS operators.

  To have direct access to GEANT internal COMMONs user can provides 
  its own routine named agustep.g and dynamically load it via
  "gexec agustep" instruction. 
 
  Example: to calculate muon energy after passage of the beam
  through (insensitive!) dump the best 
  (and the only!) direct way is to write very simple agustep.g routine
  together with "detector" (dump) description.


3.2   HITs and DIGIts in AGI/ATLSIM

3.2.1  How ATLSIM invokes the digitization module?

  Whenever HITS statement appears in a xxxxgeo.g, ATLSIM will
  expect a corresponding xxxxdig.g to exist. This dig-module
  must be compiled (exec geom) before the first "trig" command.
  The "trig" command calls xxxxdig implicitly, so there is
  no need to code an event loop like this:

 	do ievent=1,100
	   trig 1
	   call xxxxdig
	enddo

  This would lead to calling xxxxdig twice.
  The event loop is simply

	trig 100

  DO loop is mandatory, however, if you change the kinematics
  (using AGI commands GKINE or GMOMENTUM) during the run.

3.2.2 How to access hits to be digitized?  How to book and fill
  digit banks?

  The typical structure of a digitization module:

Module     xxxxdig is the digitization of the spectrometer scint
+CDE,AGECOM,GCONST,GCUNIT,GCFLAG,GCKINE
     parameter (NV=..) ! 15 is the maximum in GEANT3 
     parameter (NH=..) ! NH - MAX number of  'measurements' in HITS (<=15)
     parameter (ND=..) ! ND - MAX number of  'measurements' in DIGI (<=15)
     integer NUMBV(NV),HITS(NH),DIGI(ND)
     ...

     if(First) then
	...
	DIGI  Dname digit_desription(s)
	...
	First=.false.
     end if
     ...  
     if(AgFHIT0(Cset,Cdet)  .ne. OK) Return
   { if(AgSDIG0(Cset,Dname) .ne. OK) Return ! if Dname .ne. Cdet }
     ...
     DO While (AgFHIT1(IH,ITRA,NUMBV,HITS) == Ok)
	if(abs(IH).eq.1) then ! next volume Cset/Cdet with hits
          if (IH<=0) then    ! last hit in a volume      

	    DIGI(1) = ...  ! fill a digit
            DIGI(2) = ...
	    ...
            If (AGSDIG1(ITRA,NUMBV,DIGI) .ne. OK) return ! store a digit
          end if
	end if
     END DO

  Comments:

o DIGI statement defines  a "digitization element" which may or may not
  be identical to a hit element. The syntax of DIGI is similar
  to HITS statement, with "measurements" replaced to
  "digitizations". Since "digitizations" are normally derived from
  hit values, they can be given arbitrary names, unlike "measurements"
  names that are fixed. Compare:
      HITS  SCIN  x:1:  y:1:  z:1:  tof:1.e-9:(0,1)  eloss:0:
      DIGI  CNTR  Sigt:scnd_Tofst:(0,scnd_Tofmax)  Evis:0:(0,scnd_emax) 

  however, standard names known to atlsim have an advantage that their
  limits(like real dimensions) may be calculated by atlsim automatically.



o Cset is the 4-letter system name of the corresponding geometry
  module and Cdet - the name of THE HIT REFERENCE VOLUME used in the
  HITS operator as it's name

  If the digitization element coinsides with 
  the corresponding hit element, i.e. Dname==Cdet, then
  the DIGI bank is created automatically. Otherwise, it has to
  be created explicitly with AgSDIG0 call.

o AgFHIT1 returns one hit, with its masurements in array HITS. 
  NUMBV is also an array of GEANT volume numbers, uniquely identifying
  this sensetive volume (for more details see GEANT HIST200).
  Remember to declare these arrays with large enough sizes 
  (15 is the absolut maximum for both).

  IH is the sequential hit number within the same sensetive element,
  flagged as negative for the last hit.

  With NUMBV one can find a path to the hit volume, e.g.

        if(IH<0) then  ! this is the last hit
            call AGFPATH(NUMBV)
            call GDTOM(zero,xyz,1) ! returns position of the local 0 in MRS
        end if

  With ITRA one can  analyze the track that produced the hit (actually, 
  the parent track,  the one stored in KINE bank) by
  retrieving a complete information about the track  with

        call GFKINE(abs(ITRA),...) ! see GEANT Manual, KINE100

  ITRA>0 - all hits were produced by a single particle, 
  ITRA<0 - more than one track has produced hits. 

  In simplest case ITRA and NUMBV can be considered simply as a reference, 
  used for subsequent storage of the digit with AgSDIG1. 

o The above example corresponds to a simple case when hit and digit volumes
  are the same - the digit is filled after the last hit in a volume
  has been processed. In more complicated configurations an appropriate
  logic should be coded.

3.2.3 How to print HITS and DIGIts?

o A useful facilities are
  GPHITS and GPDIGI commands  in AGI. Each hit or digit
  is printed, together with the names of the corresponding
  volumes  (and their sequential numbers).  The values of
  measurements (for hits) and digitizations (for digits) are
  printed  under their names,  as booked in HITS or
  DIGI statements, respectively. For example,  for

    HITS  SCIN  x:1:  y:1:  z:1:  tof:1.e-9:(0,1)  eloss:0:
  
  in module SCNTgeo, one gets:

  GEANT > gphits scnt scin

  ====> HITS  IN DETECTOR ** SCIN ** OF SET ** SCNH ** <====

  HITS TRACK RACK SCPL      X         Y         Z         TOF       ELOS  
     1     1    1    1    .125     -20.0      20.0      .500E-09  .841E-03
     2     1    1    2    .125     -20.0      20.0      .500E-09  .120E-02
     3     1    1    3    .125     -20.0      20.0      .500E-09  .540E-02
     ...

  and  for 

    DIGI  SCIN  Sigt:scnd_Tofst:(0,scnd_Tofmax)  Evis:0:(0,scnd_emax) 

  in module SCNTdig,  one gets:

  GEANT > gpdig scnt scin 

  ====>DIGITS IN DETECTOR ** SCIN ** OF SET ** SCND ** <====

 DIGIT TRACK RACK SCPL      SIGT      EVIS  
     1     1    1    1    .500E-09  .841E-03
     2     1    1    2    .500E-09  .120E-02
     3     1    1    3    .500E-09  .540E-02
     ...
 
3.3 Documentation and input/output 

o As was pointed out in Chapter 1.2, structures produced by users code 
  are SELF-DOCUMENTED. Parameters which automatically will be documented 
  by AGI/ATLSIM after execution of the a user *.g module (geometry, 
  magnetic field, digitization etc.) are difined using FILL instruction. 
  It is MANDATORY to make comments in FILL and BLOCK statements, 
  otherwise it will no be compiled.

o The main detector bank DETM as well as other banks are
  viewed on graphics display via DISP command. Clicking at
  different places of screen you can survey the tree of the
  created data structures, navigate through them, see the
  actual content of each created bank with its description.
  Fore more information see help on ZEBRA DZDOC commands
  (type "help dzdoc" inside AGI/ATLSIM)

o AGI command GDUMP allows you to dump the content of a 
  selected branch of ZEBRA banks on the screen, .sgml or
  .html files. The latter option in fact creates WWW pages
  for your detector.

o All input/output operations are managed by AGI command
  GFILE (input/output streams).
  You can read physical events written earlier by generator
  (PYTHIA [12], ISAJET [13] etc.) or reread GEANT events.
  User can read or write events in ZEBRA GENZ and special Column-Wise
  Ntuple [14],
  standard GEANT FZ (XINT section of GEANT manual) or user-defined
  formats. 

  By default, all histogram output is directed to logical unit 33
  (file atlas.his). Using GHIST instruction it is possible to
  change these defaults.    
 


3.4 AGI/ATLSIM traps and caveats.

- For non-experienced users:

o During a debugging session, the file detm.rz containing the 
  geometry and structure bank tree is updated.
   
  If the session has crashed or ended in an unpredictable status, 
  it is recommended to erase the old detm.rz file before starting 
  a next ATLSIM session.

o "gclose" is OBLIGATORY after the last "exec geom" call, to
  terminate the geometry description phase and set-up the GEANT graphics.
  Otherwise, further ATLSIM behaviour will be unpredictable.
  In particular, a subsequent call to graphics may cause ZEBRA to
  crash.

o On ibmrt and sgi, to open a data file (eg, .O file)  gfile has to
  be issued TWICE.  - OBSOLETE !
  This will be followed by diagnostic messages like

	 ANZOPEN opening file demo0.O

	 FZIDIA.  LUN=  21 BAD CONSTRUCTION
	          IQUEST(1/2/3)=  -4       0       1
	          IQUEST(11-) =   -4 201   0
	 error, try again    -4
	 zebra err, run      5    -4
	 ANZOPEN opening file demo0.O
	 RZLOCK. Directory already locked by RZFILE  

  which should be ignored. This will be, hopefully, fixed in future.

o Your .pawlogon.kumac will be executed when you enter ATLSIM. 
  In the case of ambiguites between PAW and Interactive
 GEANT commands and/or their abbreviations you should edit your 
 .pawlogon.kumac.

Example: you have the string "opt nbox" in your .pawlogon.kumac.
In this case there is an ambiguity between PAW command "option"
and Interactive GEANT command "opti". If you correct word "opt"
to "option" no problems arise.

o Changing the HIGZ Window size during drawing procedure can give rise
to problems: in any cases picture "disappeares".

o To write the picture into the Postscript file a.ps (unit 66) the recommended
procedure is the following:

...
fort/fil 66 a.ps | Postcript file opening
met 66 -114      | Colour Postcript
next             | clear screen
draw hall        | draw your detector
close 66         | close your file
...

o ATLSIM is high-level INTERFACE to GEANT and NOT the new version 
of GEANT! So to simulate your detector accurately, please, read 
GEANT manual with care!
===========================!!!!! otchen' xorosho !!!!=================

- For non-beginners. It means that user already try the examples from
Chapter 2 and read also Chapters 3 and 5.

o When defining the sizes of global and local mother volumes and
  deciding whether or not the global module will be invoked
  in standalone subsystem testing/debugging, one should keep in mind
  that particles originating from outside of any defined volume in GEANT
  are NOT tracked. 

  For example, if a testbeam particles were specified (with GVERTEX 
  statement) to emerge from HALL, then omitting HALL in the geometry
  invokation would lead to a "disappearance" of hits.


4. AGUSER HELP

   This section is the description of AGI specific commands.
To get complete description in printable format do:
"manual aguser man.tex latex" inside AGI/ATLSIM.




5. More about AGI/ATLSIM

This Chapter is intended for users which have some
experience with AGI/ATLSIM. 


5.1 Modules and structures in AGI/ATLSIM 
----------------------------------------

Preface. This chapter reflects P. Nevski sight how to simulate
detector inside ATLSIM. It is up to the user to decide whether
proposed solution is good or not good for her(him).

In ATLSIM, many traps and misunderstandings can be avoided by following
a certain discipline. Reason: the system is not flawless but it has been
debugged and adjusted, more  or less, for "P. Nevski's style",  outlined
below.

o a complicate system normally is built of a number of 
  (relatively) simple subsytems, positioned when needed in 
  a rather primitive master (global) system.

  AGE/ATLSIM recongnizes the global module by a mismatch between the module's
  system name and the name of the top level volume (=block) defined in the 
  module. 
  This "first defined" volume of the main module becomes the 
  detector's "master" volume.

o There should be ONE "master" volume [footnote 1] for the entire 
  EXPERIMENT, say HALL, defined in a certain "main" geometry module, 
  say, MAINgeo (see below on the "Naming convention").
  All other volumes appearing in the detector descriptions have to be 
  fully contained in this "master" volume [Footnote 2]. 

  There should be only one such module in each geometry "set-up"
  (i.e., a series of "exec geom" calls following the last "gdrop all" and
  terminated by "gclose all" [Footnote 3]).

o Non-main modules (i.e. those whose first defined block has the module
  root's name) correspond to independent subsystems. 
  When loaded standalone, such a subsystem is automatically closed
  and, if debug mode is switched on (DEBUG ON), drawn on the graphics screen.

  P.N. usually advises to confine EVERYTHING related to a given 
  subsystem to a single geometry module, rather than splitting it into 
  a number of "sub-subsystems".
 
  Furthermore, he recommends that modules should "know" themselves how
  THEY should position themseves inside their corresponding mother volume
  within the master module.

  In other words, the main module normally consists of a single 
  CREATE construct, to create the master volume, plus a few 
  contents.

  A main module's role is to prepare a PLACE for the subsystems, 
  but it may not necessarily "know" about them.

  Although creating and positioning subsystem COMPONENTS volumes 
  INSIDE the main module is possible, 
  but this practice is considered TO BE a bad style
  and should be avoided (see more in the section 3.2.2).

o Each non-global geometry module, say, xxxxgeo, corresponding to a certain 
  subsystem,   should define and create its mother volume 
  with the name xxxx:

  Create and Position XXXX in HALL [ konly='MANY' or 'ONLY' ]

  This mother volume must fully contain any further volumes created
  in this module. The corresponding BLOCK construct should preceed
  any other block definition in the module.

  If NEEDED, two or more subsystems may be defined so that their top level
  volumes overlay with each other. In this case, konly='MANY' must be 
  specified in POSITION (or CREATE and POSITION) statements for all
  overlaying volumes [Footnote 4].

o Different modules communicate with each other only via data, by
  means of STRUCTUREs. A structure is physically represented by
  its local copy and a bank in DETM  TREE.

  A bank [with a structure content] is created by a FILL construct.
  The first FILL creates a bank linked to the 
  SUBSYSTEM CONTROL bank (TOP LEVEL BANK) containing different control flags,
  the following (sequential) FILLs create banks linked to the TOP LEVEL bank.

  USE construct reads back from the DETM TREE a local copy of the bank, 
  thereby ensuring the original data structure integrity and 
  in the same time allowing data subsitution by datacards or database. 

  Accessing the bank directly, although technically possible, is 
  considered as a "trick" and should normally be avoided.

  Example:

  -------------------------------------------------------------------------
	module MODAgeo				module MODBgeo
	  structure cxxx  {...}			  structure cxxx  {...}
	  structure cxxy  {...}			  structure cxxy  {...}
	  structure cxyz  {...}

	  fill cxxx  }				  USE MODAgeo/cxxx vers=2
	   vers=1    }
	   ...	     } _head_ structure,	  ...
	  end fill   } linked to MODXgeo
  
	  fill cxxx  }				  USE MODAgeo/cxxx
	   vers=2    } _head_ structure
	   ...	     } horizontal link		  ...
	  end fill   }
  
	  fill cxxy  }				  USE MODAgeo/cxxx/cxxy
	   ...       }				  ...
	  end fill   } _daughter_
	             } structures,
	  fill cxyz  } linked to cxxx
	   ...       } vertically
	  end fill   }

  optionally,

	fill cxxy/cxyz } this will be 
		       } linked to cxxy

	Create XXXX ...	
           ...
        BLOCK MODA ! MODA mother volume
           ...
  -------------------------------------------------------------------------
  Note how the structure (bank) is referenced: the reference should
  reflect the physical pathname, except in FILL construct where
  the following default naming rules apply:

    a) the first structure filled in a module becomes its 
       _head_ structure (path = XXXXgeo/h_struct),
    b) all subsequent filled structures become implicitly either 
       "sisters" (same path, "next" links) or "daughters" 
       (path = XXXXgeo/h_struct/d_struct, "down" links), unless the path 
        is explicitly specified.
  
o Naming convention: in geAnt, a module name consists of a 4-letter
  "root" (defining the (sub) detector it describes) and a "suffix"
  (defining the module kind).
  For instance, MOD2geo is wrong. A source .g file should have the 
  same name as  the module it defines (this applies to all
  kinds  of modules).  The module kind specifies its functionality:

       geo -- geometry description modules, e.g. MODAgeo.g
       dig -- hit digitization module, e.g. CALOdig.g
       rec -- reconstruction
     [ ana -- analysis ]
       ...

Footnotes:

[1] in geAnt, volumes are described as blocks, by BLOCK
    constructs. Therefore, the terms "blocks" and "volumes"
    refer to the same entity. "Volume" is a basic notion of GEANT,
    while "block" is a method of defining a volume. 
    It this note, the word "volume" is used,  rather loosely,  in
    both meanings.
    
[2] Names for the main module and the master volume 
    are not fixed in geAnt; MAIN and HALL are chosen here as examples.

[3] "gclose" is obligatory at the end of any geometry set-up 
     before one can start any operation with geometry 
     (drawing, particle tracing etc)
     (see "Traps/caveats").

[4] BY DEFAULT konly='ONLY' is GENERATED automatically at any Position operator.
Therefore, a daughter volume has to be explicitly POSITIONED as "MANY" only 
    if it overlays any other daughter volume of the SAME LEVEL.
 
More on STRUCTURES
------------------

The role of structures is twofold:

  - to provide a data exchange between modules, a sort of
    "a documented internal communication BUS" (P. Nevski);

  - to give a possibility to influence the program from "outside"
    (from kumac-file, via DETP commands, "external communication
    channel", OR FROM A DATABASE). 
    For example:

	Structure A <-- re-defined potentially from DETP
	Structure B <-- contain elements derived from A

    geAnt code: use both A and B

The structures are FORCED to be documented by the geAnt PARSER.
This gives a possibility to produce a complete documentation set
(DZDOC -> .ps, HTML -> WWW) from the source code itself.

(cf. a common practice, when the source (simulation or reconstruction code) 
and the documentation files are separate entities. Such practice is prone 
to mistakes and requires double maintenance work.)

    
5.2 Critical comments to DICE95 manual and AGUSER help.

5.2.1 Comments to DICE95 manual.
  
o The magnetic field routine should be written as a separate module
with name mfldgeo.g, example - ~zucv5/public/atlsim/spec03/mfldgeo.g
 
o In the digitization routines the command "call agfpath(NUMBV)" 
(path to volume tree) should be issued before GDTOM (or GMTOD) 
transformation. This concerns also the examples on pages 8 and 16 
in the DICE95 manual, which were valid for OLDER versions of ATLSIM.

o By default, the fortran code produced by the command
"exec geom yourfile", where yourfile.g is any file written on geant 
language, is deleted and only shared library (.sl) is produced.
(In case of errors, however, file .f is not deleted and .sl is
not produced). 
To generate fortran code you can simply issue the command 
"geant3 yourfile" outside the ATLSIM.


o It is preferrable to use AGUSER HELP commands instead of
calls of AG**** routines, quoted in page 8 of the manual, Chapter 5.
Example: to clear ZEBRA memory issue "gdrop *" instead of
"call agdrop('*')".  
- luchshe ia ispravliu manual, a to otchen' ne logichno.



o mgeom.kumac, mentioned in the manual, now has a name geom.kumac.
Correspondingly, please, use "exec geom yourfile" 
(or "gexec yourfile" for the latest version for HP) instead of 
"exec mgeome yourfile". 


o Several interfaces of ATLSIM to HEPDB package now exist.  
***Ask Pavel Nevski for details.
they will be described in a separate manual....


5.2.2 Comments to AGUSER HELP 

o Option C for GCLOSE command should NOT be used. The interactive 
   GEANT command PHYSI must be issued before particle generation.
OBSOLETE!!!


o For simulation of fixed target experiments command GMOMENTUM should
be used instead of GKINE to define the kinematics of primary track(s).


o Command GKINE with ntrack=-2 parameter is used to read events from
external generator output (PYTHIA, ISAJET) in the form of
Column-Wise Ntuple written in ATLAS GENZ (like standard HEPEVT) format.
The details can be found in GENZ Manual (see ATLAS WWW Home Page).

o The parameters ZMIN and ZMAX of GKINE and GMOMENTUM should not
conflict with Z position of the vertex defined by GVERTEX and its
spread defined by GSPREAD

o Command ACTIONS are intended for experienced users only.
  Normally, default program actions are derived from the nature of input.
  IE if you read HITS, they may not be generated anymore by the program,
  hence geant simulations are forbidden
  If You read kinematics and not HITS (GFILE P file E), simulations are 
  allowed

  
o The interactive GEANT commands with the same action as AGUSER commands
  normally provide less information and should NOT be used. 
  Example: to print all hits please
  issue the string  "GPHITS * *" instead of "PHITS".

o The GEANT bug, which may lead to energy non-conservation at
  the percent level, is corrected in ATLSIM. For this reason
  do not use  GSTOP command with non-zero parameter. Ask Pavel
  Nevski for details or look at IABAN variable in GEANT cmz file.


5.3 geAnt language  syntax
    ----------------------

o Relational operators: 
  
  Not equal:     .ne. !=      
  Equal:         .eq. =   ==
  Less or equal: .le. <=
  Greater or eq: .ge. >=
  Less:          .lt. <
  Greater than:  .gt. >

o Typing
  
  geAnt is a string typing language. Types of all non built-in variables
  and parameters should be explicitly declared. There are two built-in
  items available in any routine compiled with "exec geom":
         Logical FIRST  ! variable, initialized with value .TRUE.
	 Integer OK     ! Parameter (OK=0)

  By default, all structure elements are reals.
  Non-real structure elements should be declared in STRUCTURE statement, 
  like 
       Structure SCND {int version,Emax,Tofst,Tofmax,char Flag}
  (int, float and char are available)
 


1.5  Additional literature

1. A. Artamonov et al., "DICE95", ATLAS Internal Note, SOFT-No-014.

It is available from WWW (URL: http://atlasinfo.cern.ch/ and references
therein) and also placed on AFS under directory
/afs/cern.ch/atlas/offline/test/atlsim/doc as dice95.tex (LaTeX) and
dice95.ps (postscript). 


2. P. Nevski et al., "Reconstruction interface with DICE95", draft,
files rec95s.tex and rec95s.ps. in
/afs/cern.ch/atlas/offline/test/atlsim/doc

This manual is recommended for experienced users only.







