* $Id: qnext.age,v 1.5 2010/03/25 18:16:07 perev Exp $
* $Log: qnext.age,v $
* Revision 1.5  2010/03/25 18:16:07  perev
* max rejects now 1e6
*
* Revision 1.4  2010/03/25 17:46:21  perev
* Event number accounted by filter now
*
* Revision 1.3  2010/03/24 21:39:34  perev
* Move guoute after filter
*
* Revision 1.2  2009/05/09 01:38:33  perev
* If event is filtered out, try again, no changing ievent
*
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
*
* Revision 1.11  2003/05/07 17:04:06  nevski
* make draw bank persistent
*
* Revision 1.10  2002/06/14 23:18:50  nevski
* filter numbering tuned
*
* Revision 1.9  2002/01/24 22:48:29  nevski
* maxtime can be used in massive production
*
* Revision 1.8  2001/12/18 01:26:49  nevski
* add token time control
*
* Revision 1.7  2001/12/17 23:38:37  nevski
* event header suppressed in skips
*
* Revision 1.6  2001/10/28 15:37:37  nevski
* correct event counting
*
* Revision 1.5  2001/10/28 15:06:10  nevski
* automatic run support
*
* Revision 1.1  2001/02/27 10:14:55  nevski
*  first working release
*
************************************************************************
      SUBROUTINE QNEXT
*                                                                      *
* Description:    Process events, protected against ZEBRA faults       *
* Modifications:  Clear ZEBRA storage after memory fault   PN 01/04/97 *
* PN 28.09.98:    output spooling                                      *
************************************************************************
#if defined(CERNLIB_95A)
* ZEBRA/MZCA does not contain type info !
#else
#include "commons/typing.inc"
#include "zebra/mtzca.inc"
#endif
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcflag.inc"
#include "geant321/gctime.inc"
#include "commons/agckine.inc"
#include "atlsim/agctoken.inc"
#include "slug/sclink.inc"
#include "zebra/mzca.inc"

      REAL               TIMNOW/0/,TIMSTART/0/,TIMMAX,TIMINIT
      INTEGER            LENOCC,IDEBAG/0/,TRIG/0/,AgPHASE,i,Istp,Ntrdone
      Integer            token(2)/0,0/,Ns0/0/,It0,Meven,NQERR,Ndone,Nleft,L
      CHARACTER          CLINE*80
      INTEGER            InfLun,InfSta,InfoFZ
      common /fzstat/    InfLun,InfSta,InfoFZ(40)
      COMMON /AgCPHASE/  AgPHASE
      COMMON /AGCNDONE/  Ntrdone
      COMMON /AGCTMAX/   TIMMAX
      Logical First/.true./
      integer nReject
*
      If (First) then
          First = .false.
          CALL TIMEL (TIMNOW)
*        Timinit - pure initialization time, Timint - t.left before 1st event
          TIMINIT = TIMINT-TIMNOW
          TIMINT  = TIMNOW
      endif
*
         TRIG      = TRIG + 1
         IQUEST(1) = 1
         CALL ZPHASE(1)
         CALL TIMEL(TIMSTART)
         token(1)  = Itoken    ! token for multy-cpu run
         token(2)  = 0         ! subtoken for special run, stays 0 for normal
         Meven     = max(Neven0/10,1)
         Ndone     = 0
         Nleft     = Nevent
*
         DO WHILE (IEVENT<NEVENT)
*           PN 28.09.98: push out reconstruction banks
	    nReject = -1         	
:AGAIN:     nReject = nReject+1; 	!//If filter drop event, do again
            if (nReject > 1000000) THEN
              WRITE(CHMAIL,10008) 
10008         FORMAT(' ***** THE JOB STOPS NOW because > 1e6 events rejected *****')
              CALL GMAIL(0,1)
              IQUEST(1) = 1
              GO TO 19
            ENDIF
	    


!//VP            If (Ioutp.EQ.-1) Call GUOUTE(1) !// Too early to write
            IQUEST(1)= 0
            IEORUN   = 0
            NQTRAC   = 0
            NQERR    = 0
            AgPHASE  = 1
*
*          due to the chaining of RAW data, drop the first one (if it is there)
            If (LKARAW>0) then
               IQ(LKARAW-5) = 0
               CALL MZDROP(IxSTOR,LKARAW,'.')
               If (LKARAW.GT.0) IQ(LKARAW-5) = 1
            Endif
*           clean up memory - fully or partially
            If (LKARAW.EQ.0) CALL GTRIGC
            If (LKARP1.GT.0) CALL MZDROP(IxSTOR,LKARP1,'L')
            If (JHEAD.GT.0)  CALL MZDROP(IxSTOR,JHEAD,'L')
*
            CALL TIMEL(TIMNOW)
*          Check time left for non-splitted events
            IF (NtrSubEV.le.0 .or. IsubEVNT.ge.NsubEvnt) then

               if (Ndone>0) nleft=Ndone*(TIMNOW-TIMEND)/(TIMSTART-TIMNOW)
*              in multi-processor mod time control is forced:
               IF ((ITIME>0 & TIMNOW<=TIMEND) .or.
     >             (Neven0>0 & Ndone>0 & nleft<=neven0 &
     >              Ievent>=(Token(1)-Itoken)*Neven0))  then
                  WRITE(CHMAIL,10001) TIMEND
10001             FORMAT(' ***** THE JOB STOPS NOW because the TIME',
     >                   ' left is less than ',F12.3,' seconds *****')
                  CALL GMAIL(0,1)
                  IQUEST(1) = 1
                  GO TO 19
               ENDIF
               IF (Neven0>0 & Ndone>0 & Ievent>=(Token(1)-Itoken)*Neven0 &
     >             (TIMSTART-TIMNOW > TIMMAX  &  TIMMAX > 0))  then
                  WRITE(CHMAIL,10007) TIMMAX
10007             FORMAT(' ***** THE JOB STOPS NOW because the TIME',
     >                   ' used is greater than ',F12.3,' seconds *****')
                  CALL GMAIL(0,1)
                  IQUEST(1) = 1
                  GO TO 19
               ENDIF
            ENDIF
*
*          multi-processor job control
            If (Neven0>0 & Ievent>=(Token(1)-Itoken)*Neven0) then
*
*             check an external stop request
               Cline=' '; Istp=0
               open  (60,file='log.stop',status='OLD',err=:c:)
               do i=1,99
                  read (60,'(a)',err=:c:,end=:c:) Cline;
                  L=Lenocc(Cline);
                  if (L>0 & Index(CtTitle,Cline(1:L))>0) then
                     Istp = 1; go to :c:
                  endif
               enddo
:c:            close (60);

               if (NTRDONE>0 & Istp>0) then
                   WRITE(CHMAIL,10006) Cline(1:L)
10006              FORMAT(' ***** event loop ends because the',
     >                    ' stop request is accepted : ',a)
                   CALL GMAIL(0,1)
                   IQUEST(1) = 1
                   GO TO 19
               endif
*
*            check that output is not too big (2GB is the limit now)
               Call FZINFO (23)
               if (InfLun == 23 & InfoFZ(19)>=450) then
                   WRITE(CHMAIL,10004) InfoFZ(19),InfoFZ(20)
10004              FORMAT(' ***** event loop ends because the',
     >                    ' output file is close to 2 GBytes: ',2I8)
                   CALL GMAIL(0,1)
                   IQUEST(1) = 1
                   GO TO 19
               endif
*
*            get a token which allows to make a piece of job
               Call ATOKENS(token);
               if (token(1)<0) then
                   WRITE(CHMAIL,10005)
10005              FORMAT(' ***** All JOB tokens finished *****')
                   CALL GMAIL(0,1)
                   IQUEST(1) = 1
                   GO TO 19
               endif
               NtoSkip = max ( max(Token(1)-Itoken-1,0)*Neven0  _
                             + max(Token(2),0)*Meven  - Ievent, 0)
               print *,' ****** GOT TOKEN,NtoSkip =',token,NtoSkip,' ******'
               Nevent=Nevent+NtoSkip
            endif
*
*              initialise event counters
            IEVENT = IEVENT+1
            IDEBAG = IDEBUG
            Ns0    = NtoSkip
*           suppress event output in skips
            It0    = Itest
            if (NtoSkip.GT.0) Itest=0
            CALL GTRIGI
            Itest  = It0
            IDEBUG = max(IDEBUG,IDEBAG)
            CALL GRNDMQ(IQ(JRUNG+19),IQ(JRUNG+20),0,'H')
            IQ(JRUNG+29)=IEVENT
*              Normal GEANT simulations (GTREVE) or RAW DATA here
            IQUEST(1)= 0
            If (LKARAW.EQ.0) then
               CALL GTRIG
            else             !  very special case - test beam data
               CALL AgBEAMdat
               Call GUOUT
            endif

!//		If event is filtered out, try again, no changing ievent(VP)    
            if (IEOTRI .ne.0 .and. IQUEST(1).eq.0 .and. IEORUN.eq.0) then
	      IEVENT = IEVENT-1
              IQ(JRUNG+29)=IEVENT
	      IEOTRI = 0
	      goto :AGAIN:
	    endif
            If (Ioutp.EQ.-1) Call GUOUTE(1) 	!// moved here after trigger

            if ( Ns0 <= 0 & IEOTRI==0 & IQUEST(1)==0)  then
*                 count real events - integral and this call
                  NTRDONE += 1
                  Ndone   += 1
            endif
            if (IQUEST(1)==0) then
               CALL GFHSTA
               Call GRLEAS(JHITS)
               If (JKINE>0) Call ZSORTI(IxSTOR,JKINE,-5)
               If (JHITS>0) Call ZSORTI(IxSTOR,JHITS,-5)
               IQUEST(1)= 0
            endif
*
            IF(IEORUN != 0) Then
               WRITE(CHMAIL,10002) IEORUN
10002          FORMAT(' ***** event loop ends because the',
     >                '  IEORUN flag set by user is ',I6)
               CALL GMAIL(0,1)
               IQUEST(1) = 1
               GO TO 19
            ENDIF
*
            IF(IQUEST(1) != 0) Then
               WRITE(CHMAIL,10003) IQUEST(1)
10003          FORMAT(' ***** event loop ends because the',
     >                ' IQUEST flag set by program is ',I6)
               CALL GMAIL(0,1)
               IEORUN = 1
               GO TO 19
            ENDIF
*
            If(token(1)>0 & Ns0<=0 & mod(Ievent,Meven)==0) Call ATOKLOG(Ievent)
*
         ENDDO

  19     Nevent  = Ievent
         TRIG    = 0
         AgPHASE = 0
         CALL GRNDMQ(IQ(JRUNG+19),IQ(JRUNG+20),0,'G')

*
         If (token(1)>0 & IEORUN>0) then
*            Ievent = Ntrdone
*            Nevent = Ntrdone
            Call ATOKEND(Itoken)
         endif
*

      END


