* $Id: atokens.age,v 1.1.1.1 2004/01/12 23:49:38 potekhin Exp $
* $Log: atokens.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
* Revision 1.3  2002/01/24 22:48:29  nevski
* maxtime can be used in massive production
*
* Revision 1.2  2001/10/28 15:05:30  nevski
* default run id used
*
* Revision 1.1  2001/02/27 10:14:49  nevski
*  first working release
*
****************************************************************************
*****************************************************************************
     subroutine ATOKENS (Atoken)
*                                                                           *
* Description:                                                              *
* Token corresponds to a file in the log directory (log/token.Atoken)       *
* On every call returns a newly created Atoken, OR, in Special case,        *
* to a next unfinished (< 11 lines) token.                                  *
* First call - initialisation with starting token number                    *
* if run id is not provide by RUNG, fill it automatically                   *
*                                                                           *
*****************************************************************************
#include "commons/typing.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcflag.inc"
#include "atlsim/agctoken.inc"
  Integer       SYSTEMF,LENOCC,GETPID,token/0/,Unit/60/,maxtoken/999999/,
                Nspecial/0/,Atoken(2),Ieven,NspEvn,i,Idate/0/,Itime/0/,
                Idat,Itim,Elapsed
  character*24  ctoken/'log/token'/,cdone/'log.done'/,cp/'0'/,cr/'0'/,cn
  Character     Line*128,Lina*256

    if token <= 0
    {  * first call only:
       i=systemf('mkdir -p log');   Call DATIME(Idate,Itime)
       Call ACNUMBER(getpid(),cp);  Call ACNUMBER(IdRUN   ,cr)
       Call ACNUMBER(Atoken(1),cn); cdone='log.'//%L(cn)//'.done'
    }

    token = -1; nspevn = -1; Close (Unit)
    open  (Unit,file=cdone,status='OLD',err=:c:)
    if (Nspecial<=0) goto :e:; Close (Unit)

    Call DATIME(Idat,Itim)
    Elapsed =  (Idat/100-Idate/100)*31        +
               (mod(Idat,100)-mod(Idate,100)) +
               (Itim-Itime)/24 00.
    if ( Elapsed >= 2 ) go to :e:

*  input file not done yet, find a token:
:c: do token = Atoken(1)+1,maxToken
    { call ACNUMBER(token,cn); ctoken='log/token.'//cn
      line='echo "`date` `uname -n` pid='//cp(1:6)//' run='//cr(1:6)//' `pwd`"'
      if (Nspecial<=0)
      {  open (Unit,file=ctoken,status='NEW',err=:r:);     close(Unit)
         i=systemF(line//'>>'//ctoken)
         open (Unit,file=ctoken,status='OLD',err=:x:)
         read (Unit,'(a)',err=:x:,end=:x:)   Lina;         close(Unit)
         * if run id is not provide by RUNG, fill it automatically
         if (CtTitle==' ') CtTitle=Lina
         i=index(Lina,'pid=')+3; if (Lina(i+1:i+6) != cp(1:6)) goto :r:
         i=index(Lina,'run=')+3; if (Lina(i+1:i+6) != cr(1:6)) goto :r:
      }
      else
      {  open (Unit,file=ctoken,status='OLD',err=:x:)
         do i=1,Nspecial { read(Unit,'(8x,i2)',err=:d:,end=:d:) Idat }
         close(Unit);                 goto :r:
           * skip same date tokens, even unfinished:
         :d: close (Unit); if (Idat==mod(Idate,100))  goto :r:
         nspevn = i-2;     i=systemF(line//'>>'//ctoken);
      }
      goto :e:

:r: } :x: token = -2;

:e: close (Unit);   Atoken(1)=token
    if (Nspecial>0) Atoken(2)=nspevn

  return
****************************************************************************
  entry ATOKSPECIAL (Ieven)
* set size of a finished token for special search
     Nspecial = 10+1
  return
****************************************************************************
  entry ATOKLOG (Ieven)
* fill next line in a token
  check token>0
     i = systemF(' date  >>  '//ctoken)
  return
****************************************************************************
  entry ATOKEND (Atoken)
* make a 'finished file' mark
  check token>0
     i = systemF(' uname -a > '//cdone)
     token = 0
  end
****************************************************************************
  subroutine   ACNUMBER(Num,cnum)
  implicit     none
  character    cnum*(*),S*12
  integer      num,L,i,i1,i2
     If abs(Num)<=1000000 { write (S,    *    ) NUM; }
     else                 { write (S,'(f12.6)') NUM; }
     i1=10;  i2=1;
     do i=1,10 { check S(i:i)!=' '; i1=min(i1,i); i2=max(i2,i); }
     cnum=S(i1:i2);    L=i2-i1+1
  end

