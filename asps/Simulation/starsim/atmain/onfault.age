* $Id: onfault.age,v 1.1.1.1 2004/01/12 23:49:38 potekhin Exp $
* $Log: onfault.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
* Revision 1.2  2001/06/15 15:17:30  nevski
* merging cmz cvs differences
*
* Revision 1.1  2001/02/27 10:14:54  nevski
*  first working release
*
************************************************************************
      subroutine on fault (c,nn,name)
*
* Description: HP arithmetic error handler control
*   In a normal mode (no +) unspecified errors are disabled.
*   With a + their handler is unchanged, is may stay as default.
*
************************************************************************
      character  Name*(*),c*(*)
#if defined(CERNLIB_HPUX)
      common /agerrorcount/nnum(5),mmax(5)
      common /agerroradres/iErrAddress,aErrName
      character  d*6,cc*6/'IDOUX*'/,aErrName*20,yes*3/'yes'/,no*3/'no'/,
                 kk(5)*3/'def','def','def','def','def'/
      Integer    CSADDR,LENOCC,nn,n,none/-987654/

      aErrName=%L(Name);  iErrAddress=0
      if (Lenocc(Name)>0) iErrAddress=CSADDR(%L(Name))
      d=c;  call CLTOU(d);

      do k=1,5
         n=none; if (index(d,cc(k:k))>0 | index(d,'*')>0) n=nn
         if (index(d,'+')>0 & n==none) Next

         mmax(k)=nnum(k)+max(n,0)   " next bunch of interupts to handle "
         if (n==0) mmax(k)=999999   " leave this signal to kuip handler "
         if (n>=0) then
            if     (k==1) then
              ON REAL   ILLEGAL   CALL on_err_RILL
              ON REAL*8 ILLEGAL   CALL on_err_DILL
              kk(1)=yes
            elseif (k==2) then
              ON REAL   DIV 0     CALL on_err_RDIV
              ON REAL*8 DIV 0     CALL on_err_DDIV
              kk(2)=yes
            elseif (k==3) then
              ON REAL   OVERFLOW  CALL on_err_ROVF
              ON REAL*8 OVERFLOW  CALL on_err_DOVF
              kk(3)=yes
            elseif (k==4) then
              ON REAL   UNDERFLOW CALL on_err_RUND
              ON REAL*8 UNDERFLOW CALL on_err_DUND
              kk(4)=yes
            elseif (k==5) then
              ON REAL   INEXACT   CALL on_err_RNEX
              ON REAL*8 INEXACT   CALL on_err_DNEX
              kk(5)=yes
            endif
         else
            if     (k==1) then
              ON REAL   ILLEGAL   IGNORE
              ON REAL*8 ILLEGAL   IGNORE
              kk(1)=no
            elseif (k==2) then
              ON REAL   DIV 0     IGNORE
              ON REAL*8 DIV 0     IGNORE
              kk(2)=no
            elseif (k==3) then
              ON REAL   OVERFLOW  IGNORE
              ON REAL*8 OVERFLOW  IGNORE
              kk(3)=no
            elseif (k==4) then
              ON REAL   UNDERFLOW IGNORE
              ON REAL*8 UNDERFLOW IGNORE
              kk(4)=no
            elseif (k==5) then
              ON REAL   INEXACT    IGNORE
              ON REAL*8 INEXACT    IGNORE
              kk(5)=no
           endif
         endif
      enddo
      print *,' FP error handler set',(': ',cc(k:k),'-',kk(k),k=1,5)
      if (iErrAddress!=0) print *,'    with user handler ',%L(aErrName)

      end
*
      subroutine on_err_act
#include "commons/quest.inc"
      common /agerrorcount/nnum(5),mmax(5)
      common /agerroradres/iErrAddress,aErrName
      character*20 aErrName, code(5) _
     /'illegal number','division by 0','overflow','underflow','inexact number'/

      Entry on_err_RILL; i=0; goto :e:
      Entry on_err_DILL; i=1; goto :e:
      Entry on_err_RDIV; i=2; goto :e:
      Entry on_err_DDIV; i=3; goto :e:
      Entry on_err_ROVF; i=4; goto :e:
      Entry on_err_DOVF; i=5; goto :e:
      Entry on_err_RUND; i=6; goto :e:
      Entry on_err_DUND; i=7; goto :e:
      Entry on_err_RNEX; i=8; goto :e:
      Entry on_err_DNEX; i=9; goto :e:

 :e:  k=i/2+1
      nnum(k)=nnum(k)+1
      if (nnum(k)>mmax(k)) return
      print *,' *** arithmetic fault: ',code(k),' ***'
      if (iErrAddress==0 & Lenocc(aErrName)>0) iErrAddress=CSADDR(%L(aErrName))
      if  iErrAddress==0 { CALL TRACEQC }
      else               { Call CsJCal(iErrAddress,1, k,0,0,0,0, 0,0,0,0,0) }
      if (mmax(k)!=999999) return
      IQUEST(1)=1
      call kusibr
#endif
      end



