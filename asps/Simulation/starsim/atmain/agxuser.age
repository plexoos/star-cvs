* $Id: agxuser.age,v 1.3 2009/04/09 22:34:10 perev Exp $
* $Log: agxuser.age,v $
* Revision 1.3  2009/04/09 22:34:10  perev
* gfilter added
*
* Revision 1.2  2004/03/01 17:26:33  fisyak
* Get rid of staf
*
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
*
* Revision 1.26  2003/11/16 20:15:19  nevski
* new control feature
*
* Revision 1.25  2003/10/13 16:08:58  nevski
* protect against bad syntax in MODE card
*
* Revision 1.24  2003/10/10 15:58:23  nevski
* set PROGRAM environment
*
* Revision 1.23  2003/10/06 08:31:14  nevski
* detp override logic corrected
*
* Revision 1.22  2003/09/14 21:29:08  nevski
* override of DETP not possible in batch
*
* Revision 1.21  2003/09/10 16:32:34  nevski
* Incremental DETP command
*
* Revision 1.20  2003/08/23 15:59:05  nevski
* add bug report feature
*
* Revision 1.19  2003/06/12 09:28:37  nevski
* fpu control introduced
*
* Revision 1.15  2002/11/15 18:46:16  nevski
* add interface to control GCALOR
*
* Revision 1.14  2002/06/17 16:13:03  nevski
* extend default path search in gexec
*
* Revision 1.13  2002/04/22 01:24:52  nevski
* Preserve case sensetivity in hbook path
*
* Revision 1.12  2002/02/21 01:11:49  nevski
* extend pathname in gexec command
*
* Revision 1.11  2001/12/21 01:16:12  nevski
* by-pass cmt makefile
*
* Revision 1.10  2001/12/17 23:38:00  nevski
* tflt command added
*
* Revision 1.4  2001/04/05 00:29:04  nevski
* make name extended to 256 char
*
* Revision 1.3  2001/03/29 08:30:34  nevski
* restore default GFILE behaviour - create rz-doc
*
* Revision 1.1  2001/02/27 10:14:49  nevski
*  first working release
*
*********+*********+*********+********+*********+*********+*********+*********+
*                                                                             *
      SUBROUTINE AGXUSER
*                                                                             *
* Description:  define AgI KUIP command repertoire                            *
* Modifications:                                                              *
* PN, 05.05.01 - gexec use cs_shl_load directly instead of comis chain        *
*                (PAWFCA->CSEXEC->CSPDIR->CSFILE->cscrsl->cs_shl_load)        *
*                to avoid name truncation                                     *
*              - Ibatch is saved in /ACXUSER/ to support strong error handling*
*********+*********+*********+*********+*********+*********+*********+********+
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcnum.inc"
#include "geant321/gcflag.inc"
#include "geant321/gckine.inc"
#include "geant321/gctrak.inc"
#include "geant321/gcphys.inc"
#include "geant321/gccuts.inc"
#include "geant321/gclist.inc"
#include "atlsim/asflags.inc"
#include "commons/agckine.inc"
#include "atlsim/agctrac.inc"
#include "atlsim/rzversion.inc"
#include "slug/sclink.inc"
     character     command*32,Cword*4,C*1,fext*16,S5*5,cext*4,cb*4/'no'/
     character*256 string1,string2,string3,fname,HOME/' '/
     integer       itring1(65),filt_act
     integer       LENOCC,CSADDR,SYSTEMF,CS_SHL_LOAD,
                   Ipar(10),Lux,Iseed,Npar,Len1,Len2,Len3,Lhome/-1/,IHG/1/,
                   I1,I2,I,Ip,Kp,Jp,L1,L2,L,M,Lc,J,K,i0,j0,id,Lad,Iad,Jad,
                   id1,id2,address,Ival,Ier,Iprin/1/,Li/20/,Nblk/1024/
     Character     mname*256, library*512, stringL*1024,cline*1024
     data          mname/' '/,library/' '/,stringL/' '/,cline/' '/
*    character*80  exten/'.make'/
     Real          PAR(1000),Rval,dummy1,dummy2
     Integer       iFPUTAG,iFPUSTATUS,iFPUUSED,iFPUOVERFLOW,ICW,IC1,IC0,IIC
*    force string1,2 at word boundary - comis pass whole words only
     EQUIVALENCE  (string1,dummy1),(string2,dummy2)
     INTEGER         AgIPAW,IwTYP
     COMMON /AgCIPAW/AgIPAW,IwTYP
*    batch mode introduces strong error handling
     Integer         Ibatch
     Common /ACXUSER/Ibatch
*    reset comis error (PAWFCA ... symbol not found ...)
     Integer         ii
     common /hcbits/ ii(37)
     Integer         IERR
     COMMON /CSERRNO/IERR
*    gcalor mode control
     Integer           Icalor
     Real                         Xcalor
     Common /agccalor/ Icalor(10),Xcalor(10)
*PN: flag to allow for Cerenkov reflection correction
     COMMON/acgckov/ICKOV
     Integer        ICKOV
*
     Logical Y
	external gfkine,gfvert
*
  call KUPATL( command, npar )
  Iprin=Idebug;  Ncommand+=1;
  if Lhome < 0
  {  call afname(HOME,'.exe'); Lhome=LENOCC(HOME)
     j=1
     Do i=1,Lhome { if (HOME(i:i)=='/') j=i; }
     HOME(j:)=' '; Lhome=j-1;
     prin1 HOME(:Lhome),Lhome; (' AGXUSER HOME = ',a,i6)
  }
  if command=='GDUMP' | command=='DUMP'
  {  " dump a sub-tree of banks "
     call kugetc (string1,Len1)
     call kugetc (string2,Len2)
     Call AgDUMP (string1(1:Len1),0,string2(1:Len2))
     prin1 string1(1:Len1),string2(1:Len2)
     (' dumping bank ',a,' with option ',a)
  }
  else If Command=='GFILTER'
  {
     call kugetc (string1,Len1)
     call uctoh(string1(1:Len1)//char(0),itring1,4,Len1+1);
     itring1(65) = filt_act(0,itring1,     0);
     itring1(65) = filt_act(3,gfkine ,gfvert);
  }
  else If Command=='GFILE'
  {  IER=0
     Call KUGETC(string1,len1);
     Call KUGETS(string2,len2);
     Call KUGETC(string3,len3);         C='P'
     IF (Index(String1(1:len1),'B')>0)  C='B'
     IF (Index(String1(1:len1),'O')>0)  C='O'
     If (string2(1:len2)=='ZEBRA')  { String2='ZEBRA.'//C; Len2=7; }

* PN, 28.09.98:  Do i=4,Npar { Call KUGETI(PAR(i-3)) }

     If  Index(String1(1:len1),'U')>0
     {  " open an INPUT: file stream request"  Ccommand=' ';
        { Ikine,IkineOld }=-5;  CoptKine=string3;
        call AgFOPEN(li,string2(1:len2),ier);
        Address=CsADDR('AgUSOPEN');  L1 = 4*((len2+3)/4)
        If (address!=0) { CALL CsJCAL1S(address,string2(1:L1)); ier=0 }
        If (address==0 & Ibatch>0) STOP ' No user code, batch job impossible '
     }
     else If Index(String1(1:len1),'N')>0
     {  Call AgNTOpen(String2(1:len2),4);  If (Ikine!=IkineOld) Ier=1; }
     else
     {  Call AgZOPEN(string1(1:len1),string2(1:len2),string3(1:len3),Ier)
      * PN, 28.09.98:                                         Npar-3,PAR)
        If Ier==0 & Index(String1(1:len1),'P')+Index(String1(1:len1),'B')>0
        {  IF Index(String1(1:len1),'P')>0
           { Call AGZREAD ('P',ier); if (ier>0 & Idebug<2) IkineOld=0 }
           IF Index(String1(1:len1),'B')>0
           { Call AGZREAD ('B',ier); if (ier>0 & Idebug<2) IbackOld=0 }

         * PN,03.09.98 - spool output until first trig
         * IF (Index(String1(1:len1),'O')>0)  Call AGZWRITE('O',ier)

         * On P stream produce documentation database _without_ IDL/DEF files,
         * so (Index(String3,'S')>0 | Index(String3,'*')>0) not used anymore:
           IF (Index(String1(1:len1),'P')>0)  Call AGKEEPS(' ',' ',0)
     }  }
     Iquest(1)=Ier
     If (Ibatch>0 & Ier!=0)  STOP ' input error, batch job impossible '
  }
  else If Command=='GHIST' | Command=='HFILE'
  {  " open a histigram file,  (NP - New, Preserve filecase)
     Call KUGETS(string1,len1); CFHIST=string1(1:len1)
     Call KUGETC(string2,len2); CDHIST=string2(1:len2)
     Call KUGETI(IUHIST);       call KUGETI(Nblk);   Call KUGETI(NHrecp)
     Nblk=1024*(max(nint(NBLK/1024.),1))
     Call HROPEN(IUHIST,CDHIST,CFHIST,'NP',Nblk,IVAL)
     if Ival==0 {  prin1 %L(CDHIST),%L(CFHIST),IUHIST
         (' Creating RZ-directory ',a,' for histogram file ',a,' on unit ',i3)}
     else       {  prin0 %L(CFHIST)
         (' AGXUSER: previous diagnostic may be unreliable, '/,
          ' HROPEN cannot open file ',a,' for histogramming ') }
  }
  Else If Command=='GRFILE'
  {   Call KugetS (String1,len1)
      Call KUGETC (String2,len2)
      Call KUGETI (ID)
      call agrfile(ID,String1(1:len1),String2(1:len2))
  }
  else If Command=='ACTIONS'
  {  Call KUGETC(string1,len1);  CRunType=string1(1:len1)
     prin1 CrunType; (' Allowed actions: ',a)
  }
  else If Command=='VERSIONS'
  {  Call KUGETC(string1,len1);     s5=String1(1:len1);
     L=min(Npar-1,10);    Do ip=1,L { Call KUGETI(Ipar(ip)) }
     IF     s5=='ATLAS' { prin1; (' rebank old');         call REBANKM(-1);   }
     elseIF s5=='STAF ' { prin1; (' rebank new');         call REBANKM( 0);   }
     elseIF s5=='DENSE' { prin1; (' rebank dens');        call REBANKM(+1);   }
     elseIF s5=='BATCH' { prin0; (' Batch version');      Ibatch=1; cb='yes'  }
     elseIF s5=='INTER' { prin0; (' Interactive  ');      Ibatch=0; cb='no';  }
     elseIF s5=='CEREN' { if (L>0) ICKOV=Ipar(1);         prin0 ICKOV
                          ('Cerenkov light reflection correction =',i2);      }
     elseIF s5=='FZLEN' { FzmaxL=Ipar(1); prin0  FzmaxL; (' FZ Max Len ',i9); }
     elseIF s5=='CALOR' { Call Ucopy(Ipar,Icalor,L); Prin0 Icalor,Xcalor;
                          (' Special GCALOR modes',10i8/15x,'Stats ',10F9.3); }
     elseIF s5=='GTRAC' { Call UCOPY(Ipar,IgTRACK,L); prin0 IgTRACK,IsTRACK;
                          (' Special Geant Params',10i8/15x,'Stats ',10i8);   }
     else { prin0 %L(string1);(' Unknown Version request ',a/' I known ',
      'ATLAS/STAF/DENSE(rebank),Batch/Inter,Cerenkov(0/1),FZlen,CALOR,GTRACK')}
*    elseIF String1(1:4)=='RZ95'  { prin1; (' RZ format 95 ');      Irz96=0;  }
*    elseIF String1(1:4)=='RZ96'  { prin1; (' RZ format 96 ');      Irz96=96; }
*    elseIF String1(1:4)=='HLEN'  { prin1 Ip; (' Hbook Lenp ',i9);  NHrecp=Ip;}
     Call SetEnv('VBATCH'//char(0),%L(cb)//char(0),1)
  }
  else If Command=='RANLUX'
  {  Call KUGETI(ISEED); Call KUGETI(Lux); Call KUGETI(I1); Call KUGETI(I2);
     Call RLUXGO(Lux,ISEED,I1,I2);         CALL GRNDMQ(I1,I2,0,'H')
  }
  else If Command=='GKINE' | Command=='PHASESPACE' _
        | Command='GMOMENTUM' | Command=='MOMENTUMBIN'
  {  " Flat phase space generation - old KINE card function "
     " Ntracks=" call KUGETI(Ikine);  "Ipart=" call KUGETI(ip);
     " get all other parameters - Pt,eta,phi,z limits "

     Do i=2,min(Npar-2,8),2
     { " historical order - may disappear sometime "
       j=i; If (i==8) j=9;
       call KUGETR(pkine(j));  call KUGETR(pkine(j+1))
       pkine(j+1) = max(pkine(j),pkine(j+1))
     }

* Ival 0,1 - SLUG-like KINE with flat energy or pseudo-rapidity, PDG codes
* Ival=2-9 - Geant particle codes (instead of PDG), always fix pT,
*            pseudo or real rapidity
     Ival=2;  if (Command=='PHASESPACE' ) Ival=3;
     If mod(Npar,2)!=0  " get GEANT/PDG PID switch "
     {  Call KUGETC(string2,len2); C=String2(1:1)
        If C=='E' {Ival=0} else If C=='P' {Ival=1}
     }
     If Ikine>=0
     {  " check to see if particle exists: "
        Kp=Ip; If (Ival<2) Call aPDG2GEA(IP,Kp)
        Jp=0;  If (1<=Kp&Kp<=Npart) Jp=LQ(Jpart-Kp)
        if Jp<=0 { <w> ip; (' AGXUSER: unknown particle id =',i6); Return; }
        Call UHTOC(IQ(JP+1),4,string1,20);  Len1=LENOCC(string1(1:20))
        Prin1 Ikine,string1(1:len1);
        (' Generating ',i5,2x,a,' events in interval:')
     } else
     {  prin1 Ip;
        (' reading events with following cuts (skipping ',i5,' events)')
     } Pkine(1)=IP
*
     If Command=='GKINE' | Command=='PHASESPACE' _
     {  If Ival==0 { Prin1 (pkine(i),i=2,3); ( 10x,f8.2, ' <  E  < ', f8.2) }
        else       { Prin1 (pkine(i),i=2,3); ( 10x,f8.2, ' < pT  < ', f8.2) }
        If Ival<=2 { Prin1 (pkine(i),i=4,5); ( 10x,f8.2, ' < eta < ', f8.2) }
        else       { Prin1 (pkine(i),i=4,5); ( 10x,f8.2, ' <  y  < ', f8.2) }
        Prin1 (pkine(i),i=6,7),(pkine(i),i=9,10)
              (10x,f8.3, ' < phi < ', f8.3,
              /10x,f8.1, ' <  Z  < ', f8.1)
        Pkine(8)=Ival
     }  else
     {  Prin1 (pkine(i),i=2,7),(pkine(i),i=9,10)
          ( 10x,f8.2, ' < px  < ', f8.2,
           /10x,f8.2, ' < py  < ', f8.2,
           /10x,f8.2, ' < pz  < ', f8.2,
           /10x,f8.1, ' <  Z  < ', f8.1)
        Pkine(8)=Ival+10
     }
  }
  else if Command=='TFLT'
  {  Call KUGETC(String1,Len1); Call KUGETR(pkine(4)); Call KUGETR(pkine(5))
     if (NPAR>3)              { Call KUGETR(pkine(6)); Call KUGETR(pkine(7)) }
      prin1; (' filtering tracks within following cuts :')
      Prin1 (pkine(i),i=4,5); ( 10x,f8.2, ' < eta < ', f8.2)
      Prin1 (pkine(i),i=6,7); ( 10x,f8.2, ' < phi < ', f8.2)
  }
  else if Command=='GBACK'
  {  Iback=-1;             Call KUGETI(IbBefor); Call KUGETI(IbAfter);
     Call KUGETR(BgMUlt);  Call KUGETR(BgTIME);  Call KUGETR(BgSKIP);
     prin1 IbBefor,IbAfter,BgMult,BgTime,BgSkip;
     (' Reading Background from ',i3,' to ',i3,' pile-up bunchs '/,
      ' with ',F5.1,' events in average, ',F5.1,' ns between them.'/,
      ' Average Randomizing skip ',F5.1,' events')
  }
  else If Command=='GVERTEX'
  {" set up the vertex position "
     AvFLAG=1;     Do I=1,Npar { CAll KUGETR(AVcoor(i)); }
     Prin1 Avcoor; (' AGXUSER: generating vertex at ',3f12.4)
  }
  else If Command=='GSPREAD'
  {" set up the vertex position "
     AvFLAG=1;     Do I=1,Npar { CAll KUGETR(AVsigm(i)) }
     Prin1 AVsigm; (' AGXUSER: generating vertex spread ',3f9.4)
  }
  else If Command=='GDROP' | Command=='DROP'
  {" drop selected bank tree "
     Call KUGETC(String1,Len1); Call AGDROP(String1(1:len1));
  }
  else If Command=='GMODE' | Command=='MODE'
  {" detector mode datacard  "
     Call KUGETC(String1,Len1); Cword=String1(1:len1);
     If Cword=='ALL'  { ID1=1; ID2=0; IF (LKDETM>0) ID2=IQ(LKDETM-2); }
     else             { Call AsBDETE(Cword,ID1);    ID2=ID1;          }
     Do i=2,Npar-1,2
     {  Call KUGETC(String2,Len2); Cword=String2(1:len2)
        Do j=1,NFLAGS
        { Check Cword==CFLAG(j);   Call KUGETI(IVAL)
          Do ID=ID1,ID2 { If (LQ(LKDETM-ID)>0) IQ(LQ(LKDETM-ID)+j)=IVAL; }
          if  Cword='BACK' & Ival>=0
          { M=10**(int(1+LOG10(Ival+0.9))/2); L1=-Ival; L2=+Ival; L=1;
            IF M>1  { L1=-(Ival/M/10);  L2=mod(Ival,M); L=mod(Ival/M,10) }
            If L!=1 { Prin0 Ival; (' pile-up keyword is wrong :',i12) }
            Prin1 L1,L2; (' pile-up in bunches ',i5,'  -trigger-',i5)
          } Break;
     }  } 
     Do ID=ID1,ID2
     { Check LQ(LKDETM-ID)>0;
       Prin1 IQ(LKDETM+ID),(Cflag(j),IQ(LQ(LKDETM-ID)+j),j=1,Nflags)
                  (1x,A4,' mode:',15(1x,a4,i2))
  }  }
  Else If Command=='DETP' | Command=='GPAR'
  {" detector parameters in DETM bank "
      Call KUGETC(string1,len1); Cword=string1(1:4)
      Call AsBDETE('DOCU',ID);   Call AsBDETE(Cword,ID);
      j=2;  string2=' ';   Len2=0;  Len3=0;
      Call ASLGETBA (Cword,'DETP',1000,L,Par) 
      If (L>0) then
         If      (string1(len1:)=='+') then
            J=L+1
         else If (string1(len1:)!='-') then
            prin0 Cword; (' Warning: DETP ',a,' overwritten')
            If (Ibatch>0)  STOP ' batch job impossible '
         endif
      endif
      Do i=2,Npar
      { * awful coding, may be sometime will do it better. PN.
         :more:       string1=string2; Len1=Len2;
         if Len3==0 { Call KUGETS(string2,len2);  }
         else       { string2=string3; Len2=Len3; }
         Call KUDPAR(string2,Ival,Rval,string3,len3,C);
         Len3=0
         if C=='C'
         {  i0=INDEX(string2,'=')
            if 0<i0 & i0<len2
            { string3=string2(i0+1:len2);  Len3=Len2-i0
              string2=string2(1:i0);       Len2=i0
            }
            If i0==1 & len2==1   " = "
            { string2=string1(1:len1)//'=';     j=j0; len2=len1+1;   }
            Call UCTOH(string2,PAR(j),4,len2);  j0=j; j+=(len2-1)/4+1;
            If J>=1000 { print *,' Tooooo many input parameters !!!'; Break; }
         }
         If C=='R'  { PAR(j)=Rval;  J+=1; }
         If C=='I'  { PAR(j)=Ival;  J+=1; }
         prin4 C,string2(1:len2),len2; (' DETP input: ',a,' = ',a,i6)
         If (Len3>0) goto :more:
      }  Call AsLSETBA(CWORD,'DETP',j-1,PAR)
      if (id>0) Call MZFLAG(IxCons,LQ(LkDetm-id),1,'Z')
      IQUEST(1)=0
  }
  Else If Command=='GFLAG' | Command=='GSFLAG'
  {" all possible subsystem control flags "
     Do i=1,Npar-1,2
     {  Call KUGETC(string1,len1);  Call KUGETI(Ival);
        Call AgSFLAG(string1(1:len1),Ival)
        Prin1 string1(1:len1),Ival; (' Flag ',a,' set to ',i3)
  }  }
  Else If Command=='GDEBUG'
  {" make hard debugging level available "
     Call KUGETI (Idebug);          Call KUGETI (Itest)
  }
  Else If Command=='GCLOSE'
  {" close geometry and possible recalculate cross-sections"
     Call GGCLOS;  IF JRUNG>0  { IQ(JRUNG+19)=0; IQ(JRUNG+20)=0; }
     If (Npar>0) Call AGPHYSI; CALL GRNDMQ(I1,I2,0,'H')
  }
  Else If Command=='GAUTO'
  {" set geant IGAUTO flag (does not work in GEANT yet)"
     Call KUGETC(string1,len1);
     If string1(1:2)=='ON' | string1(1:1)='1' {IGAUTO=1} else {IGAUTO=0}
     prin1 IGAUTO; (' IGAUTO flag set to ',i2)
  }
  Else If Command=='GSTOP'
  {" stopping electron control "
     Call KuGETI(Ival);  DPHYS1=Ival;
     prin1 Ival;   ('  stopping electron mode=',i2)
  }
  Else If Command=='GPRINT'
  {
   " different object types are printed here, none defined in cdf "
   "  - check parameter presence before getting them from kuip    "
     Call KUGETC(string1,len1); cword=string1(1:len1)
     If cword='PART' | cword='MATE' | cword='TMED' | cword='ROTM' _
      | cword='SETS' | cword='VERT' | cword='KINE' | cword='JXYZ' _
     {  IP=0;  if (Npar>1) CALL KUGETI(IP);  call GPRINT(Cword,IP)  }
     else If cword='GENZ'
     {  IP=0;  if (Npar>1) CALL KUGETI(IP)
        JP=IP; if (Npar>2) CALL KUGETI(JP)
        call aGNZPRINT(IP,JP)
     }
     else If cword='DECA'|cword='DCAY'
     {  IP=0;  if (Npar>1) CALL KUGETI(IP);  call GPDCAY(IP)        }
     else If cword='HITS'|cword='DIGI'
     {  string1='*'; if (Npar>1) Call KuGETC(string1,len1);
        string2='*'; if (Npar>2) Call KuGETC(string2,len2)
        if (string1!='*') string1=string1(1:3)//Cword(1:1)
        call AgPDIGI(string1,string2)
     }
     else If cword='VOLU' & JVOLUM>0
     {  if Npar<=1  { Call GPVOLU(0) }
        else
        {  Call KuGETC(string1,Len1); Do I=1,NVOLUM
           {  Call UHTOC(IQ(LQ(JVOLUM-I)-4),4,String2,4); Call CLTOU(String2)
              If (String1(1:4)==string2(1:4)) Call GPVOLU(I)
     }  }  }
  }
  Else If Command=='GPHITS' | Command=='GPDIGI'
  {  Call KuGETC(string1,len1); Call KuGETC(string2,len2)
     if (string1!='*') string1=string1(1:3)//Command(3:3)
     call AgPDIGI(string1,string2)
  }
  Else If Command=='GEXEC'  | Command=='MAKE'
  {  * PN, 04.03.98:  make it case sensitive;
     * PN, 09.05.99:  get the whole string
     * PAWFCA->CSEXEC->CSPDIR->CSFILE->csrmsl(f)+cscrsl(f,pid,ext,ier)->cs_shl
     * local files should be prefixed by ./ .
     Call KuGetE(stringL,len1);

*    split into path (up to K-1), name (K:Lc) and extention (from L+2 to L1)
     L1=index(stringL,' ')-1; if (L1<=0) L1=Len1;
     L=L1; Lc=L1; K=1; DO i=L1,1,-1
     { if (stringL(i:i)=='.') { Lc=i-1; If (L==L1) L=Lc; }
       if (stringL(i:i)=='/') { K=i+1;  Break; }
     }
     fext=' '; if (Lc<L1) fext = stringL(Lc+2:L1)
     prin3 K,len1,L1,L,Lc;    (' GEXEC => parced K,len1,L1,L,Lc =',6i6)

*    call to csrmsl is needed to free the sl file, path is irrelevant
     Call CSRMSL(StringL(K:L)); CALL PAWCS; II(4)=0;

*    determine which type of GEXEC is required and which make is available

     if (fext=='sl' | fext=='so' | fext=='csl' | fext=='cso')
     {* explicitly pointed share library, sl/so - load, csl/cso - load and call
      * there were an extention, so L=Lc
*IF,newcall. - does not work.
*       if k>1 { JAD=CS_SHL_LOAD(stringL(1:L1));       }
*       else   { JAD=CS_SHL_LOAD('./'//stringL(1:L1)); }
        cext='.'//fext; if (fext=='sl'|fext=='so') cext='.c'//fext
*       CALL PAWFCA(stringL(1:L)//cext,L+4,JAD,max(0,Idebug-1))

        Do i=1,4
        { if (i==1) fname=stringL(1:L)
          if (i==2) fname='.lib/'//stringL(1:L)
          if (i==3) fname=HOME(1:Lhome)//'/'//stringL(1:L)
          if (i==4) fname=HOME(1:Lhome-3)//'lib/'//stringL(1:L)
          INQUIRE(File=%L(fname)//'.'//fext,Exist=Y)
*         print *,' inquire ',%L(fname)//'.'//fext,' -> ',Y
          if (Y)    { call CSFILE(%L(fname)//cext); break; }
        }
        JAD=CSADDR(stringL(K:L))
        if (Ierr!=0 & Idebug>0) print *,' GEXEC: CSFILE return Ierr=',Ierr
     }
     else
     { call AfNAME(mname,'.makefile')
       If LENOCC(Mname)==0 | Mname='makefile'
       { * old fashion - rely on existing gnu-makefile
         Prin1  'make '//stringL(1:L)//'.sl';  ('gexec: ',a)
         Ier = SystemF('gmake '//stringL(1:L)//'.sl')
#if defined(CERNLIB_NEWCALL)
         if k>1 { JAD=CS_SHL_LOAD(      stringL(1:L)//'.sl'); }
         else   { JAD=CS_SHL_LOAD('./'//stringL(1:L)//'.sl'); }
#else
         CALL  PAWFCA(stringL(1:L)//'.csl',L+4,JAD,max(0,Idebug-1))
#endif
       }
       else  " new fashion - explicitly selected gnu-makefile "
       { cline = 'gmake -s -f ' // %L(mname) // ' input="' // _
                                   %L(stringL) // '" ' // %L(library)
         Prin1 %L(cline); ('gexec: ',a);      Ier = SystemF(%L(cline))
#if defined(CERNLIB_NEWCALL)
         JAD=CS_SHL_LOAD('.lib/'//stringL(K:L)//'.sl');
#else
         CALL PAWFCA('.lib/'//stringL(K:L)//'.csl',L-K+10,JAD,max(0,Idebug-1))
#endif
       }
       If (Ibatch>0 & Ier!=0)  STOP ' gmake error, batch job impossible '
     }

* use call address as alternative
     If (Jad==0 & Lc<L) Jad=CsADDR(stringL(K:Lc)); L=Lc;
     prin3 stringL(K:Lc),Jad;  (' GEXEC =>  now Jad of ',a,'      =',i12)
     LAD=CsADDR('Ami_Module_Register')
     if (JAD!=0 & LAD!=0) Call CsJCAL(LAD,2,stringL(K:L))
     IAD=CsADDR(stringL(K:L)//'_init');
     prin3 stringL(K:L),Iad;   (' GEXEC => next Iad of ',a,'_init =',i12,2i6)
     IF  IAD!=0       " staf module - init and possibly start it "
     {  CALL CSJCAL(IAD,0, 0,0,0,0,0, 0,0,0,0,0)
        JAD=CsADDR(stringL(K:L)//'_start')
     }
     prin3 Jad;      (' GEXEC => next Jad    =',i12,2i6)
     if (JAD!=0)   CALL CSJCAL(JAD,0, 0,0,0,0,0, 0,0,0,0,0)
     If (Ibatch>0 & IAD+JAD==0) STOP ' no call point, batch job impossible '
     If (Idebug>1 & IAD+JAD==0) print *,'gexec: no ',stringL(K:L),' call point'
     Iquest(1)=Ier
     prin3;          (' GEXEC => all calls done <=');
  }
  Else If Command=='GMAKE'
  {
     if (Npar>0) { Call KuGetE (library,len2); }
  }
  Else If Command=='GSTAT'
  {  DO i=1,Npar
     {  CALL KUGETC(string1,Len1)
        IF String1(1:Len1)=='ALL' | String1(1:len1).EQ.'*'
        {  NHSTA=5;  CALL UCTOH('TIMESIZEMULTNTRASTAK',LHSTA,4,20); }
        else
        {  NHSTA=i;  CALL UCTOH(String1,LHSTA(i),4,4); }
     }
     CALL GBHSTA; prin1 NHSTA,(LHSTA(i),i=1,NHSTA)
     (I5,' standard GEANT histogram activated:',10(1x,a4))
  }
  Else If Command=='STRUCTURES'
  {   Call KuGetS (string1,len1); Call KuGetS (string2,len2);
      Call AGKEEPS(string1(1:len1), string2(1:len2),0);
  }
  Else If Command=='TABLES'
  {   Call KuGetS (string1,len1); Call KuGetS (string2,len2);
      Call AXTABLES(string1(1:len1), string2(1:len2));
  }
  Else If Command=='TABCLEAR'
  {   Call KuGetS (string1,len1);
      Lad = CsADDR('TDM_CLEAR_ALL')
      Call CsJCAL(Lad,2,string1(1:len1)//char(0))
  }
  Else If Command=='ONFAULT'
  {   Call KugetC  (String1,len1); Call KugetI (L1);
      Call KugetC  (String2,len2);
      Call Onfault (String1(1:Len1),L1,String2(1:len2))
  }
  Else If Command=='HIGZ'
  {  * open main graphic workstation : err log unit, workstation type  
     if IwTyp==0
     { Call KugetI (IHG); call IGSSE(6,IHG); IwTyp=IHG   }
  }
  Else If Command=='FPU_CONTROL' 
  {  
#if defined(__GNUC_)
    if (NPAR==0)  
    { call  FPUGETCW(ICW)
      Call  FPUSTACK(iFPUTAG,iFPUSTATUS,iFPUUSED,iFPUOVERFLOW)
      Prin0 ICW,iFPUTAG,iFPUSTATUS,iFPUUSED,iFPUOVERFLOW
      (' Control Word:',o9/,
       ' FPUTAG      :',o9/,
       ' FPUSTATUS   :',o9/,
       ' FPUUSED     :',o9,3x,'Number of stack registers used, 0=OK '/,
       ' FPUOVERFLOW :',o9,3x,'If>0 Stack overflow occurred (FPUUSED>8)'/,
       '             : see Help (Man) Fpu_Control for more details ')
    }
    else
    { Call KUGETI(IC0); ICW=0; iiC=1
      do i=1,5
      {  iC1=mod(ic0,10); 
         if iC1>=8 { Prin0;(' Bad Control Word Input'); return }
         ICW+=iic*iC1; ic0/=10;  iic*=8
    } }
    call FPUSETCW(ICW); Prin1 ICW; ('FPU Control Word = ',o6)
#endif
  }
  Else If Command=='BUG_REPORT'
  {   call BUGREPRT; }
  Else If Command=='ABEND' | Command=='QQ' 
  {   call ABEND; }
  else
  { print *,' AGXuser: Unknown Command - ',command(1:lenocc(command)),
            ', Npar = ',Npar
  }
*
  end


