*
* $Id: rndm.age,v 1.2 2004/08/27 21:41:15 potekhin Exp $
* $Log: rndm.age,v $
* Revision 1.2  2004/08/27 21:41:15  potekhin
* Proper interface with the Pythia random number generation.
* We detect whether the Pythia sequence is initilaized, and if
* yes, use it. If no, we default to our own starsim generator.
*
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
*
* Revision 1.5  2002/01/26 15:21:42  nevski
* bugfix for the full event reproducibility
*
* Revision 1.4  2001/10/28 15:08:09  nevski
* dummy entries added
*
* Revision 1.3  2001/07/26 16:07:21  nevski
* *** empty log message ***
*
* Revision 1.2  2001/06/14 23:47:51  nevski
* RLU added for latest pythia
*
* Revision 1.1  2001/02/27 10:14:55  nevski
*  first working release
*
*
***************************************************************************
*                                                                         *
*                Function    R N D M (x)
*                                                                         *
Replace [ON(#) OUT(#)] with [;IF(#1) {#1=.false.; Print *,'*** ','#2',' ***';}]
***************************************************************************
      SUBROUTINE GRNDM (RVEC,LEN)
*  -  basic switching logic
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
      Character         CMD*(*)
      Real              RVEC(*)
      Integer           I1,I2,ISEQ,L,Len,ISVEC
      Integer           INDEX,Li,IS1/0/,IS2/0/
      Integer           IgChoice,Lux,ISEED
      common /AgCRNDM/  IgChoice,Lux,ISEED

      Entry      RANLUX (RVEC,LEN)
      Entry      RANMAR (RVEC,LEN)
      if IgChoice<=0 { Call aGRNDM(Rvec,Len) } else { Call aRANLUX(RVEC,LEN) }
      Return
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      Entry      GRNDMQ (I1,I2,ISEQ,CMD)
*     -----
      if IgChoice<=0
      { Call aGRNDMQ(I1,I2,ISEQ,CMD); Lux=-1; ISEED=ISEQ; Return; }

      if CMD==' '                "  initialization with ISEQ      "
      {  ISEED=ISEQ;  call aRLUXGO(Lux,ISEED,0,0);                }

      if INDEX(CMD,'Q')>0        "  get seeds I1 I2 for ISEQ  "
      {  ISEED=ISEQ;  call aRLUXGO(Lux,ISEED,0,0);  I1=0; I2=0;   }

      if INDEX(CMD,'G')>0        "  get present status (not ISEQ) "
      {  call aRLUXAT(Lux,ISEED,I1,I2);                           }

      if INDEX(CMD,'S')>0        "  restart using I1,I2(not ISEQ) "
      {               call aRLUXGO(Lux,ISEED,I1,I2);              }

      if INDEX(CMD,'H')>0        "  save status in RUNG/HEAD bank "
      {  call aRLUXAT(Lux,ISEED,IS1,IS2)
         if JRUNG>0
         {
           If IQ(JRUNG+4)!=ISEED
           {  IQ(JRUNG+2)=IgChoice; IQ(JRUNG+3)=Lux; IQ(JRUNG+4)=ISEED;
              IQ(JRUNG+5)=IS1;      IQ(JRUNG+6)=IS2;
           }  IQ(JRUNG+19)=IS1;     IQ(JRUNG+20)=IS2;
         }
         if JHEAD>0
         { IQ(JHEAD+3)=IS1;      IQ(JHEAD+4)=IS2;
*             JHEAD+5   and   JHEAD+6 are taken by subevent numbering
           IQ(JHEAD+7)=IgChoice; IQ(JHEAD+8)=Lux; IQ(JHEAD+9)=ISEED;
           if (IQ(JHEAD-2)<=1) Call MZPUSH(IxDIV,   JHEAD, 2,0,'I')
           if (LQ(JHEAD-2)<=0) Call MZBOOK(IxDIV,Li,JHEAD,-2,'RNLX',0,0,25,2,0)
           Call aRLUXUT(IQ(LQ(JHEAD-2)+1))
         }
      }
      RETURN
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      ENTRY   RLUXGO (L,ISEQ,I1,I2)
c  -  initialise from single ISEQ, unless I1=I2=0
      if L>=0         { Call aRLUXGO(L,ISEQ,I1,I2); Lux=L; IgChoice=1 }
      elseif I1+I2==0 { Call aGRNDMQ(I1,I2,ISEQ,' ');      IgChoice=0 }
      else            { Call aGRNDMQ(I1,I2,ISEQ,'S');      IgChoice=0 }
      Lux=L; ISEED=ISEQ; Return
**
      ENTRY   RLUXAT (L,ISEQ,I1,I2)
c  -  return all four values
      if IgChoice>0   { Call aRLUXAT(L,ISEQ,I1,I2);        }
      else            { Call aGRNDMQ(I1,I2,ISEQ,'G'); L=-1 }
**
      ENTRY   RLUXIN (ISVEC); Call aRLUXIN(ISVEC); return
      ENTRY   RLUXUT (ISVEC); Call aRLUXUT(ISVEC); return
**
      ENTRY   RMARUT (ISEQ)
      ENTRY   RMARIN (ISEQ)
      ENTRY   RDMOUT (ISEQ)
      ENTRY   RDMIN  (ISEQ)
      ENTRY   RN32IN (ISEQ)
      ENTRY   RG32IN (ISEQ)
      entry   RN32OT (ISEQ)
      entry   RG32OT (ISEQ)
      print *,' RMARIN/UT, RN32IN/OT, RG32IN/OT, RDMIN/OUT not implemented '
*
      end
*******************************************************************************
      FUNCTION    RNDM (a)
*  -  all functions substitution
      implicit    none
      REAL        RNDM,RANF,RN32,RG32,RLU,A,B
      REAL*8      PYR,BB,PYRPYTH
      Integer     IRNDM,IB
      EQUIVALENCE (IB,B)
      data        B/0/
      save        B
*     may be RLU=b*(1+BB*3.d-8)
C...Random number generator status for pythia
      Integer         MRPY
      Real*8                  RRPY
      common /pydatr/ MRPY(6),RRPY(100)
*
                           CALL GRNDM(b,1);  RNDM  = b;  return
      ENTRY IRNDM(a);      Call GRNDM(b,1);  IRNDM =Ib;  return
      ENTRY RANF(a);       Call GRNDM(b,1);  RANF  = b;  return
      ENTRY RLU (a); BB=b; Call GRNDM(b,1);  RLU   = b;  return
      ENTRY PYR (a); 
       if (MRPY(1)==0 | MRPY(1)=19780503) { Call GRNDM(b,1); PYR   = b;}
       else                              {    PYR = PYRPYTH(a)        }
      return
      ENTRY RN32(a);       Call GRNDM(b,1);  RN32  = b;  return
      ENTRY RG32(a);       Call NORRAN(b);   RG32  = b;  return
      end
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      SUBROUTINE  NORRAN (A)
*  -  all subroutine substitution
      Implicit    NONE
#include "geant321/gcflag.inc"
      Real        A,B/99999/
      Integer     Id/-99999/
*
      Entry       NORMAL (A)
*
      A=B; B=99999;
      if (A!=99999 & Idevt==Id) Return
      Call RANNOR(A,B)
      Id=Idevt
      END
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      SUBROUTINE  RANNOR (A,B)
      IMPLICIT NONE
      REAL Y(2),A,B,X,R,Z

      CALL GRNDM(Y,2)
      IF (Y(1).EQ.0.) CALL GRNDM(Y,2)
      X = 6.283185*Y(2)
      Z = ALOG(Y(1))
      Z = Z+Z
      R = SQRT (-Z)
      A = R*SIN (X)
      B = R*COS (X)
      RETURN
      END
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      subroutine RNPSSN (amu,N,ier)
      call POISSN(amu,N,ier)
      end

