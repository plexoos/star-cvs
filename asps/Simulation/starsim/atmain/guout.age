* $Id: guout.age,v 1.2 2010/03/25 18:16:07 perev Exp $
* $Log: guout.age,v $
* Revision 1.2  2010/03/25 18:16:07  perev
* max rejects now 1e6
*
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
*
* Revision 1.4  2003/05/07 17:04:06  nevski
* make draw bank persistent
*
* Revision 1.3  2001/06/14 23:45:39  nevski
* unprotected link restored
*
* Revision 1.2  2001/02/28 17:16:16  nevski
* agckine.inc moved to commons
*
* Revision 1.1  2001/02/27 10:14:52  nevski
*  first working release
*
******************************************************************************
*                                                                            *
                   Subroutine  GUOUTE (IENT)
*                                                                            *
* Modifications:                                                             *
* PN, 07.05.2003: all output functionality moved completely to GUOUTE call   *
*    -  GUOUT just does nothing.                                             *
*    -  AGUOUT may add or remove structures, but it does not write them      *
*    -  GUOUTE is called before the memory is cleared for the next trigger   *
*                                                                            *
******************************************************************************
#include "commons/typing.inc"
#include "commons/quest.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcflag.inc"
#include "commons/agckine.inc"
#include "slug/sclink.inc"
   Integer  IENT,Ier,CsADDR,address,Idevt0/-1/,Isimu,ISLFLAG
   Integer  IOX/0/,JDSA1,JDSA2,Lrec,Len,L,L1,N,L0/1000/
   character*1 STRM(2)/'O','E'/
   Real     zvert
*
      If (IOutp!=IOutpOld) then
         If (IOutp==-1) Call AgZOPEN('O','ZEBRA.O','*',Ier)
         If (IOutp > 0) IOutpOld = Ioutp
      endif
*
      address=CsADDR ('AGUOUT')
      if (address!=0) CALL CsJCAL (address,0, 0,0,0,0,0, 0,0,0,0,0)
      If (IEOTRI !=0) return
*
      Ier   = 0
      If (IOutpOld==-1)   call AgZwrite(STRM(IENT),ier)
      If (ier != 0)       { IOutpOld = 0;  IQUEST(1)=Ier; IEORUN=1; }
*
*  fillout a Direct Access Table with vertex Z-position
*
     Isimu = ISLFLAG('OUTP','SIMU')
     Check Isimu>1 & LkMAPP>0            " Mode OUTP simu 2 is a user request "
     Lrec=IQ(LkMAPP+3); Check Lrec>0     " Lrec should be filled by AgZREAD   "
     Check Idevt!=Idevt0; Idevt0=Idevt   " Do saving only once per event      "
     Check JVERTX>0 & LQ(JVERTX-1)>0     " check that we have a vertex        "

     If (IQ(LkMAPP-2)<3 | LQ(LkMAPP-3)<=0) then             " book a DaT bank "
        If (IOX==0) Call MZFORM('MAPI', '/1F 2I', IOX)
        call Mzbook (IxCons,L,LkMapp,-3,'MAPI',1,1,L0, IOX, 0)
     Endif

     L=LQ(LkMAPP-3); check L>0; N=IQ(L+3); Len=3*(N+2)

*  take care later of possible lack of space
     if (IQ(L-1)<Len) Call MZPUSH(IxCONS,L,0,L0,'I')

     zvert  = Q(LQ(JVERTX-1)+3)
     JDSA1 = IQ(LkMAPP+6);  JDSA2 = IQ(LkMAPP+9);  L=LQ(LkMAPP-3);

     L1=L+3*(N+1);    IQ(L+2) =Lrec;                  IQ(L+3) =N+1
     Q(L1+1)= zvert;  IQ(L1+2)=(JDSA1-1)*Lrec+JDSA2;  IQ(L1+3)=Idevt
     IQUEST(1)=0
     return
* 
   entry GUOUT
   end

