* $Id: afname.age,v 1.2 2004/03/01 17:26:33 fisyak Exp $
* $Log: afname.age,v $
* Revision 1.2  2004/03/01 17:26:33  fisyak
* Get rid of staf
*
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
*
* Revision 1.5  2001/11/24 17:44:49  nevski
* bug fix (makefile moves up)
*
* Revision 1.4  2001/10/29 16:57:39  nevski
* fit cmt structure
*
* Revision 1.3  2001/08/28 17:21:06  nevski
* clean up dependences for cmt, allow .exe extention
*
* Revision 1.2  2001/06/15 15:17:29  nevski
* merging cmz cvs differences
*
* Revision 1.1  2001/02/27 10:14:47  nevski
*  first working release
*
* Revision 1.2  2001/02/16 17:26:32  nevski
* support for the true filename search
*
* Revision 1.1  2001/02/16 17:07:02  nevski
* support for the true filename search
*
*******************************************************************************
        Subroutine      AfNAME (def,exten)
*                                                                             *
* Description:                                                                *
* Find an auxilary file. If extention starts with a dot, filename is composed *
* of the executable name plus extention, otherwise extention is the filename. *
* Search is done first in the CWD, then in the directory where the executable *
* has come from - all logic of system search (PATH+links) is repeated.        *
* Modifications:                                                              *
* PN, 28.08.01 - If the executable name has an extention, it is ignored       *
* PN, 01.11.01 - bug corrected in file.extenstion search                      *
* PN, 24.11.01 - when search fails, look one level up in CMT environment      *
*                                                                             *
*******************************************************************************
        implicit        none
        character*4096  path/' '/
        character*256   prog/' '/,file,def0,line,lino
*       character*12    exten/'.def'/
        character*(*)   exten,def
        character*24    pattern/'#chto v imeni tebe moem#'/
        integer         LENOCC,INDEX,i,j,L,N,Idot
        logical         AfEXIST
        INTEGER           ICSDEBUG
        COMMON /CSDEBUG/  ICSDEBUG
*
        call getargf(0,prog)
*       call getargf(2,exten)

* local copy of 'name.exten' or just 'exten'
        L=Lenocc(prog); j=0; Idot=L+1
        do i=1,L { if (prog(i:i)=='/') { j=i; Idot=L+1 }
                   if (prog(i:i)=='.') Idot=i
                 }
        def=exten; if (exten(1:1)='.') def=prog(j+1:Idot-1)//exten
        if (ICSDEBUG>0)   print *,'==> looking for ',%L(def)
        if (AfEXIST(def)) Return;      def0=def;

* explicitly addressed or in the path
        file=prog                     " addressed explicitly "
        if j==0                       "  default $PATH used  "
        { call getenv('PATH',path); N=Lenocc(path); path(N+1:N+1)=':';
          for (i=1; i<=N+1; i+=j)
          { j=index(path(i:),':');  file=path(i:i+j-2)//'/'//prog
            if (ICSDEBUG>0)    print *,'  > testing file ',%L(file)
            if (AfEXIST(file)) break
        } }

* executable found, find extention
        if AfEXIST(file)
        {  * truncate //
           while index(file,'//')>0
           { line=file; i=index(line,'//'); file=line(:i)//line(i+2:) }
           * cutout executable extention
           L=Lenocc(file); J=0; Idot=L+1
           do i=1,L { if (file(i:i)=='/') { J=i; Idot=L+1 }
                      if (file(i:i)=='.') Idot=i;  "bug corrected 24.11.01, PN"
                    }
           if (exten(1:1)!='.') Idot=J+1
           * same directory candidate
           def=file(1:Idot-1)//exten;
           if (ICSDEBUG>0)   print *,'  > testing file ',%L(def)
           if (AfEXIST(def)) Return
           * upper level candidate
           def=file(1:J)//'../'//file(J+1:Idot-1)//exten;
           if (ICSDEBUG>0)   print *,'  > testing file ',%L(def)
           if (AfEXIST(def)) Return

* automatic extraction
           def=' '
           if (AfEXIST(file))
           {
             Open (98,file=file,STATUS='OLD',ERR=:er:)
             if (ICSDEBUG>0)   print *,'  > opening file ',%L(file)
             loop
             { lino=line; line=' '; READ (98,'(A)',END=:er:) line
               if (def!= ' ')
               {  if (index(line,'endfile')>0) break
                  WRITE (97,'(A)')    %L(line)
               }
               if (lino==pattern & index(line,exten)>0)
               { def=def0
                 Open (97,file=def0,STATUS='NEW',ERR=:er:)
               }
           } }
           :er: close(98); close(97); return;
        }

        def = ' ';
        if (ICSDEBUG>0) print *,' file not found '
* :ok:  if (ICSDEBUG>0) print *,' def = ',%L(def)
        end

