**********kinema*************kinema*****************kinema***********
*                                                                   *
*             Special kinematic for this MC                         *
*                                                                   *
*********************************************************************

    Function      D A L D E C (M, P0, PR);
Implicit Real (m);  Dimension P0(5),PR(5,3),P(5,4),M(3);
Data pi /3.14159/;  Common /QQpair/  Mee,wee,cti,cte;
Me  = m(2);   M2e = 2*Me;   Mo = P0(5);
if m(1)==m(2)  { Mm=m(3) }  else    { Mm=m(1) };
if Mo<=Mm+M2e  { call VZERO (PR,3*5); Return; };
* print *,' Mo,mm,me=',Mo,mm,me
!-----          First - Mass and angles of the ee-pair          -----!;
Loop
{ Mee = m2e*((Mo-Mm)/M2e)**rndm(1);                            Wee = 1
* Mee = m2e+(Mo-Mm-M2e)*rndm(1); Wee=(Mo-Mm-m2e)/Mee/alog((Mo-Mm)/m2e)
  De  = (Mee-M2e)*(Mee+M2e);                               CHECK  De>0
  Dd  = (Mo+Mm+Mee)*(Mo+Mm-Mee)*(Mo-Mm+Mee)*(Mo-Mm-Mee);   CHECK  Dd>0
  r1  = 2*(2*Rndm(-1)-1);   r2 = Sqrt(1+r1**2);
  Cte = (r2+r1)**.333333 - (r2-r1)**.333333;      ! If (Mm#0) Cte=r1/2; !
  Fkk = Sqrt(Dd)/(Mo-Mm)/(Mo+Mm);     e=(m2e/mee)**2;         z=Cte**2;
  Wkw = Fkk*(1-Mee**2/(Mo**2+Mm**2))*Sqrt(1-e)*(1+e*(1-z)/(1+z)) * Fkk;
  wkwf=wkw*formfactor(Mo,Mee); 
  if (wkwf>1.1) print *,'DALDEC err',Mo,mm,mee,wkw,wkwf
} until wkwf > 1.1*rndm(-1);         Call Vzero(p,4*5);

!->             now real gamma (or pi0 ... etc)                    <-!;
Pd =Sqrt(Dd)/(2*Mo);  fi = 2*pi*rndm(-1);       Cti  = 1 - 2*rndm(-1) ;
  r1  = 2*(2*Rndm(-1)-1);   r2 = Sqrt(1+r1**2);
  Cti = (r2+r1)**.333333 - (r2-r1)**.333333;    If (Mm==0) Cti=r1/2;
P(3,3) = -Pd;   P(4,3) = sqrt(Pd**2+Mm**2);   P(5,3) = Mm;
P(3,4) = +Pd;   P(4,4) = sqrt(Pd**2+Mee**2);  P(5,4) = Mee;
!->            First electron from virtual gamma                   <-!;
Pe = Sqrt(De)/2;  fe   = 2*pi*RNDM(-1);       ! assume Cte is good???!;
P(3,1) = +Pe;   P(4,1) = Mee/2;    P(5,1) = Me;
P(3,2) = -Pe;   P(4,2) = Mee/2;    P(5,2) = Me;
* print *,P

do j=1,2 { Call Rotate(P(1,j),Cte,fe); Call CMSTOL(P(1,4),P(1,j),P(1,j))}
!->            and at last - boost all                             <-!;
do j=1,3 { jj=j; if (m(1)#m(2)) jj=4-j;
           Call Rotate(P(1,j),Cti,fi); Call CMSTOL(P0,P(1,j),Pr(1,jj))}
* print *,'pr',pr
DalDec = Wee;
END;
***********************************************************************
     Subroutine    C M S T O L  (P0,PP,PL);
Dimension P0(5),PP(5),PL(5),A(4),B(4),C(4);
  call UCOPY(PP,A,3); A(4)=PP(5);
  call LOTRAN(A,P0,C,P0(5));   call UCOPY(C,PL,3);
  PL(4)=SQRT(C(4)**2+C(1)**2+C(2)**2+C(3)**2); PL(5)=PP(5);
Return; END;
*
    Subroutine    R O T A T E (V,Ct,fi);
Dimension V(3),S(3);
If Abs(Ct)>1 { Print *,' Rotate error, ct=',ct; Return };
St=Sqrt(1-Ct**2); Cfi=Cos(fi); Sfi=Sin(fi);
S(1)= Ct*Cfi*V(1)-Sfi*V(2)+St*Cfi*V(3);
S(2)= Ct*Sfi*V(1)+Cfi*V(2)+St*Sfi*V(3);
S(3)=-St  *  V(1)         +Ct  *  V(3);
Call UCOPY(S,V,3);
Return; End;
*
     Subroutine    L O T R A N  (A,B,C,Amass);
"-> 28.01.90: checked once again - BOOST is scaled and added (PLN)<-";
Dimension A(4),B(4),C(4);
  X = ((A(1)*B(1)+A(2)*B(2)+A(3)*B(3)) /(B(4)+Amass)+
  SQRT (A(1)*A(1)+A(2)*A(2)+A(3)*A(3)+A(4)*A(4))) /Amass;
  Do I=1,3 { C(I)=A(I)+B(I)*X;};              C(4)= A(4);
RETURN; END;
**********************************************************************

function formfactor(xm,q)
**********************************************************
* This function returns the form factor SQUARED
* for Dalitz of pi0, eta, eta', and omega 
*
* xm mass of meson
* q invariant mass of lepton pair
* b form factor parameter
* Thomas Ullrich, 2009
********************************************************** 
implicit none
real formfactor, xm, q, f, b

  if (xm.lt.0.15) then ! pi0
    b = 1.756 ! PDG world average
  else if (xm.lt.0.55) then ! eta
    b = 1.95  ! arXiv:0902.2547v1 [hep-ph]
  else if (xm.lt.0.80) then ! omega
    b = 2.24  ! arXiv:0902.2547v1 [hep-ph]
  else if (xm.lt.0.99) then ! eta'
    b = 1.7   ! Phys.Rept.128:301-376,1985
  else
    b=0
  endif

formfactor = (1.-b*q**2)**(-2) ! pole approximation
return 
end

