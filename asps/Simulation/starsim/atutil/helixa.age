* $Id: helixa.age,v 1.1.1.1 2004/01/12 23:49:39 potekhin Exp $
* $Log: helixa.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:39  potekhin
*
* Revision 1.1  2001/02/27 10:15:04  nevski
*  first working release
*
********************************************************************
*                                                                  *
          subroutine     H E L I X A (OPTION,TOWHERE)
*                                                                  *
*  track vector in /HELVAR/ is updated by Helix to endpoint:       *
*      OPTION = 1 : endpoint at radius TOWHERE                     *
*      OPTION = 2 : endpoint at z-coor TOWHERE                     *
*  Trapped particles (loopers) are stopped at their maximum radius *
*  Modifications:                                                  *
*  PN, 20.11.97:  tilt up to 1 accepted with OPTION (0-1.999)      *
*  DR, 05.01.99:  if RP=0 (proportional to angle to plane to which *
*      the particle is extrapolated ) set it to a small number     *
*      (then the particle is flagged as trapped, as it should)     *
********************************************************************
#include "commons/typing.inc"
#include "atlsim/helvar.inc"
*
      INTEGER NSMAX,NS,IOPTION
      REAL    OPTION,TOWHERE(2),TILT,SMAX,TOL,
              R0,RE,ZE,DL,DF,RP,SDF,CDF,CD1,D,C0,SB,CB,RO
      DATA    TOL/2.E-6/, SMAX/.50/, NSMAX/10/, RO/0./
*     ---------------------------------------------------

      IOPTION = nint(OPTION);          IF (OPTION<1.999) IOPTION = 1
      TILT    = OPTION - IOPTION
      IOPTION = MOD(IOPTION,10);       {RE,ZE} = TOWHERE(1)

   IF .not.TRAPPED
   {  R0=1./(BCONST*TT);  {CB,SB}=0
*   new  OPTION==3 : have to swim to a plane parallel to Z-axis
      IF TILT!=0
      {  RE      = RE*COS(TILT)
         CB      = COS(TOWHERE(2)+TILT)
         SB      = SIN(TOWHERE(2)+TILT)
      }
*   Loop here until the required precision is reached
      DO NS=1,NSMAX
      {  RO = RS
         IF IOPTION==1        " barrel-like swim "
         {  IF CB==0 | NS==1  " swim to fix RE "
            {  RP=XS*CF+YS*SF; SDF=(SQRT(MAX(RE*RE-RS*RS+RP*RP,0.))-RP)/R0 }
            ELSE " CB> & NS>1 - swim to the propre plane "
            {  *DR protect against RP=0
               RP=XS*CB+YS*SB;  IF (RP==0) RP=TOL/2;
               SDF=(RE-RP)*RS/(R0*RP)  }
         }
         ELSE IF IOPTION==2  " - swim to fix ZE "
         {  DF=(ZE-ZS)/TL;    SDF=SIN(DF/R0)  }
         *      Check if the step is too large
         IF (ABS(SDF)>SMAX) SDF = SIGN(SMAX,SDF)
         C0 = CF
         CDF = SQRT(1-SDF**2);               CD1 = SDF*SDF/(1+CDF)
         XS = XS+(SDF*CF-CD1*SF)*R0;         YS = YS+(SDF*SF+CD1*CF)*R0
         CF = CF*CDF-SF*SDF;                 SF = SF*CDF+C0*SDF
         RS = SQRT(XS**2+YS**2);             DL = R0*ASIN(SDF)
         EL = EL+DL;                         ZS = ZS+DL*TL
*       build the estimator
         IF IOPTION==1  { IF CB==0 { D=RE-RS } else { D=RE-XS*CB-YS*SB } }
         ELSE           { D=ZE-ZS }
*       Check precision and put some protection
         IF (ABS(D/TOWHERE(1)) < TOL)   return   " accuracy is achived   "
         IF (RS > 199 | ABS(ZS) > 399)  return   " outside the apperture "
       " IF ((RE-RO)*(RO-RS) > 0)        Break     particle is trapped   "
   }  }
* RE - final point, may by R (for IOPT=1) or Z (for IOPT=2)
   TRAPPED = .TRUE.
   If IOPTION==1
   {  XS=XS*RE/RS
      YS=YS*RE/RS
      ZS=ZS*RE/RS
      RS=RE
   }
   else
   {  XS=XS*ZE/ZS
      YS=YS*ZE/ZS
      RS=SQRT(XS**2+YS**2)
      ZS=ZE
   }
   END


