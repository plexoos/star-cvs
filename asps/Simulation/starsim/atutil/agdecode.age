* $Id: agdecode.age,v 1.1.1.1 2004/01/12 23:49:38 potekhin Exp $
* $Log: agdecode.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
* Revision 1.1  2001/02/27 10:14:58  nevski
*  first working release
*
*************************************************************************
*                                                                       *
                subroutine   A g D e c o d e (Cdet,itype)
*                                                                       *
* Description:                                                          *
*   Geometry of a given sensetive detector is generalised in a table.   *
*   Each table line repersent a hyper-plane (repetetive elements) with  *
*   known periodicities in phi and z.                                   *
*   If itype is more than 10, only elements with this serial number     *
*   are scanned.                                                        *
*   Z periodicity may be approximative (dz-rule) or be a reflection     *
*   In the first case detectors should be always position from left to  *
*   right sequentially, in the second - always starting from innermost  *
*   pair (or center), otherwise problems may arise.                     *
* known problems:                                                       *
*   It is not yet as versatile as one may think, this will come         *
*************************************************************************
Replace[ERR(#)]   with _
       [{<W> Cdet; (' error in AgDECODE for detector ',a4,2x,'#1'); RETURN;}]
*
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcnum.inc"
#include "geant321/gcvolu.inc"
#include "geant321/gconst.inc"
#include "geant321/gcunit.inc"
#include "commons/agcrtab.inc"
Integer       LOCF,LENOCC,ICDECI,Itype,Js,Jd,Jdu,i,j,k,i1,i2,L,LL,p,N,
              Lv,Iv,Jv,Jvo,ip,it,iz,ir,mm,nz,Iax,Ish,Imo,Ivo,Jm,In,Jn,Nin,
              Nr,Name,Nick,ier,Natt,Nvr,Nvb,Nb,kk0,jj,JATTF,serial,
              Ndv(2),Nvl(15),Lnam(15),Ivol(15),NwuVol/3/,Irot/0/
Real          VMOD,ATAN2,c0(2),st(2),Att(20),pp(3),p0(3),xyz(3),e1,e2,e3,d2m,
              r,f,z,v,Rmin,Rmax,Zmin,Zmax,d1,d2,d3,pt,pr,pz,ptm,prm,pzm,ds,es,
              zero(3)/3*0./,eps/1.e-4/
Character     Cdet*(*),Cs*4,cd*4
JATTF(Jj)  =  Jj+int(Q(Jj+5))+6
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*
*   Routine is not fully reentrant when geometry is changed (Irot...)   *
  L=0;  If  (JROTM>0 & Irot>0)               L=LQ(JROTM-Irot)
        If  (L>0 & Q(L+1)+Q(L+5)+Q(L+9)!=3)  L=0
*
  If L==0                                     " no rotation matrix "
  {  N=0;  If (JROTM>0) N=IQ(JROTM-2)
     Do Irot=1,N+1 { If (LQ(JROTM-Irot)<=0 | Irot>N) Break; }
     call GSROTM (Irot,90.,0.,90.,90.,0.,0.)
  }
*                                       first, make a set up
  call Vzero(ISYS,Lhead);   Check Jset>0;   Itp=mod(Itype-1,2)+1;
  " get level offset from the detector name "
  Nvr=0; if (Lenocc(Cdet)>=6) Nvr=ICDECI(Cdet,5,6);
  RRmin=10000;  ZZmin=10000;

*                                       find the set/det and its user bank
  :set: DO Iset=1,IQ(Jset-1)                                 " Over Nset "
  {  JS=LQ(Jset-Iset);   Check JS>0;  Call UHTOC (IQ(Jset+Iset),4,Cs,4);
     :det: DO Idet=1,IQ(LQ(Jset-Iset)-1)                     " Over Ndet "
     {  JD=LQ(JS-Idet);  Check JD>0;  Call UHTOC (IQ(JS + Idet),4,Cd,4);
        Check Cdet(1:4)=cd;   JDU=LQ(JD-3);    Check JDU>0;    goto :F:;
  }  }  Return;                                                     :F:
*
*              now unpack the tree info and find the known periodicities
*              using generic volumes only ( to avoid to much scanning )
  i1=Q(Jdu+3); i2=Q(Jdu+5); {k,kkk,kfi,krz,kk0}=0;  Nvb=Q(Jdu+6)+Nvr; d2m=0;
  do i=i1,i2-1,NwuVol
  {  kkk+=1;  j=jdu+i;  iv=Q(j+1);  Nmx(kkk)=Q(j+2);  Nam(kkk)=IQ(Jvolum+iv);
     Nb=Q(j+3);   If (Nb>0) K+=1;   if (K<=Nvb) kk0=kkk;
     jv=LQ(Jvolum-iv); nin=Q(jv+3); Ish=Q(jv+2);
     if nin<0
     {  jd=LQ(jv-1); Iax=Q(jd+1);
        If Iax=2 & (5<=Ish&Ish<=8 | 11<=Ish&Ish<=12)        " phi-divisions"
        {  If kfi#0  { <w> Cdet,kkk,nam(kkk); (' error in agdecode for ',a4,
                      ' at level',i5,2x,a4,' many phi divisions');   next;
        }  kfi=kkk+1;}
        else                                                " z-divisions "
        {  If krz#0  { <w> Cdet,kkk,nam(kkk); (' error in agdecode for ',a4,
                      ' at level',i5,2x,a4,' many  z  divisions');   next;
        }  krz=kkk+1; }
  }  }
*                                                   dont scan known things
  if (kfi#0) Nmx(kfi)=-Nmx(kfi);  if (krz#0) Nmx(krz)=-Nmx(krz);
*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  { c0(1),c0(2),st(1),st(2),Ndv(1),Ndv(2) }=0;
  LL=1;  Nvl(1)=0;  Ivol(1)=Q(Jdu+i1+1);  Lnam(1)=IQ(Jvolum+Ivol(1));
  :LL: while LL>0
  { NVL(LL)+=1 ;    if NVL(LL)>max(1,Nmx(LL)) { LL-=1; Next; }
    Lv=LL; LL=kkk;  do i=Lv+1,kkk             { NVL(i)=1; }
    Call Vzero(rzp,Lr);
    :L: Do L=Lv,kkk                    " encode the nickname path    "
    {  If (L=1) Next;  Imo=Ivol(L-1);  Jm=LQ(JVOLUM-Imo); nin=Q(Jm+3);
       p=0;  if  nin<0 & L=kfi {p=1}  else  if  nin<0 & L=krz  {p=2};
       if p>0                         " save steps for periodicities "
       { jd=LQ(Jm-1);  Ndv(p)=Q(jd+3); C0(p)=Q(jd+4); St(p)=Q(jd+5); }
       do in=1,max(nin,1)             " find next nickname content   "
       {  jn=LQ(Jm-in);  Ivo=Q(jn+2);  Jvo=LQ(JVOLUM-Ivo);  Nr=Q(jn+3);
          Name=IQ(jvo-4); Nick=IQ(JVOLUM+Ivo); Ish=Q(jvo+2);
          Serial=Q(JATTF(jvo)+10)
          Check   nam(L)=Name     | nam(L)=Nick;
          Check   nin>0&Nvl(L)=Nr | nin<0&Nvl(L)<=Nr;
          Lnam(L)=IQ(JVOLUM+Ivo);    Ivol(L)=Ivo;     Next :L:;
       }  LL=L-1; Next :LL:;
    }
  * make device typing stronger - skip elements which do not fit definition
    If (Itype>2 & Serial!=Itype) Next
    call GLVOLU(kkk,Lnam,NVL,ier);  call GDTOM(zero,xyz,1);
  *
  * copy the current rotation into a working matrix
    call Ucopy  (GRMAT(1,kkk),Q(LQ(Jrotm-Irot)+1),10)
    call GFIPAR (jvo,jn,in,Npar,Natt,Par,att)
    call GFLRAD (4,ish,Irot,GTRAN(1,kkk),Par,Rmin,Rmax,ier)
    call GFLPHI (  ish,Irot,GTRAN(1,kkk),Par,Fmin,Fmax,ier)
    call GFLCAR (3,ish,Irot,             Par,Zmin,Zmax,ier)
    If (Fmin>Fmax) Fmin-=360
    Fmin*=DegRad;                         Fmax*=DegRad;
    Zmin+=GTRAN(3,kkk);                   Zmax+=GTRAN(3,kkk);
    RRmin=min(RRmin,Rmin);                RRmax=max(RRmax,Rmax);
    ZZmin=min(ZZmin,abs(Zmin),abs(Zmax)); ZZmax=max(ZZmax,abs(Zmin),abs(Zmax))
  *
    r=vmod(xyz,2);     z=xyz(3);     f=0;    Jres=Serial;
    if r>0 { f=atan2(xyz(2),xyz(1)); if (f<0) f+=2*pi; };  Fcent=f;
    " tilt is a dfi/dr - angle between plane normal and radius to it center"
    " sas  is a dfi/dz - tangent component of a local axial vector "
    { ir,it,iz,prm,ptm,pzm,tilt,sas }=0
    do i=1,3
    { Call Vzero(p0,3);   p0(i)=1;   call GDTOM(p0,pp,2);   v=Vmod(pp,2);
      pr=xyz(1)*pp(1)+xyz(2)*pp(2);  pt=xyz(1)*pp(2)-xyz(2)*pp(1);  pz=pp(3);
      If abs(pr)>prm  { ir=i; prm=abs(pr); Tilt=pt/(r*v); }
      If abs(pt)>ptm  { it=i; ptm=abs(pt); }
      If abs(pz)>pzm  { iz=i; pzm=abs(pz); }
    } sas=GRMAT("iz" 3+3*(it-1),kkk);  Iaxr=ir; Iaxt=It; Iaxz=Iz;
    *
    *                    make a new entry
    if Itp=1
    {  drzm=max(drzm,Rmax-Rmin);  rzp=r; Rzmin=Zmin; RZmax=Zmax; }
    else
    {  drzm=max(drzm,Zmax-Zmin);  rzp=z; RZmin=Rmin; RZmax=Rmax; }

    If kfi!=0   { Nfi=Ndv(1);  Dfi=sign(st(1),GRMAT(9,kfi))*DegRad; }
    If krz!=0   { Nzr=Ndv(2);  Dzr=st(2); }
    Nump=0;  do i=1,kkk { check Nmx(i)>1;  Nump*=Nmx(i)+NVL(i)-1; }
    *
    *                    put it in the table
    DFN [I_[NAME]]  as  [ Istack(LOCF(#1)-LOCF(rzp)+1,ip) ]
    DFN [R_[NAME]]  as  [ Rstack(LOCF(#1)-LOCF(rzp)+1,ip) ]
    do ip=1,Nplane
    {  d1=abs(rzp)-abs(R_rzp); e1=abs(d1)-eps*abs(rzp)
       if e1>0  { check d1<0; go to :ins: }
       d2=RZmin-R_RZmin;       e2=abs(d2)-eps*abs(RZmin)
       ds=abs(RZmin+R_RZmax)+abs(RZmax+R_RZmin)
       es=abs(ds)-eps*abs(RZmin+Rzmax)
       d3=Fmin-R_Fmin;        e3=abs(d3)-eps*abs(Fmin)

       If Itp=1 & krz==0 & e3<0                  " some artificial rules"
       { If mrz==0
         {  If ("dz-rule"  dfi==R_dfi & abs(R_RZmin+R_Rzmax)>abs(RZmin+RZmax)_
              | "reflection"  dfi==-R_dfi & Es<0 )  mrz=Nump-I_Nump
         }
         If mrz>0
         {  Nz=(Nump-I_Nump)/mrz;  I_Nzr=max(I_Nzr,Nz+1)
            if (R_dzr==0 & Nz>0)   R_dzr=(RZmin-R_RZmin)/nz
            d2=d2-R_dzr*Nz;        d2m=max(d2m,abs(d2))
            if (abs(d2)>1.) <w> Ip,Nz,d2; (' bad dz rule: Ip,nz,d2=',2i5,f9.3)
            goto :eq:
       } }
       if abs(d2)>eps*abs(RZmin)   { check d2<0; go to :ins: }
       if abs(d3)>eps*abs(Fmin)    { check d3<0; go to :ins: }
       goto :eq:
    }  ip=Nplane+1;
    :ins: call Ucopy2(Rstack(1,ip),Rstack(1,ip+1),Lr*(Nplane-ip+1));
          call Ucopy (rzp,Rstack(1,ip),Lr);           Nplane+=1;
          if Nplane>=Lstack {err(too many planes found, quit)};
    :eq:  if abs(rzp+R_rzp)<eps*abs(rzp) & Itp=2 & Dfi==-R_Dfi "reflection"
          {  mm=Nump-I_Nump;       If (mrz=0 & mm!=0) mrz=mm;
             If mm!=mrz {err(z-reflections are too complicate, quit)}
          }
  }
  * last pass over the table - addresses and extremis
  Nadr=0; NumPmx=0; drzm=max(drzm,d2m);
  * scan volume offset (kk0) is taken into account only for divisions:
  do ip=1,Nplane                       " temporary - may find a better way  "
  {  if (kfi>=kk0) I_nfi=-I_nfi;   if (krz>=kk0) I_nzr=-I_nzr;
     " NumP may have increasing modifications due to dz or reflection rules "
       NumPmx=max(NumPmx,I_NumP+(max(I_Nzr,Itp)-1)*mrz+1)    " 1 word fence "
     " take into accont that in end-caps we always have only reflections    "
     I_Iadr=Nadr;  Nadr+=Max(1,I_Nfi)*Max(Itp,I_Nzr);
  }
  END




