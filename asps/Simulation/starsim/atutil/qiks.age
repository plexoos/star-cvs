* $Id: qiks.age,v 1.1.1.1 2004/01/12 23:49:39 potekhin Exp $
* $Log: qiks.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:39  potekhin
*
* Revision 1.1  2001/02/27 10:15:06  nevski
*  first working release
*
C----------------------------------------------------------------------
      SUBROUTINE QIKS (MM,NN,MOVE,COMPARE)
C
C INPUTS         MM,NN          QIKS sorts a list of items numbered
C                               sequentially from MM to NN.  Every item
C    in the list to be sorted must be associated with a unique integer from
C    MM to NN inclusive.  Zero cannot be included in the range, i.e. both
C    MM and NN should be positive integers.  In the vast majority of cases
C    MM is 1 and NN is the number of items in the list.
C              MOVE,COMPARE     MOVE and COMPARE must be defined as
C                               external in the calling program.
C                               SUBROUTINE MOVE(I,J) must perform the
C     operation of moving an item from position I to position J.  If
C     either I or J is zero, the move should be from or to an extra item
C     of storage (this extra storage must be provided by the routine
C     which calls QIKS).  The values of I and J transmitted to
C     MOVE and COMPARE are generated by QIKS - the user has no control
C     over them.  However, he must make provision in MOVE and in COMPARE
C     to recognize when I or J are zero and take appropriate action.
C     The calling routine is presumed to communicate with MOVE and COMPARE
C     through common.  The layout of the item is entirely up to the caller,
C     QIKS will never see it.  The item may have several separate pieces.
C  FUNCTION COMPARE (I,J) must return a value that is negative, O, or
C     positive according to whether item I is to occupy a position in the
C     sequence respectively, lower than, equivalent to, or higher than J.
C     Again, if either I or J is zero, comparison is with the extra item.
C     COMPARE should be declared as INTEGER.
C PROGRAMMER   R. HUNN
C         BNL modification by K. Fuchel and R. Horwitz     Feb. 67.
C         Moved to PDP-10 and updated to FORTRAN-IV by W. A. Love 2-April-79.
C         Added to E810 library [mpslib.e810.sources]gutil.src 2 Oct 87.
C         Converted to F77+VAX extensions (DO WHILE) Feb 1992 WAL
C         Reverted the spreader to F66 version after hang Jun 1992 WAL
C PURPOSE      QIKS is a FORTRAN internal sort subroutine useful for
C         sorting arrays in memory.  It is fast and requires only one
C additional item of working storage.  Definition of the items to be sorted
C is completely flexible, being specified by user-supplied subprograms.
C
C ERROR CONDITIONS     QIKS has been in use for 30 years now without error
C                      to my knowledge.  There is potential with a long enough
C list to overflow the 20 levels of push-down provided (unchecked) but since
C the main virtue of QIKS is its speed, I am reluctant to add error checking
C until we turn up an example.
C
C TYPICAL USE                  PROGRAM XXX
C                              COMMON/SORTITEMS/IA(10000)
C                              COMMON/EXTRAITEM/IB
C                              EXTERNAL MO, CO
C                              INTEGER CO
C                                       .
C                              fill array IA to N items, set M=1
C                                       .
C                              CALL QIKS (M,N,MO,CO)
C                                       .
C                                       .
C COMMON BLOCKS    As required by user to communicate between the calling
C                  routine and the user supplied move and compare routines.
C
C METHOD       QIKS is based on C. A. R. Hoare's quicksort and partition
C              algorithms (Nos. 64 and 63 respectively)
C              See  COM. ACM 4,321 (JULY 1961).
C
C----------------------------------------------------------------------
C
      IMPLICIT NONE
      INTEGER  MM,NN,COMPARE
      EXTERNAL MOVE,COMPARE
      INTEGER  I,J,M,N,KEY,LEVL
      INTEGER  MSAVE(20),NSAVE(20)
      LOGICAL  SWITCH
C
      I=0
      J=0
      LEVL = 0
      M=MM
      N=NN
   35 CONTINUE
C     Test for number of items left unsorted.
      IF((N-M).GT.1)THEN
C        More than 2 items, partition and push down
C        Partition Routine
         I=M
         J=N
C        Simplest key, i. e. middle element, works as well as any.
         KEY=(N+M)/2
         CALL MOVE(KEY, 0)
         IF(N.NE.KEY)CALL MOVE(N,KEY)
         SWITCH=.TRUE.
         DO WHILE (I.NE.J)
         IF(SWITCH)THEN
            IF(COMPARE(0,I).LT.0)THEN
C              Hole at bottom
               CALL MOVE(I,J)
               J=J-1
               SWITCH=.FALSE.
            ELSE
               I=I+1
            ENDIF
         ELSE
            IF(COMPARE(0,J).GT.0)THEN
C              Hole at top
               CALL MOVE(J,I)
               I=I+1
               SWITCH=.TRUE.
            ELSE
               J=J-1
            ENDIF
         ENDIF
         ENDDO      ! while (i.ne.j)
C        end partition
C        Spreader
         CALL MOVE(0,I)
 12      IF(I.EQ.N)GO TO 10
         I = I + 1
         IF(COMPARE(0,I).EQ.0)GO TO 12
 10      IF(J.EQ.M)GO TO 8
         J = J - 1
         IF(COMPARE(0,J).EQ.0)GO TO 10
 8       CONTINUE
C        Have partitioned this level in two
C        Push down
         LEVL = LEVL+1
C        Work on smallest portion, push down the other
         IF ((J-M).LE.(N-I))THEN
            MSAVE(LEVL) =I
            NSAVE(LEVL) = N
            N=J
         ELSE
            MSAVE(LEVL) = M
            NSAVE(LEVL) = J
            M=I
         ENDIF
      ELSE
C        One or two items remain in the partition
         IF((N-M).EQ.1)THEN
C           Come here when two items remain in any partition
            IF(COMPARE(M,N).GT.0)THEN
C              Swap if two items are out of order
               CALL MOVE(M,0)
               CALL MOVE(N,M)
               CALL MOVE(0,N)
            ENDIF
         ENDIF
C        Pop up; QIKS is finished when LEVL returns to 0
         IF(LEVL.EQ.0)RETURN
         M = MSAVE(LEVL)
         N = NSAVE(LEVL)
         LEVL = LEVL - 1
      ENDIF
      GO TO 35
      END

