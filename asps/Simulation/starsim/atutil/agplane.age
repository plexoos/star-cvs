* $Id: agplane.age,v 1.1.1.1 2004/01/12 23:49:38 potekhin Exp $
* $Log: agplane.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
* Revision 1.1  2001/02/27 10:14:59  nevski
*  first working release
*
*************************************************************************
*                                                                       *
                subroutine   A G P L A N E (Cset,Ip)
*                                                                       *
*************************************************************************
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcvolu.inc"
#include "commons/agcrtab.inc"
#include "commons/agcclus.inc"
#include "commons/agcbuff.inc"
#include "atlsim/helvar.inc"
  INTEGER      NV,Nd;          PARAMETER   (NV=10,Nd=10);
  Integer      NVL(NV),ISC(NV),K,L,Ia,Iad,ip,Iz,Jz,kz,If,i,id,Lm,kk,Jd,
               AgPFLAG,Iprin,Ids,Ip2,Mz,Mf,modz,itry
  Real         DIGI(Nd),Fi,ZR,x(6),FUNCT,Fc,Df,Dz
  Character*4  Cset,Cdet,Cs
  Save         x,NVL,Cdet,Cs,Iprin,Ids,Ip2,Lm,Modz,Jd
*
*                                       for the first plane, get tables
;
  {Ndig,Ktyp}=0
;
  If Ip<=0 | Ip >999 | Cset(1:3)!=Cs(1:3)
  {  " start track at the vertex "
     Call Vzero(x,6);       Fi=Funct(x);
     Lm=Lhead+Lr*Lstack;    Call ASLGETBA (Cset,'RMAP',Lm,L,Isys);
     If Ip>0   { Lm=-Lm;    Call ASLGETBA (Cset,'RMAP',Lm,L,Isys);}
     Check  L>Lhead;
     Call VZERO(Nvl,Nv);    Call Vzero(Isc,Nv);   Call Vzero(Digi,Nd)
     Cs=Cset(1:3)//'D';     Call UHTOC(Inamd,4,Cdet,4);     {K,Ia}=0
     Call AgFDIGI (Cs,Cdet,NVL,Ltra,ISC,Digi,K,Ia)
     If Ip<=0 { Ip=0;                Ip2=Nplane; Ids=1;  }
     else     { Ip=min(Ip,Nplane)+1; Ip2=1;      Ids=-1; }
     " start neighbour counting "    Modz=0;  Jd=1;
     Iprin=AgPFLAG(Cset,'RECO')
  }
  If (Iprin<0) Return
*
  If (modz==0)  Ip+=Ids
  For Ip=Ip to Ip2 by Ids
  {                            " extrapolate the track to the next plane  "
     Call Ucopy(Rstack(1,Ip),rzp,Lr)
     Call Vzero(x,6);       x(1)=Itp;
     x(2)=rzp;  If (Itp==2) x(2)=sign(rzp,TL);
     Fi=Funct(x)
     Df=1.0/rs;  Dz=20;
                                     "    select one phi sector (if>=0)   "
     if=0;    If (dfi#0) if=nint((Fi-(Fmin+Fmax)/2)/Dfi);   Fc=Fcent+if*Dfi;
     if Itp=1 & Tilt#0   { x(1)=1+tilt; x(5)=Fc; Fi=Funct(x); }
     If nfi>1  { check Fmin+if*Dfi-Df <= Fi&Fi <= Fmax+if*Dfi+df; Fcent=Fc; }
*
                                        "    select z/r-section (iz>=0)   "
     {i,iz}=0;   x(2)=0;  ZR=Funct(x)
     Mz=max(Itp,Nzr);   Mf=max(1,Nfi)
     If Itp==1                          "    this is a barrel detector    "
     {  If (dzr!=0) iz=min(max(0,nint((ZR-(RZmin+RZmax)/2)/dzr)),Nzr-1)
        * Print *,' AgPLANE: ip,rzp,if,iz=',ip,rzp,if,iz,Rzmin,Rzmax,dzr
*
*       Roads may produce iz detector variations at both sides around center
        kz=iz+modz;  If RZmin+kz*dzr-dz <= ZR&ZR <= RZmax+kz*dzr+dz
        {  " closest neighbour direction is "  jd=sign(1.,2*ZR-RZmin-RZmax)
           " check next detector in advance and save it for the next entry "
           do itry=1,2
           {  modz=-modz;  if (jd*modz>=0) modz+=jd;  jz=iz+modz;
              If (0<=jz&jz<=Nzr-1) break;             jz=-1
           }
           If (jz<0 | RZmin+jz*dzr-dz>ZR | ZR>RZmax+jz*dzr+dz) modz=0;
           iz=kz;  * print *,'          itry,modz,iz,jz=', itry,modz,iz,jz
        }
        else                             " no detector left in this layer "
        { modz=0;  If (Cset!='XTRT' | Lm<0) Next
          " we are in the TRT barrel here - this should be followed by endcap"
          " backward tracing will be more complicate here - will do later(pn)"
          If (Ids*Lm<0) Break;       Lm=-Lm
          Call ASLGETBA (Cset,'RMAP',Lm,L,Isys)
          If L<0    { <w> ip; (' AgPLANE error in XTRT plane=',i3); Break; }
          If Ids>0  { Ip=0; Ip2=Nplane; }    else    { Ip=Nplane+1; Ip2=1; }
          Next
        }
     }
     else
     {" Delta Z and reflections rules may be conflicting - have to check it"
        If  dzr!=0  { iz=nint((ZS-Rzp)/dzr); iz=min(max(0,iz),Mz-1); }
        else        { iz=0;  if (ZS<0) iz=1; }
     }
     iad=Istart+Iadr+mod(if+Mf,Mf)+iz*max(1,Mf)
*
                                        "  pick up hits in one board  "
     Ndig=0;  KK=Ibuf(iad+1);
     IF KK>0
     {  Ndig=mod(KK,Lpack);  K=KK/Lpack-1 " may start from zero ";
        Do Id=1,Ndig
        {  Kdig(id)=k; Call  AgFDIGI (Cs,Cdet,NVL,Ltra(id),ISC,Digi,K,Ia);
           If k<=0
           { <w> Cs,Cdet,KK,Id,K,Ia,NVL; (' AgPLANE logic error in',
              2(1x,a4),' KK,Id,K,Ia=',4i6/20x,' NVL=',10i4);  break;
           }
           Ktyp=Digi(1); Fdig(id)=Digi(2); Zdig(id)=Digi(3); Edig(id)=Digi(4);
           If Cset=='XTRT'
           {  Ktyp=Itp;  Fdig(id)=Fcent+dfi*(ISC(3)-1);
              Zdig(id)=Digi(2);  Edig(id)=Digi(1);
           }
           prin5 id,Ktyp,Fdig(id),Zdig(id),Edig(id);
           ('   digit id,ktyp,f,z,E = ',2i5,3f12.4);
        }
        Call  AgFPATH (ISC);
        Ishape=Q(LQ(JGPAR-Nlevel)-4);   Npar=Q(LQ(JGPAR-Nlevel)-1);
        Call Ucopy(Q(LQ(JGPAR-Nlevel)+1),Par,min(Npar,50));	
        Call Ucopy(GTRAN(1,NLEVEL),AgTRAN,3);
        Call Ucopy(GRMAT(1,NLEVEL),AgRMAT,10);
     }
     prin8 Cset,ip,Ktyp,Ndig,Ishape,Npar,(par(i),i=1,Npar);
     (1x,a4,' plane',2i4,' Ndig=',i4,'  Shape,Npar=',2i5,(' par=',10f8.3));
     prin6 tilt,sas,fcent; (' plane angles t,s,f(AgPLANE) ',3F12.4);
     prin5 xs,ys,zs,rs,fi; ('   track at point   (FUNCT)  ',5F12.4);
     Return;                                                 :dummy:
  }
  Ip=0;
*
  END


