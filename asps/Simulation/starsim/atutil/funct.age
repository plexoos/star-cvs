* $Id: funct.age,v 1.1.1.1 2004/01/12 23:49:39 potekhin Exp $
* $Log: funct.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:39  potekhin
*
* Revision 1.1  2001/02/27 10:15:03  nevski
*  first working release
*
********************************************************************
*                                                                  *
                 function      F U N C T (X)
*               track description in ATLAS tracker                 *
* OPTION choice: 0          - vertex                               *
*                1          - cylinder parallel to z               *
*                1+/- tilt  - plane parallel to z, abs(tilt)<0.5   *
*                2          - plane perpendicular to z axis        *
*                11&12      - Calorimeter points for brem fit      *
* modifications:                                                   *
* PN, 14/11/97 - bremfit corrected by David Rousseau               *
********************************************************************
#include "commons/typing.inc"
#include "atlsim/helvar.inc"
#include "atlsim/fumvar.inc"
*
      REAL      FUNCT,X(5),PBREM(10),TOWHERE(2),OPTION,BFLD,RMX,SAS,ZR0,TILT
      INTEGER   IOPTION,JOPTION,IBREM
      SAVE      IBREM,PBREM
      DATA      BFLD/2./,RMX/140./
*     ----------------------------
      OPTION     = X(1)
      TOWHERE(1) = X(2)
      SAS        = X(3)
      ZR0        = X(4)
      TOWHERE(2) = X(5)
      JOPTION    = nint (OPTION)
      IF (0<OPTION & OPTION<1.99) JOPTION = 1
      IOPTION    = mod (JOPTION,10)
      tilt       = Option-Joption
*
*    set starting point from vertex (0,0)+A
*
      IF IOPTION==0  " vertex "
      {  BCONST  = -2.999792E-3*BFLD
         TRAPPED = .FALSE.
         CF      = COS(FI0FIT)
         SF      = SIN(FI0FIT)
         RS      = A0FIT
         ZS      = Z0FIT
         XS      = -RS*SF
         YS      = +RS*CF
         TL      = DZDR0
         TT      = PTINV
         EL      = 0
         FUNCT   = RS
         IBREM   = 0
*        put protection against infinite momentum - 7/6/94
         IF (ABS(TT)<1.E-4) TT=SIGN(1.E-4,PTINV)
      }
      ELSE IF TOWHERE(1)!=0   " we move to the next point "
      {* special point - calorimeter: as if no brem occures
         IF (IBREM==1 & OPTION>10) CALL UCOPY(PBREM,XS,10)
         CALL HELIXA(OPTION,TOWHERE)    !  swim to r,z or plane
*        Have we crossed the brem point ?
         IF (IBREM==0 & RS>RBREM & RBREM<RMX) THEN
            IBREM = 1                   !  moment is changed
            CALL HELIXA (1., RBREM)
            CALL UCOPY  (XS,PBREM,10)
            TT = PTINV+SIGN(XBREM,PTINV)/(RBREM-RSHOW)/BCONST/RSHOW*2
            CALL HELIXA (OPTION,TOWHERE)
         ENDIF

*        Have we crossed the brem point back ?
         IF (IBREM==1 & RS<RBREM) THEN
            IBREM = 0                   !  moment is restored
            CALL UCOPY  (PBREM,XS,10)
            CALL HELIXA (OPTION,TOWHERE)
         ENDIF

         FUNCT = ATAN2(YS,XS)           ! always phi-measurement
*        introduce a shift for the strip center for u/v strips in z/r
         IF (SAS!=0 & IOPTION==1) FUNCT=FUNCT+SAS*(ZR0-ZS)/RS
                                  "  * (1-SAS*(ZR0-ZS)/RS*TILT) "
         IF (SAS!=0 & IOPTION==2) FUNCT=FUNCT+SAS*(ZR0-RS)/RS
         FUNCT=AMOD(FUNCT+6.2831853,6.2831853)
      }
      ELSE
      {*  Give Z/R component instead of Phi according to option
          IF IOPTION=1 { FUNCT = ZS } else { FUNCT = RS }
      }
      END


