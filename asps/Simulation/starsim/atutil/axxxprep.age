* $Id: axxxprep.age,v 1.1.1.1 2004/01/12 23:49:38 potekhin Exp $
* $Log: axxxprep.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
* Revision 1.1  2001/02/27 10:15:01  nevski
*  first working release
*
************************************************************************
*                                                                      *
                   subroutine    A x x x P R E P
*Attention: XTRT is special now - it is TWO detectors with types 11 &12*
************************************************************************
Replace[CHK#;] with _
  [; IF (~(#1)) { <W> Cset; (' Error in XXXPREP for detector ',a4,
                             ' condition #1 is not satisfied'); NEXT; };
  ]
#include "commons/typing.inc"
#include "geant321/gcunit.inc"
#include "commons/agcbuff.inc"
#include "commons/agcrtab.inc"
  INTEGER       NN,  NV,   Nd,   Lt
  PARAMETER    (NN=7,NV=10,Nd=10,Lt=3000)
  * trt: XGAS, mdt: FMUC/FTUI, MUCH/MTUI
  Character*6  Csets(NN)/'PIXB','PIXE','SITV','SCTT','ZSCT','XTRT',  'XTRT'/;
  Character*6  Cdets(NN)/'PBCR','PECR','STCR','SCTB','ZSEN','XGAS-1','XGAS-1'/
  Integer      Itypes(NN)/   1 ,    2 ,    1 ,    1 ,    2 ,   11  ,    12 /;
  Integer      NVL(NV),ISC(NV),Iaddr(0:Lt),Nfdim(0:Lt),Nzdim(0:Lt);
* - - - - - - - - - -
*CDE,SLDBNK. - Slug auxilary common for SLDETBA routine
      CHARACTER*4  CHFOR
      INTEGER      IOWDS
      COMMON /SLDBNK/ CHFOR,IOWDS(16)
* - - - - - - - - - -
  INTEGER      AgPFLAG,Id,Ip,Iprin,Ifree,Itype,Lmap,N,I,J,K,L,
               Ia,i1,i2,Ndi,Nds,Ndd,Ltra;
  Character*6  Cset,Cdet;
  Real         Digi(Nd);
  Logical      First/.true./;
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 Ifree=1;   Call Vzero(Ibuf,Lbuf);
 Do Id=1,NN
 {  Itype=Itypes(Id);  Cset=Csets(Id);  Cdet=Cdets(id);
    IPrin=AgPFLAG(Cset,'RECO');         Check IPrin>=0;
    If First
    {  Call AgDECODE(Cdet,Itype);   Check Nplane>0;
       Call UCTOH(Cdet,Inamd,4,4);  Isys=Id;  Istart=Ifree;
       L=Lhead+Lr*Nplane;
       If (Cset=='XTRT' & Itype==12) L=-L;
*      - - - - - - - - - - - - - - - - - -
       CALL MZIOCH (IOWDS,16,'9I 5F 3I 1H 4I 15H 15I / 10F 5I'); CHFOR='RMAP';
       Call ASLSETBA(Cset,'RMAP',L,Isys);                         CHFOR=' ';

       Prin2 (nam(i),i=1,15); (' Names=',15(2x,a4))
       Prin2 (Nmx(i),i=1,15); (' LVmax=',15i6)
       Prin2 Itp,Nplane,kfi,krz,mrz,drzm,iaxr,iaxt,iaxz
             (' type',i2,' Nplane=',i3,' k=',2i3,i6,f8.3,' axes r,t,z=',3i2)
       Prin3 ((Rstack(i,ip),i=1,10),(Istack(i,ip),i=11,Lr),Ip=1,Nplane)
             (' R,z,F=',3F8.2,3F7.3,F8.2,3F7.4,' N=',3i4,i6,i4)
       Prin1 Cset,Ifree,Ifree+Nadr
             (' AXXXPREP: Detector ',A4,', required space',2i8);
    }
    else
    {  L=Lhead+Lr*Lstack;
       If (Cset=='XTRT' & Itype==12) L=-L;
*      - - - - - - - - - - - - - - - - - -
       Call ASLGETBA(Cset,'RMAP',L,Lmap,Isys);
    "  <w> L,Lmap,Isys,Istart,Nadr;(' ASLGETBA: L,Lmap,Isys,Istart,Nadr=',5I6)"
       Check Lmap>0;   CHK Lmap>=Lhead+Lr*Nplane;
    "  <w> Cset,Lmap; (' AXXXPREP error: ',a,' reconstruction bank len=',i4) "
    }
   *                    make intermediate map
    Ifree+=Nadr+1;                                CHK Ifree<Lbuf;
    Call Vzero(Ibuf(Istart+1),Nadr+1);            Call Vzero(Iaddr,Lt+1);
    Do Ip=1,Nplane
    {  Call Ucopy(Rstack(1,ip),rzp,Lr);           CHK Nump<=Lt;
       Ia=Istart+Iadr;                            CHK Ia<Ifree;
       Iaddr(NumP)=Ia;                            Nfdim(NumP)=Max(1,Nfi);
       " in endcaps we always do a reflection "   Nzdim(NumP)=Max(Itp,Nzr);
    }
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Call VZERO(NVL,NV);   {K,ia,Ndi,Nds}=0;
    Loop
    {  Call AgFDIGI (Cset(1:3)//'D',Cdet,NVL,Ltra,ISC,DIGI,K,IA);
       If (k<=0) Break;
       If Cset=='XTRT' { Check Itype==11 & ISC(1)<=2 | Itype==12 & ISC(1)>=3; }
       Ndi+=1;  {N,j}=0; { i1,i2 }=1;
      * - - -    step one - map ISC to the packed address NumP
       do i=1,kkk
       { Check abs(Nmx(i))>1;  j+=1;  If (Nmx(i)>1) N*=Nmx(i)+ISC(j)-1;
         If (i==kfi)  i1=ISC(j);      If (i==Krz)  i2=ISC(j);
       }
       prin9 Ndi,(ISC(i),i=1,j),N;  (' AXXPREP Ndig,ISC,Nump=',10i6)

       * step two - modify Nump to account for z shifts (dz rule or reflection)
       CHK N<=Lt;  Ia=Iaddr(N);
       if krz=0 & mrz>0  { while Ia=0&N>=mrz { i2+=1; N-=mrz; Ia=Iaddr(N); } }

       " skip hits which are not mapped "  chk Ia>0;
       CHK N>=0;    i1=min(i1,NFdim(N));   i2=min(i2,NZdim(N));
       prin9 N,Ia,i1,i2,Ltra;   (' selected Npack,Ia,i1,i2,Ltra=',6i6);
       ia+=i1+(i2-1)*Nfdim(N);    CHK Istart <=Ia&Ia< Ifree;
       Ndd=Ibuf(Ia);   IF (Ndd=0) Ndd=k*Lpack;   Ndd+=1;
       if mod(Ndd,Lpack)=0  { <W> Cset,(ISC(i),i=1,J);
          (' AXXXPREP overflow in det=',a4,' nbv=',15i5); Break; }
       Ibuf(Ia)=Ndd;   Nds+=1;
    }
    Prin2 Cset,Ndi,Nds; (' AXXXPREP: total digits in detector ',a4,' =',2I8);
    " prin9 (Ibuf(i),i=1,Ifree); (20i5); "
 }
 First=.false.
 end


