* $Id: fumfit.age,v 1.1.1.1 2004/01/12 23:49:38 potekhin Exp $
* $Log: fumfit.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
* Revision 1.1  2001/02/27 10:15:02  nevski
*  first working release
*
********************************************************************
*                                                                  *
               subroutine   F U M F I T (TAG,NPAR)
**DIRECTIVE RANGE ON
**DIRECTIVE CHECK_OVERFLOW INTEGER ON 	
*             LSQ track parameters fit to IHIT bank                *
*                                                                  *
* Original Version:                                   Pavel Nevski *
* Modifications:                                      Sasha Rozanov*
* PN, 20.11.97:  to accept big tilts in barrel OPNT (0-1.999)=> 1  *
********************************************************************
#include "commons/typing.inc"
#include "geant321/gcunit.inc"
#include "atlsim/irepar.inc"
#include "atlsim/fumuse.inc"
#include "atlsim/fumsiz.inc"
#include "atlsim/fumsva.inc"
#include "atlsim/trroad.inc"
#include "atlsim/trbank.inc"
#include "atlsim/trcalo.inc"
* ----------------------------

      INTEGER     I,J,K,M,N,IW,II,I1,I2,IT,IPR,IFL,M1,IM,NPAR,Iprin
      REAL        FI,F1,F2,S,R,Z,D,AK,AL,XX(6),SS(-1:1),FUNCT,ORDER
      CHARACTER*6 TAG
      INTEGER     AgPFLAG,IOPNT,Nok,NDF0PR/0/
*
*     - - - - - - - - - - - - - - - - - - -
*     Order    <->     Option       R or Z
      ORDER(II) = 1000*Nint(EX(3,II))+ABS(EX(4,II))
*     - - - - - - - - - - - - - - - - - - -

      Iprin=AgPFLAG('FUMF','RECO')
      CALL VZERO (EX,NS*NP)
*     protect against bad call
      IF (NTB<=0) return

      MM   = NPAR
      NUV  = 0
      NZM  = 0
      NTR  = 0
      XTR = 0
*    vertex constrain
      M       = 1
      EX(1,M) = 0
      EX(2,M) = DA0
      EX(3,M) = 0
      EX(4,M) = 0
      FI      = FUNCT(EX(3,1))
      M       = 2
      EX(1,M) = 0
      EX(2,M) = DZ0
      EX(3,M) = 1
      EX(4,M) = 0

*   Loop here over IHIT bank and fill  FUMILIs EXDA
*   ------------------------------------------------
      Nok=0
      Prin9 ; ('FumFit called with these pts:')
      DO I = 1,NTB

         Check ISPOINT(i)==0
	 Nok+=1
	 Prin9 i; ('     entry ',I4)

         CALL UCOPY(TRPOINT(1,I),OPNT,LPNT)
         IOPNT=nint(OPNT);  If (0<OPNT&OPNT<1.999) IOPNT=1
	 Prin9 i,opnt,iopnt;  (' next point=',i5,f8.1,i5)

         IF (APNT(1)==0) THEN
*           this is the pointer (track/cluster), skip it
            RSHE = XPNT(1)
            FSHE = XPNT(2)
            ZSHE = XPNT(3)
            SSHE = SPNT(2)
            ESHE = EPNT
            NEXT
         ENDIF
         XX(1) = OPNT
         XX(3) = 0
         XX(4) = 0
         XX(5) = XPNT(2)

*      Check OPNT => fix r or z
         IF (IOPNT==1) THEN
*                               fix radius data
*                               ===============
            XX(2) = XPNT(1)
            FI    = FUNCT(XX)
            XX(2) = 0
            Z     = FUNCT(XX)
            R     = XPNT(1)

         ELSEIF(IOPNT==2)THEN
*                                 fix z- data
*                                 ===========
            XX(2) = XPNT(3)
            FI    = FUNCT(XX)
            XX(2) = 0
            R     = FUNCT(XX)
            Z     = XPNT(3)

         ELSE
            prin0 (TRPOINT(J,I),J=1,LPNT)
            (' FUMFIT: bad point in TRBANK',12F10.4)
            NEXT
         END IF


*       protection against EXDA overflow
        if(M.GE.NP)then
           prin0 I,NTB,M,NP
           (' fumfit: dimension of exda is too small, i,ntb,m,np=',6i6)
           Next
        endif

*       push point into fumilis common

         M       = M+1
         N       = 1
         EX(1,M) = XPNT(2)
         EX(2,M) = SPNT(1)/R
         EX(3,M) = OPNT
         EX(5,M) = 0
         EX(6,M) = 0
         EX(7,M) = 0

*      Check OPNT==1  r/z
         IF (IOPNT==1) THEN
            EX(4,M) = XPNT(1)
         ELSE
            EX(4,M) = XPNT(3)
         END IF

*      Check APNT(1) = MSGC   - u/v angle in R
         IF (APNT(1)==MSGC) THEN
            EX(5,M) = DPNT
            EX(6,M) = XPNT(1)
         END IF

*      Check APNT(1) = SCTT    - u/v angle in Z
         IF (APNT(1)==SCTT) THEN
            EX(5,M) = DPNT
            EX(6,M) = XPNT(3)
*           fi of center for tilt
            EX(7,M) = XPNT(2)
         END IF

*      Check APNT(1) = SITV    - cross-strips
         IF (APNT(1)==SITV) THEN
            EX(5,M) = DPNT
            EX(6,M) = XPNT(3)
*           fi of center for tilt
            EX(7,M) = XPNT(2)
         END IF

*      Check APNT(1) = PIXB    - pixels
         IF (APNT(1)==PIXB) THEN
            EX(5,M) = DPNT
            EX(6,M) = XPNT(3)
*           fi of center for tilt
            EX(7,M) = XPNT(2)
         END IF

*      Check APNT(1) = GAAS    - u/v angle in Fi
         IF (APNT(1)==GAAS) THEN
            EX(5,M) = DPNT
            EX(6,M) = XPNT(1)
         END IF

*      Check APNT(1) = ZSCT    - u/v angle in Fi
         IF (APNT(1)==ZSCT) THEN
            EX(5,M) = DPNT
            EX(6,M) = XPNT(1)
         END IF

*        u/v measurements
*        ----------------
         IF (APNT(1).NE.XTRT  &  DPNT.NE.0)NUV = NUV+1

*        precize z measurements
*        ----------------------
         IF (SPNT(2) <= SPNT(1))NZM = NZM+1

*      Check APNT(1)==XTRT - resolve the left/right ambiguity in some way

         IF (APNT(1)==XTRT) THEN
            NTR = NTR + 1
            IF (EPNT<0) XTR = XTR + 1
            IT  = 0
*         Check 1<I&I<NTB & IFTIME==1                   - locally
            IF (1<I & I<NTB  &  IFTIME==1) THEN
               SS(-1) = 0
               SS(+1) = 0
*            Loop here
               DO 21 I1 = -1,1,2
*               Loop here
                  DO 31 I2 = -1,1,2
                     F1 = XPNT(2)+I1*DPNT/R
*                  Loop here
                     DO 41 J = I-1,I+1,2
                        F2 = TRPOINT(3,J)+I2*TRPOINT(5,J)/R
                        IF (ABS (F1-F2)*R<DT0)SS(I1) = SS(I1)+1
41                   CONTINUE
31                CONTINUE
21             CONTINUE

*            Check (SS(-1) = 2 & SS(+1) = 0)    - left
               IF (SS(-1)==2  &  SS(+1)==0) THEN
                  IT = -1
               END IF

*            Check (SS(+1) = 2 & SS(-1) = 0)    - right
               IF (SS(+1)==2  &  SS(-1)==0) THEN
                  IT = +1
               END IF
            END IF

*         Check IFTIME==2                          - or globally
            IF (IFTIME==2) THEN
*            Check XPNT(2)<FI
               IF (XPNT(2)<FI) THEN
                  IT = +1
               ELSE
                  IT = -1
               END IF
            END IF
*         Check IT#0
            IF (IT.NE.0) EX(2,M) = .02/R
            EX(1,M) = EX(1,M)+IT*DPNT/R
            TRPOINT(12,I) = IT
         END IF
	 prin9 M,(EX(K,M),K=1,7); (' point m:', i6,10F10.3)

*       Add 2nd coordinate measurment if it is good enouph
*       --------------------------------------------------

         IF (SPNT(2)<SIG0) THEN
            M       = M+1
            N       = 2
            EX(2,M) = SPNT(2)
            EX(3,M) = OPNT
            EX(4,M) = 0
*         Check OPNT==1/2         ->    r/z
            IF (IOPNT==1) THEN
               EX(1,M) = XPNT(3)
            ELSE
               EX(1,M) = XPNT(1)
            END IF
            prin9 M,(EX(K,M),K=1,7); (' point m:', i6,10F10.3)
         END IF


*      Now reshuffle in increasing order - any Z is always bigger than any R
*      ----------------------------------------------------------------------

*      Loop here over new points
         DO K = 1,M-N
*           Skip second component and right order
            Prin9 k,Order(k); ('FumFit: K=',I4,' Order=',3F12.4)
            IF (EX(4,K)==0 | ORDER(K)<=ORDER(M-N+1)) NEXT
*           Loop here over old points
            DO 61 IW = 1,N
*              swap points
               DO 71 J = M,K,-1
71             CALL UCOPY(EX(1,J),EX(1,J+1),ns)
               CALL UCOPY(EX(1,M+1),EX(1,K),ns)
61          CONTINUE
            CALL VZERO(EX(1,M+1),ns)
            BREAK

         ENDDO

      enddo

      If Nok==0 { Print *,'FUMFIT ERROR: no points selected'; Goto 999; }

      prin9 (j,(EX(I,J),I=1,7),j=1,M)
            (' FUMFIT After ordering:'/(' fumfit j,ex=',i4,7F12.4))
*   ...
* ---------------------------------------------------------
*   ... ADD POINT FROM THE CALORIMETER (or other road pointer)
* ---------------------------------------------------------
*   ...
*   Check IFSHOW # 0 - if needed !
      IF (IFSHOW .NE. 0) THEN
*      Check RSHE==RCAL     r or z ?
         IF (RSHE==RCAL) THEN
            M       = M+1
            EX(1,M) = FSHE
            EX(2,M) = SSHE/RSHE
            EX(3,M) = 11
            EX(4,M) = RSHE
            M       = M+1
            EX(1,M) = ZSHE
            EX(2,M) = 200
            EX(3,M) = 1
            EX(4,M) = 0
         ELSE
            M       = M+1
            EX(1,M) = FSHE
            EX(2,M) = SSHE/RSHE
            EX(3,M) = 12
            EX(4,M) = ZSHE
            M       = M+1
            EX(1,M) = RSHE
            EX(2,M) = 200
            EX(3,M) = 2
            EX(4,M) = 0
         END IF
      END IF
*   ...
* ---------------------------------------------------------
*   FIT WITH FUMILI AND PRINT RESULTS
* ---------------------------------------------------------
*   ...
      CALL FUMSIZE           ! set steps for:
      PL0(1) = .01           !  A0
      PL0(2) = .01           !  F0
      PL0(3) = .01           !  1/pT
      PL0(4) = 1             !  z0
      PL0(5) = .1            !  dz/dR
      PL0(6) = 10            !  R brem
      AMN(6) =  1            !
      AMX(6) = 100           !
      PL0(7) = .01           ! and Xbrem

*   Check (MM>5 & XBREM==0)  - set first approximation for brem

      IF (MM>5  &  XBREM==0) THEN
         XBREM = DBREM
         RBREM = 12          ! better then nothing !

*        the most secret formula, no comments
         D = XBREM/RSHOW/(RBREM-RSHOW)/BCONST*2
         PTINV = PTINV-D
      END IF

*   Check XBREM>0 - fix its sign forever
      IF (XBREM>0) THEN
         AMN(7) = 0.
         AMX(7) =  100
      ELSE
         AMN(7) = -100
         AMX(7) =  0.
      END IF

      NN = M
      M1 = MIN(MM,5)
* try:
       IPR = -1
*      IF (MM==7)IPR = JPR
*     IPR=JPR

*   ===============================================
*   everything ready,      F I R E  !!!!!!
*   ===============================================

90    CONTINUE


	Prin9 Irc,IPR; ('IRC,IPR=',2I4);

      DO 91 IM = 1,3
*        Check MM>6 - go slowly, help FUMILI  manually
         IF (MM>6) CALL FUMILI (S, 6,2,2,30,0.1,AK,AL, -1,IRC)
                   CALL FUMILI (S,MM,2,2,30,0.1,AK,AL,IPR,IRC)
         Chi2=2*S
*        Check TAG=='best'&IPRIN>=2 \ IPRIN>=3  - trace fitting results
         IF (TAG=='best' & IPRIN>=2  |  IPRIN>=3) _
         <w> TAG,IRC,NTB,M,NZM,NUV,CHI2,1/PTinv,Fi0FIT,Z0FIT,XBREM,RBREM
         (1X,A6,' Irc,n,m=',5I4,' Chi2,Pt,fi0,Z0,X-Rbrem fitted=',F15.3,5F8.3)
*        calculate real NDF - number od degree of freedom
         NDF = -MM
         DO I = 1,NN  { IF (EX(2,I)<10) NDF+=1; }
*
*        Loop here over all points and select good
*        Check CHI2 <NDF*1.5  - good enouph, no clean up
         IF (CHI2<NDF*1.5) ICLEAN = 0
*        clean up if necessery
         IF (ICLEAN==0) GO TO 92
         CALL FUMCLEAN(IFL)
*        and if cleaned up, repeat fit
         IF (IFL==0) GO TO 92
*
91    CONTINUE
92    CONTINUE

      If NDF!=0 { A(10) = CHI2/NDF ; }
      Else      { A(10)=99999.; NDF0PR+=1;
                  If (NDF0PR<100) Print *,'FumFit: NdF=0 Chi2=',Chi2 ; }

      Prin5 chi2,ndf,a(10);
      (' FumFit: Chi2=',F8.1,' NdF=',I6,' Chi2/NdF=',F6.1)
*
*     TR signature
      IF (NTR>0) XTR = XTR/NTR

*     may be used in case of problems
*      IF (IGRAP>=2) CALL TRPLOT

999   Continue;

      END


