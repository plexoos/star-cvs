* $Id: aggplane.age,v 1.1.1.1 2004/01/12 23:49:38 potekhin Exp $
* $Log: aggplane.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
* Revision 1.2  2003/05/05 10:41:31  nevski
* protect against too many digits in a single element
*
* Revision 1.1  2001/02/27 10:14:59  nevski
*  first working release
*
*************************************************************************
*                                                                       *
                subroutine   A G G P L A N E (Cset,Ipp)
*                                                                       *
* Modifications:                                                        *
* A.Rozanov 07/11/97: IpOld introduced to start new plane without mods  *
* P.Nevski, 12.10.00:                                                   *
*  - Accept positive Istat in USE to allow schema evolution             *
*  - modf generation corrected to cover all elements in Two Pi          *
*  - Initial ISC vector is calculated from NUMP,if,iz to allow geometry *
*    retrieval with no hits loaded. It is checked against ISC in hits   *
*  - speed optimization should be done in the future:                   *
*    tracking at MODfz#0, parameter extraction on HITS is an overhead.  *
*************************************************************************
#include "commons/typing.inc"
#include "geant321/gcbank.inc"
#include "geant321/gcunit.inc"
#include "geant321/gcvolu.inc"
#include "geant321/gconst.inc"
#include "atlsim/trbank.inc"
#include "commons/agclink.inc"
#include "commons/agcclus.inc"
#include "atlsim/agcrfun.inc"
#include "commons/agcrtab.inc"
*
Structure AgCR { char Cset, char Cdet, int Isys, int Itype, int Npl,
                 int kkk, int kfi, int krz, int mrz, drzm,
		 RRmin, RRmax, ZZmin, ZZmax, int Istart, int Nadr, int NupMax,
		 char Nam(kkk), int Nmx(kkk), int Ibuf(Nadr),int Ipla(NupMax),
                 rzp(Npl),RZmin(Npl),RZmax(Npl),Fmin(Npl),Fmax(Npl),
                 Dfi(Npl),Dzr(Npl),Tilt(Npl),Sas(Npl),Fcent(Npl),
                 int Nfi(Npl), int Nzr(Npl), int Nump(Npl), int Iadr(Npl),
                 int Jres(Npl) }
*
  INTEGER      NV,Nd;          PARAMETER   (NV=15, Nd=15)
  Integer      AgPFLAG,Iprin,NVL(NV),ISC(NV),JSC(nv),
               Ia,Iad,ip,Iz,Jz,kz,If,id,Ids,Ip2,Mz,Mf,Modz,Modf,
               itry,ipp,Ltr,i,j,K,N,M,np,Lm,kk,Jd,Jf,if0,
               IpOld/0/,ist/0/,ok/0/,Lpacki/0/
  Real         DIGI(Nd),Fc,Df,Yphi0
  Character*4  Cset,Cdet,Cs
  Save         NVL,Cdet,Cs,Iprin,Ids,Ip2,Lm,Modz,Modf,Jd,Jf
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*
  IF  Ipp>=10000  {" automatic agplane continuation "  Ip=Ipp/10000;   }
  else            {" new user plane request "  Ip=Ipp; Modz=0; Modf=0; }

  {Ndig,Ktyp}=0;
*                                       for the first plane, get tables
  If Ip<=0 | Ip >999 | Cset(1:3)!=Cs(1:3)
  {  " start track at the vertex "
     If IfunAdr!=0  { Call Vzero(xxf,6); Call JUMPT2(IfunAdr,xxf,yyf) }
*
     call RbPUSHd
     Lm=1;     USE  /DETM/AXXX/AgXX/AgCR  Cset=Cset   Stat=Ist
     If Ip>0 & Cset=='XTRT' & Ist==ok
     { Lm=-1;  USE  /DETM/AXXX/AgXX/AgCR  Oper=Next   Stat=Ist;  }
     call RbPOPd

     Check Ist>=ok;  Nplane=agcr_Npl;  Itp=agcr_Itype;
     * let user a way to increase Lpack in AXXXREC
     Lpacki=Lpack;   If (Lpacku>0) Lpacki=Lpacku

     Call VZERO(Nvl,Nv);    Call Vzero(Isc,Nv);   Call Vzero(Digi,Nd)
     Cs=Agcr_Cset(1:3)//'D';  Cdet=Agcr_Cdet;  {K,Ia}=0
     Call AgFDIGI (Cs,Cdet,NVL,Ltra,ISC,Digi,K,Ia)

     If Ip<=0 { Ip=0;                Ip2=Nplane; Ids= 1; }
     else     { Ip=min(Ip,Nplane)+1; Ip2=1;      Ids=-1; }
     " start neighbour counting "    Modz=0;  Modf=0;   Jd=1;
  }
  Iprin=AgPFLAG(Cset,'RECO');     If (Iprin<0) { Ipp=-1; return }
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
*
  If (modz==0 & Modf==0) Ip+=Ids;  IpOld=Ip;
  For Ip=Ip to Ip2 by Ids
  {                            " extrapolate the track to the next plane  "
     itp   = Agcr_Itype;         rzp   = Agcr.rzp(ip)
     RZmin = Agcr.RZmin(ip);     RZmax = Agcr.RZmax(ip)
     Fmin  = Agcr.Fmin(ip);      Fmax  = Agcr.Fmax(ip)
     Dfi   = Agcr.dfi(ip);       dzr   = Agcr.dzr(ip)
     Tilt  = Agcr.tilt(ip);      Sas   = Agcr.Sas(ip)
     Nfi   = Agcr.Nfi(ip);       Nzr   = Agcr.Nzr(ip)
     Nump  = Agcr.Nump(ip);      Jres  = Agcr.Jres(ip)
     Fcent = Agcr.Fcent(ip);     Iadr  = Agcr.Iadr(ip)

     If (Ip != IpOld) {modz=0;modf=0;IpOld=Ip} ! start new plane without mods
*
     xxf " Xopnt,Xrz,Xsas, Xzrc,Xphic,Xres " = {Itp, rzp, 0,0, 0,0};
     yyf " Yphi, Yzr,Ydphi,Ydzr,Ysign,Yres " = {0,0,  pi, big, 0,0};
     If (IfunAdr!=0 " & modf==0 & modz==0 ")  Call JUMPT2(IfunAdr,xxf,yyf)
*
                                     "    select one phi sector (if>=0)     "
     if=0;  If Nfi>1 & dfi!=0
     { if0=nint( (Yphi-(Fmin+Fmax)/2) / Dfi )
       jf=sign(1.,Yphi-(Fmin+Fmax)/2-if0*Dfi)
       if=If0+modf;
     }
     Fc=Fcent+if0*Dfi;  Df=if*Dfi;  Yphi0=Yphi
     if Itp==1 & Tilt!=0 "& modf==0 & modz==0   extrapolation for tilt plane "
     { xxf(1)=1+tilt; xxf(5)=Fc; If (IfunAdr!=0) Call JUMPT2(IfunAdr,xxf,yyf) }
     Yphi+=nint((Yphi0-Yphi)/TwoPi)*TwoPi  "    keep Yphi in the same place  "
*
     If nfi>1  & dfi!=0                 "    rotate to the right sector     "
     {  check Fmin+Df-Ydphi <=Yphi&Yphi<= Fmax+Df+Ydphi;  Fcent+=Df; }
*
                                        "    select z/r-section (iz>=0)   "
     {i,iz}=0;   Mz=max(Itp,Nzr);   Mf=max(1,Nfi)
*
     If Itp==1                          "    this is a barrel detector    "
     {  If (dzr!=0) iz=min(max(0,nint((Yzr-(RZmin+RZmax)/2)/dzr)),Nzr-1)
*
*       Roads may produce iz detector variations at both sides around center
        kz=iz+modz;   If RZmin+kz*dzr-Ydzr <= Yzr&Yzr <= RZmax+kz*dzr+Ydzr
        {  " closest neighbour direction is " jd=sign(1.,2*Yzr-RZmin-RZmax)
           " check next detector in advance and save it for the next entry "
           do itry=1,2
           {  modz=-modz;  if (jd*modz>=0) modz+=jd;  jz=iz+modz
              If (0<=jz&jz<=Nzr-1) break;             jz=-1
           }
           If (jz<0 | RZmin+jz*dzr-Ydzr>Yzr | Yzr>RZmax+jz*dzr+Ydzr) modz=0
           iz=kz
        }
        else                             " no detector left in this layer "
        {  modz=0;
           If Cset=='XTRT' & Lm>=0
          {" we are in the TRT barrel here - this should be followed by endcap"
             If (Ids*Lm<0) Break;     Lm=-Lm;

          " backward tracing will be more complicate here - will do later(pn)"
            Call RBPUSHD
            If Lm>0  { USE /DETM/AXXX/AgXX/AgCR   Cset=Cset   Stat=Ist; }
            else     { USE /DETM/AXXX/AgXX/AgCR   Oper=Next   Stat=Ist; }
            Call RBPOPD

            If Ist!=ok { <w> ip; (' AggPlane error in XTRT plane=',i3); Break;}
            Nplane=agcr_Npl;  Itp=agcr_Itype
            If Ids>0   { Ip=0; Ip2=Nplane} else { Ip=Nplane+1; Ip2=1;}
            Next
        } }
     }
     else                                "    this is an end-cap detector  "
     {" Delta Z and reflections rules may be conflicting - have to check it"
        If  dzr!=0  { iz=nint((Yzr-Rzp)/dzr); iz=min(max(0,iz),Mz-1); }
        else        { iz=0;  if (Ysign<0) iz=1; }
        Check   Rzmin-Ydzr <= Yzr & Yzr <= RZmax+Ydzr
     }
*
     If nfi>1  & dfi!=0 & modz==0        "    rotate to the next sector    "
     {  modf=-modf;  N=abs(2*modf); if jf*modF>=0 {modf+=jf; N+=1;}
        Df=(if0+modf)*Dfi
        Unless (N<Nfi & Fmin+Df-Ydphi <=Yphi & Yphi<= Fmax+Df+Ydphi) modf=0
     }
*
     if = mod(if+3*Mf,Mf)
     iad=agcr.Iadr(ip)+iz*Mf +if +1      " if,iz have 0 offset here "
     Ipp=Ip*10000+iz*max(100,Mf)+if
*>>>
*                                          calculate ISC vector from NUMP 
     Np=Nump;  if (AgCR_Krz==0 & AgCR_mrz>0) Np+=iz*AgCR_mrz;
*                                          count branching levels 
     J=0; do i=1,agcr_kkk { M=agcr.Nmx(i); if (abs(M)>1) J+=1; }
     do i=agcr_kkk,1,-1                  " there should be a better way "
     {  M=agcr.Nmx(i); check abs(M)>1; ISC(j)=1;
        If (i==AgCR_kfi) ISC(j)=if+1
        If (i==AgCR_Krz) ISC(j)=iz+1
        If (M>1) { ISC(j)=mod(Np,M)+1; Np/=M; }
        j-=1;
     }  Call Ucopy (Isc,Jsc,Nv)
*<<<
                                        "  pick up hits in one board  "
     Ndig=0;  Id=0;  KK=agcr.Ibuf(iad);  Call Vzero(Digi,Nd)
     IF KK>0
     {  Ndig=mod(KK,Lpacki);  K=KK/Lpacki-1 " may start from zero ";
        Do N=1,Ndig
        {  Call  AgFDIGI (Cs,Cdet,NVL,Ltr,ISC,Digi,K,Ia)
           If k<=0
           { <w> Cs,Cdet,KK,Id,K,Ia,ISC; (' AggPlane logic error in',
              2(1x,a4),' KK,Id,K,Ia=',4i6/20x,' ISC=',15i4);   break;
           }
           Check Ltr>=0
           if Id>=Lh 
           { <w> Id,N,Ndig; (' AggPlane overflow: only first ',2i5,
                             ' out of ',i6,'digits accepted '); break; 
           }
           Id+=1;  Kdig(id)=k;  Ltra(id)=Ltr;
*
           Ktyp=Digi(1); Fdig(id)=Digi(2); Zdig(id)=Digi(3); Edig(id)=Digi(4);
           If Cset=='XTRT'        " dfi does not change sign for reflection?"
           {  Ktyp=Itp;   Fdig(id)=Fcent+dfi*(ISC(3)-1);
              Zdig(id)=Digi(2);  Edig(id)=Digi(1);
           }
           prin5 id,Ktyp,Fdig(id),Zdig(id),Edig(id);
           ('   digit id,ktyp,f,z,E = ',2i5,3f12.4);
           KtypDig(id)=Ktyp;  Nodig(id)=Digi(5)+.001;
        }
     }  Ndig=Id;  Call  AgFPATH (ISC);
     Ishape=Q(LQ(JGPAR-Nlevel)-4);   Npar=Q(LQ(JGPAR-Nlevel)-1);
     Call Ucopy(Q(LQ(JGPAR-Nlevel)+1),Par,min(Npar,50));	
     Call Ucopy(GTRAN(1,NLEVEL),AgTRAN,3);
     Call Ucopy(GRMAT(1,NLEVEL),AgRMAT,10);
     M=0; do i=1,agcr_kkk { if (ISC(i)!=JSC(i)) M+=1; }
     If (M>0) <w> Cs,Cdet,ipp,(ISC(i),JSC(i),i=1,agcr_kkk)
        (' AggPlane logic fault in',2(1x,a4),' Jsc/Isc =',15(i4/i3))

*    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     prin4 Cset,Ipp,Ndig; (' AgGPlane: ',a4,' Ipp,Ndig =',2i12)
     prin8 ip,Ktyp,Ishape,Npar,(par(i),i=1,Npar)
     (' plane',2i4,'  Shape,Npar=',2i5,(' par=',10f8.3))
     prin6 tilt,sas,fcent; (' AggPlane angles t,s,f',3F12.4)
     prin5 rzp,Yphi; ('   track at point   (FUNCT)  ',5F12.4);
     Return;                                                 :dummy:
  }
  Ipp=0
*
  END
