* $Id: fumili.age,v 1.1.1.1 2004/01/12 23:49:38 potekhin Exp $
* $Log: fumili.age,v $
* Revision 1.1.1.1  2004/01/12 23:49:38  potekhin
*
* Revision 1.1  2001/02/27 10:15:02  nevski
*  first working release
*
********************************************************************
*                                                                  *
               subroutine     F U M I L I _
            (S,M,N1,N2,N3,EPS,AKP,ALM,IT,MC)
*                                                                  *
*           almost copy of D520 from CERNLIB                       *
* Original Version:                                Silin & Sokolov *
* Modifications:                                    Pavel Nevski   *
* DR, 05.01.99: - protect against division of 0 by 0               *
*               - rewrite test to avoid division by 0              *
********************************************************************
#include "commons/typing.inc"
#include "atlsim/fumsiz.inc"
      C O M M O N /ENDFLG/NA,IEND,IND
      LOGICAL FUMPLA
      INTEGER M,N1,N2,N3,IT,MC,NA,IEND,IND,NN1,NN2,NN3,NINF,NFIX,
              I,N0,NN0,I1,I2,J,J1,J2,IMX,IFX,M1,L1,IFI
      REAL    S,EPS,AKP,ALM,T,GT,T1,RP,SP,DS,OLDS,Ai,AJ,Ak,Al,Afix,d,
              SIGI,AMAX
      DATA RP/1.E-5/ ! 10*MAX. RELATIVE PRECISION
* ..
      NN2  = 0
      NN3  = 0
      NINF = 0
      NFIX = 0
      IEND = 0
      CALL VZERO (RR,M)
      CALL UCOPY (PL0,PLU,M)
      IF (EPS>0) CALL VZERO (SIGM,M)
* ...                             *****  new iteration *****
10 T1  = 1
   NN1 = 1
   Loop
   {  S   = 0
      CALL VZERO (GG,M)                      ! REPEAT WITH SMALLER STEP
      DO I = 1,M
      {  Check FUMPLA(PL0,I,N0)
         IF (PLU(I)>0) PL0(I) = PLU(I)       ! save PL, may be fixed later
      }
      NN0 = N0*(N0+1)/2
      CALL VZERO (ZZ,NN0)
      NA = M
      CALL FUMSGZ (M,S)
      SP = RP*ABS(S)
      DS = OLDS-S
      CALL UCOPY(ZZ,Z0,NN0)
      IF (NN3<=0 | NN1>N1 | DS>GT/6 | ABS(DS) <=SP & GT<=SP) Break
* ...                                  **** relaxation ****
      T = AMAX1(0.5*GT/(GT-DS),0.25)
      GT = GT*T
      T1 = T1*T
      NN2 = 0
      NN1 = NN1+1
      DO I = 1,M
      {  Check PLU(I)>0
         A(I)   = A(I)-DA(I)*(1-T)
         PLU(I) = PLU(I)*T
         DA(I)  = DA(I)*T
      }
   }
* ..                                   fix some parameters and compress Z
50 Loop
   {  I2 = 0
      DO I = 1,M
      {  Check FUMPLA(PL0,I,I1)
         IF (PLU(I)==0)      PLU(I) = PL0(I)
         IF (PLU(I)>0 & (A(I)>=AMX(I)&GG(I)<=0 | A(I)<=AMN(I)&GG(I)>=0)) _
                                                                PLU(I)=0
         check FUMPLA(PLU,I,I2)
         J2 = 0
         DO J = 1,I
         {  Check FUMPLA(PL0,J,J1)
            Check FUMPLA(PLU,J,J2)
            ZZ(I2*(I2-1)/2+J2) = Z0(I1*(I1-1)/2+J1)
         }
         RR(I) = ZZ(I2*(I2+1)/2)    ! save ZZ(I,I) in correlation factors
      }
* ...                            ***  get covariance matrix ***
      CALL FUMCONV(I2)
      If (IND==0) Break
      NINF = NINF+IND
      NFIX = NFIX+1
      IFI  = 0
   }

* ..             CALCULATE STEPS, CHECK BOUND, LIMITING OF STEPS
      ALM  = 1
      AKP  = 0
      AFIX = 0
      IMX  = 0
      IFX  = 0
      DO I = 1,M
      {  DA(I) = 0
         Check FUMPLA(PLU,I,I1)
         D=0
         DO J = 1,M
         {  Check FUMPLA(PLU,J,J1)
            M1 = MAX0(I1,J1)
            D = D-GG(J)*ZZ(M1*(M1-3)/2+I1+J1)
         }
         AI = A(I)
         L1 = I1*(I1+1)/2
* ...                                    calculate A,KAP,LAM
         AJ = min(max(AMN(I),AI-PLU(I),AI+D),AI+PLU(I),AMX(I))
         SIGI  = SQRT(ABS(ZZ(L1)))
         RR(I) = RR(I)*ZZ(L1)
         IF (EPS>0) SIGM(I) = SIGI
         AK  = ABS(D/SIGI)              ! parameter step vs its accuracy
*DR protect against D=0
         AL  = 1
         IF (D!=0) AL=ABS((AI-AJ)/D)    ! actual(plu limited) step vs desired
         AKP = max(AKP,ABS(D/SIGM(I)))
* ...                                    check for fixation and limitation
         IF AK>AFIX & (AI>=AMX(I)&D>0 | AI<=AMN(I)&D<0) { AFIX=AK;  IFX=I; }
         If AL<=ALM                           {  ALM=AL;  AMAX=AJ;  IMX=I; }
         DA(I) = D
      }
      IF (IFX<=0) GO TO 120
      PLU(IFX) = -1
  110 NFIX = NFIX+1
      IFI = 0
      GO TO 50
* ..                                     trying to increase step
  120 GT = 0
      DO 140 I = 1,M
         IF (PLU(I)<=0) GO TO 140
*DR rewrite to avoid dividing by DA(I)
         IF (NN2<=N2  |  ABS(PLU(I))>4*ALM*ABS(DA(I))) GO TO 130
         PLU(I) = 4*PLU(I)
         T1     = 4
  130    DA(I)  = DA(I)*ALM
         GT     = GT-DA(I)*GG(I)
  140 CONTINUE
* ...
      IF (AKP<=ABS(EPS)) GO TO 160       ! accuracy check
      IEND = 0
      IFI  = IFI+1
      IF (NFIX==0 | IFI-1<=NFIX) GO TO 170
  150 CALL UCOPY(PL0,PLU,M)              ! un-fix parameters
      NFIX = 0
      NINF = 0
      GO TO 50
* ...
  160 IEND = IEND+1
      IF (NFIX==0) GO TO 170
      IF (IEND==1) GO TO 150
* * *       IF (NFIX>NINF) IEND = 0        ! estx ON BOUND
* ...
  170 IF (IEND==0 & NN3>=N3) IEND = -3 ! ITER.LIMIT
      IF (IEND>0 & NINF>0)   IEND = -2 ! INF.ER.ESTIM
      IF (GT<=SP & T1<1 & ALM<1) IEND = -1
      IF (IT>=0) CALL FUMONITO(S,M,NN3,N3,IT,EPS,GT,AKP,ALM,T1)
* ...
      MC = IEND
      IF (IEND!=0) RETURN              ! TEST FOR END
      OLDS = S
      NN2 = NN2+1
      NN3 = NN3+1
      DO 180 I = 1,M
  180 A(I) = A(I)+DA(I)
      IF (IMX>0) A(IMX) = AMAX
      GO TO 10
      END

********************************************************************
*                                                                  *
               subroutine   F U M O N I T O _
            (S,M,NN3,N3,IT,EPS,GT,AKP,ALM,T1)
*                                                                  *
* Original Version:                                Silin & Sokolov *
* Modifications:      03/10/94                      Pavel Nevski   *
********************************************************************
#include "atlsim/fumsiz.inc"
      C O M M O N /ENDFLG/NA,IEND,IND
      Integer M,NN3,N3,IT,NA,IEND,IND,IP,LU/6/
      Real    S,EPS,GT,AKP,ALM,T1,P
*
      IP=1
      IF (IT>0) IP=MOD(NN3,IT)
*     print each IT iteration or the last one, if IT positive:
      IF (IP==0  |  IEND.NE.0)  &  IT>=0
      {  Output NN3,S*2,GT*2,AKP,ALM,T1
         (/8(' *'),I3,5H ITER,2X,3H2S= ,E11.4,2X,3HGT=,E10.2/,
            15X,4HKAP=,E8.2, 2X,5HLAMB=,E8.2, 2X,3HT1=,E8.2//,
            15X,10HPARAMETERS, 5X,6HERRORS, 10X,7HFACTORS)
         DO I=1,M
         {  P=-100
            IF (PL0(I)>0)   P=PLU(I)
            IF (P>0)        output I,A(I),SIGM(I),RR(I)
                   (10X,I3,E13.5,3H+/-,E10.4,6X,E10.3)
            IF (-1<=P&P<=0) output I,A(I),SIGM(I),RR(I)
                   (10X,I3,E13.5,3H+/-,E10.4,6X,E10.3,'  ON BOUND')
            IF (P==-2)      output I,A(I)
                    (10X,I3,E13.5,12H+/- INFINITE)
      }  }
      IF(IEND==-1) output; (' S does not decrease, bad derivatives')
      IF(IEND==-2) output; (' infinite parameter errors    ')
      IF(IEND==-3) output; (' iteration limit is exceeded  ')
      END


********************************************************************
*                                                                  *
        FUNCTION     F U M P L A (PL,I,I1)
*                                                                  *
*       find next free parameter                                   *
* Original Version:                                 Pavel Nevski   *
********************************************************************
        IMPLICIT NONE
        LOGICAL  FUMPLA,L
        INTEGER  I,I1
        REAL     PL(*)
        IF (I==1) I1=0
        L=PL(I).GT.0
        IF(L) I1=I1+1
        FUMPLA=L
        END

********************************************************************
*                                                                  *
               SUBROUTINE   F U M C O N V (N)
*                                                                  *
*         fast matrix conversion - FUMILI original                 *
* Original Version:                                Silin & Sokolov *
* Modifications:                             never done since 1961 *
********************************************************************
#include "commons/typing.inc"
#include "atlsim/fumsiz.inc"
        Integer         NA,IEND,IND,N,IR,I,Ni,II,L1,K,NL,KI,NK
        Real            Aps,Rp,Am,Ap,D,C,ZI
        COMMON /ENDFLG/ NA,IEND,IND
        DATA   RP/1.E-5/     ! MAX.REL.PRECISION - 10/10/94 * 10
        DATA   AM/1.E+35/    ! MAXIMAL NUMBER ON THE COMPUTER
*
   IND = 0
   Check N>0
   APS = SQRT(AM/N)
   AP  = 1/APS**2
   IR  = 0
   DO I=1,N
   {  IR+=1;  while PLU(IR)<=0 { IR+=1; }
      NI=I*(I-1)/2
      II=NI+I
      ZI=ZZ(II)
      IF (ZI<=RP*ABS(RR(IR)) | ZI<=AP) GO TO 170
      ZI=1./SQRT(ZI)
      ZZ(II)=ZI
      Do NL=II-1,NI+1,-1
      { ZZ(NL)=ZZ(NL)*ZI;  IF (ABS(ZZ(NL))>=APS) GO TO 140;   }
      Check I<N

* . . .  inversion here  . . .
      Do K=N,I+1,-1
      {  NK = K*(K-1)/2
         NL = NK
         D  = ZZ(NK+I)*ZI
         C  = D*ZI
         Do L1=K,1,-1
         { IF   L1>I    { ZZ(NK+L1)-=ZZ(NL+I)*C;  NL=NL-L1+1; }
           Else IF L1<I { ZZ(NK+L1)-=ZZ(NI+L1)*D;             }
           Else         { ZZ(NK+L1)=-C;                       }
   }  }  }

* . . .  normal exit here  . . .
      DO I=1,N
      {  DO K=I,N
         {  NL=K*(K-1)/2
            D=0.
            DO L1=K,N  { D+=ZZ(NL+I)*ZZ(NL+K); NL+=L1; }
            KI=K*(K-1)/2+I
            ZZ(KI)=D
      }  }
      RETURN

* . . .  error exit here  . . .
  140 K=I+NL-II
      IR=0
      DO I=1,K  { IR+=1; While PLU(IR)<=0 { IR+=1; } }
*
  170 PLU(IR)=-2
      RR(IR)=0
      IND=1
      END

********************************************************************
*                                                                  *
                 subroutine    F U M S G Z (M,S)
*                                                                  *
*     calculation of chi-square deviations and derivatives         *
* Original Version:                                Silin & Sokolov *
* Modifications:                                    Pavel Nevski   *
********************************************************************
#include "commons/typing.inc"
#include "atlsim/fumsiz.inc"
#include "atlsim/fumuse.inc"
     Integer I,J,K,M,N
     Real Funct,S,Ai,Hi,E,D,Y,DY,S1,S2,Rpd/1.e-4/
     Real PI/3.14159265/
;                                            " starting parameters "
Do n=1,NN {  YY(0,n)=FUNCT(Ex(3,n)); }
DO I=1,M                                    " calculate derivatives "
{  Check PL0(i)>0;
   AI=A(I); HI=AMAX1(PL0(I)*0.1,RPD*ABS(AI));
        IF  AI+HI<=AMX(I)       { A(I)=AI+HI }
   else IF  AI-HI>=AMN(I)       { A(I)=AI-HI }
   else IF  AI-AMN(I)>AMX(I)-AI { A(I)=AMN(I)} else { A(I)=AMX(i)};
   Do n=1,NN { Dy=FUNCT(Ex(3,n))-YY(0,n);
                              "check that deltaFi is from -Pi to +Pi"
   if(Ex(3,n)!=0. & Ex(4,n)!=0. & abs(DY)>PI) {
     if(DY>PI){DY=DY-2*PI}elseif(DY<-PI){DY=DY+2*PI};};
               YY(I,n)=DY/(A(i)-Ai); }
   A(I)=AI;
}
DO n=1,NN                      " calculate gradients and derivatives matrix "
{  K=0;  E=EX(1,n);  D=EX(2,n);  Y=YY(0,n);
   DY=Y-E;
                              "check that deltaFi is from -Pi to +Pi"
   if(Ex(3,n)!=0. & Ex(4,n)!=0. & abs(DY)>PI) {
     if(DY>PI){DY=DY-2*PI}elseif(DY<-PI){DY=DY+2*PI};};
   Check D>0 | Y>1.e-9;
   IF D>0  { S2=1/D**2;  S1=DY*S2;  S+=DY*S1/2; }
   else    { S2=E/Y**2;  S1=DY/Y;   S+=Y;  IF(E>0) S-=E*ALOG((E+DY)/E)-E; }
   DO I=1,M
   { Check PL0(I)>0;      GG(I)+=YY(I,n)*S1;
     DO J=1,I  {  Check PL0(J)>0; K+=1;  ZZ(K)+=YY(I,n)*YY(J,n)*S2; }
}  }
End

********************************************************************
*                                                                  *
               subroutine    F U M S G Z O L D (M,S)
*                                                                  *
*     calculation of chi-square deviations and derivatives         *
* Original Version:                                Silin & Sokolov *
* Modifications:                                    Pavel Nevski   *
********************************************************************
#include "commons/typing.inc"
#include "atlsim/fumsiz.inc"
#include "atlsim/fumuse.inc"
     Integer I,J,K,M,N
     Real Funct,S,Ai,Hi,E,D,Y,DY,S1,S2,Rpd/1.e-4/
;                                            " starting parameters "
Do n=1,NN {  YY(0,n)=FUNCT(Ex(3,n)); }
DO I=1,M                                    " calculate derivatives "
{  Check PL0(i)>0;
   AI=A(I); HI=AMAX1(PL0(I)*0.1,RPD*ABS(AI));
        IF  AI+HI<=AMX(I)       { A(I)=AI+HI }
   else IF  AI-HI>=AMN(I)       { A(I)=AI-HI }
   else IF  AI-AMN(I)>AMX(I)-AI { A(I)=AMN(I)} else { A(I)=AMX(i)};
   Do n=1,NN { Dy=FUNCT(Ex(3,n))-YY(0,n); YY(I,n)=DY/(A(i)-Ai); }
   A(I)=AI;
}
DO n=1,NN                      " calculate gradients and derivatives matrix "
{  K=0;  E=EX(1,n);  D=EX(2,n);  Y=YY(0,n);
   Check D>0 | Y>1.e-9;
   IF D>0  { S2=1/D**2;  S1=(Y-E)*S2;  S+=(Y-E)*S1/2; }
   else    { S2=E/Y**2;  S1=(Y-E)/Y;   S+=Y;  IF(E>0) S-=E*ALOG(Y/E)-E; }
   DO I=1,M
   { Check PL0(I)>0;      GG(I)+=YY(I,n)*S1;
     DO J=1,I  {  Check PL0(J)>0; K+=1;  ZZ(K)+=YY(I,n)*YY(J,n)*S2; }
}  }
End


